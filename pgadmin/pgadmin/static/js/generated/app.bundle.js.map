{"version":3,"file":"app.bundle.js","sources":["webpack:///pgadmin/static/js/gettext.js","webpack:///pgadmin/static/js/pgadmin.js","webpack:///pgadmin/static/js/url_for.js","webpack:///pgadmin/static/bundle/codemirror.js","webpack:///pgadmin/static/js/codemirror/addon/fold/pgadmin-sqlfoldcode.js","webpack:///external \"translations\"","webpack:///external \"pgadmin.browser.endpoints\"","webpack:///external \"pgadmin.browser.utils\"","webpack:///external \"pgadmin.browser.messages\"","webpack:///pgadmin/static/js/browser/generate_url.js","webpack:///pgadmin/tools/debugger/static/js/debugger_ui.js","webpack:///pgadmin/static/js/check_node_visibility.js","webpack:///pgadmin/tools/debugger/static/js/direct.js","webpack:///pgadmin/static/js/sqleditor_utils.js","webpack:///pgadmin/browser/server_groups/servers/static/js/server.js","webpack:///external \"pgadmin.user_management.current_user\"","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/functions/static/js/function.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/packages/edbfuncs/static/js/edbfunc.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/rules/static/js/rule.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/static/js/partition.utils.js","webpack:///pgadmin/static/bundle/app.js","webpack:///pgadmin/static/bundle/browser.js","webpack:///pgadmin/about/static/js/about.js","webpack:///pgadmin/tools/backup/static/js/backup.js","webpack:///pgadmin/tools/restore/static/js/restore.js","webpack:///pgadmin/tools/grant_wizard/static/js/grant_wizard.js","webpack:///pgadmin/tools/maintenance/static/js/maintenance.js","webpack:///pgadmin/tools/import_export/static/js/import_export.js","webpack:///pgadmin/tools/debugger/static/js/debugger.js","webpack:///pgadmin/browser/server_groups/servers/pgagent/static/js/pga_job.js","webpack:///pgadmin/browser/server_groups/servers/pgagent/steps/static/js/pga_jobstep.js","webpack:///pgadmin/browser/server_groups/servers/pgagent/schedules/static/js/pga_schedule.js","webpack:///pgadmin/tools/datagrid/static/js/datagrid.js","webpack:///pgadmin/dashboard/static/js/dashboard.js","webpack:///external \"pgadmin.server.supported_servers\"","webpack:///pgadmin/tools/user_management/static/js/user_management.js","webpack:///pgadmin/misc/statistics/static/js/statistics.js","webpack:///pgadmin/static/js/size_prettify.js","webpack:///pgadmin/misc/depends/static/js/depends.js","webpack:///pgadmin/misc/sql/static/js/sql.js","webpack:///pgadmin/misc/bgprocess/static/js/bgprocess.js","webpack:///pgadmin/browser/server_groups/static/js/server_group.js","webpack:///pgadmin/browser/server_groups/servers/databases/static/js/database.js","webpack:///pgadmin/browser/server_groups/servers/roles/static/js/role.js","webpack:///pgadmin/browser/server_groups/servers/databases/casts/static/js/cast.js","webpack:///pgadmin/browser/server_groups/servers/tablespaces/static/js/tablespace.js","webpack:///pgadmin/browser/server_groups/servers/resource_groups/static/js/resource_group.js","webpack:///pgadmin/browser/server_groups/servers/databases/event_triggers/static/js/event_trigger.js","webpack:///pgadmin/browser/server_groups/servers/databases/extensions/static/js/extension.js","webpack:///pgadmin/browser/server_groups/servers/databases/languages/static/js/language.js","webpack:///pgadmin/browser/server_groups/servers/databases/foreign_data_wrappers/static/js/foreign_data_wrapper.js","webpack:///pgadmin/browser/server_groups/servers/databases/foreign_data_wrappers/foreign_servers/static/js/foreign_server.js","webpack:///pgadmin/browser/server_groups/servers/databases/foreign_data_wrappers/foreign_servers/user_mapping/static/js/user_mapping.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/static/js/schema.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/static/js/catalog.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/catalog_objects/static/js/catalog_object.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/collations/static/js/collation.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/domains/static/js/domain.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/domains/domain_constraints/static/js/domain_constraints.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/foreign_tables/static/js/foreign_table.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/fts_configurations/static/js/fts_configuration.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/fts_dictionaries/static/js/fts_dictionary.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/fts_parser/static/js/fts_parser.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/fts_templates/static/js/fts_template.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/functions/static/js/procedure.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/packages/edbfuncs/static/js/edbproc.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/packages/edbvars/static/js/edbvar.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/functions/static/js/trigger_function.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/packages/static/js/package.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/sequences/static/js/sequence.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/synonyms/static/js/synonym.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/types/static/js/type.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/indexes/static/js/index.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/triggers/static/js/trigger.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/catalog_objects/columns/static/js/catalog_object_column.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/views/static/js/view.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/views/static/js/mview.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/static/js/table.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/column/static/js/column.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/static/js/constraints.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/index_constraint/static/js/unique_constraint.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/check_constraint/static/js/check_constraint.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/foreign_key/static/js/foreign_key.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/exclusion_constraint/static/js/exclusion_constraint.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/index_constraint/static/js/primary_key.js","webpack:///pgadmin/browser/server_groups/servers/databases/schemas/tables/partitions/static/js/partition.js"],"sourcesContent":["define([\"translations\"], function (translations) {\n\n  /***\n   * This method behaves as a drop-in replacement for flask translation rendering.\n   * It uses the same translation file under the hood and uses flask to determine the language.\n   *\n   * ex. translate(\"some %(adjective)s text\", {adjective: \"cool\"})\n   *\n   * @param {String} text\n   * @param {Object} substitutions\n   */\n  return function gettext(text, substitutions) {\n\n    var rawTranslation = translations[text] ? translations[text] : text;\n\n    // captures things of the form %(substitutionName)s\n    var substitutionGroupsRegExp = /([^%]*)%\\(([^\\)]+)\\)s(.*)/;\n    var matchFound;\n\n    var interpolated = rawTranslation;\n    do {\n      matchFound = false;\n      interpolated = interpolated.replace(substitutionGroupsRegExp, function (_, textBeginning, substitutionName, textEnd) {\n        matchFound = true;\n        return textBeginning + substitutions[substitutionName] + textEnd;\n      });\n    } while (matchFound);\n\n    return interpolated;\n  };\n\n});\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/gettext.js","(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if(typeof module !== 'undefined' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // Browser globals\n    factory();\n  }\n}(function(){\n  var pgAdmin = window.pgAdmin = window.pgAdmin || {};\n\n  // Reference:\n  // https://github.com/heygrady/Units/blob/master/Length.min.js\n  // Changed it to save the function in pgAdmin object.\n  (function(t,e,o) {\"use strict\";function r(t,e,r,p){r=r||\"width\";var n,l,m,c=(e.match(s)||[])[2],f=\"px\"===c?1:d[c+\"toPx\"],u=/r?em/i;if(f||u.test(c)&&!p)t=f?t:\"rem\"===c?i:\"fontSize\"===r?t.parentNode||t:t,f=f||parseFloat(a(t,\"fontSize\")),m=parseFloat(e)*f;else{n=t.style,l=n[r];try{n[r]=e}catch(x){return 0}m=n[r]?parseFloat(a(t,r)):0,n[r]=l!==o?l:null}return m}function a(t,e){var o,n,i,l,d,c=/^top|bottom/,f=[\"paddingTop\",\"paddingBottom\",\"borderTop\",\"borderBottom\"],u=4;if(o=m?m(t)[e]:(n=t.style[\"pixel\"+e.charAt(0).toUpperCase()+e.slice(1)])?n+\"px\":\"fontSize\"===e?r(t,\"1em\",\"left\",1)+\"px\":t.currentStyle[e],i=(o.match(s)||[])[2],\"%\"===i&&p)if(c.test(e)){for(l=(d=t.parentNode||t).offsetHeight;u--;)l-=parseFloat(a(d,f[u]));o=parseFloat(o)/100*l+\"px\"}else o=r(t,o);else(\"auto\"===o||i&&\"px\"!==i)&&m?o=0:i&&\"px\"!==i&&!m&&(o=r(t,o)+\"px\");return o}var p,n=e.createElement(\"test\"),i=e.documentElement,l=e.defaultView,m=l&&l.getComputedStyle,s=/^(-?[\\d+\\.\\-]+)([a-z]+|%)$/i,d={},c=[1/25.4,1/2.54,1/72,1/6],f=[\"mm\",\"cm\",\"pt\",\"pc\",\"in\",\"mozmm\"],u=6;for(i.appendChild(n),m&&(n.style.marginTop=\"1%\",p=\"1%\"===m(n).marginTop);u--;)d[f[u]+\"toPx\"]=c[u]?c[u]*d.inToPx:r(n,\"1\"+f[u]);i.removeChild(n),n=o,t.toPx=r})(pgAdmin, window.document);\n\n  // Reference:\n  // https://github.com/javve/natural-sort/blob/master/index.js\n  // Changed it to save the function in pgAdmin object.\n  pgAdmin.natural_sort = function(a, b, options) {\n    var re = /(^-?[0-9]+(\\.?[0-9]*)[df]?e?[0-9]?$|^0x[0-9a-f]+$|[0-9]+)/gi,\n        sre = /(^[ ]*|[ ]*$)/g,\n        dre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\n        hre = /^0x[0-9a-f]+$/i,\n        ore = /^0/,\n        options = options || {},\n        i = function(s) { return options.insensitive && (''+s).toLowerCase() || ''+s },\n        // convert all to strings strip whitespace\n        x = i(a).replace(sre, '') || '',\n        y = i(b).replace(sre, '') || '',\n        // chunk/tokenize\n        xN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\n        yN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\n        // numeric, hex or date detection\n        xD = parseInt(x.match(hre)) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\n        yD = parseInt(y.match(hre)) || xD && y.match(dre) && Date.parse(y) || null,\n        oFxNcL, oFyNcL,\n        mult = options.desc ? -1 : 1;\n\n    // first try and sort Hex codes or Dates\n    if (yD)\n      if ( xD < yD ) return -1 * mult;\n      else if ( xD > yD ) return 1 * mult;\n\n    // natural sorting through split numeric strings and default strings\n    for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\n      // find floats not starting with '0', string or 0 if not defined (Clint Priest)\n      oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\n      oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\n      // handle numeric vs string comparison - number < string - (Kyle Adams)\n      if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL) ? 1 : -1) * mult; }\n      // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\n      else if (typeof oFxNcL !== typeof oFyNcL) {\n        oFxNcL += '';\n        oFyNcL += '';\n      }\n      if (oFxNcL < oFyNcL) return -1 * mult;\n      if (oFxNcL > oFyNcL) return 1 * mult;\n    }\n    return 0;\n  };\n\n  return pgAdmin;\n}));\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/pgadmin.js","define([\"pgadmin.browser.endpoints\"], function (endpoints) {\n  /***\n   * This method behaves as a drop-in replacement for flask url_for function.\n   * It uses the exposed URLs file under the hood, and replace the substitions provided by the modules.\n   *\n   * ex.\n   * url_for(\"help.static\", {filename: \"server_dialog.html\"}) will produce the\n   * output string '/help/help/server_dialog.html' from the url ->\n   * '/help/help/<path:filename>'.\n   *\n   * @param {String} text\n   * @param {Object} substitutions\n   */\n  return function url_for(endpoint, substitutions) {\n\n    var rawURL = endpoints[endpoint];\n\n    // captures things of the form <path:substitutionName>\n    var substitutionGroupsRegExp = /([<])([^:^>]*:)?([^>]+)([>])/g;\n    var matchFound;\n\n    var interpolated = rawURL;\n\n    if (!rawURL)\n      return rawURL;\n\n    interpolated = interpolated.replace(\n      substitutionGroupsRegExp,\n      function (_origin, _1, _2, substitutionName) {\n        if (substitutionName in substitutions) {\n          return substitutions[substitutionName];\n        }\n        return _origin;\n      }\n    );\n\n    return interpolated;\n  };\n\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/url_for.js","import CodeMirror from 'codemirror/lib/codemirror';\nimport 'codemirror/mode/sql/sql';\nimport 'codemirror/addon/selection/mark-selection';\nimport 'codemirror/addon/selection/active-line';\nimport 'codemirror/addon/fold/foldcode';\nimport 'codemirror/addon/fold/foldgutter';\nimport 'codemirror/addon/hint/show-hint';\nimport 'codemirror/addon/hint/sql-hint';\nimport 'codemirror/addon/scroll/simplescrollbars';\nimport 'codemirror/addon/dialog/dialog';\nimport 'codemirror/addon/search/search';\nimport 'codemirror/addon/search/searchcursor';\nimport 'codemirror/addon/search/jump-to-line';\nimport 'codemirror/addon/edit/matchbrackets';\nimport 'codemirror/addon/edit/closebrackets';\nimport 'codemirror/addon/comment/comment'\nimport '../js/codemirror/addon/fold/pgadmin-sqlfoldcode';\n\nexport default CodeMirror;\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/bundle/codemirror.js","(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.pgadminKeywordRangeFinder = function(cm, start, startTkn, endTkn) {\n    var line = start.line, lineText = cm.getLine(line);\n    var at = lineText.length, startChar, tokenType;\n    for (; at > 0;) {\n      var found = lineText.lastIndexOf(startTkn, at);\n      var startToken = startTkn;\n      var endToken = endTkn;\n      if (found < start.ch) {\n        var found = lineText.lastIndexOf(\"[\", at);\n        if (found < start.ch) break;\n        var startToken = '[';\n        var endToken = ']';\n      }\n\n      tokenType = cm.getTokenAt(CodeMirror.Pos(line, found + 1)).type;\n      if (!/^(comment|string)/.test(tokenType)) { startChar = found; break; }\n      at = found - 1;\n    }\n    if (startChar == null || lineText.lastIndexOf(startToken) > startChar) return;\n    var count = 1, lastLine = cm.lineCount(), end, endCh;\n    outer: for (var i = line + 1; i < lastLine; ++i) {\n      var text = cm.getLine(i), pos = 0;\n      for (;;) {\n        var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n        if (nextOpen < 0) nextOpen = text.length;\n        if (nextClose < 0) nextClose = text.length;\n        pos = Math.min(nextOpen, nextClose);\n        if (pos == text.length) break;\n        if (cm.getTokenAt(CodeMirror.Pos(i, pos + 1)).type == tokenType) {\n          if (pos == nextOpen) ++count;\n          else if (!--count) {\n            end = i;\n            endCh = pos;\n            break outer;\n          }\n        }\n        ++pos;\n      }\n    }\n    if (end == null || end == line + 1) return;\n    return {from: CodeMirror.Pos(line, startChar + startTkn.length),\n          to: CodeMirror.Pos(end, endCh)};\n  };\n\n  CodeMirror.pgadminBeginRangeFinder = function(cm, start) {\n    var startToken = 'BEGIN';\n    var endToken = 'END;';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n  CodeMirror.pgadminIfRangeFinder = function(cm, start) {\n    var startToken = 'IF';\n    var endToken = 'END IF';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n  CodeMirror.pgadminLoopRangeFinder = function(cm, start) {\n    var startToken = 'LOOP';\n    var endToken = 'END LOOP';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n  CodeMirror.pgadminCaseRangeFinder = function(cm, start) {\n    var startToken = 'CASE';\n    var endToken = 'END CASE';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/codemirror/addon/fold/pgadmin-sqlfoldcode.js","module.exports = __WEBPACK_EXTERNAL_MODULE_43__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"translations\"\n// module id = 43\n// module chunks = 0 1 2 5","module.exports = __WEBPACK_EXTERNAL_MODULE_44__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.browser.endpoints\"\n// module id = 44\n// module chunks = 0 1 2 5","module.exports = __WEBPACK_EXTERNAL_MODULE_76__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.browser.utils\"\n// module id = 76\n// module chunks = 0 1 2","module.exports = __WEBPACK_EXTERNAL_MODULE_95__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.browser.messages\"\n// module id = 95\n// module chunks = 0 1 2","import _ from 'underscore';\n\nfunction generate_url(baseUrl, treeInfo, actionType, nodeType, pickFunction, itemDataID) {\n  let ref = '';\n  _.each(\n    _.sortBy(\n      _.pick(treeInfo, pickFunction),\n      function (treeInfoItems) {\n        return treeInfoItems.priority;\n      }\n    ),\n    function (treeInfoItems) {\n      ref = `${ref}/${encodeURI(treeInfoItems._id)}`;\n    }\n  );\n  ref = itemDataID ? `${ref}/${itemDataID}` : `${ref}/`;\n\n  return `${baseUrl}${nodeType}/${actionType}${ref}`;\n}\n\nmodule.exports = {\n  generate_url: generate_url,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/browser/generate_url.js","define([\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'underscore.string', 'alertify',\n  'sources/pgadmin', 'pgadmin.browser', 'backbone', 'backgrid', 'codemirror',\n  'backform', 'wcdocker', 'pgadmin.backform', 'pgadmin.backgrid',\n  'pgadmin.browser.panel'\n], function(gettext, url_for, $, _, S, Alertify, pgAdmin, pgBrowser, Backbone, Backgrid, CodeMirror, Backform ) {\n\n  /*\n   * Function used to return the respective Backgrid control based on the data type\n   * of function input argument.\n   */\n  var cellFunction = function(model) {\n    var self = this,\n    variable_type = model.get(\"type\");\n\n    // if variable type is an array then we need to render the custom control to take the input from user.\n    if (variable_type.indexOf(\"[]\") !=-1) {\n      if (variable_type.indexOf(\"integer\") != -1) {\n        return Backgrid.Extension.InputIntegerArrayCell;\n      }\n      return Backgrid.Extension.InputStringArrayCell;\n    }\n\n    switch(variable_type) {\n      case \"bool\":\n        return Backgrid.BooleanCell;\n        break;\n\n      case \"integer\":\n        // As we are getting this value as text from sqlite database so we need to type cast it.\n        if (model.get('value') != undefined) {\n          model.set({'value': parseInt(model.get('value'))},{silent:true});\n        }\n\n        return Backgrid.IntegerCell;\n        break;\n\n      case \"real\":\n        // As we are getting this value as text from sqlite database so we need to type cast it.\n        if (model.get('value') != undefined) {\n          model.set({'value': parseFloat(model.get('value'))} ,{silent:true});\n        }\n        return Backgrid.NumberCell;\n        break;\n\n      case \"string\":\n        return Backgrid.StringCell;\n        break;\n      case \"date\":\n        return Backgrid.DateCell;\n        break;\n      default:\n        return Backgrid.Cell;\n        break;\n    }\n  }\n\n  /*\n   * Function used to return the respective Backgrid string or boolean control based on the data type\n   * of function input argument.\n   */\n  var cellExprControlFunction = function(model) {\n    var self = this,\n    variable_type = model.get(\"type\");\n    if (variable_type.indexOf(\"[]\") !=-1) {\n      return Backgrid.StringCell;\n    }\n    return Backgrid.BooleanCell;\n  }\n\n  /**\n   *  DebuggerInputArgsModel used to represent input parameters for the function to debug\n   *  for function objects.\n   **/\n  var DebuggerInputArgsModel = Backbone.Model.extend({\n    defaults: {\n      name: undefined,\n      type: undefined,\n      is_null: undefined,\n      expr: undefined,\n      value: undefined,\n      use_default: undefined,\n      default_value: undefined,\n    },\n    validate: function() {\n      if (_.isUndefined(this.get('value')) ||\n          _.isNull(this.get('value')) ||\n          String(this.get('value')).replace(/^\\s+|\\s+$/g, '') == '') {\n        var msg = gettext('Please enter a value for the parameter.');\n        this.errorModel.set('value', msg);\n        return msg;\n      } else {\n        this.errorModel.unset('value');\n      }\n      return null;\n    }\n  });\n\n  // Collection which contains the model for function informations.\n  var DebuggerInputArgCollections = Backbone.Collection.extend({\n    model: DebuggerInputArgsModel\n  });\n\n  // function will enable/disable the use_default column based on the value received.\n  var disableDefaultCell = function(d) {\n    if (d instanceof Backbone.Model) {\n        return d.get('use_default');\n    }\n    return false;\n  };\n\n  // Enable/Disable the control based on the array data type of the function input arguments\n  var disableExpressionControl = function(d) {\n    var argType = d.get('type');\n    if (d instanceof Backbone.Model) {\n      var argType = d.get('type');\n      if (argType.indexOf(\"[]\") !=-1) {\n        return false;\n      }\n      return true;\n    }\n  };\n\n  var res =  function(args, restart_debug) {\n    if (!Alertify.debuggerInputArgsDialog) {\n      Alertify.dialog('debuggerInputArgsDialog', function factory() {\n        return {\n          main:function(title, data, restart_debug) {\n            this.set('title', title);\n            this.data = data;\n            this.restart_debug = restart_debug;\n\n            // Variables to store the data sent from sqlite database\n            var func_args_data = this.func_args_data = [];\n\n            // As we are not getting pgBrowser.tree when we debug again so tree info will be updated from the server data\n            if (restart_debug == 0) {\n              var t = pgBrowser.tree,\n                i = t.selected(),\n                d = i && i.length == 1 ? t.itemData(i) : undefined,\n                node = d && pgBrowser.Nodes[d._type];\n\n              if (!d)\n                return;\n\n              var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n              if (d._type == \"function\") {\n                // Get the existing function parameters available from sqlite database\n                var _Url = url_for('debugger.get_arguments', {\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.function._id\n                           });\n              }\n              else if (d._type == \"procedure\") {\n                // Get the existing function parameters available from sqlite database\n                var _Url = url_for('debugger.get_arguments', {\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.procedure._id\n                           });\n              }\n              else if (d._type == \"edbfunc\") {\n                // Get the existing function parameters available from sqlite database\n                var _Url = url_for('debugger.get_arguments', {\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.edbfunc._id\n                           });\n              }\n              else if (d._type == \"edbproc\") {\n                // Get the existing function parameters available from sqlite database\n                var _Url = url_for('debugger.get_arguments', {\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.edbproc._id\n                           });\n              }\n            }\n            else {\n              // Get the existing function parameters available from sqlite database\n              var _Url = url_for('debugger.get_arguments', {\n                          'sid': this.data.server_id,\n                          'did': this.data.database_id,\n                          'scid': this.data.schema_id,\n                          'func_id': this.data.function_id\n                         });\n            }\n            $.ajax({\n              url: _Url,\n              method: 'GET',\n              async: false,\n              success: function(res) {\n                if (res.data.args_count != 0) {\n                  for (i = 0; i < res.data.result.length; i++) {\n                    // Below will format the data to be stored in sqlite database\n                    func_args_data.push({\n                      'arg_id': res.data.result[i]['arg_id'],\n                      'is_null': res.data.result[i]['is_null'],\n                      'is_expression': res.data.result[i]['is_expression'],\n                      'use_default': res.data.result[i]['use_default'],\n                      'value': res.data.result[i]['value']\n                    });\n                  }\n                }\n              },\n              error: function(e) {\n                Alertify.alert(\n                  'Debugger Set arguments error'\n                );\n              }\n            });\n\n            var argname, argtype, argmode, default_args_count, default_args, arg_cnt;\n\n            var value_header = Backgrid.HeaderCell.extend({\n                // Add fixed width to the \"value\" column\n                className: 'width_percent_25'\n            });\n\n            var def_val_list = [],\n            gridCols = [\n              {name: 'name', label:'Name', type:'text', editable: false, cell:'string' },\n              {name: 'type', label:'Type', type: 'text', editable: false, cell:'string' },\n              {name: 'is_null', label:'Null?', type: 'boolean', cell: 'boolean' },\n              {name: 'expr', label:'Expression?', type: 'boolean', cellFunction: cellExprControlFunction, editable: disableExpressionControl },\n              {name: 'value', label:'Value', type: 'text', editable: true, cellFunction: cellFunction, headerCell: value_header },\n              {name: 'use_default', label:'Use Default?', type: 'boolean', cell:\"boolean\", editable: disableDefaultCell },\n              {name: 'default_value', label:'Default value', type: 'text', editable: false, cell:'string' }\n            ];\n\n            var my_obj = [];\n            var func_obj = [];\n\n            // Below will calculate the input argument id required to store in sqlite database\n            var input_arg_id = this.input_arg_id = [];\n            if (this.data['proargmodes'] != null) {\n              var argmode_1 = this.data['proargmodes'].split(\",\");\n              for (var k = 0; k < argmode_1.length; k++) {\n                if (argmode_1[k] == 'i' || argmode_1[k] == 'b') {\n                  input_arg_id.push(k)\n                }\n              }\n            }\n            else {\n              var argtype_1 = this.data['proargtypenames'].split(\",\");\n              for (var k = 0; k < argtype_1.length; k++) {\n                  input_arg_id.push(k)\n              }\n            }\n\n            argtype = this.data['proargtypenames'].split(\",\");\n\n            if (this.data['proargmodes'] != null) {\n                argmode = this.data['proargmodes'].split(\",\");\n            }\n\n            if (this.data['pronargdefaults']) {\n              default_args_count = this.data['pronargdefaults'];\n              default_args = this.data['proargdefaults'].split(\",\");\n              arg_cnt = default_args_count;\n            }\n\n            if (this.data['proargnames'] != null) {\n              argname = this.data['proargnames'].split(\",\");\n\n              // It will assign default values to \"Default value\" column\n              for (var j = (argname.length - 1); j >= 0; j--) {\n                if (this.data['proargmodes'] != null) {\n                  if (arg_cnt && (argmode[j] == 'i' || argmode[j] == 'b')) {\n                    arg_cnt = arg_cnt - 1;\n                    def_val_list[j] = default_args[arg_cnt]\n                  }\n                  else {\n                    def_val_list[j] = \"<No default value>\";\n                  }\n                }\n                else {\n                  if (arg_cnt) {\n                    arg_cnt = arg_cnt - 1;\n                    def_val_list[j] = default_args[arg_cnt]\n                  }\n                  else {\n                    def_val_list[j] = \"<No default value>\";\n                  }\n                }\n              }\n\n              if (argtype.length != 0)\n              {\n                for (i = 0; i < argtype.length; i++) {\n                  if (this.data['proargmodes'] != null) {\n                    if (argmode[i] == 'i' || argmode[i] == 'b') {\n                      var use_def_value = false\n                      if (def_val_list[i] != \"<No default value>\") {\n                        use_def_value = true;\n                      }\n                      my_obj.push({ \"name\": argname[i], \"type\": argtype[i], \"use_default\": use_def_value, \"default_value\": def_val_list[i]});\n                    }\n                  }\n                  else {\n                    var use_def_value = false\n                    if (def_val_list[i] != \"<No default value>\") {\n                      use_def_value = true;\n                    }\n                    my_obj.push({ \"name\": argname[i], \"type\": argtype[i], \"use_default\": use_def_value, \"default_value\": def_val_list[i]});\n                  }\n\n\n                }\n              }\n\n              // Need to update the func_obj variable from sqlite database if available\n              if (func_args_data.length != 0) {\n                for (i = 0; i < func_args_data.length; i++) {\n                  var index = func_args_data[i]['arg_id'];\n                  var values = [];\n                  if (argtype[index].indexOf(\"[]\") !=-1) {\n                      var vals = func_args_data[i]['value'].split(\",\");\n                      if (argtype[index].indexOf(\"integer\") != -1) {\n                        _.each(vals, function(val){\n                            values.push({'value': parseInt(val)});\n                        });\n                      }\n                      _.each(vals, function(val){\n                            values.push({'value': val});\n                        });\n                  } else {\n                    values = func_args_data[i]['value'];\n                  }\n\n                  func_obj.push({ \"name\": argname[index], \"type\": argtype[index], \"is_null\": func_args_data[i]['is_null'] ? true: false, \"expr\": func_args_data[i]['is_expression']? true: false, \"value\": values, \"use_default\": func_args_data[i]['use_default']? true: false, \"default_value\": def_val_list[index]});\n                }\n              }\n            }\n            else {\n              /*\n               Generate the name parameter if function do not have arguments name\n               like dbgparam1, dbgparam2 etc.\n              */\n              var myargname = [];\n\n              for (i = 0; i < argtype.length; i++) {\n                myargname[i] = \"dbgparam\" + (i+1);\n              }\n\n              // If there is no default arguments\n              if (!this.data['pronargdefaults']) {\n                for (i = 0; i < argtype.length; i++) {\n                  my_obj.push({ \"name\": myargname[i], \"type\": argtype[i], \"use_default\": false, \"default_value\": \"<No default value>\"});\n                  def_val_list[i] = \"<No default value>\";\n                }\n              }\n              else {\n                // If there is default arguments\n                //Below logic will assign default values to \"Default value\" column\n                for (var j = (myargname.length - 1);j >= 0; j--) {\n                  if (this.data['proargmodes'] == null) {\n                    if (arg_cnt) {\n                      arg_cnt = arg_cnt - 1;\n                      def_val_list[j] = default_args[arg_cnt]\n                    }\n                    else {\n                      def_val_list[j] = \"<No default value>\";\n                    }\n                  }\n                  else {\n                    if (arg_cnt && (argmode[j] == 'i' || argmode[j] == 'b')) {\n                      arg_cnt = arg_cnt - 1;\n                      def_val_list[j] = default_args[arg_cnt]\n                    }\n                    else {\n                      def_val_list[j] = \"<No default value>\";\n                    }\n                  }\n                }\n\n                for (i = 0; i < argtype.length; i++) {\n                  if (this.data['proargmodes'] == null) {\n                    var use_def_value = false\n                    if (def_val_list[i] != \"<No default value>\") {\n                      use_def_value = true;\n                    }\n                    my_obj.push({ \"name\": myargname[i], \"type\": argtype[i], \"use_default\": use_def_value, \"default_value\": def_val_list[i]});\n                  }\n                  else {\n                    if (argmode[i] == 'i' || argmode[i] == 'b') {\n                      var use_def_value = false\n                      if (def_val_list[i] != \"<No default value>\") {\n                        use_def_value = true;\n                      }\n                      my_obj.push({ \"name\": myargname[i], \"type\": argtype[i], \"use_default\": use_def_value, \"default_value\": def_val_list[i]});\n                    }\n                  }\n                }\n              }\n\n              // Need to update the func_obj variable from sqlite database if available\n              if (func_args_data.length != 0) {\n                for (i = 0; i < func_args_data.length; i++) {\n                  var index = func_args_data[i]['arg_id'];\n                  var values = [];\n                  if (argtype[index].indexOf(\"[]\") !=-1) {\n                      var vals = func_args_data[i]['value'].split(\",\");\n                      if (argtype[index].indexOf(\"integer\") != -1) {\n                        _.each(vals, function(val){\n                            values.push({'value': parseInt(val)});\n                        });\n                      }\n                      _.each(vals, function(val){\n                            values.push({'value': val});\n                        });\n                  } else {\n                    values = func_args_data[i]['value'];\n                  }\n                  func_obj.push({ \"name\": myargname[index], \"type\": argtype[index], \"is_null\": func_args_data[i]['is_null'] ? true: false, \"expr\": func_args_data[i]['is_expression']? true: false, \"value\": values, \"use_default\": func_args_data[i]['use_default']? true: false, \"default_value\": def_val_list[index]});\n                }\n              }\n            }\n\n            // Check if the arguments already available in the sqlite database then we should use the existing arguments\n            if (func_args_data.length == 0) {\n              var debuggerInputArgsColl = this.debuggerInputArgsColl = new DebuggerInputArgCollections(my_obj);\n            }\n            else {\n              var debuggerInputArgsColl = this.debuggerInputArgsColl = new DebuggerInputArgCollections(func_obj);\n            }\n\n            // Initialize a new Grid instance\n            if (this.grid) {\n                this.grid.remove();\n                this.grid = null;\n            }\n            var grid = this.grid = new Backgrid.Grid({\n              columns: gridCols,\n              collection: debuggerInputArgsColl,\n              className: \"backgrid table-bordered\"\n            });\n\n            grid.render();\n            $(this.elements.content).html(grid.el);\n          },\n          setup:function() {\n            return {\n              buttons:[{ text: \"Debug\", key: 13, className: \"btn btn-primary\" },\n                       { text: \"Cancel\", key: 27, className: \"btn btn-primary\" }],\n              options: { modal: 0, resizable: true }\n            };\n          },\n          // Callback functions when click on the buttons of the Alertify dialogs\n          callback: function(e) {\n            if (e.button.text === \"Debug\") {\n\n              // Initialize the target once the debug button is clicked and\n              // create asynchronous connection and unique transaction ID\n              var self = this;\n\n              // If the debugging is started again then treeInfo is already stored in this.data so we can use the same.\n              if (self.restart_debug == 0) {\n                var t = pgBrowser.tree,\n                  i = t.selected(),\n                  d = i && i.length == 1 ? t.itemData(i) : undefined,\n                  node = d && pgBrowser.Nodes[d._type];\n\n                if (!d)\n                  return;\n\n                var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n              }\n\n              var args_value_list = [];\n              var sqlite_func_args_list = this.sqlite_func_args_list = [];\n              var int_count = 0;\n\n              this.grid.collection.each(function(m) {\n\n                  // Check if value is set to NULL then we should ignore the value field\n                  if (m.get('is_null')) {\n                    args_value_list.push({ 'name': m.get('name'),\n                                       'type': m.get('type'),\n                                       'value': 'NULL'});\n                  }\n                  else {\n                    // Check if default value to be used or not\n                    if (m.get('use_default')) {\n                      args_value_list.push({ 'name': m.get('name'),\n                                       'type': m.get('type'),\n                                       'value': m.get('default_value')});\n                    }\n                    else {\n                      args_value_list.push({ 'name': m.get('name'),\n                                       'type': m.get('type'),\n                                       'value': m.get('value')});\n                    }\n                  }\n\n                  if (self.restart_debug == 0) {\n                    var f_id;\n                    if (d._type == \"function\") {\n                      f_id = treeInfo.function._id;\n                    }\n                    else if (d._type == \"procedure\") {\n                      f_id = treeInfo.procedure._id;\n                    }\n                    else if (d._type == \"edbfunc\") {\n                      f_id = treeInfo.edbfunc._id;\n                    }\n                    else if (d._type == \"edbproc\") {\n                      f_id = treeInfo.edbproc._id;\n                    }\n\n                    // Below will format the data to be stored in sqlite database\n                    sqlite_func_args_list.push({\n                      'server_id': treeInfo.server._id,\n                      'database_id': treeInfo.database._id,\n                      'schema_id': treeInfo.schema._id ,\n                      'function_id': f_id,\n                      'arg_id': self.input_arg_id[int_count],\n                      'is_null': m.get('is_null')  ? 1 : 0,\n                      'is_expression': m.get('expr') ? 1 : 0,\n                      'use_default': m.get('use_default') ? 1 : 0,\n                      'value': m.get('value')\n                    });\n                  }\n                  else {\n                    // Below will format the data to be stored in sqlite database\n                    sqlite_func_args_list.push({\n                      'server_id': self.data.server_id,\n                      'database_id': self.data.database_id,\n                      'schema_id': self.data.schema_id ,\n                      'function_id': self.data.function_id,\n                      'arg_id': self.input_arg_id[int_count],\n                      'is_null': m.get('is_null')  ? 1 : 0,\n                      'is_expression': m.get('expr') ? 1 : 0,\n                      'use_default': m.get('use_default') ? 1 : 0,\n                      'value': m.get('value')\n                    });\n                  }\n\n                  int_count = int_count + 1;\n              });\n\n              // If debugging is not started again then we should initialize the target otherwise not\n              if (self.restart_debug == 0) {\n                var baseUrl;\n                if (d._type == \"function\") {\n                  baseUrl = url_for('debugger.initialize_target_for_function', {\n                                  'debug_type': 'direct',\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.function._id\n                                });\n                }\n                else if (d._type == \"procedure\") {\n                  baseUrl = url_for('debugger.initialize_target_for_function', {\n                                  'debug_type': 'direct',\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.procedure._id\n                                });\n                }\n                else if (d._type == \"edbfunc\") {\n                  baseUrl = url_for('debugger.initialize_target_for_function', {\n                                  'debug_type': 'direct',\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.edbfunc._id\n                                });\n                }\n                else if (d._type == \"edbproc\") {\n                  baseUrl = url_for('debugger.initialize_target_for_function', {\n                                  'debug_type': 'direct',\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.edbproc._id\n                                });\n                }\n\n                $.ajax({\n                  url: baseUrl,\n                  method: 'POST',\n                  data:{'data':JSON.stringify(args_value_list)},\n                  success: function(res) {\n\n                    var url = url_for('debugger.direct', {'trans_id': res.data.debuggerTransId});\n\n                    if (res.data.newBrowserTab) {\n                      window.open(url, '_blank');\n                    } else {\n                      pgBrowser.Events.once(\n                        'pgadmin-browser:frame:urlloaded:frm_debugger', function(frame) {\n                        frame.openURL(url);\n                      });\n\n                      // Create the debugger panel as per the data received from user input dialog.\n                      var dashboardPanel = pgBrowser.docker.findPanels('properties'),\n                          panel = pgBrowser.docker.addPanel(\n                            'frm_debugger', wcDocker.DOCK.STACKED, dashboardPanel[0]\n                          );\n\n                      panel.focus();\n\n                      // Panel Closed event\n                      panel.on(wcDocker.EVENT.CLOSED, function() {\n                        var closeUrl = url_for('debugger.close', {'trans_id': res.data.debuggerTransId});\n                        $.ajax({\n                          url: closeUrl,\n                          method: 'DELETE'\n                        });\n                      });\n                    }\n\n                    if (d._type == \"function\") {\n                      var _Url = url_for('debugger.set_arguments', {\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.function._id,\n                                 });\n                    }\n                    else if (d._type == \"procedure\") {\n                      var _Url = url_for('debugger.set_arguments', {\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.procedure._id,\n                                 });\n                    }\n                    else if (d._type == \"edbfunc\") {\n                      // Get the existing function parameters available from sqlite database\n                      var _Url = url_for('debugger.set_arguments', {\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.edbfunc._id,\n                                 });\n                    }\n                    else if (d._type == \"edbproc\") {\n                      // Get the existing function parameters available from sqlite database\n                      var _Url = url_for('debugger.set_arguments', {\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.edbproc._id,\n                                 });\n                    }\n\n                    $.ajax({\n                      url: _Url,\n                      method: 'POST',\n                      data:{'data':JSON.stringify(sqlite_func_args_list)},\n                      success: function(res) {\n                      },\n                      error: function(e) {\n                        Alertify.alert(\n                          'Debugger Set arguments error'\n                        );\n                      }\n                    });\n                  },\n                  error: function(e) {\n                    Alertify.alert(\n                      'Debugger target Initialize Error',\n                      e.responseJSON.errormsg\n                    );\n                  }\n                });\n              }\n              else {\n                // If the debugging is started again then we should only set the arguments and start the listener again\n                var baseUrl = url_for('debugger.start_listener', {'trans_id': self.data.trans_id});\n\n                $.ajax({\n                  url: baseUrl,\n                  method: 'POST',\n                  data:{'data':JSON.stringify(args_value_list)},\n                  success: function(res) {\n                  },\n                  error: function(e) {\n                    Alertify.alert(\n                      'Debugger listener starting error',\n                      e.responseJSON.errormsg\n                    );\n                  }\n                });\n\n                // Set the new input arguments given by the user during debugging\n                var _Url = url_for('debugger.set_arguments', {\n                            'sid': self.data.server_id,\n                            'did': self.data.database_id,\n                            'scid': self.data.schema_id,\n                            'func_id': self.data.function_id\n                           });\n                $.ajax({\n                  url: _Url,\n                  method: 'POST',\n                  data:{'data':JSON.stringify(sqlite_func_args_list)},\n                  success: function(res) {\n                  },\n                  error: function(e) {\n                    Alertify.alert(\n                      'Debugger Set arguments error'\n                    );\n                  }\n                });\n\n              }\n\n              return true;\n            }\n\n            if (e.button.text === \"Cancel\") {\n              //close the dialog...\n              return false;\n            }\n          },\n          build:function() {\n          },\n          prepare:function() {\n            /*\n             If we already have data available in sqlite database then we should enable the debug button otherwise\n             disable the debug button.\n            */\n            if (this.func_args_data.length == 0) {\n              this.__internal.buttons[0].element.disabled = true;\n            }\n            else {\n              this.__internal.buttons[0].element.disabled = false;\n            }\n\n            /*\n             Listen to the grid change event so that if any value changed by user then we can enable/disable the\n             debug button.\n            */\n            this.grid.listenTo(this.debuggerInputArgsColl,\"backgrid:edited\",\n              (function(obj) {\n\n                return function() {\n\n                  var self = this;\n                  var enable_btn = false;\n\n                  for (var    i = 0; i < this.collection.length; i++ ) {\n\n                    // TODO: Need to check the \"NULL\" and \"Expression\" column value to enable/disable the \"Debug\" button\n                    if (this.collection.models[i].get('value') == \"\" ||\n                        this.collection.models[i].get('value') == null ||\n                        this.collection.models[i].get('value') == undefined) {\n                          enable_btn = true;\n\n                          if (this.collection.models[i].get('use_default')) {\n                            obj.__internal.buttons[0].element.disabled = false;\n                          }\n                          else{\n                            obj.__internal.buttons[0].element.disabled = true;\n                            break;\n                          }\n                    }\n                  }\n                  if (!enable_btn)\n                    obj.__internal.buttons[0].element.disabled = false;\n                }\n              }\n              )(this)\n            );\n          }\n        };\n      });\n    }\n\n    Alertify.debuggerInputArgsDialog('Debugger',args, restart_debug).resizeTo('60%', '60%');\n\n  };\n\n  return res;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/debugger/static/js/debugger_ui.js","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\ndefine(['jquery', 'underscore', 'underscore.string'],\n  function ($, _, S) {\n\n    var check_node_visibility = function (pgBrowser, node_type) {\n      if(_.isUndefined(node_type) || _.isNull(node_type)) {\n        return true;\n      }\n\n      // Target actual node instead of collection.\n      // If node is disabled then there is no meaning of\n      // adding collection node menu\n      if(S.startsWith(node_type, \"coll-\")) {\n        node_type = node_type.replace(\"coll-\", \"\")\n      }\n\n      // Exclude non-applicable nodes\n      var nodes_not_supported = [\n        \"server_group\", \"server\", \"catalog_object_column\"\n      ];\n      if(_.indexOf(nodes_not_supported, node_type) >= 0) {\n        return true;\n      }\n\n      var preference = pgBrowser.get_preference(\"browser\", 'show_node_'+node_type);\n\n      if (preference) {\n        return preference.value\n      }\n      else {\n        return true;\n      }\n    }\n\n  return check_node_visibility;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/check_node_visibility.js","define([\n  'sources/gettext', 'sources/url_for' ,'jquery', 'underscore', 'underscore.string', 'pgadmin.alertifyjs',\n  'sources/pgadmin','pgadmin.browser', 'backbone', 'backgrid', 'sources/../bundle/codemirror', 'backform',\n  'pgadmin.tools.debugger.ui',\n  'wcdocker', 'pgadmin.backform',\n  'pgadmin.backgrid'\n], function(\n  gettext, url_for, $, _, S, Alertify, pgAdmin, pgBrowser, Backbone, Backgrid,\n  codemirror, Backform, debug_function_again\n) {\n\n  var CodeMirror = codemirror.default;\n  if (pgAdmin.Browser.tree != null) {\n    pgAdmin = pgAdmin || window.pgAdmin || {};\n  }\n\n  var pgTools = pgAdmin.Tools = pgAdmin.Tools || {};\n\n  if (pgTools.DirectDebug)\n    return pgTools.DirectDebug;\n\n  var controller = new (function() {});\n\n  _.extend(\n    controller, Backbone.Events, {\n      enable: function(btn, enable) {\n        // trigger the event and change the button view to enable/disable the buttons for debugging\n        this.trigger('pgDebugger:button:state:' + btn, enable);\n      },\n\n      /*\n        Function to set the breakpoint and send the line no. which is set to server\n        trans_id :- Unique Transaction ID, line_no - line no. to set the breakpoint, set_type = 0 - clear , 1 - set\n      */\n      set_breakpoint: function(trans_id, line_no, set_type) {\n        var self = this;\n\n        // Make ajax call to set/clear the break point by user\n        var baseUrl = url_for('debugger.set_breakpoint', {\n                        'trans_id': trans_id,\n                        'line_no': line_no,\n                        'set_type': set_type\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              // Breakpoint has been set by the user\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while setting debugging breakpoint.'\n            );\n          }\n        });\n      },\n\n      // Function to get the latest breakpoint information and update the gutters of codemirror\n      UpdateBreakpoint: function(trans_id) {\n        var self = this;\n\n        var br_list = self.GetBreakpointInformation(trans_id);\n\n        // If there is no break point to clear then we should return from here.\n        if ((br_list.length == 1) && (br_list[0].linenumber == -1))\n          return;\n\n        var breakpoint_list = new Array();\n\n        for (var i = 0; i < br_list.length; i++) {\n          if (br_list[i].linenumber != -1) {\n            breakpoint_list.push(br_list[i].linenumber)\n          }\n        }\n\n        for (var i = 0;i< breakpoint_list.length;i++) {\n          var info = pgTools.DirectDebug.editor.lineInfo((breakpoint_list[i] - 1));\n\n          if (info.gutterMarkers != undefined) {\n            pgTools.DirectDebug.editor.setGutterMarker((breakpoint_list[i] - 1), \"breakpoints\", null);\n          }\n          else {\n            pgTools.DirectDebug.editor.setGutterMarker((breakpoint_list[i] - 1), \"breakpoints\", function() {\n            var marker = document.createElement(\"div\");\n            marker.style.color = \"#822\";\n            marker.innerHTML = \"●\";\n            return marker;\n            }());\n          }\n        }\n      },\n\n      // Function to get the breakpoint information from the server\n      GetBreakpointInformation: function(trans_id) {\n        var self = this;\n        var result = '';\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.execute_query', {\n                        'trans_id': trans_id,\n                        'query_type': 'get_breakpoints'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          async: false,\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              result = res.data.result;\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while fetching breakpoint information.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while fetching breakpoint information.'\n            );\n          }\n        });\n\n        return result;\n      },\n\n      // Function to start the executer and execute the user requested option for debugging\n      start_execution: function(trans_id, port_num) {\n        var self = this;\n        // Make ajax call to listen the database message\n        var baseUrl = url_for(\n                        'debugger.start_execution', {\n                          'trans_id': trans_id,\n                          'port_num': port_num\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              // If status is Success then find the port number to attach the executer.\n              self.execute_query(trans_id);\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while starting debugging session.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while starting debugging session.'\n            );\n          }\n        });\n      },\n\n      // Execute the query and get the first functions debug information from the server\n      execute_query: function(trans_id) {\n        var self = this;\n        // Make ajax call to listen the database message\n        var baseUrl = url_for(\n                        'debugger.execute_query', {\n                          'trans_id': trans_id,\n                          'query_type': 'wait_for_breakpoint'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              // set the return code to the code editor text area\n              if (res.data.result[0].src != null && res.data.result[0].linenumber != null) {\n                pgTools.DirectDebug.editor.setValue(res.data.result[0].src);\n                var active_line_no = self.active_line_no = (res.data.result[0].linenumber - 2);\n                pgTools.DirectDebug.editor.addLineClass((res.data.result[0].linenumber - 2), 'wrap', 'CodeMirror-activeline-background');\n              }\n\n              // Call function to create and update local variables ....\n              self.GetStackInformation(trans_id);\n              if (pgTools.DirectDebug.debug_type) {\n                self.poll_end_execution_result(trans_id);\n              }\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while executing requested debugging information.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while executing requested debugging information.'\n            );\n          }\n        });\n      },\n\n      // Get the local variable information of the functions and update the grid\n      GetLocalVariables: function(trans_id) {\n        var self = this;\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for(\n                        'debugger.execute_query', {\n                          'trans_id': trans_id,\n                          'query_type': 'get_variables'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              // Call function to create and update local variables\n              self.AddLocalVariables(res.data.result);\n              self.AddParameters(res.data.result);\n              // If debug function is restarted then again start listener to read the updated messages.\n              if (pgTools.DirectDebug.debug_restarted) {\n                if (pgTools.DirectDebug.debug_type) {\n                  self.poll_end_execution_result(trans_id);\n                }\n                pgTools.DirectDebug.debug_restarted = false;\n              }\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while fetching variable information.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while fetching variable information.'\n            );\n          }\n        });\n      },\n\n      // Get the stack information of the functions and update the grid\n      GetStackInformation: function(trans_id) {\n        var self = this;\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for(\n                        'debugger.execute_query', {\n                          'trans_id': trans_id,\n                          'query_type': 'get_stack_info'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              // Call function to create and update stack information\n              self.AddStackInformation(res.data.result);\n              self.GetLocalVariables(pgTools.DirectDebug.trans_id);\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while fetching stack information.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while fetching stack information.'\n            );\n          }\n        });\n      },\n\n      /*\n        poll the actual result after user has executed the \"continue\", \"step-into\", \"step-over\" actions and get the\n        other updated information from the server.\n      */\n      poll_result: function(trans_id) {\n      var self = this;\n\n      // Do we need to poll?\n      if(!pgTools.DirectDebug.is_polling_required){\n        return;\n      }\n\n      // Make ajax call to listen the database message\n      var baseUrl = url_for('debugger.poll_result', {'trans_id': trans_id});\n\n      /*\n        During the execution we should poll the result in minimum seconds but once the execution is completed\n        and wait for the another debugging session then we should decrease the polling frequency.\n      */\n      if (pgTools.DirectDebug.polling_timeout_idle) {\n        // poll the result after 1 second\n        var  poll_timeout = 1000;\n      }\n      else {\n        // poll the result after 200 ms\n        var  poll_timeout = 200;\n      }\n\n      setTimeout(\n        function() {\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          beforeSend: function(jqXHR, settings) {\n            // set cursor to progress before every poll.\n            $('.debugger-container').addClass('show_progress');\n          },\n          success: function(res) {\n            // remove progress cursor\n            $('.debugger-container').removeClass('show_progress');\n\n            if (res.data.status === 'Success') {\n              // If no result then poll again to wait for results.\n              if (res.data.result == null || res.data.result.length == 0) {\n                self.poll_result(trans_id);\n              }\n              else {\n                if (res.data.result[0].src != undefined || res.data.result[0].src != null) {\n                pgTools.DirectDebug.polling_timeout_idle = false;\n                pgTools.DirectDebug.docker.finishLoading(50);\n                pgTools.DirectDebug.editor.setValue(res.data.result[0].src);\n                self.UpdateBreakpoint(trans_id);\n                pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n                pgTools.DirectDebug.editor.addLineClass((res.data.result[0].linenumber - 2), 'wrap', 'CodeMirror-activeline-background');\n                self.active_line_no = (res.data.result[0].linenumber - 2);\n\n                // Update the stack, local variables and parameters information\n                self.GetStackInformation(trans_id);\n\n                }\n                else if (!pgTools.DirectDebug.debug_type && !pgTools.DirectDebug.first_time_indirect_debug) {\n                  pgTools.DirectDebug.docker.finishLoading(50);\n                  if (self.active_line_no != undefined) {\n                    pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n                  }\n                  self.clear_all_breakpoint(trans_id);\n                  self.execute_query(trans_id);\n                  pgTools.DirectDebug.first_time_indirect_debug = true;\n                  pgTools.DirectDebug.polling_timeout_idle = false;\n                }\n                else {\n                  pgTools.DirectDebug.polling_timeout_idle = false;\n                  pgTools.DirectDebug.docker.finishLoading(50);\n                  // If the source is really changed then only update the breakpoint information\n                  if (res.data.result[0].src != pgTools.DirectDebug.editor.getValue()) {\n                    pgTools.DirectDebug.editor.setValue(res.data.result[0].src);\n                    self.UpdateBreakpoint(trans_id);\n                  }\n\n                  pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n                  pgTools.DirectDebug.editor.addLineClass((res.data.result[0].linenumber - 2), 'wrap', 'CodeMirror-activeline-background');\n                  self.active_line_no = (res.data.result[0].linenumber - 2);\n\n                  // Update the stack, local variables and parameters information\n                  self.GetStackInformation(trans_id);\n                }\n\n                // Enable all the buttons as we got the results\n                self.enable('stop', true);\n                self.enable('step_over', true);\n                self.enable('step_into', true);\n                self.enable('continue', true);\n                self.enable('toggle_breakpoint', true);\n                self.enable('clear_all_breakpoints', true);\n              }\n            }\n            else if (res.data.status === 'Busy') {\n              pgTools.DirectDebug.polling_timeout_idle = true;\n              // If status is Busy then poll the result by recursive call to the poll function\n              if (!pgTools.DirectDebug.debug_type) {\n                pgTools.DirectDebug.docker.startLoading(gettext('Waiting for another session to invoke the target...'));\n\n                // As we are waiting for another session to invoke the target,disable all the buttons\n                self.enable('stop', false);\n                self.enable('step_over', false);\n                self.enable('step_into', false);\n                self.enable('continue', false);\n                self.enable('toggle_breakpoint', false);\n                self.enable('clear_all_breakpoints', false);\n                pgTools.DirectDebug.first_time_indirect_debug = false;\n                self.poll_result(trans_id);\n              }\n              else {\n                self.poll_result(trans_id);\n              }\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while polling result.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while polling result.'\n            );\n          }\n        });\n      }, poll_timeout );\n\n    },\n\n    // This function will update messages tab\n    update_messages: function(msg) {\n      // To prevent xss\n      msg = _.escape(msg);\n\n      var old_msgs='', new_msgs='';\n        old_msgs = pgTools.DirectDebug.messages_panel.$container.find('.messages').html();\n        if(old_msgs) {\n          new_msgs = (old_msgs + '\\n' + msg)\n                        .replace(/(?:\\r\\n|\\r|\\n)/g, '<br />') // Newlines with <br>\n                        .replace(/(<br\\ ?\\/?>)+/g, '<br />'); // multiple <br> with single <br>\n        } else {\n          new_msgs = msg;\n        }\n        pgTools.DirectDebug.messages_panel.$container.find('.messages').html(new_msgs);\n    },\n\n    /*\n      For the direct debugging, we need to check weather the functions execution is completed or not. After completion\n      of the debugging, we will stop polling the result  until new execution starts.\n    */\n    poll_end_execution_result: function(trans_id) {\n      var self = this;\n\n      // Do we need to poll?\n      if(!pgTools.DirectDebug.is_polling_required){\n        return;\n      }\n\n      // Make ajax call to listen the database message\n      var baseUrl = url_for('debugger.poll_end_execution_result', {'trans_id': trans_id});\n\n      /*\n        During the execution we should poll the result in minimum seconds but once the execution is completed\n        and wait for the another debugging session then we should decrease the polling frequency.\n      */\n      if (pgTools.DirectDebug.polling_timeout_idle) {\n        // poll the result to check that execution is completed or not after 1200 ms\n        var  poll_end_timeout = 1200;\n      }\n      else {\n        // poll the result to check that execution is completed or not after 350 ms\n        var  poll_end_timeout = 250;\n      }\n\n      setTimeout(\n        function() {\n          $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              if(res.data.result == undefined ) {\n                /*\n                 \"result\" is undefined only in case of EDB procedure. As Once the EDB procedure execution is completed\n                 then we are not getting any result so we need ignore the result.\n                */\n                pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n                pgTools.DirectDebug.direct_execution_completed = true;\n                pgTools.DirectDebug.polling_timeout_idle = true;\n\n                //Set the alertify message to inform the user that execution is completed.\n                Alertify.success(res.info, 3);\n\n                // Update the message tab of the debugger\n                if (res.data.status_message) {\n                  self.update_messages(res.data.status_message);\n                }\n\n                // remove progress cursor\n                $('.debugger-container').removeClass('show_progress');\n\n                // Execution completed so disable the buttons other than \"Continue/Start\" button because user can still\n                // start the same execution again.\n                self.enable('stop', false);\n                self.enable('step_over', false);\n                self.enable('step_into', false);\n                self.enable('toggle_breakpoint', false);\n                self.enable('clear_all_breakpoints', false);\n                self.enable('continue', true);\n                // Stop further polling\n                pgTools.DirectDebug.is_polling_required = false;\n              }\n              else {\n                // Call function to create and update local variables ....\n                if (res.data.result != null) {\n                  pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n                  self.AddResults(res.data.col_info, res.data.result);\n                  pgTools.DirectDebug.results_panel.focus();\n                  pgTools.DirectDebug.direct_execution_completed = true;\n                  pgTools.DirectDebug.polling_timeout_idle = true;\n\n                  //Set the alertify message to inform the user that execution is completed.\n                  Alertify.success(res.info, 3);\n\n                  // Update the message tab of the debugger\n                  if (res.data.status_message) {\n                    self.update_messages(res.data.status_message);\n                  }\n\n                  // remove progress cursor\n                  $('.debugger-container').removeClass('show_progress');\n\n                  // Execution completed so disable the buttons other than \"Continue/Start\" button because user can still\n                  // start the same execution again.\n                  self.enable('stop', false);\n                  self.enable('step_over', false);\n                  self.enable('step_into', false);\n                  self.enable('toggle_breakpoint', false);\n                  self.enable('clear_all_breakpoints', false);\n                  self.enable('continue', true);\n\n                  // Stop further pooling\n                  pgTools.DirectDebug.is_polling_required = false;\n                }\n              }\n            }\n            else if (res.data.status === 'Busy') {\n              // If status is Busy then poll the result by recursive call to the poll function\n              self.poll_end_execution_result(trans_id);\n              // Update the message tab of the debugger\n              if (res.data.status_message) {\n                self.update_messages(res.data.status_message);\n              }\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger poll end execution error',\n                res.data.result\n              );\n            }\n            else if (res.data.status === 'ERROR') {\n              pgTools.DirectDebug.direct_execution_completed = true;\n              pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n\n              //Set the Alertify message to inform the user that execution is completed with error.\n              if(!pgTools.DirectDebug.is_user_aborted_debugging) {\n                Alertify.error(res.info, 3);\n              }\n\n              // Update the message tab of the debugger\n              if (res.data.status_message) {\n                self.update_messages(res.data.status_message);\n              }\n\n              pgTools.DirectDebug.messages_panel.focus();\n\n              // remove progress cursor\n              $('.debugger-container').removeClass('show_progress');\n\n              // Execution completed so disable the buttons other than\n              // \"Continue/Start\" button because user can still start the\n              // same execution again.\n              self.enable('stop', false);\n              self.enable('step_over', false);\n              self.enable('step_into', false);\n              self.enable('toggle_breakpoint', false);\n              self.enable('clear_all_breakpoints', false);\n              // If debugging is stopped by user then do not enable\n              // continue/restart button\n              if(!pgTools.DirectDebug.is_user_aborted_debugging)\n              {\n                self.enable('continue', true);\n                pgTools.DirectDebug.is_user_aborted_debugging = false;\n              }\n\n              // Stop further pooling\n              pgTools.DirectDebug.is_polling_required = false;\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while polling result.'\n            );\n          }\n        });\n      }, poll_end_timeout);\n\n    },\n\n    Restart: function(trans_id) {\n\n      var self = this,\n        baseUrl = url_for('debugger.restart', {'trans_id': trans_id});\n      self.enable('stop', false);\n      self.enable('step_over', false);\n      self.enable('step_into', false);\n      self.enable('toggle_breakpoint', false);\n      self.enable('clear_all_breakpoints', false);\n      self.enable('continue', false);\n\n      // Clear msg tab\n      pgTools.DirectDebug.messages_panel.$container.find('.messages').html('');\n\n      $.ajax({\n        url: baseUrl,\n        success: function(res) {\n          // Restart the same function debugging with previous arguments\n          var restart_dbg = res.data.restart_debug ? 1 : 0;\n\n          // Start pooling again\n          pgTools.DirectDebug.polling_timeout_idle = false;\n          pgTools.DirectDebug.is_polling_required = true;\n          self.poll_end_execution_result(trans_id);\n          self.poll_result(trans_id);\n\n          if (restart_dbg) {\n            pgTools.DirectDebug.debug_restarted = true;\n          }\n\n          /*\n           Need to check if restart debugging really require to open the input dialog ?\n           If yes then we will get the previous arguments from database and populate the input dialog\n           If no then we should directly start the listener.\n          */\n          if (res.data.result.require_input) {\n            var res_val = debug_function_again(res.data.result, restart_dbg);\n          }\n          else {\n            // Debugging of void function is started again so we need to start the listener again\n            var baseUrl = url_for('debugger.start_listener', {'trans_id': trans_id});\n\n            $.ajax({\n              url: baseUrl,\n              method: 'GET',\n              success: function(res) {\n                if (pgTools.DirectDebug.debug_type) {\n                  self.poll_end_execution_result(trans_id);\n                }\n              },\n              error: function(e) {\n                Alertify.alert(\n                  'Debugger Error',\n                  'Error while polling result.'\n                );\n              }\n            });\n          }\n        },\n        error: function(xhr, status, error) {\n          try {\n            var err = $.parseJSON(xhr.responseText);\n            if (err.success == 0) {\n              Alertify.alert(err.errormsg);\n            }\n          } catch (e) {}\n        }\n      });\n    },\n\n    // Continue the execution until the next breakpoint\n    Continue: function(trans_id) {\n      var self = this;\n      self.enable('stop', false);\n      self.enable('step_over', false);\n      self.enable('step_into', false);\n      self.enable('toggle_breakpoint', false);\n      self.enable('clear_all_breakpoints', false);\n      self.enable('continue', false);\n\n      //Check first if previous execution was completed or not\n      if (pgTools.DirectDebug.direct_execution_completed &&\n          pgTools.DirectDebug.direct_execution_completed == pgTools.DirectDebug.polling_timeout_idle) {\n        self.Restart(trans_id);\n      }\n      else {\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.execute_query', {\n                        'trans_id': trans_id,\n                        'query_type': 'continue'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              self.poll_result(trans_id);\n            }\n            else {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while executing continue in debugging session.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while executing continue in debugging session.'\n            );\n          }\n        });\n      }\n    },\n\n      Step_over: function(trans_id) {\n        var self = this;\n        self.enable('stop', false);\n        self.enable('step_over', false);\n        self.enable('step_into', false);\n        self.enable('toggle_breakpoint', false);\n        self.enable('clear_all_breakpoints', false);\n        self.enable('continue', false);\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.execute_query', {\n                        'trans_id': trans_id,\n                        'query_type': 'step_over'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              self.poll_result(trans_id);\n            }\n            else {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while executing step over in debugging session.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while executing step over in debugging session.'\n            );\n          }\n        });\n      },\n\n      Step_into: function(trans_id) {\n        var self = this;\n        self.enable('stop', false);\n        self.enable('step_over', false);\n        self.enable('step_into', false);\n        self.enable('toggle_breakpoint', false);\n        self.enable('clear_all_breakpoints', false);\n        self.enable('continue', false);\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.execute_query', {\n                        'trans_id': trans_id,\n                        'query_type': 'step_into'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              self.poll_result(trans_id);\n            }\n            else {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while executing step into in debugging session.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while executing step into in debugging session.'\n            );\n          }\n        });\n      },\n\n      Stop: function(trans_id) {\n        var self = this;\n        self.enable('stop', false);\n        self.enable('step_over', false);\n        self.enable('step_into', false);\n        self.enable('toggle_breakpoint', false);\n        self.enable('clear_all_breakpoints', false);\n        self.enable('continue', false);\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for(\n                        'debugger.execute_query', {\n                          'trans_id': trans_id,\n                          'query_type': 'abort_target'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              // Call function to create and update local variables ....\n              pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n              pgTools.DirectDebug.direct_execution_completed = true;\n              pgTools.DirectDebug.is_user_aborted_debugging = true;\n\n              // Stop further pooling\n              pgTools.DirectDebug.is_polling_required = false;\n\n              // Restarting debugging in the same transaction do not work\n              // We will give same behaviour as pgAdmin3 and disable all buttons\n              self.enable('continue', false);\n\n              // Set the Alertify message to inform the user that execution\n              // is completed.\n              Alertify.success(res.info, 3);\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while executing stop in debugging session.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while executing stop in debugging session.'\n            );\n          }\n        });\n      },\n\n      toggle_breakpoint: function(trans_id) {\n        var self = this;\n        self.enable('stop', false);\n        self.enable('step_over', false);\n        self.enable('step_into', false);\n        self.enable('toggle_breakpoint', false);\n        self.enable('clear_all_breakpoints', false);\n        self.enable('continue', false);\n\n\n        var info = pgTools.DirectDebug.editor.lineInfo(self.active_line_no);\n        var baseUrl = '';\n\n        // If gutterMarker is undefined that means there is no marker defined previously\n        // So we need to set the breakpoint command here...\n        if (info.gutterMarkers == undefined) {\n            baseUrl = url_for('debugger.set_breakpoint', {\n                        'trans_id': trans_id,\n                        'line_no': self.active_line_no + 1,\n                        'set_type': '1'\n                      });\n        }\n        else {\n            baseUrl = url_for('debugger.set_breakpoint', {\n                        'trans_id': trans_id,\n                        'line_no': self.active_line_no + 1,\n                        'set_type': '0'\n                      });\n        }\n\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              // Call function to create and update local variables ....\n              var info = pgTools.DirectDebug.editor.lineInfo(self.active_line_no);\n\n              if (info.gutterMarkers != undefined) {\n                pgTools.DirectDebug.editor.setGutterMarker(self.active_line_no, \"breakpoints\", null);\n              }\n              else {\n                pgTools.DirectDebug.editor.setGutterMarker(self.active_line_no, \"breakpoints\", function() {\n                    var marker = document.createElement(\"div\");\n                    marker.style.color = \"#822\";\n                    marker.innerHTML = \"●\";\n                    return marker;\n                }());\n              }\n              self.enable('stop', true);\n              self.enable('step_over', true);\n              self.enable('step_into', true);\n              self.enable('toggle_breakpoint', true);\n              self.enable('clear_all_breakpoints', true);\n              self.enable('continue', true);\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while toggling breakpoint.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while toggling breakpoint.'\n            );\n          }\n        });\n      },\n\n      clear_all_breakpoint: function(trans_id) {\n        var self = this,\n          br_list = self.GetBreakpointInformation(trans_id);\n\n        // If there is no break point to clear then we should return from here.\n        if ((br_list.length == 1) && (br_list[0].linenumber == -1))\n          return;\n\n        self.enable('stop', false);\n        self.enable('step_over', false);\n        self.enable('step_into', false);\n        self.enable('toggle_breakpoint', false);\n        self.enable('clear_all_breakpoints', false);\n        self.enable('continue', false);\n\n        var breakpoint_list = new Array();\n\n        for (var i = 0; i < br_list.length; i++) {\n          if (br_list[i].linenumber != -1) {\n            breakpoint_list.push(br_list[i].linenumber)\n          }\n        }\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.clear_all_breakpoint', {'trans_id': trans_id});\n\n        $.ajax({\n          url: baseUrl,\n          method: 'POST',\n          data: { 'breakpoint_list': breakpoint_list.join() },\n          success: function(res) {\n            if (res.data.status) {\n              for (var i = 0; i < breakpoint_list.length; i++) {\n                var info = pgTools.DirectDebug.editor.lineInfo((breakpoint_list[i] - 1));\n\n                if (info) {\n                  if (info.gutterMarkers != undefined) {\n                    pgTools.DirectDebug.editor.setGutterMarker((breakpoint_list[i] - 1), \"breakpoints\", null);\n                  }\n                }\n              }\n            }\n          self.enable('stop', true);\n          self.enable('step_over', true);\n          self.enable('step_into', true);\n          self.enable('toggle_breakpoint', true);\n          self.enable('clear_all_breakpoints', true);\n          self.enable('continue', true);\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while clearing all breakpoint.'\n            );\n          }\n        });\n      },\n\n      AddStackInformation: function(result) {\n        var self = this;\n\n        // Remove the existing created grid and update the stack values\n        if (self.stack_grid) {\n            self.stack_grid.remove();\n            self.stack_grid = null;\n        }\n\n        var DebuggerStackModel = Backbone.Model.extend({\n          defaults: {\n            name: undefined,\n            value: undefined,\n            line_no: undefined\n          }\n        });\n\n        // Collection which contains the model for function informations.\n        var StackCollection = Backbone.Collection.extend({\n          model: DebuggerStackModel\n        });\n\n        var stackGridCols = [\n          {name: 'name', label:'Name', type:'text', editable: false, cell:'string'},\n          {name: 'value', label:'Value', type:'text', editable: false, cell:'string'},\n          {name: 'line_no', label:'Line No.', type:'text', editable: false, cell:'string'}\n        ];\n\n        var my_obj = [];\n        if (result.length != 0)\n        {\n          for (var i = 0; i < result.length; i++) {\n            my_obj.push({ \"name\": result[i].targetname, \"value\": result[i].args, \"line_no\": result[i].linenumber });\n          }\n        }\n\n        var stackColl = this.stackColl = new StackCollection(my_obj);\n        this.stackColl.on('backgrid:row:selected', self.select_frame, self);\n\n        // Initialize a new Grid instance\n        var stack_grid = this.stack_grid = new Backgrid.Grid({\n          columns: stackGridCols,\n          row: Backgrid.Row.extend({\n            highlightColor: \"#D9EDF7\",\n            disabledColor: \"#F1F1F1\",\n            events: {\n              click: \"rowClick\"\n            },\n            rowClick: function(e) {\n              //Find which row is selected and depending on that send the frame id\n              for (var i = 0; i < this.model.collection.length; i++) {\n                if (this.model.collection.models[i].get('name') == this.model.get('name')) {\n                  self.frame_id_ = i;\n                  break;\n                }\n              }\n              this.model.trigger('backgrid:row:selected', this);\n              self.stack_grid.$el.find(\"td\").css(\"background-color\", this.disabledColor);\n              this.$el.find(\"td\").css(\"background-color\", this.highlightColor);\n            }\n          }),\n          collection: stackColl,\n          className: \"backgrid table-bordered\"\n        });\n\n        stack_grid.render();\n\n        // Render the stack grid into stack panel\n        pgTools.DirectDebug.stack_pane_panel.$container.find('.stack_pane').append(stack_grid.el);\n\n      },\n\n      AddResults: function(columns, result) {\n        var self = this;\n\n        // Remove the existing created grid and update the result values\n        if (self.result_grid) {\n            self.result_grid.remove();\n            self.result_grid = null;\n        }\n\n        var DebuggerResultsModel = Backbone.Model.extend({\n          defaults: {\n            name: undefined\n          }\n        });\n\n        // Collection which contains the model for function informations.\n        var ResultsCollection = Backbone.Collection.extend({\n          model: DebuggerResultsModel\n        });\n\n        var resultGridCols = [];\n        if(_.size(columns)) {\n          _.each(columns, function(c) {\n            var column = {\n                            type:'text',\n                            editable: false,\n                            cell:'string'\n                         };\n            column['name'] = column['label'] = c.name;\n            resultGridCols.push(column);\n          });\n        }\n\n        // Initialize a new Grid instance\n        var result_grid = this.result_grid = new Backgrid.Grid({\n          columns: resultGridCols,\n          collection: new ResultsCollection(result),\n          className: \"backgrid table-bordered\"\n        });\n\n        result_grid.render();\n\n        // Render the result grid into result panel\n        pgTools.DirectDebug.results_panel.$container.find('.debug_results').append(result_grid.el);\n\n      },\n\n      AddLocalVariables: function(result) {\n        var self = this;\n\n        // Remove the existing created grid and update the variables values\n        if (self.variable_grid) {\n            self.variable_grid.remove();\n            self.variable_grid = null;\n        }\n\n        var DebuggerVariablesModel = Backbone.Model.extend({\n          defaults: {\n            name: undefined,\n            type: undefined,\n            value: undefined\n          }\n        });\n\n        // Collection which contains the model for function informations.\n        var VariablesCollection = Backbone.Collection.extend({\n          model: DebuggerVariablesModel\n        });\n\n        var gridCols = [\n          {name: 'name', label:'Name', type:'text', editable: false, cell:'string'},\n          {name: 'type', label:'Type', type: 'text', editable: false, cell:'string'},\n          {name: 'value', label:'Value', type: 'text', cell: 'string'}\n        ];\n\n        var my_obj = [];\n        if (result.length != 0)\n        {\n          for (var i = 0; i < result.length; i++) {\n            if (result[i].varclass == 'L') {\n              my_obj.push({ \"name\": result[i].name, \"type\": result[i].dtype, \"value\": result[i].value});\n            }\n          }\n        }\n\n        // Initialize a new Grid instance\n        var variable_grid = this.variable_grid = new Backgrid.Grid({\n          columns: gridCols,\n          collection: new VariablesCollection(my_obj),\n          className: \"backgrid table-bordered\"\n        });\n\n        variable_grid.render();\n\n        // Render the variables grid into local variables panel\n        pgTools.DirectDebug.local_variables_panel.$container.find('.local_variables').append(variable_grid.el);\n\n      },\n\n      AddParameters: function(result) {\n        var self = this;\n\n        // Remove the existing created grid and update the parameter values\n        if (self.param_grid) {\n            self.param_grid.remove();\n            self.param_grid = null;\n        }\n\n        var DebuggerParametersModel = Backbone.Model.extend({\n          defaults: {\n            name: undefined,\n            type: undefined,\n            value: undefined\n          }\n        });\n\n        // Collection which contains the model for function informations.\n        var ParametersCollection = self.ParametersCollection = Backbone.Collection.extend({\n          model: DebuggerParametersModel\n        });\n\n        self.ParametersCollection.prototype.on('change', self.deposit_parameter_value, self);\n\n        var paramGridCols = [\n          {name: 'name', label:'Name', type:'text', editable: false, cell:'string'},\n          {name: 'type', label:'Type', type: 'text', editable: false, cell:'string'},\n          {name: 'value', label:'Value', type: 'text', cell: 'string'}\n        ];\n\n        var param_obj = [];\n        if (result.length != 0)\n        {\n          for (var i = 0; i < result.length; i++) {\n            if (result[i].varclass == 'A') {\n              param_obj.push({ \"name\": result[i].name, \"type\": result[i].dtype, \"value\": result[i].value});\n            }\n          }\n        }\n\n        // Initialize a new Grid instance\n        var param_grid = this.param_grid = new Backgrid.Grid({\n          columns: paramGridCols,\n          collection: new ParametersCollection(param_obj),\n          className: \"backgrid table-bordered\"\n        });\n\n        param_grid.render();\n\n        // Render the parameters grid into parameter panel\n        pgTools.DirectDebug.parameters_panel.$container.find('.parameters').append(param_grid.el);\n      },\n\n      deposit_parameter_value: function(model) {\n        var self = this;\n\n        // variable name and value list that is changed by user\n        var name_value_list = [];\n\n        name_value_list.push({ 'name': model.get('name'),'type': model.get('type'), 'value': model.get('value')});\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.deposit_value', {\n                        'trans_id': pgTools.DirectDebug.trans_id\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'POST',\n          data:{'data':JSON.stringify(name_value_list)},\n          success: function(res) {\n            if (res.data.status) {\n              // Get the updated variables value\n              self.GetLocalVariables(pgTools.DirectDebug.trans_id);\n              // Show the message to the user that deposit value is success or failure\n              if (res.data.result) {\n                Alertify.success(res.data.info, 3);\n              } else {\n                Alertify.error(res.data.info, 3);\n              }\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while depositing variable value.'\n            );\n          }\n        });\n      },\n\n      select_frame: function(model, selected) {\n        var self = this;\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.select_frame', {\n                        'trans_id': pgTools.DirectDebug.trans_id,\n                        'frame_id': self.frame_id_\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              pgTools.DirectDebug.editor.setValue(res.data.result[0].src);\n              self.UpdateBreakpoint(pgTools.DirectDebug.trans_id);\n              //active_line_no = self.active_line_no = (res.data.result[0].linenumber - 2);\n              pgTools.DirectDebug.editor.addLineClass((res.data.result[0].linenumber - 2), 'wrap', 'CodeMirror-activeline-background');\n\n              // Call function to create and update local variables ....\n              self.GetLocalVariables(pgTools.DirectDebug.trans_id);\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while selecting frame.'\n            );\n          }\n        });\n      },\n    }\n  )\n\n  /*\n    Debugger tool var view to create the button toolbar and listen to the button click event and inform the\n    controller about the click and controller will take the action for the specified button click.\n  */\n  var DebuggerToolbarView = Backbone.View.extend({\n    el: '#btn-toolbar',\n    initialize: function() {\n      controller.on('pgDebugger:button:state:stop', this.enable_stop, this);\n      controller.on('pgDebugger:button:state:step_over', this.enable_step_over, this);\n      controller.on('pgDebugger:button:state:step_into', this.enable_step_into, this);\n      controller.on('pgDebugger:button:state:continue', this.enable_continue, this);\n      controller.on('pgDebugger:button:state:toggle_breakpoint', this.enable_toggle_breakpoint, this);\n      controller.on('pgDebugger:button:state:clear_all_breakpoints', this.enable_clear_all_breakpoints, this);\n    },\n    events: {\n        'click .btn-stop': 'on_stop',\n        'click .btn-clear-breakpoint': 'on_clear_all_breakpoint',\n        'click .btn-toggle-breakpoint': 'on_toggle_breakpoint',\n        'click .btn-continue': 'on_continue',\n        'click .btn-step-over': 'on_step_over',\n        'click .btn-step-into': 'on_step_into'\n    },\n    enable_stop: function(enable) {\n      var $btn = this.$el.find('.btn-stop');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n    enable_step_over: function(enable) {\n      var $btn = this.$el.find('.btn-step-over');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n    enable_step_into: function(enable) {\n      var $btn = this.$el.find('.btn-step-into');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n    enable_continue: function(enable) {\n      var $btn = this.$el.find('.btn-continue');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n    enable_toggle_breakpoint: function(enable) {\n      var $btn = this.$el.find('.btn-toggle-breakpoint');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n    enable_clear_all_breakpoints: function(enable) {\n      var $btn = this.$el.find('.btn-clear-breakpoint');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n\n    on_stop: function() {\n      controller.Stop(pgTools.DirectDebug.trans_id);\n    },\n    on_clear_all_breakpoint: function() {\n      controller.clear_all_breakpoint(pgTools.DirectDebug.trans_id);\n    },\n    on_toggle_breakpoint: function() {\n      controller.toggle_breakpoint(pgTools.DirectDebug.trans_id);\n    },\n    on_continue: function() {\n      controller.Continue(pgTools.DirectDebug.trans_id);\n    },\n    on_step_over: function() {\n      controller.Step_over(pgTools.DirectDebug.trans_id);\n    },\n    on_step_into: function() {\n      controller.Step_into(pgTools.DirectDebug.trans_id);\n    },\n  });\n\n\n  /*\n    Function is responsible to create the new wcDocker instance for debugger and initialize the debugger panel inside\n    the docker instance.\n  */\n  var DirectDebug = function() {};\n\n  _.extend(DirectDebug.prototype, {\n    init: function(trans_id, debug_type) { /* We should get the transaction id from the server during initialization here */\n      // We do not want to initialize the module multiple times.\n\n      var self = this;\n      _.bindAll(pgTools.DirectDebug, 'messages');\n\n      if (this.initialized)\n          return;\n\n      this.initialized = true;\n      this.trans_id = trans_id;\n      this.debug_type = debug_type;\n      this.first_time_indirect_debug = false;\n      this.direct_execution_completed = false;\n      this.polling_timeout_idle = false;\n      this.debug_restarted = false;\n      this.is_user_aborted_debugging = false;\n      this.is_polling_required = true; // Flag to stop unwanted ajax calls\n\n      var docker = this.docker = new wcDocker(\n          '#container', {\n          allowContextMenu: false,\n          allowCollapse: false,\n          themePath: url_for('static', {'filename': 'css'}),\n          theme: 'webcabin.overrides.css'\n        });\n\n      this.panels = [];\n\n      // Below code will be executed for indirect debugging\n      // indirect debugging - 0  and for direct debugging - 1\n      if (trans_id != undefined && !debug_type) {\n        // Make ajax call to execute the and start the target for execution\n        var baseUrl = url_for('debugger.start_listener', {'trans_id': trans_id });\n\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              self.intializePanels();\n              controller.poll_result(trans_id);\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while starting debugging listener.'\n            );\n          }\n        });\n      }\n      else if (trans_id != undefined && debug_type)\n      {\n        // Make ajax call to execute the and start the target for execution\n        var baseUrl = url_for('debugger.start_listener', {'trans_id': trans_id });\n\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              self.messages(trans_id);\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while starting debugging listener.'\n            );\n          }\n        });\n      }\n      else\n        this.intializePanels();\n    },\n\n    // Read the messages of the database server and get the port ID and attach the executer to that port.\n    messages: function(trans_id) {\n      var self = this;\n      // Make ajax call to listen the database message\n      var baseUrl = url_for('debugger.messages', {'trans_id': trans_id });\n\n      $.ajax({\n        url: baseUrl,\n        method: 'GET',\n        success: function(res) {\n          if (res.data.status === 'Success') {\n            self.intializePanels();\n            // If status is Success then find the port number to attach the executer.\n            //self.start_execution(trans_id, res.data.result);\n            controller.start_execution(trans_id, res.data.result);\n          }\n          else if (res.data.status === 'Busy') {\n            // If status is Busy then poll the result by recursive call to the poll function\n            self.messages(trans_id);\n          }\n          else if (res.data.status === 'NotConnected') {\n            Alertify.alert(\n              'Not connected to server or connection with the server has been closed.',\n              res.data.result\n            );\n          }\n        },\n        error: function(e) {\n          Alertify.alert(\n            'Debugger Error',\n            'Error while fetching messages information.'\n          );\n        }\n      });\n\n    },\n\n    // Callback function when user click on gutters of codemirror to set/clear the breakpoint\n    onBreakPoint: function(cm, m, gutter) {\n      var self = this;\n\n      // If breakpoint gutter is clicked and execution is not completed then only set the breakpoint\n      if (gutter == \"breakpoints\" && !pgTools.DirectDebug.polling_timeout_idle ) {\n        // We may want to check, if break-point is allowed at this moment or not\n        var info = cm.lineInfo(m);\n\n        // If gutterMarker is undefined that means there is no marker defined previously\n        // So we need to set the breakpoint command here...\n        if (info.gutterMarkers == undefined) {\n          controller.set_breakpoint(self.trans_id,m+1,1); //set the breakpoint\n        }\n        else {\n          if (info.gutterMarkers.breakpoints == undefined) {\n            controller.set_breakpoint(self.trans_id,m+1,1); //set the breakpoint\n          }\n          else {\n            controller.set_breakpoint(self.trans_id,m+1,0); //clear the breakpoint\n          }\n        }\n\n        // If line folding is defined then gutterMarker will be defined so\n        // we need to find out 'breakpoints' information\n        var markers = info.gutterMarkers;\n        if (markers != undefined && info.gutterMarkers.breakpoints == undefined)\n          markers = info.gutterMarkers.breakpoints\n\n        cm.setGutterMarker(\n          m, \"breakpoints\", markers ? null : function() {\n            var marker = document.createElement(\"div\");\n\n            marker.style.color = \"#822\";\n            marker.innerHTML = \"●\";\n\n            return marker;\n        }());\n      }\n    },\n\n    // Create the debugger layout with splitter and display the appropriate data received from server.\n    intializePanels: function() {\n      var self = this;\n      this.registerPanel(\n        'code', false, '100%', '50%',\n        function(panel) {\n\n            // Create the parameters panel to display the arguments of the functions\n            var parameters = new pgAdmin.Browser.Panel({\n              name: 'parameters',\n              title: gettext('Parameters'),\n              width: '100%',\n              height:'100%',\n              isCloseable: false,\n              isPrivate: true,\n              content: '<div id =\"parameters\" class=\"parameters\"></div>'\n            })\n\n            // Create the Local variables panel to display the local variables of the function.\n            var local_variables = new pgAdmin.Browser.Panel({\n              name: 'local_variables',\n              title: gettext('Local variables'),\n              width: '100%',\n              height:'100%',\n              isCloseable: false,\n              isPrivate: true,\n              content: '<div id =\"local_variables\" class=\"local_variables\"></div>'\n            })\n\n            // Create the messages panel to display the message returned from the database server\n            var messages = new pgAdmin.Browser.Panel({\n              name: 'messages',\n              title: gettext('Messages'),\n              width: '100%',\n              height:'100%',\n              isCloseable: false,\n              isPrivate: true,\n              content: '<div id=\"messages\" class=\"messages\"></div>'\n            })\n\n            // Create the result panel to display the result after debugging the function\n            var results = new pgAdmin.Browser.Panel({\n              name: 'results',\n              title: gettext('Results'),\n              width: '100%',\n              height:'100%',\n              isCloseable: false,\n              isPrivate: true,\n              content: '<div id=\"debug_results\" class=\"debug_results\"></div>'\n            })\n\n            // Create the stack pane panel to display the debugging stack information.\n            var stack_pane = new pgAdmin.Browser.Panel({\n              name: 'stack_pane',\n              title: gettext('Stack'),\n              width: '100%',\n              height:'100%',\n              isCloseable: false,\n              isPrivate: true,\n              content: '<div id=\"stack_pane\" class=\"stack_pane\"></div>'\n            })\n\n            // Load all the created panels\n            parameters.load(self.docker);\n            local_variables.load(self.docker);\n            messages.load(self.docker);\n            results.load(self.docker);\n            stack_pane.load(self.docker);\n        });\n\n        self.code_editor_panel = self.docker.addPanel('code', wcDocker.DOCK.TOP );\n\n        self.parameters_panel = self.docker.addPanel(\n          'parameters', wcDocker.DOCK.BOTTOM, self.code_editor_panel);\n        self.local_variables_panel = self.docker.addPanel('local_variables', wcDocker.DOCK.STACKED, self.parameters_panel, {\n          tabOrientation: wcDocker.TAB.TOP\n        });\n        self.messages_panel = self.docker.addPanel('messages', wcDocker.DOCK.STACKED, self.parameters_panel);\n        self.results_panel = self.docker.addPanel(\n          'results', wcDocker.DOCK.STACKED, self.parameters_panel);\n        self.stack_pane_panel = self.docker.addPanel(\n          'stack_pane', wcDocker.DOCK.STACKED, self.parameters_panel);\n\n        var editor_pane = $('<div id=\"stack_editor_pane\" class=\"full-container-pane info\"></div>');\n        var code_editor_area = $('<textarea id=\"debugger-editor-textarea\"></textarea>').append(editor_pane);\n        self.code_editor_panel.layout().addItem(code_editor_area);\n\n        // To show the line-number and set breakpoint marker details by user.\n        var editor = self.editor = CodeMirror.fromTextArea(\n          code_editor_area.get(0), {\n          lineNumbers: true,\n          foldOptions: {\n            widget: \"\\u2026\"\n          },\n          foldGutter: {\n            rangeFinder: CodeMirror.fold.combine(CodeMirror.pgadminBeginRangeFinder, CodeMirror.pgadminIfRangeFinder,\n                                                 CodeMirror.pgadminLoopRangeFinder, CodeMirror.pgadminCaseRangeFinder)\n          },\n          gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\", \"breakpoints\"],\n          mode: \"text/x-pgsql\",\n          readOnly: true,\n          extraKeys: pgAdmin.Browser.editor_shortcut_keys,\n          tabSize: pgAdmin.Browser.editor_options.tabSize,\n          lineWrapping: pgAdmin.Browser.editor_options.wrapCode,\n          autoCloseBrackets: pgAdmin.Browser.editor_options.insert_pair_brackets,\n          matchBrackets: pgAdmin.Browser.editor_options.brace_matching\n        });\n\n        // On loading the docker, register the callbacks\n        var onLoad = function() {\n          self.docker.finishLoading(100);\n          self.docker.off(wcDocker.EVENT.LOADED);\n          // Register the callback when user set/clear the breakpoint on gutter area.\n          self.editor.on(\"gutterClick\", self.onBreakPoint.bind(self), self);\n        };\n\n        self.docker.startLoading(gettext('Loading...'));\n        self.docker.on(wcDocker.EVENT.LOADED, onLoad);\n\n        // Create the toolbar view for debugging the function\n        this.toolbarView = new DebuggerToolbarView();\n    },\n\n    // Register the panel with new debugger docker instance.\n    registerPanel: function(name, title, width, height, onInit) {\n      var self = this;\n\n      this.docker.registerPanelType(name, {\n        title: title,\n        isPrivate: true,\n        onCreate: function(panel) {\n          self.panels[name] = panel;\n          panel.initSize(width, height);\n          if (!title)\n            panel.title(false);\n          else\n            panel.title(title);\n          panel.closeable(false);\n          panel.layout().addItem(\n            $('<div>', {'class': 'pg-debugger-panel'})\n          );\n          if (onInit) {\n            onInit.apply(self, [panel]);\n          }\n        }\n      });\n    }\n  });\n\n  pgTools.DirectDebug = new DirectDebug();\n  pgTools.DirectDebug['jquery'] = $;\n\n  return pgTools.DirectDebug;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/debugger/static/js/direct.js","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n// This file contains common utilities functions used in sqleditor modules\n\ndefine(['jquery'],\n  function ($) {\n    var sqlEditorUtils = {\n      /* Reference link http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n       * Modified as per requirement.\n       */\n      epicRandomString: function(length) {\n        var s = [];\n        var hexDigits = \"0123456789abcdef\";\n        for (var i = 0; i < 36; i++) {\n            s[i] = hexDigits.substr(\n                    Math.floor(Math.random() * 0x10), 1\n                  );\n        }\n        // bits 12-15 of the time_hi_and_version field to 0010\n        s[14] = \"4\";\n        // bits 6-7 of the clock_seq_hi_and_reserved to 01\n        s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);\n        s[8] = s[13] = s[18] = s[23] = \"-\";\n\n        var uuid = s.join(\"\");\n        return uuid.replace(/-/g, '').substr(0, length);\n      },\n\n      // Returns a unique hash for input string\n      getHash: function(input) {\n        var hash = 0, len = input.length;\n        for (var i = 0; i < len; i++) {\n          hash  = ((hash << 5) - hash) + input.charCodeAt(i);\n          hash |= 0; // to 32bit integer\n        }\n        return hash;\n      },\n      calculateColumnWidth: function (text) {\n        // Calculate column header width based on column name or type\n        // Create a temporary element with given label, append to body\n        // calculate its width and remove the element.\n        $('body').append(\n            '<span id=\"pg_text\" style=\"visibility: hidden;\">'+ text + '</span>'\n        );\n        var width = $('#pg_text').width() + 23;\n        $('#pg_text').remove(); // remove element\n\n        return width;\n      },\n      capitalizeFirstLetter: function (string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n      }\n    };\n    return sqlEditorUtils;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/sqleditor_utils.js","define('pgadmin.node.server', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser',\n  'pgadmin.server.supported_servers',\n  'pgadmin.user_management.current_user',\n  'pgadmin.alertifyjs', 'pgadmin.browser.server.privilege'\n], function(\n  gettext, url_for, $, _, S, pgAdmin, pgBrowser,\n  supported_servers, current_user, alertify\n) {\n\n  if (!pgBrowser.Nodes['server']) {\n    var SSL_MODES = ['prefer', 'require', 'verify-ca', 'verify-full'];\n\n    var SecurityModel = pgBrowser.SecLabelModel = pgBrowser.Node.Model.extend({\n      defaults: {\n        provider: undefined,\n        label: undefined\n      },\n      schema: [{\n        id: 'provider', label: gettext('Provider'),\n        type: 'text', editable: true,\n        cellHeaderClasses:'width_percent_50'\n      },{\n        id: 'label', label: gettext('Security Label'),\n        type: 'text', editable: true,\n        cellHeaderClasses:'override_label_class_font_size'\n      }],\n      validate: function() {\n        var err = {},\n          errmsg = null;\n        this.errorModel.clear();\n\n        if (_.isUndefined(this.get('label')) ||\n          _.isNull(this.get('label')) ||\n          String(this.get('label')).replace(/^\\s+|\\s+$/g, '') == '') {\n            errmsg = gettext('Label must be specified.');\n            this.errorModel.set('label', errmsg);\n            return errmsg;\n        }\n\n        return null;\n      }\n    });\n\n    pgAdmin.Browser.Nodes['server'] = pgAdmin.Browser.Node.extend({\n      parent_type: 'server_group',\n      type: 'server',\n      dialogHelp: url_for('help.static', {'filename': 'server_dialog.html'}),\n      label: gettext('Server'),\n      canDrop: true,\n      hasStatistics: true,\n      hasCollectiveStatistics: true,\n      can_expand: function(d) {\n        return d && d.connected;\n      },\n      Init: function() {\n\n        /* Avoid multiple registration of same menus */\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_server_on_sg', node: 'server_group', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 1, label: gettext('Server...'),\n          data: {action: 'create'}, icon: 'wcTabIcon icon-server'\n        },{\n          name: 'create_server', node: 'server', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 3, label: gettext('Server...'),\n          data: {action: 'create'}, icon: 'wcTabIcon icon-server'\n        },{\n          name: 'connect_server', node: 'server', module: this,\n          applies: ['object', 'context'], callback: 'connect_server',\n          category: 'connect', priority: 4, label: gettext('Connect Server'),\n          icon: 'fa fa-link', enable : 'is_not_connected'\n        },{\n          name: 'disconnect_server', node: 'server', module: this,\n          applies: ['object', 'context'], callback: 'disconnect_server',\n          category: 'drop', priority: 5, label: gettext('Disconnect Server'),\n          icon: 'fa fa-chain-broken', enable : 'is_connected'\n        },{\n          name: 'reload_configuration', node: 'server', module: this,\n          applies: ['tools', 'context'], callback: 'reload_configuration',\n          category: 'reload', priority: 6, label: gettext('Reload Configuration'),\n          icon: 'fa fa-repeat', enable : 'enable_reload_config'\n        },{\n          name: 'restore_point', node: 'server', module: this,\n          applies: ['tools', 'context'], callback: 'restore_point',\n          category: 'restore', priority: 9, label: gettext('Add Named Restore Point...'),\n          icon: 'fa fa-anchor', enable : 'is_applicable'\n        },{\n          name: 'change_password', node: 'server', module: this,\n          applies: ['file'], callback: 'change_password',\n          label: gettext('Change Password...'),\n          icon: 'fa fa-lock', enable : 'is_connected'\n        },{\n          name: 'wal_replay_pause', node: 'server', module: this,\n          applies: ['tools', 'context'], callback: 'pause_wal_replay',\n          category: 'wal_replay_pause', priority: 7, label: gettext('Pause Replay of WAL'),\n          icon: 'fa fa-pause-circle', enable : 'wal_pause_enabled'\n        },{\n          name: 'wal_replay_resume', node: 'server', module: this,\n          applies: ['tools', 'context'], callback: 'resume_wal_replay',\n          category: 'wal_replay_resume', priority: 8, label: gettext('Resume Replay of WAL'),\n          icon: 'fa fa-play-circle', enable : 'wal_resume_enabled'\n         }]);\n\n        _.bindAll(this, 'connection_lost');\n        pgBrowser.Events.on(\n          'pgadmin:server:connection:lost', this.connection_lost\n        );\n      },\n      is_not_connected: function(node) {\n        return (node && node.connected != true);\n      },\n      is_connected: function(node) {\n        return (node && node.connected == true);\n      },\n      enable_reload_config: function(node) {\n        // Must be connected & is Super user\n        if (node && node._type == \"server\" &&\n            node.connected && node.user.is_superuser) {\n          return true\n        }\n        return false;\n      },\n      is_applicable: function(node) {\n        // Must be connected & super user & not in recovery mode\n        if (node && node._type == \"server\" &&\n            node.connected && node.user.is_superuser\n            && node.in_recovery == false) {\n            return true;\n        }\n        return false;\n      },\n      wal_pause_enabled: function(node) {\n        // Must be connected & is Super user & in Recovery mode\n        if (node && node._type == \"server\" &&\n            node.connected && node.user.is_superuser\n            && node.in_recovery == true\n            && node.wal_pause == false) {\n            return true;\n        }\n        return false;\n      },\n      wal_resume_enabled: function(node) {\n        // Must be connected & is Super user & in Recovery mode\n        if (node && node._type == \"server\" &&\n            node.connected && node.user.is_superuser\n            && node.in_recovery == true\n            && node.wal_pause == true) {\n            return true;\n        }\n        return false;\n      },\n      callbacks: {\n        /* Connect the server */\n        connect_server: function(args){\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          connect_to_server(obj, d, t, i, false);\n          return false;\n        },\n        /* Disconnect the server */\n        disconnect_server: function(args, notify) {\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = 'item' in input ? input.item : t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          notify = notify || _.isUndefined(notify) || _.isNull(notify);\n\n          var disconnect = function() {\n            $.ajax({\n              url: obj.generate_url(i, 'connect', d, true),\n              type:'DELETE',\n              success: function(res) {\n                if (res.success == 1) {\n                  alertify.success(res.info);\n                  d = t.itemData(i);\n                  t.removeIcon(i);\n                  d.connected = false;\n                  d.icon = 'icon-server-not-connected';\n                  t.addIcon(i, {icon: d.icon});\n                  obj.callbacks.refresh.apply(obj, [null, i]);\n                  if (pgBrowser.serverInfo && d._id in pgBrowser.serverInfo) {\n                    delete pgBrowser.serverInfo[d._id]\n                  }\n                  pgBrowser.enable_disable_menus(i);\n                  // Trigger server disconnect event\n                  pgBrowser.Events.trigger(\n                    'pgadmin:server:disconnect',\n                    {item: i, data: d}, false\n                  );\n                }\n                else {\n                  try {\n                    alertify.error(res.errormsg);\n                  } catch (e) {}\n                  t.unload(i);\n                }\n              },\n              error: function(xhr, status, error) {\n                try {\n                  var err = $.parseJSON(xhr.responseText);\n                  if (err.success == 0) {\n                    alertify.error(err.errormsg);\n                  }\n                } catch (e) {}\n                t.unload(i);\n              }\n            });\n          };\n\n          if (notify) {\n            alertify.confirm(\n              gettext('Disconnect server'),\n              gettext(\n                'Are you sure you want to disconnect the server %(server)s?',\n                {server: d.label}\n              ),\n              function(evt) { disconnect(); },\n              function(evt) { return true;}\n            );\n          } else {\n            disconnect();\n          }\n\n          return false;\n        },\n        /* Connect the server (if not connected), before opening this node */\n        beforeopen: function(item, data) {\n\n          if(!data || data._type != 'server') {\n            return false;\n          }\n\n          pgBrowser.tree.addIcon(item, {icon: data.icon});\n          if (!data.connected) {\n            connect_to_server(this, data, pgBrowser.tree, item, false);\n\n            return false;\n          }\n          return true;\n        },\n        added: function(item, data) {\n\n          pgBrowser.serverInfo = pgBrowser.serverInfo || {};\n          pgBrowser.serverInfo[data._id] = _.extend({}, data);\n\n          // Call added method of node.js\n          pgAdmin.Browser.Node.callbacks.added.apply(this, arguments);\n          return true;\n        },\n        /* Reload configuration */\n        reload_configuration: function(args){\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          alertify.confirm(\n            gettext('Reload server configuration'),\n            S( gettext('Are you sure you want to reload the server configuration on %s?')).sprintf(d.label).value(),\n            function(evt) {\n              $.ajax({\n                url: obj.generate_url(i, 'reload', d, true),\n                method:'GET',\n                success: function(res) {\n                  if (res.data.status) {\n                    alertify.success(res.data.result);\n                  }\n                  else {\n                    alertify.error(res.data.result);\n                  }\n                },\n                error: function(xhr, status, error) {\n                  try {\n                    var err = $.parseJSON(xhr.responseText);\n                    if (err.success == 0) {\n                      alertify.error(err.errormsg);\n                    }\n                  } catch (e) {}\n                  t.unload(i);\n                }\n              });\n          },\n          function(evt) {\n              return true;\n          });\n\n          return false;\n        },\n        /* Add restore point */\n        restore_point: function(args) {\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          alertify.prompt( gettext('Enter the name of the restore point to add'), '',\n           // We will execute this function when user clicks on the OK button\n           function(evt, value) {\n             // If user has provided a value, send it to the server\n             if(!_.isUndefined(value) && !_.isNull(value) && value !== ''\n                && String(value).replace(/^\\s+|\\s+$/g, '') !== '') {\n              $.ajax({\n                url: obj.generate_url(i, 'restore_point', d, true),\n                method:'POST',\n                data:{ 'value': JSON.stringify(value) },\n                success: function(res) {\n                  alertify.success(res.data.result, 10);\n                },\n                error: function(xhr, status, error) {\n                  try {\n                    var err = $.parseJSON(xhr.responseText);\n                    if (err.success == 0) {\n                      alertify.error(err.errormsg, 10);\n                    }\n                  } catch (e) {}\n                  t.unload(i);\n                }\n              });\n             } else {\n                evt.cancel = true;\n                alertify.error( gettext('Please enter a valid name.'), 10);\n             }\n           },\n           // We will execute this function when user clicks on the Cancel button\n           // Do nothing just close it\n           function(evt, value) {\n             evt.cancel = false;\n           }\n          ).set({'title':'Restore point name'});\n        },\n\n        /* Change password */\n        change_password: function(args){\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined,\n            node = d && pgBrowser.Nodes[d._type],\n            url = obj.generate_url(i, 'change_password', d, true);\n\n          if (!d)\n            return false;\n\n          if(!alertify.changeServerPassword) {\n            var newPasswordModel = Backbone.Model.extend({\n                defaults: {\n                  user_name: undefined,\n                  password: undefined,\n                  newPassword: undefined,\n                  confirmPassword: undefined\n                },\n                validate: function() {\n                  return null;\n                }\n              }),\n              passwordChangeFields = [{\n                  name: 'user_name', label: gettext('User'),\n                  type: 'text', disabled: true, control: 'input'\n                },{\n                  name: 'password', label: gettext('Current Password'),\n                  type: 'password', disabled: false, control: 'input',\n                  required: true\n                },{\n                  name: 'newPassword', label: gettext('New Password'),\n                  type: 'password', disabled: false, control: 'input',\n                  required: true\n                },{\n                  name: 'confirmPassword', label: gettext('Confirm Password'),\n                  type: 'password', disabled: false, control: 'input',\n                  required: true\n                }];\n\n\n            alertify.dialog('changeServerPassword' ,function factory() {\n              return {\n                 main: function(params) {\n                  var title = gettext('Change Password ');\n                  this.set('title', title);\n                  this.user_name = params.user.name;\n                 },\n                 setup:function() {\n                  return {\n                    buttons: [{\n                      text: gettext('Ok'), key: 13, className: 'btn btn-primary', attrs:{name:'submit'}\n                      },{\n                      text: gettext('Cancel'), key: 27, className: 'btn btn-danger', attrs:{name:'cancel'}\n                    }],\n                    // Set options for dialog\n                    options: {\n                      padding : !1,\n                      overflow: !1,\n                      modal:false,\n                      resizable: true,\n                      maximizable: true,\n                      pinnable: false,\n                      closableByDimmer: false\n                    }\n                  };\n                },\n                hooks: {\n                  // triggered when the dialog is closed\n                  onclose: function() {\n                    if (this.view) {\n                      this.view.remove({data: true, internal: true, silent: true});\n                    }\n                  }\n                },\n                prepare: function() {\n                  var self = this;\n                  // Disable Backup button until user provides Filename\n                  this.__internal.buttons[0].element.disabled = true;\n                  var $container = $(\"<div class='change_password'></div>\"),\n                    newpasswordmodel = new newPasswordModel({'user_name': self.user_name});\n\n                  var view = this.view = new Backform.Form({\n                    el: $container,\n                    model: newpasswordmodel,\n                    fields: passwordChangeFields});\n\n                  view.render();\n\n                  this.elements.content.appendChild($container.get(0));\n\n                  // Listen to model & if filename is provided then enable Backup button\n                  this.view.model.on('change', function() {\n                    var that = this,\n                        password = this.get('password'),\n                        newPassword = this.get('newPassword'),\n                        confirmPassword = this.get('confirmPassword');\n\n                    if (_.isUndefined(password) || _.isNull(password) || password == '' ||\n                        _.isUndefined(newPassword) || _.isNull(newPassword) || newPassword == '' ||\n                        _.isUndefined(confirmPassword) || _.isNull(confirmPassword) || confirmPassword == '') {\n                      self.__internal.buttons[0].element.disabled = true;\n                    } else if (newPassword != confirmPassword) {\n                      self.__internal.buttons[0].element.disabled = true;\n\n                      this.errorTimeout && clearTimeout(this.errorTimeout);\n                      this.errorTimeout = setTimeout(function() {\n                        that.errorModel.set('confirmPassword', gettext('Passwords do not match.'));\n                        } ,400);\n                    }else {\n                      that.errorModel.clear();\n                      self.__internal.buttons[0].element.disabled = false;\n                    }\n                  });\n                },\n                // Callback functions when click on the buttons of the Alertify dialogs\n                callback: function(e) {\n                  if (e.button.element.name == \"submit\") {\n                    var self = this,\n                        args =  this.view.model.toJSON();\n\n                    e.cancel = true;\n\n                    $.ajax({\n                      url: url,\n                      method:'POST',\n                      data:{'data': JSON.stringify(args) },\n                      success: function(res) {\n                        if (res.success) {\n                          alertify.success(res.info);\n                          self.close();\n                        } else {\n                          alertify.error(res.errormsg);\n                        }\n                      },\n                      error: function(xhr, status, error) {\n                        try {\n                          var err = $.parseJSON(xhr.responseText);\n                          if (err.success == 0) {\n                            alertify.error(err.errormsg);\n                          }\n                        } catch (e) {}\n                      }\n                    });\n                  }\n               }\n              };\n            });\n          }\n\n          alertify.changeServerPassword(d).resizeTo('40%','52%');\n          return false;\n        },\n\n        /* Pause WAL Replay */\n        pause_wal_replay: function(args) {\n          var input = args || {},\n              obj = this,\n              t = pgBrowser.tree,\n              i = input.item || t.selected(),\n              d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          var data = d;\n          $.ajax({\n            url: obj.generate_url(i, 'wal_replay' , d, true),\n            type:'DELETE',\n            dataType: \"json\",\n            success: function(res) {\n              if (res.success == 1) {\n                alertify.success(res.info);\n                t.itemData(i).wal_pause=res.data.wal_pause;\n                t.unload(i);\n                t.setInode(i);\n                t.deselect(i);\n                // Fetch updated data from server\n                setTimeout(function() {\n                  t.select(i);\n                }, 10);\n              }\n            },\n            error: function(xhr, status, error) {\n              try {\n                var err = $.parseJSON(xhr.responseText);\n                if (err.success == 0) {\n                  msg = S(err.errormsg).value();\n                  alertify.error(err.errormsg);\n                }\n              } catch (e) {}\n              t.unload(i);\n            }\n          })\n        },\n\n        /* Resume WAL Replay */\n        resume_wal_replay: function(args) {\n          var input = args || {},\n              obj = this,\n              t = pgBrowser.tree,\n              i = input.item || t.selected(),\n              d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          var data = d;\n          $.ajax({\n            url: obj.generate_url(i, 'wal_replay' , d, true),\n            type:'PUT',\n            dataType: \"json\",\n            success: function(res) {\n              if (res.success == 1) {\n                alertify.success(res.info);\n                t.itemData(i).wal_pause=res.data.wal_pause;\n                t.unload(i);\n                t.setInode(i);\n                t.deselect(i);\n                // Fetch updated data from server\n                setTimeout(function() {\n                  t.select(i);\n                }, 10);\n              }\n            },\n            error: function(xhr, status, error) {\n              try {\n                var err = $.parseJSON(xhr.responseText);\n                if (err.success == 0) {\n                  msg = S(err.errormsg).value();\n                  alertify.error(err.errormsg);\n                }\n              } catch (e) {}\n              t.unload(i);\n            }\n          })\n        }\n      },\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          gid: undefined,\n          id: undefined,\n          name: '',\n          sslmode: 'prefer',\n          host: '',\n          hostaddr: '',\n          port: 5432,\n          db: 'postgres',\n          username: current_user.name,\n          role: null,\n          connect_now: true,\n          password: undefined,\n          save_password: false,\n          db_res: '',\n          passfile: undefined,\n          sslcompression: false,\n          sslcert: undefined,\n          sslkey: undefined,\n          sslrootcert: undefined,\n          sslcrl: undefined\n        },\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            this.set({'gid': args.node_info['server_group']._id});\n          }\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n        schema: [{\n          id: 'id', label: gettext('ID'), type: 'int', mode: ['properties']\n        },{\n          id: 'name', label: gettext('Name'), type: 'text',\n          mode: ['properties', 'edit', 'create']\n        },{\n          id: 'gid', label: gettext('Server group'), type: 'int',\n          control: 'node-list-by-id', node: 'server_group',\n          mode: ['create', 'edit'], select2: {allowClear: false}\n        },{\n          id: 'server_type', label: gettext('Server type'), type: 'options',\n          mode: ['properties'], visible: 'isConnected',\n          'options': supported_servers\n        },{\n          id: 'connected', label: gettext('Connected?'), type: 'switch',\n          mode: ['properties'], group: gettext('Connection'), 'options': {\n            'onText':   'True', 'offText':  'False', 'onColor':  'success',\n            'offColor': 'danger', 'size': 'small'\n          }\n        },{\n          id: 'version', label: gettext('Version'), type: 'text', group: null,\n          mode: ['properties'], visible: 'isConnected'\n        },{\n          id: 'connect_now', controlLabel: gettext('Connect now?'), type: 'checkbox',\n          group: null, mode: ['create']\n        },{\n          id: 'comment', label: gettext('Comments'), type: 'multiline', group: null,\n          mode: ['properties', 'edit', 'create']\n        },{\n          id: 'host', label: gettext('Host name/address'), type: 'text', group: gettext('Connection'),\n          mode: ['properties', 'edit', 'create'], disabled: 'isConnected'\n        },{\n          id: 'port', label: gettext('Port'), type: 'int', group: gettext('Connection'),\n          mode: ['properties', 'edit', 'create'], disabled: 'isConnected', min: 1024, max: 65535\n        },{\n          id: 'db', label: gettext('Maintenance database'), type: 'text', group: gettext('Connection'),\n          mode: ['properties', 'edit', 'create'], disabled: 'isConnected'\n        },{\n          id: 'username', label: gettext('Username'), type: 'text', group: gettext('Connection'),\n          mode: ['properties', 'edit', 'create'], disabled: 'isConnected'\n        },{\n          id: 'password', label: gettext('Password'), type: 'password',\n          group: gettext('Connection'), control: 'input', mode: ['create'], deps: ['connect_now'],\n          visible: function(m) {\n            return m.get('connect_now') && m.isNew();\n          }\n        },{\n          id: 'save_password', controlLabel: gettext('Save password?'), type: 'checkbox',\n          group: gettext('Connection'), mode: ['create'], deps: ['connect_now'],\n          visible: function(m) {\n            return m.get('connect_now') && m.isNew();\n          },\n          disabled: function(m) {\n            return !current_user.allow_save_password;\n          }\n        },{\n          id: 'role', label: gettext('Role'), type: 'text', group: gettext('Connection'),\n          mode: ['properties', 'edit', 'create'], disabled: 'isConnected'\n        },{\n          id: 'sslmode', label: gettext('SSL mode'), type: 'options', group: gettext('SSL'),\n          mode: ['properties', 'edit', 'create'], disabled: 'isConnected',\n          'options': [\n            {label: 'Allow', value: 'allow'},\n            {label: 'Prefer', value: 'prefer'},\n            {label: 'Require', value: 'require'},\n            {label: 'Disable', value: 'disable'},\n            {label: 'Verify-CA', value: 'verify-ca'},\n            {label: 'Verify-Full', value: 'verify-full'}\n          ]\n        },{\n          id: 'sslcert', label: gettext('Client certificate'), type: 'text',\n          group: gettext('SSL'), mode: ['edit', 'create'],\n          disabled: 'isSSL', control: Backform.FileControl,\n          dialog_type: 'select_file', supp_types: ['*'],\n          deps: ['sslmode']\n        },{\n          id: 'sslkey', label: gettext('Client certificate key'), type: 'text',\n          group: gettext('SSL'), mode: ['edit', 'create'],\n          disabled: 'isSSL', control: Backform.FileControl,\n          dialog_type: 'select_file', supp_types: ['*'],\n          deps: ['sslmode']\n        },{\n          id: 'sslrootcert', label: gettext('Root certificate'), type: 'text',\n          group: gettext('SSL'), mode: ['edit', 'create'],\n          disabled: 'isSSL', control: Backform.FileControl,\n          dialog_type: 'select_file', supp_types: ['*'],\n          deps: ['sslmode']\n        },{\n          id: 'sslcrl', label: gettext('Certificate revocation list'), type: 'text',\n          group: gettext('SSL'), mode: ['edit', 'create'],\n          disabled: 'isSSL', control: Backform.FileControl,\n          dialog_type: 'select_file', supp_types: ['*'],\n          deps: ['sslmode']\n        },{\n          id: 'sslcompression', label: gettext('SSL compression?'), type: 'switch',\n          mode: ['edit', 'create'], group: gettext('SSL'),\n          'options': { 'onText':   'True', 'offText':  'False',\n          'onColor':  'success', 'offColor': 'danger', 'size': 'small'},\n          deps: ['sslmode'], disabled: 'isSSL'\n        },{\n          id: 'sslcert', label: gettext('Client certificate'), type: 'text',\n          group: gettext('SSL'), mode: ['properties'],\n          deps: ['sslmode'],\n          visible: function(m) {\n            var sslcert = m.get('sslcert');\n            return !_.isUndefined(sslcert) && !_.isNull(sslcert);\n          }\n        },{\n          id: 'sslkey', label: gettext('Client certificate key'), type: 'text',\n          group: gettext('SSL'), mode: ['properties'],\n          deps: ['sslmode'],\n          visible: function(m) {\n            var sslkey = m.get('sslkey');\n            return !_.isUndefined(sslkey) && !_.isNull(sslkey);\n          }\n        },{\n          id: 'sslrootcert', label: gettext('Root certificate'), type: 'text',\n          group: gettext('SSL'), mode: ['properties'],\n          deps: ['sslmode'],\n          visible: function(m) {\n            var sslrootcert = m.get('sslrootcert');\n            return !_.isUndefined(sslrootcert) && !_.isNull(sslrootcert);\n          }\n        },{\n          id: 'sslcrl', label: gettext('Certificate revocation list'), type: 'text',\n          group: gettext('SSL'), mode: ['properties'],\n          deps: ['sslmode'],\n          visible: function(m) {\n            var sslcrl = m.get('sslcrl');\n            return !_.isUndefined(sslcrl) && !_.isNull(sslcrl);\n          }\n        },{\n          id: 'sslcompression', label: gettext('SSL compression?'), type: 'switch',\n          mode: ['properties'], group: gettext('SSL'),\n          'options': { 'onText':   'True', 'offText':  'False',\n          'onColor':  'success', 'offColor': 'danger', 'size': 'small'},\n          deps: ['sslmode'], visible: function(m) {\n            var sslmode = m.get('sslmode');\n            return _.indexOf(SSL_MODES, sslmode) != -1;\n          }\n        },{\n          id: 'hostaddr', label: gettext('Host address'), type: 'text', group: gettext('Advanced'),\n          mode: ['properties', 'edit', 'create'], disabled: 'isConnected'\n        },{\n          id: 'db_res', label: gettext('DB restriction'), type: 'select2', group: gettext('Advanced'),\n          mode: ['properties', 'edit', 'create'], disabled: 'isConnected', select2: {multiple: true, allowClear: false,\n          tags: true, tokenSeparators: [','], first_empty: false, selectOnClose: true, emptyOptions: true}\n        },{\n          id: 'passfile', label: gettext('Password File'), type: 'text',\n          group: gettext('Advanced'), mode: ['edit', 'create'],\n          disabled: 'isConnected', control: Backform.FileControl,\n          dialog_type: 'select_file', supp_types: ['*']\n        },{\n          id: 'passfile', label: gettext('Password File'), type: 'text',\n          group: gettext('Advanced'), mode: ['properties'],\n          visible: function(m) {\n            var passfile = m.get('passfile');\n            return !_.isUndefined(passfile) && !_.isNull(passfile);\n          }\n        }],\n        validate: function() {\n          var err = {},\n              errmsg,\n              self = this;\n\n          var check_for_empty = function(id, msg) {\n            var v = self.get(id);\n            if (\n              _.isUndefined(v) || v === null || String(v).replace(/^\\s+|\\s+$/g, '') == ''\n            ) {\n              err[id] = msg;\n              errmsg = errmsg || msg;\n              return true;\n            } else {\n              self.errorModel.unset(id);\n              return false;\n            }\n          }\n          var check_for_valid_ipv6 = function(val){\n            // Regular expression for validating IPv6 address formats\n            var exps = ['^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|',\n                '(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|',\n                '2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|',\n                '(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|',\n                ':((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|',\n                '(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|',\n                '2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|',\n                '(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|',\n                '[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|',\n                '((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|',\n                '(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|',\n                '1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|',\n                '((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$'];\n\n            var exp = new RegExp(exps.join(''));\n            return exp.test(val.trim());\n          }\n          var check_for_valid_ip = function(id, msg) {\n            var v4exps = \"(^\\\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\\\s*$)\";\n            var v4exp = new RegExp(v4exps);\n            var v = self.get(id);\n            if (\n              v && !(v4exp.test(v.trim()))\n            ) {\n              if(!check_for_valid_ipv6(v)){\n                err[id] = msg;\n                errmsg = msg;\n              }\n            } else {\n              self.errorModel.unset(id);\n            }\n          }\n\n          if (!self.isNew() && 'id' in self.sessAttrs) {\n            err['id'] = gettext('The ID cannot be changed.');\n            errmsg = err['id'];\n          } else {\n            self.errorModel.unset('id');\n          }\n          check_for_empty('name', gettext('Name must be specified.'));\n\n          if (check_for_empty(\n            'host', gettext('Either Host name or Host address must be specified.')\n          ) && check_for_empty('hostaddr', gettext('Either Host name or Host address must be specified.'))){\n            errmsg = errmsg || gettext('Either Host name or Host address must be specified');\n          } else {\n            errmsg = undefined;\n            delete err['host'];\n            delete err['hostaddr'];\n          }\n\n          check_for_empty(\n            'db', gettext('Maintenance database must be specified.')\n          );\n          check_for_empty(\n            'username', gettext('Username must be specified.')\n          );\n          check_for_empty('port', gettext('Port must be specified.'));\n          check_for_valid_ip(\n            'hostaddr', gettext('Host address must be valid IPv4 or IPv6 address.')\n          );\n          this.errorModel.set(err);\n\n          if (_.size(err)) {\n            return errmsg;\n          }\n\n          return null;\n        },\n        isConnected: function(model) {\n          return model.get('connected');\n        },\n        isSSL: function(model) {\n          var ssl_mode = model.get('sslmode');\n          // If server is not connected and have required SSL option\n          if(model.get('connected')) {\n            return true;\n          }\n          return _.indexOf(SSL_MODES, ssl_mode) == -1;\n        }\n      }),\n      connection_lost: function(i, resp) {\n        if (pgBrowser.tree) {\n          var t = pgBrowser.tree,\n              info = i && this.getTreeNodeHierarchy(i),\n              s = null,\n              d = i && t.itemData(i),\n              self = this;\n\n          while (d && d._type != 'server') {\n            i = t.parent(i);\n            d = i && t.itemData(i);\n          }\n\n          if (i && d && d._type == 'server') {\n            if (_.isUndefined(d.is_connecting) || !d.is_connecting) {\n              d.is_connecting = true;\n\n              var disconnect = function(_sid) {\n                if (d._id == _sid) {\n                  d.is_connecting = false;\n                  // Stop listening to the connection cancellation event\n                  pgBrowser.Events.off(\n                    'pgadmin:server:connect:cancelled', disconnect\n                  );\n\n                  // Connection to the database will also be cancelled\n                  pgBrowser.Events.trigger(\n                    'pgadmin:database:connect:cancelled',_sid,\n                    resp.data.database || d.db\n                  );\n\n                  // Make sure - the server is disconnected properly\n                  pgBrowser.Events.trigger(\n                    'pgadmin:server:disconnect',\n                    {item: _i, data: _d}, false\n                  );\n                }\n              };\n\n              // Listen for the server connection cancellation event\n              pgBrowser.Events.on(\n                'pgadmin:server:connect:cancelled', disconnect\n              );\n              alertify.confirm(\n                gettext('Connection lost'),\n                gettext('Would you like to reconnect to the database?'),\n                function() {\n                  connect_to_server(self, d, t, i, true);\n                },\n                function() {\n                  d.is_connecting = false;\n                  t.unload(i);\n                  t.setInode(i);\n                  t.addIcon(i, {icon: 'icon-database-not-connected'});\n                  pgBrowser.Events.trigger(\n                    'pgadmin:server:connect:cancelled', i, d, self\n                  );\n                  t.select(i);\n                });\n            }\n          }\n        }\n      }\n    });\n    function connect_to_server(obj, data, tree, item, reconnect) {\n      var wasConnected = reconnect || data.connected,\n          onFailure = function(\n            xhr, status, error, _node, _data, _tree, _item, _wasConnected\n          ) {\n            data.connected = false;\n\n            // It should be attempt to reconnect.\n            // Let's not change the status of the tree node now.\n            if (!_wasConnected) {\n              tree.setInode(_item);\n              tree.addIcon(_item, {icon: 'icon-server-not-connected'});\n            }\n\n            alertify.pgNotifier('error', xhr, error, function(msg) {\n              setTimeout(function() {\n                alertify.dlgServerPass(\n                  gettext('Connect to Server'),\n                  msg, _node, _data, _tree, _item, _wasConnected\n                ).resizeTo();\n              }, 100);\n            });\n          },\n          onSuccess = function(res, node, data, tree, item, _wasConnected) {\n            if (res && res.data) {\n              if (typeof res.data.icon == 'string') {\n                tree.removeIcon(item);\n                data.icon = res.data.icon;\n                tree.addIcon(item, {icon: data.icon});\n              }\n\n              _.extend(data, res.data);\n              data.is_connecting = false;\n\n              var serverInfo = pgBrowser.serverInfo =\n                pgBrowser.serverInfo || {};\n              serverInfo[data._id] = _.extend({}, data);\n\n              alertify.success(res.info);\n              obj.trigger('connected', obj, item, data);\n\n              // Generate the event that server is connected\n              pgBrowser.Events.trigger(\n                'pgadmin:server:connected', data._id, item, data\n              );\n              // Generate the event that database is connected\n              pgBrowser.Events.trigger(\n                'pgadmin:database:connected', data._id, data.db, item, data\n              );\n\n              // We're not reconnecting\n              if (!_wasConnected) {\n                tree.setInode(item);\n                tree.deselect(item);\n\n                setTimeout(function() {\n                  tree.select(item);\n                  tree.open(item);\n                }, 10);\n              } else {\n                // We just need to refresh the tree now.\n                setTimeout(function() {\n                  node.callbacks.refresh.apply(node, [true]);\n                }, 10);\n              }\n            }\n          };\n\n      // Ask Password and send it back to the connect server\n      if (!alertify.dlgServerPass) {\n        alertify.dialog('dlgServerPass', function factory() {\n          return {\n            main: function(\n              title, message, node, data, tree, item,\n              _status, _onSuccess, _onFailure, _onCancel\n            ) {\n              this.set('title', title);\n              this.message = message;\n              this.tree = tree;\n              this.nodeData = data;\n              this.nodeItem = item;\n              this.node= node;\n              this.connected = _status;\n              this.onSuccess = _onSuccess || onSuccess;\n              this.onFailure = _onFailure || onFailure;\n              this.onCancel = _onCancel || onCancel;\n            },\n            setup:function() {\n              return {\n                buttons:[\n                  {\n                    text: gettext(\"OK\"), key: 13, className: \"btn btn-primary\"\n                  },\n                  {\n                    text: gettext(\"Cancel\"), className: \"btn btn-danger\"\n                  }\n                ],\n                focus: { element: '#password', select: true },\n                options: {\n                  modal: 0, resizable: false, maximizable: false, pinnable: false\n                }\n              };\n            },\n            build:function() {},\n            prepare:function() {\n              this.setContent(this.message);\n            },\n            callback: function(closeEvent) {\n              var _tree = this.tree,\n                  _item = this.nodeItem,\n                  _node = this.node,\n                  _data = this.nodeData,\n                  _status = this.connected,\n                  _onSuccess = this.onSuccess,\n                  _onFailure = this.onFailure,\n                  _onCancel = this.onCancel;\n\n              if (closeEvent.button.text == gettext(\"OK\")) {\n\n                var _url = _node.generate_url(_item, 'connect', _data, true);\n\n                if (!_status) {\n                  _tree.setLeaf(_item);\n                  _tree.removeIcon(_item);\n                  _tree.addIcon(_item, {icon: 'icon-server-connecting'});\n                }\n\n                $.ajax({\n                  type: 'POST',\n                  timeout: 30000,\n                  url: _url,\n                  data: $('#frmPassword').serialize(),\n                  success: function(res) {\n                    return _onSuccess(\n                      res, _node, _data, _tree, _item, _status\n                      );\n                  },\n                  error: function(xhr, status, error) {\n                    return _onFailure(\n                      xhr, status, error, _node, _data, _tree, _item, _status\n                      );\n                  }\n                });\n              } else {\n                this.onCancel && typeof(this.onCancel) == 'function' &&\n                  this.onCancel(_tree, _item, _data, _status);\n              }\n            }\n          };\n        });\n      }\n\n      var onCancel = function(_tree, _item, _data, _status) {\n        _data.is_connecting = false;\n        _tree.unload(_item);\n        _tree.setInode(_item);\n        _tree.removeIcon(_item);\n        _tree.addIcon(_item, {icon: 'icon-server-not-connected'});\n        obj.trigger('connect:cancelled', data._id, data.db, obj, _item, _data);\n        pgBrowser.Events.trigger(\n          'pgadmin:server:connect:cancelled', data._id, _item, _data, obj\n        );\n        pgBrowser.Events.trigger(\n          'pgadmin:database:connect:cancelled', data._id, data.db, _item, _data, obj\n        );\n        if (_status) {\n          _tree.select(_item);\n        }\n      };\n\n      data.is_connecting = true;\n      var url = obj.generate_url(item, \"connect\", data, true);\n      $.post(url)\n      .done(function(res) {\n        if (res.success == 1) {\n          return onSuccess(\n            res, obj, data, tree, item, wasConnected\n          );\n        }\n      })\n      .fail(function(xhr, status, error) {\n        return onFailure(\n          xhr, status, error, obj, data, tree, item, wasConnected\n        );\n      });\n    }\n\n    /* Send PING to indicate that session is alive */\n    function server_status(server_id)\n    {\n      url = \"/ping\";\n      $.post(url)\n      .done(function(data) { return true})\n      .fail(function(xhr, status, error) { return false})\n    }\n  }\n\n  return pgBrowser.Nodes['server'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/static/js/server.js","module.exports = __WEBPACK_EXTERNAL_MODULE_190__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.user_management.current_user\"\n// module id = 190\n// module chunks = 0","/* Create and Register Function Collection and Node. */\ndefine('pgadmin.node.function', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection', 'pgadmin.browser.server.privilege'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-function']) {\n    var functions = pgBrowser.Nodes['coll-function'] =\n      pgBrowser.Collection.extend({\n        node: 'function',\n        label: gettext('Functions'),\n        type: 'coll-function',\n        columns: ['name', 'funcowner', 'description'],\n        hasStatistics: true\n      });\n  };\n\n  // Argument Model\n  var ArgumentModel = pgBrowser.Node.Model.extend({\n    idAttribute: 'argid',\n    defaults: {\n      argid: undefined,\n      argtype: undefined,\n      argmode: undefined,\n      argname: undefined,\n      argdefval: undefined\n    },\n    schema: [{\n      id: 'argid', visible: false, type: 'text',\n      mode: ['properties', 'edit','create']\n      },{\n        id: 'argtype', label: gettext('Data Type'), cell:\n        'node-ajax-options', cellHeaderClasses: 'width_percent_30',\n        control: 'node-ajax-options', type: 'text', url: 'get_types',\n        editable: function(m) {\n          var node_info = this.get('node_info');\n          if(node_info && 'catalog' in node_info) {\n            return false;\n          }\n          return _.isUndefined(m.isNew) ? true : m.isNew();\n        }, first_empty: true\n      },{\n        id: 'argmode', label: gettext('Mode'), type: 'options',\n        control: 'node-ajax-options', cellHeaderClasses:'width_percent_20',\n        options:[\n          {'label': 'IN', 'value': 'IN'},\n          {'label': 'OUT', 'value': 'OUT'},\n          {'label': 'INOUT', 'value': 'INOUT'},\n          {'label': 'VARIADIC', 'value': 'VARIADIC'}\n        ], editable: function(m) {\n             var node_info = this.get('node_info');\n             if(node_info && 'catalog' in node_info) {\n               return false;\n             }\n             return _.isUndefined(m.isNew) ? true : m.isNew();\n           }\n      },{\n        id: 'argname', label: gettext('Argument Name'), type: 'text',\n        cell: 'string', editable: 'isInCatalog', cellHeaderClasses:'width_percent_30'\n      },{\n        id: 'argdefval', label: gettext('Default Value'), type: 'text',\n        cell: 'string', editable: 'isInCatalog',  cellHeaderClasses:'width_percent_20'\n      }\n    ],\n    toJSON: Backbone.Model.prototype.toJSON,\n    isInCatalog: function(m){\n      var node_info = this.get('node_info');\n      if(node_info && 'catalog' in node_info) {\n        return false;\n      }\n      // Below will disable default value cell if argument mode is 'INOUT' or 'OUT' as\n      // user cannot set default value for out parameters.\n      if(!_.isUndefined(m.get('argmode')) && !_.isUndefined(this.get('name')) &&\n         this.get('name') == 'argdefval' &&\n         (m.get('argmode') == 'INOUT' || m.get('argmode') == 'OUT')) {\n        return false;\n      }\n      return true;\n    },\n    validate: function() {\n    }\n  });\n\n  if (!pgBrowser.Nodes['function']) {\n    pgBrowser.Nodes['function'] = pgBrowser.Node.extend({\n      type: 'function',\n      sqlAlterHelp: 'sql-alterfunction.html',\n      sqlCreateHelp: 'sql-createfunction.html',\n      dialogHelp: url_for('help.static', {'filename': 'function_dialog.html'}),\n      label: gettext('Function'),\n      collection_type: 'coll-function',\n      hasSQL: true,\n      hasDepends: true,\n      hasStatistics: true,\n      hasScriptTypes: ['create', 'select'],\n      parent_type: ['schema', 'catalog'],\n      Init: function(args) {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_function_on_coll', node: 'coll-function', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Function...'),\n          icon: 'wcTabIcon icon-function', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_function', node: 'function', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Function...'),\n          icon: 'wcTabIcon icon-function', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_function', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Function...'),\n          icon: 'wcTabIcon icon-function', data: {action: 'create', check: false},\n          enable: 'canCreate'\n        }\n        ]);\n\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      model: pgBrowser.Node.Model.extend({\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n          if (isNew) {\n            // Set Selected Schema\n            var schema_id = args.node_info.schema._id;\n            this.set({'pronamespace': schema_id}, {silent: true});\n\n            // Set Current User\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            this.set({'funcowner': userInfo.name}, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          xmin: undefined,\n          funcowner: undefined,\n          pronamespace: undefined,\n          description: undefined,\n          pronargs: undefined, /* Argument Count */\n          proargs: undefined, /* Arguments */\n          proargtypenames: undefined, /* Argument Signature */\n          prorettypename: undefined, /* Return Type */\n          lanname: 'sql', /* Language Name in which function is being written */\n          provolatile: undefined, /* Volatility */\n          proretset: undefined, /* Return Set */\n          proisstrict: undefined,\n          prosecdef: undefined, /* Security of definer */\n          proiswindow: undefined, /* Window Function ? */\n          proparallel: undefined, /* Parallel mode */\n          procost: undefined, /* Estimated execution Cost */\n          prorows: undefined, /* Estimated number of rows */\n          proleakproof: undefined,\n          arguments: [],\n          prosrc: undefined,\n          prosrc_c: undefined,\n          probin: '$libdir/',\n          options: [],\n          variables: [],\n          proacl: undefined,\n          seclabels: [],\n          acl: [],\n          sysfunc: undefined,\n          sysproc: undefined\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: 'isDisabled'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'funcowner', label: gettext('Owner'), cell: 'string',\n          control: Backform.NodeListByNameControl, node: 'role',  type:\n          'text', disabled: 'isDisabled'\n        },{\n          id: 'pronamespace', label: gettext('Schema'), cell: 'string',\n          control: 'node-list-by-id', type: 'text', cache_level: 'database',\n          node: 'schema', disabled: 'isDisabled', mode: ['create', 'edit']\n        },{\n          id: 'sysfunc', label: gettext('System function?'),\n           cell:'boolean', type: 'switch',\n           mode: ['properties'], visible: 'isVisible'\n        },{\n          id: 'sysproc', label: gettext('System procedure?'),\n           cell:'boolean', type: 'switch',\n           mode: ['properties'], visible: 'isVisible'\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', disabled: 'isDisabled'\n        },{\n          id: 'pronargs', label: gettext('Argument count'), cell: 'string',\n          type: 'text', group: gettext('Definition'), mode: ['properties']\n        },{\n          id: 'proargs', label: gettext('Arguments'), cell: 'string',\n          type: 'text', group: gettext('Definition'), mode: ['properties', 'edit'],\n          disabled: 'isDisabled'\n        },{\n          id: 'proargtypenames', label: gettext('Signature arguments'), cell:\n          'string', type: 'text', group: gettext('Definition'), mode: ['properties'],\n          disabled: 'isDisabled'\n        },{\n          id: 'prorettypename', label: gettext('Return type'), cell: 'string',\n          control: 'node-ajax-options', type: 'text', group: gettext('Definition'),\n          url: 'get_types', disabled: 'isDisabled', first_empty: true,\n          mode: ['create'], visible: 'isVisible'\n        },{\n          id: 'prorettypename', label: gettext('Return type'), cell: 'string',\n          type: 'text', group: gettext('Definition'),\n          mode: ['properties', 'edit'], disabled: 'isDisabled', visible: 'isVisible'\n        },  {\n          id: 'lanname', label: gettext('Language'), cell: 'string',\n          control: 'node-ajax-options', type: 'text', group: gettext('Definition'),\n          url: 'get_languages', disabled: 'isDisabled'\n        },{\n          id: 'prosrc', label: gettext('Code'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          group: gettext('Definition'), deps: ['lanname'],\n          control: Backform.SqlFieldControl,\n          extraClasses:['custom_height_css_class'],\n          visible: function(m) {\n            if (m.get('lanname') == 'c') {\n              return false;\n            }\n            return true;\n          }, disabled: 'isDisabled'\n        },{\n          id: 'probin', label: gettext('Object file'), cell: 'string',\n          type: 'text', group: gettext('Definition'), deps: ['lanname'], visible:\n          function(m) {\n            if (m.get('lanname') == 'c') { return true; }\n            return false;\n          }, disabled: 'isDisabled'\n        },{\n          id: 'prosrc_c', label: gettext('Link symbol'), cell: 'string',\n          type: 'text', group: gettext('Definition'),  deps: ['lanname'], visible:\n          function(m) {\n            if (m.get('lanname') == 'c') { return true; }\n            return false;\n          }, disabled: 'isDisabled'\n        },{\n          id: 'provolatile', label: gettext('Volatility'), cell: 'string',\n          control: 'node-ajax-options', type: 'text', group: gettext('Options'),\n          options:[\n            {'label': 'VOLATILE', 'value': 'v'},\n            {'label': 'STABLE', 'value': 's'},\n            {'label': 'IMMUTABLE', 'value': 'i'},\n          ], disabled: 'isDisabled', select2: {allowClear: false}\n        },{\n          id: 'proretset', label: gettext('Returns a set?'), type: 'switch',\n          disabled: 'isDisabled', group: gettext('Options'),\n          visible: 'isVisible'\n        },{\n          id: 'proisstrict', label: gettext('Strict?'), type: 'switch',\n          group: gettext('Options'), disabled: 'isDisabled',\n          options: {\n            'onText': 'Yes', 'offText': 'No',\n            'onColor': 'success', 'offColor': 'primary',\n            'size': 'small'\n           }\n        },{\n          id: 'prosecdef', label: gettext('Security of definer?'),\n           group: gettext('Options'), type: 'switch',\n           disabled: 'isDisabled'\n        },{\n          id: 'proiswindow', label: gettext('Window?'),\n           group: gettext('Options'), cell:'boolean', type: 'switch',\n            disabled: 'isDisabled', visible: 'isVisible'\n        },{\n          id: 'proparallel', label: gettext('Parallel'), cell: 'string',\n          control: 'node-ajax-options', type: 'text', group: gettext('Options'),\n          options:[\n            {'label': 'UNSAFE', 'value': 'u'},\n            {'label': 'RESTRICTED', 'value': 'r'},\n            {'label': 'SAFE', 'value': 's'},\n          ], disabled: 'isDisabled', min_version: 90600,\n          select2: {allowClear: false}\n        },{\n          id: 'procost', label: gettext('Estimated cost'), group: gettext('Options'),\n          cell:'string', type: 'text', disabled: 'isDisabled'\n        },{\n          id: 'prorows', label: gettext('Estimated rows'), type: 'text',\n          deps: ['proretset'], visible: 'isVisible', disabled: 'isDisabled',\n          group: gettext('Options')\n        },{\n          id: 'proleakproof', label: gettext('Leak proof?'),\n          group: gettext('Options'), cell:'boolean', type: 'switch', min_version: 90200,\n          disabled: 'isDisabled'\n        },{\n          id: 'proacl', label: gettext('Privileges'), type: 'text',\n          mode: ['properties'], group: gettext('Security')\n        },{\n          id: 'arguments', label: gettext('Arguments'), cell: 'string',\n          group: gettext('Arguments'), type: 'collection', canAdd: function(m){\n            return m.isNew();\n          },\n          canDelete: true, model: ArgumentModel, mode: ['create', 'edit'],\n          columns: ['argtype', 'argmode', 'argname', 'argdefval'],\n          disabled: 'isDisabled', canDeleteRow: function(m) {\n            return m.isNew();\n          },\n        },{\n          id: 'variables', label: gettext('Parameters'), type: 'collection',\n          group: gettext('Parameters'), control: 'variable-collection',\n          model: pgBrowser.Node.VariableModel,\n          mode: ['edit', 'create'], canAdd: 'canVarAdd', canEdit: false,\n          canDelete: true, disabled: 'isDisabled'\n        }, pgBrowser.SecurityGroupSchema, {\n          id: 'acl', label: gettext('Privileges'), editable: false,\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n            privileges: ['X']\n          }), uniqueCol : ['grantee', 'grantor'], type: 'collection',\n          group: 'security', mode: ['edit', 'create'], canAdd: true,\n          canDelete: true, control: 'unique-col-collection',\n          disabled: 'isDisabled'\n        },{\n          id: 'seclabels', label: gettext('Security Labels'), canAdd: true,\n          model: pgBrowser.SecLabelModel, type: 'collection',\n          min_version: 90100, group: 'security', mode: ['edit', 'create'],\n          canEdit: false, canDelete: true, uniqueCol : ['provider'],\n          disabled: 'isDisabled', control: 'unique-col-collection',\n          visible: function() {\n            return this.node && this.node.type != \"procedure\";\n          }\n        }\n        ],\n        validate: function()\n        {\n          var err = {},\n              errmsg,\n              seclabels = this.get('seclabels');\n\n          if (_.isUndefined(this.get('name')) || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['name'] = gettext('Name cannot be empty.');\n            errmsg = errmsg || err['name'];\n          }\n\n          if (_.isUndefined(this.get('funcowner')) || String(this.get('funcowner')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['funcowner'] = gettext('Owner cannot be empty.');\n            errmsg = errmsg || err['funcowner'];\n          }\n\n          if (_.isUndefined(this.get('pronamespace')) || String(this.get('pronamespace')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['pronamespace'] = gettext('Schema cannot be empty.');\n            errmsg = errmsg || err['pronamespace'];\n          }\n\n          if (_.isUndefined(this.get('prorettypename')) || String(this.get('prorettypename')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['prorettypename'] = gettext('Return type cannot be empty.');\n            errmsg = errmsg || err['prorettypename'];\n          }\n\n          if (_.isUndefined(this.get('lanname')) || String(this.get('lanname')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['lanname'] = gettext('Language cannot be empty.');\n            errmsg = errmsg || err['lanname'];\n          }\n\n          if (String(this.get('lanname')) == 'c') {\n            if (_.isUndefined(this.get('probin')) || String(this.get('probin'))\n              .replace(/^\\s+|\\s+$/g, '') == '') {\n              err['probin'] = gettext('Object File cannot be empty.');\n              errmsg = errmsg || err['probin'];\n            }\n\n            if (_.isUndefined(this.get('prosrc_c')) || String(this.get('prosrc_c')).replace(/^\\s+|\\s+$/g, '') == '') {\n              err['prosrc_c'] = gettext('Link Symbol cannot be empty.');\n              errmsg = errmsg || err['prosrc_c'];\n            }\n          }\n          else {\n            if (_.isUndefined(this.get('prosrc')) || String(this.get('prosrc')).replace(/^\\s+|\\s+$/g, '') == '') {\n              err['prosrc'] = gettext('Code cannot be empty.');\n              errmsg = errmsg || err['prosrc'];\n            }\n          }\n\n          if (seclabels) {\n            var secLabelsErr;\n            for (var i = 0; i < seclabels.models.length && !secLabelsErr; i++) {\n              secLabelsErr = (seclabels.models[i]).validate.apply(seclabels.models[i]);\n              if (secLabelsErr) {\n                err['seclabels'] = secLabelsErr;\n                errmsg = errmsg || secLabelsErr;\n              }\n            }\n          }\n\n          this.errorModel.clear().set(err);\n\n          if (_.size(err)) {\n            this.trigger('on-status', {msg: errmsg});\n            return errmsg;\n          }\n\n          return null;\n        },\n        isVisible: function(m){\n          if (this.name == 'sysproc') { return false; }\n          return true;\n        },\n        isDisabled: function(m){\n          if(this.node_info &&  'catalog' in this.node_info) {\n            return true;\n          }\n          name = this.name;\n          switch(name){\n            case 'proargs':\n            case 'proargtypenames':\n            case 'prorettypename':\n            case 'proretset':\n            case 'proiswindow':\n              return !m.isNew();\n              break;\n            case 'prorows':\n              if(m.get('proretset') == true) {\n                return false;\n              }\n              else {\n                return true;\n              }\n              break;\n            default:\n              return false;\n              break;\n          }\n          return false;\n        },\n        canVarAdd: function(m) {\n          if(this.node_info &&  'catalog' in this.node_info) {\n            return false;\n          }\n         return true;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n        //If check is false then , we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n        // To iterate over tree to check parent node\n        while (i) {\n          // If it is schema then allow user to create Function\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-function' == d._type) {\n            //Check if we are not child of catalog\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n            if( prev_d._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // by default we do not want to allow create menu\n        return true;\n      }\n  });\n\n  }\n\n  return pgBrowser.Nodes['function'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/functions/static/js/function.js","/* Create and Register Function Collection and Node. */\ndefine('pgadmin.node.edbfunc', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection', 'pgadmin.browser.server.privilege'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-edbfunc']) {\n    pgBrowser.Nodes['coll-edbfunc'] =\n      pgBrowser.Collection.extend({\n        node: 'edbfunc',\n        label: gettext('Functions'),\n        type: 'coll-edbfunc',\n        columns: ['name', 'funcowner', 'description']\n      });\n  };\n\n  if (!pgBrowser.Nodes['edbfunc']) {\n    pgBrowser.Nodes['edbfunc'] = pgBrowser.Node.extend({\n      type: 'edbfunc',\n      dialogHelp: url_for('help.static', {'filename': 'edbfunc_dialog.html'}),\n      label: gettext('Function'),\n      collection_type: 'coll-edbfunc',\n      hasDepends: true,\n      canEdit: false,\n      hasSQL: true,\n      hasScriptTypes: [],\n      parent_type: ['package'],\n      Init: function(args) {\n        /* Avoid multiple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n      },\n      canDrop: false,\n      canDropCascade: false,\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          funcowner: undefined,\n          pronargs: undefined, /* Argument Count */\n          proargs: undefined, /* Arguments */\n          proargtypenames: undefined, /* Argument Signature */\n          prorettypename: undefined, /* Return Type */\n          lanname: 'sql', /* Language Name in which function is being written */\n          prosrc: undefined,\n          proacl: undefined,\n          visibility: 'Unknown'\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties'],\n          disabled: true\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'funcowner', label: gettext('Owner'), cell: 'string',\n          type: 'text', disabled: true\n        },{\n          id: 'pronargs', label: gettext('Argument count'), cell: 'string',\n          type: 'text', group: gettext('Definition'), mode: ['properties']\n        },{\n          id: 'proargs', label: gettext('Arguments'), cell: 'string',\n          type: 'text', group: gettext('Definition'), mode: ['properties'],\n          disabled: true\n        },{\n          id: 'proargtypenames', label: gettext('Signature arguments'), cell:\n          'string', type: 'text', group: gettext('Definition'), mode: ['properties'],\n          disabled: true\n        },{\n          id: 'prorettypename', label: gettext('Return type'), cell: 'string',\n          type: 'text', group: gettext('Definition'), disabled: true,\n          mode: ['properties'], visible: 'isVisible'\n        },{\n          id: 'visibility', label: gettext('Visibility'), cell: 'string',\n          type: 'text', mode: ['properties'],\n          disabled: true\n        },{\n          id: 'lanname', label: gettext('Language'), cell: 'string',\n          type: 'text', group: gettext('Definition'), disabled: true\n        },{\n          id: 'prosrc', label: gettext('Code'), cell: 'string',\n          type: 'text', mode: ['properties'],\n          group: gettext('Definition'),\n          control: Backform.SqlFieldControl,\n          extraClasses:['custom_height_css_class'],\n          visible: function(m) {\n            if (m.get('lanname') == 'c') {\n              return false;\n            }\n            return true;\n          }, disabled: true\n        }],\n        validate: function()\n        {\n          return null;\n        },\n        isVisible: function(m){\n          if (this.name == 'sysproc') { return false; }\n          return true;\n        }\n      })\n  });\n\n  }\n\n  return pgBrowser.Nodes['edbfunc'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/packages/edbfuncs/static/js/edbfunc.js","define('pgadmin.node.rule', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'codemirror'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, CodeMirror) {\n\n  /**\n    Create and add a rule collection into nodes\n    @param {variable} label - Label for Node\n    @param {variable} type - Type of Node\n    @param {variable} columns - List of columns to\n      display under under properties.\n   */\n  if (!pgBrowser.Nodes['coll-rule']) {\n    var rules = pgAdmin.Browser.Nodes['coll-rule'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'rule',\n        label: gettext('Rules'),\n        type: 'coll-rule',\n        getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n        columns: [\"name\", \"owner\", \"comment\"]\n      });\n  }\n\n\n  /**\n    Create and Add an Rule Node into nodes\n    @param {variable} parent_type - The list of nodes\n    under which this node to display\n    @param {variable} type - Type of Node\n    @param {variable} hasSQL - To show SQL tab\n    @param {variable} canDrop - Adds drop rule option\n    in the context menu\n    @param {variable} canDropCascade - Adds drop Cascade\n    rule option in the context menu\n   */\n  if (!pgBrowser.Nodes['rule']) {\n    pgAdmin.Browser.Nodes['rule'] = pgBrowser.Node.extend({\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      parent_type: ['table','view', 'partition'],\n      type: 'rule',\n      sqlAlterHelp: 'sql-alterrule.html',\n      sqlCreateHelp: 'sql-createrule.html',\n      dialogHelp: url_for('help.static', {'filename': 'rule_dialog.html'}),\n      label: gettext('rule'),\n      collection_type: 'coll-table',\n      hasSQL:  true,\n      hasDepends: true,\n      canDrop: function(itemData, item, data){\n        pgBrowser.Nodes['schema'].canChildDrop.apply(this, [itemData, item, data]);\n        if(_.has(itemData, 'label') && itemData.label === '_RETURN')\n          return false;\n        else {\n          return true;\n        }\n      },\n      canDropCascade: function(itemData, item, data){\n        pgBrowser.Nodes['schema'].canChildDrop.apply(this, [itemData, item, data]);\n        if(_.has(itemData, 'label') && itemData.label === '_RETURN')\n          return false;\n        else {\n          return true;\n        }\n      },\n      Init: function() {\n\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        /**\n          Add \"create rule\" menu option into context and object menu\n          for the following nodes:\n          coll-rule, rule and view and table.\n          @property {data} - Allow create rule option on schema node or\n          system rules node.\n         */\n        pgBrowser.add_menus([{\n          name: 'create_rule_on_coll', node: 'coll-rule', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 1, label: gettext('Rule...'),\n          icon: 'wcTabIcon icon-rule', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_rule_onView', node: 'view', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 5, label: gettext('Rule...'),\n          icon: 'wcTabIcon icon-rule', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_rule', node: 'rule', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 1, label: gettext('Rule...'),\n          icon: 'wcTabIcon icon-rule', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_rule', node: 'table', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Rule...'),\n          icon: 'wcTabIcon icon-rule', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_rule', node: 'partition', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Rule...'),\n          icon: 'wcTabIcon icon-rule', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        }\n        ]);\n      },\n\n      /**\n        Define model for the rule node and specify the node\n        properties of the model in schema.\n       */\n      model: pgAdmin.Browser.Node.Model.extend({\n        schema: [{\n          id: 'name', label: gettext('Name'),\n          type: 'text', disabled: function(m) {\n            // disable name field it it is system rule\n            if (m && m.get('name') == \"_RETURN\") {\n              return true;\n            }\n            if (m.isNew()) {\n              return false;\n            } else if (m.node_info.server.version >= 90400) {\n              return false;\n            }\n            return true;\n          }\n        },\n        {\n          id: 'oid', label: gettext('OID'),\n          type: 'text', disabled: true, mode: ['properties']\n        },\n        {\n          id: 'schema', label:'',\n          type: 'text', visible: false, disabled: function(m) {\n            // It is used while generating sql\n            m.set('schema', m.node_info.schema.label);\n          }\n        },\n        {\n          id: 'view', label:'',\n          type: 'text', visible: false, disabled: function(m){\n\n            // It is used while generating sql\n            m.set('view', this.node_data.label);\n          }\n        },\n        {\n          id: 'event', label: gettext('Event'), control: 'select2',\n          group: gettext('Definition'), type: 'text',\n          select2: {\n            width: '100%',\n            allowClear: false\n          },\n          options:[\n            {label: 'Select', value: 'Select'},\n            {label: 'Insert', value: 'Insert'},\n            {label: 'Update', value: 'Update'},\n            {label: 'Delete', value: 'Delete'}\n          ]\n        },\n        {\n          id: 'do_instead', label: gettext('Do Instead'), group: gettext('Definition'),\n          type: 'switch'\n        },\n        {\n          id: 'condition', label: gettext('Condition'),\n          type: 'text', group: gettext('Definition'),\n          control: Backform.SqlFieldControl\n        },\n        {\n          id: 'statements', label: gettext('Commands'),\n          type: 'text', group: gettext('Definition'),\n          control: Backform.SqlFieldControl\n        },\n        {\n          id: 'system_rule', label: gettext('System rule?'),\n          type: 'switch', mode: ['properties']\n        },\n        {\n          id: 'enabled', label: gettext('Enabled?'),\n          type: 'switch', mode: ['properties']\n        },\n        {\n          id: 'comment', label: gettext('Comment'), cell: 'string', type: 'multiline'\n        }\n        ],\n        validate: function() {\n\n          // Triggers specific error messages for fields\n          var err = {},\n            errmsg,\n            field_name = this.get('name');\n          if (_.isUndefined(field_name) || _.isNull(field_name) ||\n            String(field_name).replace(/^\\s+|\\s+$/g, '') === '')\n          {\n            err['name'] = gettext('Please specify name.');\n            errmsg = errmsg || err['name'];\n            this.errorModel.set('name', errmsg);\n            return errmsg;\n          }\n          else\n          {\n            this.errorModel.unset('name');\n          }\n          return null;\n        }\n      }),\n\n      // Show or hide create rule menu option on parent node\n      canCreate: function(itemData, item, data) {\n\n        // If check is false then , we will allow create menu\n        if (data && data.check === false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n\n        // To iterate over tree to check parent node\n        while (i) {\n\n          // If it is schema then allow user to create rule\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-rule' == d._type) {\n\n            //Check if we are not child of rule\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null,\n              prev_j = t.hasParent(prev_i) ? t.parent(prev_i) : null,\n              prev_e = prev_j ? t.itemData(prev_j) : null,\n              prev_k = t.hasParent(prev_j) ? t.parent(prev_j) : null,\n              prev_f = prev_k ? t.itemData(prev_k) : null;\n            if( prev_f._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n\n          /**\n            Check if it is view and its parent node is schema\n            then allow to create Rule\n           */\n          else if('view' == d._type || 'table' == d._type){\n            prev_i = t.hasParent(i) ? t.parent(i) : null;\n            prev_d = prev_i ? t.itemData(prev_i) : null;\n            prev_j = t.hasParent(prev_i) ? t.parent(prev_i) : null;\n            prev_e = prev_j ? t.itemData(prev_j) : null;\n            if(prev_e._type == 'schema') {\n              return true;\n            }else{\n              return false;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n\n        // By default we do not want to allow create menu\n        return true;\n\n      }\n\n  });\n  }\n\n  return pgBrowser.Nodes['coll-rule'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/rules/static/js/rule.js","define('pgadmin.node.table_partition_utils',\n        ['sources/gettext', 'jquery', 'underscore', 'pgadmin.browser',\n        'backform','backgrid', 'pgadmin.browser.collection'],\nfunction(gettext, $, _, pgBrowser, Backform, Backgrid) {\n\n  Backgrid.PartitionRow = Backgrid.Row.extend({\n    modelDuplicateColor: \"lightYellow\",\n\n    modelUniqueColor: \"#fff\",\n\n    initialize: function () {\n      Backgrid.Row.prototype.initialize.apply(this, arguments);\n      var self = this;\n      self.model.on(\"change:is_attach\", function() {\n        setTimeout(function() {\n          self.columns.each(function(col) {\n            if (col.get('name') == 'partition_name') {\n              var idx = self.columns.indexOf(col),\n                cf = col.get(\"cellFunction\"),\n                cell = new (cf.apply(col, [self.model]))({\n                  column: col,\n                  model: self.model\n                }),\n                  oldCell = self.cells[idx];\n                oldCell.remove();\n                self.cells[idx] = cell;\n                self.render();\n            }\n          });\n        }, 10);\n      });\n      self.listenTo(self.model, 'pgadmin-session:model:duplicate', self.modelDuplicate);\n      self.listenTo(self.model, 'pgadmin-session:model:unique', self.modelUnique);\n    },\n    modelDuplicate: function() {\n      $(this.el).removeClass(\"new\");\n      this.el.style.backgroundColor = this.modelDuplicateColor;\n    },\n    modelUnique: function() {\n      this.el.style.backgroundColor = this.modelUniqueColor;\n    }\n  });\n\n  var getPartitionCell = function(model) {\n    var is_attach = model.get(\"is_attach\");\n    if (is_attach) {\n      var options = [];\n      model.set({'partition_name': undefined}, {silent:true});\n      _.each(model.top.table_options, function(t) {\n        options.push([t.label, t.value]);\n      });\n      return Backgrid.Extension.Select2Cell.extend({optionValues: options});\n\n    } else {\n      return Backgrid.StringCell;\n    }\n  };\n\n  Backform.PartitionKeyModel = pgBrowser.Node.Model.extend({\n     defaults: {\n       key_type: 'column',\n       pt_column: undefined,\n       expression: undefined\n     },\n     keys:['pt_column'],\n     schema: [{\n       id: 'key_type', label:'Key type', type:'select2', editable: true,\n       cell:'select2', cellHeaderClasses: 'width_percent_25',\n       select2: {allowClear: false},\n       options:[{\n         label: 'Column', value: 'column'\n       },{\n         label: 'Expression', value: 'expression'\n       }]\n     },{\n       id: 'pt_column', label: gettext('Column'), type:'text',\n       cell: Backgrid.Extension.Select2DepCell.extend({\n         keyPathAccessor: function(obj, path) {\n           var res = obj;\n           if(_.isArray(res)) {\n             return _.map(res, function(o) { return o['pt_column']\n             });\n           }\n           path = path.split('.');\n           for (var i = 0; i < path.length; i++) {\n             if (_.isNull(res)) return null;\n             if (_.isEmpty(path[i])) continue;\n             if (!_.isUndefined(res[path[i]])) res = res[path[i]];\n           }\n           return _.isObject(res) && !_.isArray(res) ? null : res;\n         },\n         initialize: function() {\n         // Here we will decide if we need to call URL\n         // Or fetch the data from parent columns collection\n           var self = this;\n           if(this.model.handler) {\n             Backgrid.Extension.Select2DepCell.prototype.initialize.apply(this, arguments);\n             // Do not listen for any event(s) for existing constraint.\n             if (_.isUndefined(self.model.get('oid'))) {\n               var tableCols = self.model.top.get('columns');\n               self.listenTo(tableCols, 'remove' , self.resetColOptions);\n               self.listenTo(tableCols, 'change:name', self.resetColOptions);\n             }\n\n             self.custom_options();\n           }\n         },\n         resetColOptions: function(m) {\n           var self = this;\n\n           setTimeout(function () {\n             self.custom_options();\n             self.render.apply(self);\n           }, 50);\n         },\n         custom_options: function() {\n           // We will add all the columns entered by user in table model\n           var columns = this.model.top.get('columns'),\n               typename = this.model.top.get('typname'),\n               of_types_tables = this.model.top.of_types_tables,\n               added_columns_from_tables = [];\n\n           if (columns.length > 0) {\n             _.each(columns.models, function(m) {\n                 var col = m.get('name');\n                 if(!_.isUndefined(col) && !_.isNull(col)) {\n                   added_columns_from_tables.push(\n                     {label: col, value: col, image:'icon-column'}\n                   );\n                 }\n             });\n           } else if (!_.isUndefined(typename) && !_.isNull(typename)\n              && !_.isUndefined(of_types_tables) && of_types_tables.length > 0) {\n              // Iterate through all the of_type tables\n              _.each(of_types_tables, function(type) {\n                if (type.label == typename) {\n                  // Iterate all the columns of selected \"OF TYPE\".\n                  _.each(type.oftype_columns, function(col) {\n                    added_columns_from_tables.push(\n                      {label: col.name, value: col.name, image:'icon-column'}\n                    );\n                  });\n                }\n              });\n           }\n\n           // Set the values in to options so that user can select\n           this.column.set('options', added_columns_from_tables);\n         },\n         remove: function() {\n           if(this.model.handler) {\n             var self = this,\n             tableCols = self.model.top.get('columns');\n             self.stopListening(tableCols, 'remove' , self.resetColOptions);\n             self.stopListening(tableCols, 'change:name' , self.resetColOptions);\n             Backgrid.Extension.Select2DepCell.prototype.remove.apply(this, arguments);\n           }\n         }\n       }),\n       deps: ['key_type'],\n       cellHeaderClasses: 'width_percent_30',\n       transform : function(data){\n         var res = [];\n         if (data && _.isArray(data)) {\n           _.each(data, function(d) {\n             res.push({label: d.label, value: d.label, image:'icon-column'});\n           })\n         }\n         return res;\n       },\n       select2:{allowClear:false},\n       editable: function(m) {\n         if (m.get('key_type') == 'expression') {\n           setTimeout( function() {\n              m.set('pt_column', undefined);\n           }, 10);\n           return false;\n         }\n         return true;\n       }\n     },{\n       id: 'expression', label:'Expression', type:'text',\n       cell:Backgrid.Extension.StringDepCell,\n       cellHeaderClasses: 'width_percent_45',\n       deps: ['key_type'],\n       editable: function(m) {\n         if (m.get('key_type') == 'column') {\n           setTimeout( function() {\n              m.set('expression', undefined);\n           }, 10);\n           return false;\n         }\n         return true;\n       }\n     }\n    ],\n    validate: function(keys) {\n      var col_type = this.get('key_type'),\n         pt_column = this.get('pt_column'),\n         expression = this.get('expression');\n\n      // Have to clear existing validation before initiating current state\n      // validation only\n      this.errorModel.clear();\n\n      if (_.isUndefined(col_type) || _.isNull(col_type) ||\n        String(col_type).replace(/^\\s+|\\s+$/g, '') == '') {\n        var msg = gettext('Partition key type cannot be empty.');\n        this.errorModel.set('key_type', msg);\n        return msg;\n      }\n      else if (col_type == 'column' &&\n        _.isUndefined(pt_column) || _.isNull(pt_column) ||\n        String(pt_column).replace(/^\\s+|\\s+$/g, '') == '') {\n        var msg = gettext('Partition key column cannot be empty.');\n        this.errorModel.set('pt_column', msg);\n        return msg;\n      }\n      else if (col_type == 'expression' &&\n        _.isUndefined(expression) || _.isNull(expression) ||\n        String(expression).replace(/^\\s+|\\s+$/g, '') == '') {\n        var msg = gettext('Partition key expression cannot be empty.');\n        this.errorModel.set('expression', msg);\n        return msg;\n      }\n\n      return null;\n    }\n  });\n\n  Backform.PartitionsModel = pgBrowser.Node.Model.extend({\n    defaults: {\n      oid: undefined,\n      is_attach: false,\n      partition_name: undefined,\n      values_from: undefined,\n      values_to: undefined,\n      values_in: undefined\n    },\n    keys:['partition_name'],\n    schema: [{\n      id: 'oid', label: gettext('OID'), type: 'text'\n    },{\n      id: 'is_attach', label:gettext('Operation'), cell: 'switch',\n      type: 'switch', options: { 'onText': 'Attach', 'offText': 'Create'},\n      cellHeaderClasses: 'width_percent_5',\n      editable: function(m) {\n        if (m instanceof Backbone.Model && m.isNew() && !m.top.isNew())\n          return true;\n        return false;\n      }\n    },{\n      id: 'partition_name', label: gettext('Name'), type: 'text', cell:'string',\n      cellHeaderClasses: 'width_percent_25',\n      editable: function(m) {\n        if (m instanceof Backbone.Model && m.isNew())\n          return true;\n        return false;\n      }, cellFunction: getPartitionCell\n    },{\n      id: 'values_from', label:'From', type:'text',\n      cell:Backgrid.Extension.StringDepCell,\n      cellHeaderClasses: 'width_percent_20',\n      editable: function(m) {\n       if(m.handler && m.handler.top &&\n          m.handler.top.attributes &&\n          m.handler.top.attributes.partition_type == 'range' &&\n          m instanceof Backbone.Model && m.isNew())\n          return true;\n       return false;\n      }\n    },{\n      id: 'values_to', label:'To', type:'text',\n      cell:Backgrid.Extension.StringDepCell,\n      cellHeaderClasses: 'width_percent_20',\n      editable: function(m) {\n        if(m.handler && m.handler.top &&\n          m.handler.top.attributes &&\n          m.handler.top.attributes.partition_type == 'range' &&\n          m instanceof Backbone.Model && m.isNew())\n          return true;\n        return false;\n      }\n    },{\n      id: 'values_in', label:'In', type:'text',\n      cell:Backgrid.Extension.StringDepCell,\n      cellHeaderClasses: 'width_percent_25',\n      editable: function(m) {\n        if(m.handler && m.handler.top &&\n          m.handler.top.attributes &&\n          m.handler.top.attributes.partition_type == 'list' &&\n          m instanceof Backbone.Model && m.isNew())\n          return true;\n        return false;\n      }\n    }],\n    validate: function(keys) {\n      var partition_name = this.get('partition_name'),\n         values_from = this.get('values_from'),\n         values_to = this.get('values_to'),\n         values_in = this.get('values_in');\n\n      // Have to clear existing validation before initiating current state\n      // validation only\n      this.errorModel.clear();\n\n      if (_.isUndefined(partition_name) || _.isNull(partition_name) ||\n       String(partition_name).replace(/^\\s+|\\s+$/g, '') == '') {\n       var msg = gettext('Partition name cannot be empty.');\n       this.errorModel.set('partition_name', msg);\n       return msg;\n      }\n\n      if (this.top.get('partition_type') == 'range') {\n        if (_.isUndefined(values_from) || _.isNull(values_from) ||\n          String(values_from).replace(/^\\s+|\\s+$/g, '') == '') {\n          var msg = gettext('For range partition From field cannot be empty.');\n          this.errorModel.set('values_from', msg);\n          return msg;\n        } else if (_.isUndefined(values_to) || _.isNull(values_to) ||\n          String(values_to).replace(/^\\s+|\\s+$/g, '') == '') {\n          var msg = gettext('For range partition To field cannot be empty.');\n          this.errorModel.set('values_to', msg);\n          return msg;\n        }\n      } else if (this.top.get('partition_type') == 'list') {\n        if (_.isUndefined(values_in) || _.isNull(values_in) ||\n          String(values_in).replace(/^\\s+|\\s+$/g, '') == '') {\n          var msg = gettext('For list partition In field cannot be empty.');\n          this.errorModel.set('values_in', msg);\n          return msg;\n        }\n      }\n\n      return null;\n    }\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/static/js/partition.utils.js","define('app', [\n  'babel-polyfill', 'sources/pgadmin', 'bundled_browser', 'pgadmin.datagrid'\n  ], function() {\n    var initializeModules = function(Object) {\n      for (var key in Object) {\n        var module = Object[key];\n        if (module.init && typeof module.init == 'function') {\n          module.init();\n        }\n        else if (module.Init && typeof module.Init == 'function') {\n          module.Init();\n        }\n      }\n    }\n\n    // Initialize modules registered to pgAdmin, pgAdmin.Browser and Tools object.\n    initializeModules(pgAdmin);\n    initializeModules(pgAdmin.Browser);\n    initializeModules(pgAdmin.Tools);\n\n    // create menus after all modules are initialized.\n    pgAdmin.Browser.create_menus();\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/bundle/app.js","/*** IMPORTS FROM imports-loader ***/\nvar pgadmin = (pgadmin || {});\npgadmin.about = require(\"pgadmin.about\");\nvar pgadmin = (pgadmin || {});\npgadmin.preferences = require(\"pgadmin.preferences\");\nvar pgadmin = (pgadmin || {});\npgadmin.file_manager = require(\"pgadmin.file_manager\");\nvar pgadmin = (pgadmin || {});\npgadmin.settings = require(\"pgadmin.settings\");\nvar pgadmin = (pgadmin || {});\npgadmin.tools = {};\npgadmin.tools.backup = require(\"pgadmin.tools.backup\");\nvar pgadmin = (pgadmin || {});\npgadmin.tools = {};\npgadmin.tools.restore = require(\"pgadmin.tools.restore\");\nvar pgadmin = (pgadmin || {});\npgadmin.tools = {};\npgadmin.tools.grant_wizard = require(\"pgadmin.tools.grant_wizard\");\nvar pgadmin = (pgadmin || {});\npgadmin.tools = {};\npgadmin.tools.maintenance = require(\"pgadmin.tools.maintenance\");\nvar pgadmin = (pgadmin || {});\npgadmin.tools = {};\npgadmin.tools.import_export = require(\"pgadmin.tools.import_export\");\nvar pgadmin = (pgadmin || {});\npgadmin.tools = {};\npgadmin.tools.debugger = {};\npgadmin.tools.debugger.controller = require(\"pgadmin.tools.debugger.controller\");\nvar pgadmin = (pgadmin || {});\npgadmin.tools = {};\npgadmin.tools.debugger = {};\npgadmin.tools.debugger.direct = require(\"pgadmin.tools.debugger.direct\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.pga_job = require(\"pgadmin.node.pga_job\");\n\ndefine('bundled_browser',[\n 'pgadmin.browser'\n], function(pgBrowser) {\n  pgBrowser.init();\n});\n\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/bundle/browser.js","define(\n  ['jquery', 'alertify', 'sources/pgadmin', 'underscore.string', 'sources/gettext',\n   'sources/url_for'\n  ],\n  function($, alertify, pgAdmin, S, gettext, url_for) {\n    pgAdmin = pgAdmin || window.pgAdmin || {};\n\n    /* Return back, this has been called more than once */\n    if (pgAdmin.About)\n        return;\n\n    pgAdmin.About = {\n      about_show: function() {\n        if (!alertify.aboutDialog) {\n          alertify.dialog('aboutDialog', function factory() {\n            return {\n              main: function(title, message) {\n                this.set('title', title);\n                this.message = message;\n              },\n              setup: function() {\n                return {\n                  buttons:[{ text: gettext(\"OK\"), key: 27, className: \"btn btn-primary\" }],\n                  options: {\n                    modal: false,\n                    resizable: true,\n                    maximizable: true,\n                    pinnable: false,\n                    closableByDimmer: false\n                  }\n                };\n              },\n              build: function() {\n                alertify.pgDialogBuild.apply(this);\n              },\n              prepare:function() {\n                this.setContent(this.message);\n              }\n            };\n          });\n        }\n\n        var content = '';\n        $.get(url_for('about.index'),\n            function(data) {\n              alertify.aboutDialog(\n                  S(gettext(\"About %s\")).sprintf(pgAdmin.Browser.utils.app_name).value(), data\n              ).resizeTo(800, 450);\n            });\n      }\n    };\n\n    return pgAdmin.About;\n  });\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/about/static/js/about.js","// Backup dialog\ndefine([\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'underscore.string', 'pgadmin.alertifyjs',\n  'pgadmin.browser', 'backbone', 'backgrid', 'backform', 'pgadmin.browser.node'\n], function(gettext, url_for, $, _, S, alertify, pgBrowser, Backbone, Backgrid, Backform, pgNode) {\n\n  // if module is already initialized, refer to that.\n  if (pgBrowser.Backup) {\n    return pgBrowser.Backup;\n  }\n\n/*\n=====================\nTODO LIST FOR BACKUP:\n=====================\n1) Add Object tree on object tab which allows user to select\n   objects which can be backed up\n2) Allow user to select/deselect objects\n3) If database is selected in browser\n   show all database children objects selected in Object tree\n4) If schema is selected in browser\n   show all schema children objects selected in Object tree\n5) If table is selected then show table/schema/database selected\n   in Object tree\n6) if root objects like database/schema is not selected and their\n   children are selected then add them separately with in tables attribute\n   with schema.\n*/\n\n    var CustomSwitchControl = Backform.CustomSwitchControl = Backform.SwitchControl.extend({\n        template: _.template([\n          '<label class=\"<%=Backform.controlLabelClassName%> custom_switch_label_class\"><%=label%></label>',\n          '<div class=\"<%=Backform.controlsClassName%> custom_switch_control_class\">',\n          '  <div class=\"checkbox\">',\n          '    <label>',\n          '      <input type=\"checkbox\" class=\"<%=extraClasses.join(\\' \\')%>\"',\n          '        name=\"<%=name%>\" <%=value ? \"checked=\\'checked\\'\" : \"\"%>',\n          '        <%=disabled ? \"disabled\" : \"\"%> <%=required ? \"required\" : \"\"%> />',\n          '    </label>',\n          '  </div>',\n          '</div>',\n          '<% if (helpMessage && helpMessage.length) { %>',\n          '  <span class=\"<%=Backform.helpMessageClassName%>\"><%=helpMessage%></span>',\n          '<% } %>'\n        ].join(\"\\n\")),\n        className: 'pgadmin-control-group form-group pg-el-md-6 pg-el-xs-12'\n    });\n\n    //Backup Model (Server Node)\n    var BackupModel = Backbone.Model.extend({\n      idAttribute: 'id',\n      defaults: {\n        file: undefined,\n        role: undefined,\n        dqoute: false,\n        verbose: true,\n        type: undefined /* global, server */\n      },\n      schema: [{\n        id: 'file', label: gettext('Filename'),\n        type: 'text', disabled: false, control: Backform.FileControl,\n        dialog_type: 'create_file', supp_types: ['*', 'sql', 'backup']\n      },{\n        id: 'role', label: gettext('Role name'),\n        control: 'node-list-by-name', node: 'role',\n        select2: { allowClear: false }\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Miscellaneous'),\n        schema:[{\n          id: 'verbose', label: gettext('Verbose messages'),\n          control: Backform.CustomSwitchControl, disabled: false,\n          group: gettext('Miscellaneous')\n        },{\n          id: 'dqoute', label: gettext('Force double quote on identifiers'),\n          control: Backform.CustomSwitchControl, disabled: false,\n          group: gettext('Miscellaneous')\n        }]\n      },{\n        id: 'server_note', label: gettext('Note'),\n        text: gettext('The backup format will be PLAIN'),\n        type: 'note', visible: function(m){\n          return m.get('type') === 'server';\n        }\n      },{\n        id: 'globals_note', label: gettext('Note'),\n        text: gettext('Only objects global to the entire database will be backed up in PLAIN format'),\n        type: 'note', visible: function(m){\n          return m.get('type') === 'globals';\n        }\n     },{\n     }],\n      validate: function() {\n        // TODO: HOW TO VALIDATE ???\n        return null;\n      }\n    });\n\n    //Backup Model (Objects like Database/Schema/Table)\n    var BackupObjectModel = Backbone.Model.extend({\n      idAttribute: 'id',\n      defaults: {\n        file: undefined,\n        role: undefined,\n        format: 'custom',\n        verbose: true,\n        blobs: true,\n        encoding: undefined,\n        schemas: [],\n        tables: [],\n        database: undefined\n      },\n      schema: [{\n        id: 'file', label: gettext('Filename'),\n        type: 'text', disabled: false, control: Backform.FileControl,\n        dialog_type: 'create_file', supp_types: ['*', 'sql', 'backup']\n      },{\n        id: 'format', label: gettext('Format'),\n        type: 'text', disabled: false,\n        control: 'select2', select2: {\n            allowClear: false,\n            width: \"100%\"\n        },\n        options: [\n          {label: gettext('Custom'), value: \"custom\"},\n          {label: gettext('Tar'), value: \"tar\"},\n          {label: gettext('Plain'), value: \"plain\"},\n          {label: gettext('Directory'), value: \"directory\"}\n        ]\n      },{\n        id: 'ratio', label: gettext('Compression ratio'),\n        type: 'int', min: 0, max:9, disabled: false\n      },{\n        id: 'encoding', label: gettext('Encoding'),\n        type: 'text', disabled: false,  node: 'database',\n        control: 'node-ajax-options', url: 'get_encodings'\n      },{\n        id: 'no_of_jobs', label: gettext('Number of jobs'),\n        type: 'int', deps: ['format'], disabled: function(m) {\n          return !(m.get('format') === \"Directory\");\n        }\n      },{\n        id: 'role', label: gettext('Role name'),\n        control: 'node-list-by-name', node: 'role',\n        select2: { allowClear: false }\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Sections'),\n        group: gettext('Dump options'),\n        schema:[{\n          id: 'pre_data', label: gettext('Pre-data'),\n          control: Backform.CustomSwitchControl, group: gettext('Sections'),\n          deps: ['only_data', 'only_schema'], disabled: function(m) {\n            return m.get('only_data')\n                   || m.get('only_schema');\n          }\n        },{\n          id: 'data', label: gettext('Data'),\n          control: Backform.CustomSwitchControl, group: gettext('Sections'),\n          deps: ['only_data', 'only_schema'], disabled: function(m) {\n            return m.get('only_data')\n                   || m.get('only_schema');\n          }\n        },{\n          id: 'post_data', label: gettext('Post-data'),\n          control: Backform.CustomSwitchControl, group: gettext('Sections'),\n          deps: ['only_data', 'only_schema'], disabled: function(m) {\n            return m.get('only_data')\n                   || m.get('only_schema');\n          }\n        }]\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Type of objects'),\n        group: gettext('Dump options'),\n        schema:[{\n          id: 'only_data', label: gettext('Only data'),\n          control: Backform.CustomSwitchControl, group: gettext('Type of objects'),\n          deps: ['pre_data', 'data', 'post_data','only_schema'], disabled: function(m) {\n            return m.get('pre_data')\n                   || m.get('data')\n                   || m.get('post_data')\n                   || m.get('only_schema');\n          }\n        },{\n          id: 'only_schema', label: gettext('Only schema'),\n          control: Backform.CustomSwitchControl, group: gettext('Type of objects'),\n          deps: ['pre_data', 'data', 'post_data', 'only_data'], disabled: function(m) {\n            return m.get('pre_data')\n                   || m.get('data')\n                   || m.get('post_data')\n                   || m.get('only_data');\n          }\n        },{\n          id: 'blobs', label: gettext('Blobs'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Type of objects')\n        }]\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Do not save'),\n        group: gettext('Dump options'),\n        schema:[{\n          id: 'dns_owner', label: gettext('Owner'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Do not save')\n        },{\n          id: 'dns_privilege', label: gettext('Privilege'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Do not save')\n        },{\n          id: 'dns_tablespace', label: gettext('Tablespace'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Do not save')\n        },{\n          id: 'dns_unlogged_tbl_data', label: gettext('Unlogged table data'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Do not save')\n        }]\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Queries'),\n        group: gettext('Dump options'),\n        schema:[{\n          id: 'use_column_inserts', label: gettext('Use Column Inserts'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Queries')\n        },{\n          id: 'use_insert_commands', label: gettext('Use Insert Commands'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Queries')\n        },{\n          id: 'include_create_database', label: gettext('Include CREATE DATABASE statement'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Queries')\n        },{\n          id: 'include_drop_database', label: gettext('Include DROP DATABASE statement'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Queries')\n        }]\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Disable'),\n        group: gettext('Dump options'),\n        schema:[{\n          id: 'disable_trigger', label: gettext('Trigger'),\n          control: Backform.CustomSwitchControl, group: gettext('Disable'),\n          deps: ['only_data'], disabled: function(m) {\n            return !(m.get('only_data'));\n          }\n        },{\n          id: 'disable_quoting', label: gettext('$ quoting'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Disable')\n        }]\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Miscellaneous'),\n        group: gettext('Dump options'),\n        schema:[{\n          id: 'with_oids', label: gettext('With OID(s)'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Miscellaneous')\n        },{\n          id: 'verbose', label: gettext('Verbose messages'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Miscellaneous')\n        },{\n          id: 'dqoute', label: gettext('Force double quote on identifiers'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Miscellaneous')\n        },{\n          id: 'use_set_session_auth', label: gettext('Use SET SESSION AUTHORIZATION'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Miscellaneous')\n        }]\n      }],\n      validate: function() {\n        return null;\n      }\n    });\n\n    // Create an Object Backup of pgBrowser class\n    pgBrowser.Backup  = {\n      init: function() {\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        // Define list of nodes on which backup context menu option appears\n        var backup_supported_nodes = [\n              'database', 'schema', 'table', 'partition'\n            ];\n\n        /**\n          Enable/disable backup menu in tools based\n          on node selected\n          if selected node is present in supported_nodes,\n          menu will be enabled otherwise disabled.\n          Also, hide it for system view in catalogs\n        */\n        var menu_enabled = function(itemData, item, data) {\n          var t = pgBrowser.tree, i = item, d = itemData;\n          var parent_item = t.hasParent(i) ? t.parent(i): null,\n              parent_data = parent_item ? t.itemData(parent_item) : null;\n            if(!_.isUndefined(d) && !_.isNull(d) && !_.isNull(parent_data)) {\n                if (_.indexOf(backup_supported_nodes, d._type) !== -1 &&\n                parent_data._type != 'catalog') {\n                    if (d._type == 'database' && d.allowConn)\n                      return true;\n                    else if(d._type != 'database')\n                      return true;\n                    else\n                      return false;\n                }\n                else\n                  return false;\n            }\n            else\n              return false;\n        };\n\n        var menu_enabled_server = function(itemData, item, data) {\n          var t = pgBrowser.tree, i = item, d = itemData;\n          var parent_item = t.hasParent(i) ? t.parent(i): null,\n              parent_data = parent_item ? t.itemData(parent_item) : null;\n              // If server node selected && connected\n              if(!_.isUndefined(d) && !_.isNull(d))\n                return (('server' === d._type) && d.connected);\n              else\n                false;\n        };\n\n        // Define the nodes on which the menus to be appear\n        var menus = [{\n          name: 'backup_global', module: this,\n          applies: ['tools'], callback: 'start_backup_global',\n          priority: 12, label: gettext('Backup Globals...'),\n          icon: 'fa fa-floppy-o', enable: menu_enabled_server\n        },{\n          name: 'backup_server', module: this,\n          applies: ['tools'], callback: 'start_backup_server',\n          priority: 12, label: gettext('Backup Server...'),\n          icon: 'fa fa-floppy-o', enable: menu_enabled_server\n        },{\n          name: 'backup_global_ctx', module: this, node: 'server',\n          applies: ['context'], callback: 'start_backup_global',\n          priority: 12, label: gettext('Backup Globals...'),\n          icon: 'fa fa-floppy-o', enable: menu_enabled_server\n        },{\n          name: 'backup_server_ctx', module: this, node: 'server',\n          applies: ['context'], callback: 'start_backup_server',\n          priority: 12, label: gettext('Backup Server...'),\n          icon: 'fa fa-floppy-o', enable: menu_enabled_server\n        },{\n          name: 'backup_object', module: this,\n          applies: ['tools'], callback: 'backup_objects',\n          priority: 11, label: gettext('Backup...'),\n          icon: 'fa fa-floppy-o', enable: menu_enabled\n        }];\n\n        for (var idx = 0; idx < backup_supported_nodes.length; idx++) {\n          menus.push({\n            name: 'backup_' + backup_supported_nodes[idx],\n            node: backup_supported_nodes[idx], module: this,\n            applies: ['context'], callback: 'backup_objects',\n            priority: 11, label: gettext('Backup...'),\n            icon: 'fa fa-floppy-o', enable: menu_enabled\n            });\n        }\n\n        pgAdmin.Browser.add_menus(menus);\n        return this;\n      },\n      start_backup_global: function(action, item) {\n        var params = {'globals': true };\n        this.start_backup_global_server.apply(\n          this, [action, item, params]\n        );\n      },\n      start_backup_server: function(action, item) {\n        var params = {'server': true };\n        this.start_backup_global_server.apply(\n          this, [action, item, params]\n        );\n      },\n\n      // Callback to draw Backup Dialog for globals/server\n      start_backup_global_server: function(action, item, params) {\n        var i = item || pgBrowser.tree.selected(),\n          server_data = null;\n\n        while (i) {\n          var node_data = pgBrowser.tree.itemData(i);\n          if (node_data._type == 'server') {\n            server_data = node_data;\n            break;\n          }\n\n          if (pgBrowser.tree.hasParent(i)) {\n            i = $(pgBrowser.tree.parent(i));\n          } else {\n            alertify.alert(gettext(\"Please select server or child node from the browser tree.\"));\n            break;\n          }\n        }\n\n        if (!server_data) {\n          return;\n        }\n\n        var module = 'paths',\n          preference_name = 'pg_bin_dir',\n          msg = gettext('Please configure the PostgreSQL Binary Path in the Preferences dialog.');\n\n        if ((server_data.type && server_data.type == 'ppas') ||\n            server_data.server_type == 'ppas') {\n          preference_name = 'ppas_bin_dir';\n          msg = gettext('Please configure the EDB Advanced Server Binary Path in the Preferences dialog.');\n        }\n\n        var preference = pgBrowser.get_preference(module, preference_name);\n\n        if(preference) {\n          if (!preference.value) {\n            alertify.alert(gettext('Configuration required'), msg);\n            return;\n          }\n        } else {\n          alertify.alert(S(gettext('Failed to load preference %s of module %s')).sprintf(preference_name, module).value());\n          return;\n        }\n\n        var of_type = undefined;\n\n        // Set Notes according to type of backup\n        if (!_.isUndefined(params['globals']) && params['globals']) {\n          of_type = 'globals';\n        } else {\n          of_type = 'server';\n        }\n\n        var DialogName = 'BackupDialog_' + of_type,\n            DialogTitle = ((of_type == 'globals') ?\n              gettext('Backup Globals...') :\n                gettext('Backup Server...'));\n\n        if(!alertify[DialogName]) {\n          alertify.dialog(DialogName ,function factory() {\n            return {\n               main: function(title) {\n                this.set('title', title);\n               },\n               build: function() {\n                alertify.pgDialogBuild.apply(this);\n               },\n               setup:function() {\n                return {\n                  buttons: [{\n                      text: '', className: 'btn btn-default pull-left fa fa-lg fa-info',\n                      attrs:{name:'object_help', type:'button', url: 'backup.html', label: gettext('Backup')}\n                    },{\n                      text: '', key: 112, className: 'btn btn-default pull-left fa fa-lg fa-question',\n                      attrs:{\n                        name:'dialog_help', type:'button', label: gettext('Backup'),\n                        url: url_for('help.static', {'filename': 'backup_dialog.html'})\n                      }\n                    },{\n                      text: gettext('Backup'), key: 13, className: 'btn btn-primary fa fa-lg fa-save pg-alertify-button',\n                      'data-btn-name': 'backup'\n                    },{\n                      text: gettext('Cancel'), key: 27, className: 'btn btn-danger fa fa-lg fa-times pg-alertify-button',\n                      'data-btn-name': 'cancel'\n                  }],\n                  // Set options for dialog\n                  options: {\n                    title: DialogTitle,\n                    //disable both padding and overflow control.\n                    padding : !1,\n                    overflow: !1,\n                    model: 0,\n                    resizable: true,\n                    maximizable: true,\n                    pinnable: false,\n                    closableByDimmer: false,\n                    modal: false\n                  }\n                };\n              },\n              hooks: {\n                // Triggered when the dialog is closed\n                onclose: function() {\n                  if (this.view) {\n                    // clear our backform model/view\n                    this.view.remove({data: true, internal: true, silent: true});\n                  }\n                }\n              },\n              prepare: function() {\n                var self = this;\n                // Disable Backup button until user provides Filename\n                this.__internal.buttons[2].element.disabled = true;\n\n                var $container = $(\"<div class='backup_dialog'></div>\");\n                // Find current/selected node\n                var t = pgBrowser.tree,\n                  i = t.selected(),\n                  d = i && i.length == 1 ? t.itemData(i) : undefined,\n                  node = d && pgBrowser.Nodes[d._type];\n\n                if (!d)\n                  return;\n                // Create treeInfo\n                var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n                // Instance of backbone model\n                var newModel = new BackupModel(\n                  {type: of_type}, {node_info: treeInfo}\n                  ),\n                  fields = Backform.generateViewSchema(\n                    treeInfo, newModel, 'create', node, treeInfo.server, true\n                  );\n\n                var view = this.view = new Backform.Dialog({\n                  el: $container, model: newModel, schema: fields\n                });\n                // Add our class to alertify\n                $(this.elements.body.childNodes[0]).addClass(\n                  'alertify_tools_dialog_properties obj_properties'\n                );\n                // Render dialog\n                view.render();\n\n                this.elements.content.appendChild($container.get(0));\n\n                // Listen to model & if filename is provided then enable Backup button\n                this.view.model.on('change', function() {\n                    if (!_.isUndefined(this.get('file')) && this.get('file') !== '') {\n                      this.errorModel.clear();\n                      self.__internal.buttons[2].element.disabled = false;\n                    } else {\n                      self.__internal.buttons[2].element.disabled = true;\n                      this.errorModel.set('file', gettext('Please provide a filename'))\n                    }\n                });\n              },\n              // Callback functions when click on the buttons of the Alertify dialogs\n              callback: function(e) {\n                // Fetch current server id\n                  var t = pgBrowser.tree,\n                    i = t.selected(),\n                    d = i && i.length == 1 ? t.itemData(i) : undefined,\n                    node = d && pgBrowser.Nodes[d._type];\n\n                if (e.button.element.name == \"dialog_help\" || e.button.element.name == \"object_help\") {\n                  e.cancel = true;\n                  pgBrowser.showHelp(e.button.element.name, e.button.element.getAttribute('url'),\n                    node, i, e.button.element.getAttribute('label'));\n                  return;\n                }\n\n                if (e.button['data-btn-name'] === \"backup\") {\n\n                  if (!d)\n                    return;\n\n                  var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n                  var self = this,\n                    baseUrl = url_for('backup.create_server_job', {'sid': treeInfo.server._id}),\n                    args =  this.view.model.toJSON();\n\n                  $.ajax({\n                    url: baseUrl,\n                    method: 'POST',\n                    data:{ 'data': JSON.stringify(args) },\n                    success: function(res) {\n                      if (res.success) {\n                        alertify.success(gettext('Backup job created.'), 5);\n                        pgBrowser.Events.trigger('pgadmin-bgprocess:created', self);\n                      } else {\n                        console.log(res);\n                      }\n                    },\n                    error: function(xhr, status, error) {\n                      try {\n                        var err = $.parseJSON(xhr.responseText);\n                        alertify.alert(\n                          gettext('Backup job failed.'),\n                          err.errormsg\n                        );\n                      } catch (e) {}\n                    }\n                  });\n                }\n              }\n          };\n       });\n      }\n        alertify[DialogName](true).resizeTo('60%','50%');\n     },\n\n      // Callback to draw Backup Dialog for objects\n      backup_objects: function(action, treeItem) {\n\n        var i = treeItem || pgBrowser.tree.selected(),\n          server_data = null;\n\n        while (i) {\n          var node_data = pgBrowser.tree.itemData(i);\n          if (node_data._type == 'server') {\n            server_data = node_data;\n            break;\n          }\n\n          if (pgBrowser.tree.hasParent(i)) {\n            i = $(pgBrowser.tree.parent(i));\n          } else {\n            alertify.alert(gettext(\"Please select server or child node from tree.\"));\n            break;\n          }\n        }\n\n        if (!server_data) {\n          return;\n        }\n\n        var module = 'paths',\n          preference_name = 'pg_bin_dir',\n          msg = gettext('Please set binary path for PostgreSQL Server from preferences.');\n\n        if ((server_data.type && server_data.type == 'ppas') ||\n            server_data.server_type == 'ppas') {\n          preference_name = 'ppas_bin_dir';\n          msg = gettext('Please set binary path for EDB Postgres Advanced Server from preferences.');\n        }\n\n        var preference = pgBrowser.get_preference(module, preference_name);\n\n        if(preference) {\n          if (!preference.value) {\n            alertify.alert(msg);\n            return;\n          }\n        } else {\n          alertify.alert(S(gettext('Failed to load preference %s of module %s')).sprintf(preference_name, module).value());\n          return;\n        }\n\n        var title = S(gettext('Backup (%s: %s)')),\n            tree = pgBrowser.tree,\n            item = treeItem || tree.selected(),\n            data = item && item.length == 1 && tree.itemData(item),\n            node = data && data._type && pgBrowser.Nodes[data._type];\n\n        if (!node)\n          return;\n\n        title = title.sprintf(node.label, data.label).value();\n\n        if(!alertify.backup_objects) {\n          // Create Dialog title on the fly with node details\n          alertify.dialog('backup_objects' ,function factory() {\n            return {\n               main: function(title) {\n                this.set('title', title);\n               },\n               build: function() {\n                alertify.pgDialogBuild.apply(this);\n               },\n               setup:function() {\n                return {\n                  buttons: [{\n                      text: '', className: 'btn btn-default pull-left fa fa-lg fa-info',\n                      attrs:{name:'object_help', type:'button', url: 'backup.html', label: gettext('Backup')}\n                    },{\n                      text: '', key: 112, className: 'btn btn-default pull-left fa fa-lg fa-question',\n                      attrs:{\n                        name:'dialog_help', type:'button', label: gettext('Backup'),\n                        url: url_for('help.static', {'filename': 'backup_dialog.html'})\n                      }\n                    },{\n                      text: gettext('Backup'), key: 13, className: 'btn btn-primary fa fa-lg fa-save pg-alertify-button',\n                      'data-btn-name': 'backup'\n                    },{\n                      text: gettext('Cancel'), key: 27, className: 'btn btn-danger fa fa-lg fa-times pg-alertify-button',\n                      'data-btn-name': 'cancel'\n                  }],\n                  // Set options for dialog\n                  options: {\n                    title: title,\n                    //disable both padding and overflow control.\n                    padding : !1,\n                    overflow: !1,\n                    model: 0,\n                    resizable: true,\n                    maximizable: true,\n                    pinnable: false,\n                    closableByDimmer: false,\n                    modal: false\n                  }\n                };\n              },\n              hooks: {\n                // triggered when the dialog is closed\n                onclose: function() {\n                  if (this.view) {\n                    this.view.remove({data: true, internal: true, silent: true});\n                  }\n                }\n              },\n              prepare: function() {\n                var self = this;\n                // Disable Backup button until user provides Filename\n                this.__internal.buttons[2].element.disabled = true;\n                var $container = $(\"<div class='backup_dialog'></div>\");\n                var t = pgBrowser.tree,\n                  i = t.selected(),\n                  d = i && i.length == 1 ? t.itemData(i) : undefined,\n                  node = d && pgBrowser.Nodes[d._type];\n\n                if (!d)\n                  return;\n\n                var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n                var newModel = new BackupObjectModel(\n                  {}, {node_info: treeInfo}\n                  ),\n                  fields = Backform.generateViewSchema(\n                    treeInfo, newModel, 'create', node, treeInfo.server, true\n                  );\n\n                var view = this.view = new Backform.Dialog({\n                  el: $container, model: newModel, schema: fields\n                });\n\n                $(this.elements.body.childNodes[0]).addClass(\n                  'alertify_tools_dialog_properties obj_properties'\n                );\n\n                view.render();\n\n                this.elements.content.appendChild($container.get(0));\n\n                 // Listen to model & if filename is provided then enable Backup button\n                this.view.model.on('change', function() {\n                    if (!_.isUndefined(this.get('file')) && this.get('file') !== '') {\n                      this.errorModel.clear();\n                      self.__internal.buttons[2].element.disabled = false;\n                    } else {\n                      self.__internal.buttons[2].element.disabled = true;\n                      this.errorModel.set('file', gettext('Please provide filename'))\n                    }\n                });\n\n              },\n              // Callback functions when click on the buttons of the Alertify dialogs\n              callback: function(e) {\n                // Fetch current server id\n                  var t = pgBrowser.tree,\n                    i = t.selected(),\n                    d = i && i.length == 1 ? t.itemData(i) : undefined,\n                    node = d && pgBrowser.Nodes[d._type];\n\n                if (e.button.element.name == \"dialog_help\" || e.button.element.name == \"object_help\") {\n                  e.cancel = true;\n                  pgBrowser.showHelp(e.button.element.name, e.button.element.getAttribute('url'),\n                    node, i, e.button.element.getAttribute('label'));\n                  return;\n                }\n\n                if (e.button['data-btn-name'] === \"backup\") {\n                  if (!d)\n                    return;\n\n                  var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n                  // Set current database into model\n                  this.view.model.set('database', treeInfo.database._label);\n\n                  // We will remove once object tree is implemented\n                  // If selected node is Schema then add it in model\n                  if(d._type == 'schema') {\n                    var schemas = [];\n                    schemas.push(d._label);\n                    this.view.model.set('schemas', schemas);\n                  }\n                  // If selected node is Table then add it in model along with\n                  // its schema\n                  if(d._type == 'table') {\n                    this.view.model.set(\n                      'tables', [[treeInfo.schema._label, d._label]]\n                    );\n                  }\n\n                  // Remove ratio attribute from model if it has empty string.\n                  // The valid value can be between 0 to 9.\n                  if (_.isEmpty(this.view.model.get('ratio'))) {\n                    this.view.model.unset('ratio');\n                  }\n\n                  var self = this,\n                    baseUrl = url_for('backup.create_object_job', {'sid': treeInfo.server._id}),\n                      args =  this.view.model.toJSON();\n\n                  $.ajax({\n                    url: baseUrl,\n                    method: 'POST',\n                    data:{ 'data': JSON.stringify(args) },\n                    success: function(res) {\n                      if (res.success) {\n                        alertify.success(gettext('Backup job created.'), 5);\n                        pgBrowser.Events.trigger('pgadmin-bgprocess:created', self);\n                      }\n                    },\n                    error: function(xhr, status, error) {\n                      try {\n                        var err = $.parseJSON(xhr.responseText);\n                        alertify.alert(\n                          gettext('Backup job failed.'),\n                          err.errormsg\n                        );\n                      } catch (e) {}\n                    }\n                  });\n                }\n              }\n            };\n          });\n        }\n        alertify.backup_objects(title).resizeTo('65%','60%');\n      }\n    };\n    return pgBrowser.Backup;\n  });\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/backup/static/js/backup.js","// Restore dialog\ndefine('tools.restore', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'pgadmin.alertifyjs', 'pgadmin.browser', 'backbone', 'backgrid',\n  'backform', 'pgadmin.browser.node'\n], function(\n  gettext, url_for, $, _, S, alertify, pgBrowser, Backbone, Backgrid, Backform,\n  pgNode\n) {\n\n    // if module is already initialized, refer to that.\n    if (pgBrowser.Restore) {\n      return pgBrowser.Restore;\n    }\n\n    var CustomSwitchControl = Backform.CustomSwitchControl = Backform.SwitchControl.extend({\n        template: _.template([\n          '<label class=\"<%=Backform.controlLabelClassName%> custom_switch_label_class\"><%=label%></label>',\n          '<div class=\"<%=Backform.controlsClassName%> custom_switch_control_class\">',\n          '  <div class=\"checkbox\">',\n          '    <label>',\n          '      <input type=\"checkbox\" class=\"<%=extraClasses.join(\\' \\')%>\" name=\"<%=name%>\" <%=value ? \"checked=\\'checked\\'\" : \"\"%> <%=disabled ? \"disabled\" : \"\"%> <%=required ? \"required\" : \"\"%> />',\n          '    </label>',\n          '  </div>',\n          '</div>',\n          '<% if (helpMessage && helpMessage.length) { %>',\n          '  <span class=\"<%=Backform.helpMessageClassName%>\"><%=helpMessage%></span>',\n          '<% } %>'\n        ].join(\"\\n\")),\n        className: 'pgadmin-control-group form-group pg-el-xs-4'\n    });\n\n    //Restore Model (Objects like Database/Schema/Table)\n    var RestoreObjectModel = Backbone.Model.extend({\n      idAttribute: 'id',\n      defaults: {\n        custom: false,\n        file: undefined,\n        role: undefined,\n        format: 'custom',\n        verbose: true,\n        blobs: true,\n        encoding: undefined,\n        database: undefined,\n        schemas: undefined,\n        tables: undefined,\n        functions: undefined,\n        triggers: undefined,\n        trigger_funcs: undefined,\n        indexes: undefined\n      },\n\n      // Default values!\n      initialize: function(attrs, args) {\n        // Set default options according to node type selection by user\n        var node_type = attrs.node_data.type;\n\n        if (node_type) {\n          // Only_Schema option\n          if (node_type === 'function' || node_type === 'index'\n          || node_type === 'trigger') {\n            this.set({'only_schema': true}, {silent: true});\n          }\n\n          // Only_Data option\n          if (node_type === 'table') {\n            this.set({'only_data': true}, {silent: true});\n          }\n\n          // Clean option\n          if (node_type === 'function' || node_type === 'trigger_function') {\n            this.set({'clean': true}, {silent: true});\n          }\n        }\n        Backbone.Model.prototype.initialize.apply(this, arguments);\n      },\n      schema: [{\n        id: 'format', label: gettext('Format'),\n        type: 'text', disabled: false,\n        control: 'select2', select2: {\n            allowClear: false,\n            width: \"100%\"\n        },\n        options: [\n          {label: gettext('Custom or tar'), value: \"custom\"},\n          {label: gettext('Directory'), value: \"directory\"}\n        ]\n      },{\n        id: 'file', label: gettext('Filename'),\n        type: 'text', disabled: false, control: Backform.FileControl,\n        dialog_type: 'select_file', supp_types: ['*', 'backup','sql', 'patch']\n      },{\n        id: 'no_of_jobs', label: gettext('Number of jobs'),\n        type: 'int'\n      },{\n        id: 'role', label: gettext('Role name'),\n        control: 'node-list-by-name', node: 'role',\n        select2: { allowClear: false }\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Sections'),\n        group: gettext('Restore options'),\n        schema:[{\n          id: 'pre_data', label: gettext('Pre-data'),\n          control: Backform.CustomSwitchControl, group: gettext('Sections'),\n          deps: ['only_data', 'only_schema'], disabled: function(m) {\n            return this.node.type !== 'function' && this.node.type !== 'table'\n                   && this.node.type !== 'trigger'\n                   && this.node.type !== 'trigger_function'\n                   && (m.get('only_data') || m.get('only_schema'));\n          }\n        },{\n          id: 'data', label: gettext('Data'),\n          control: Backform.CustomSwitchControl, group: gettext('Sections'),\n          deps: ['only_data', 'only_schema'], disabled: function(m) {\n            return this.node.type !== 'function' && this.node.type !== 'table'\n                   && this.node.type !== 'trigger'\n                   && this.node.type !== 'trigger_function'\n                   && (m.get('only_data') || m.get('only_schema'));\n          }\n        },{\n          id: 'post_data', label: gettext('Post-data'),\n          control: Backform.CustomSwitchControl, group: gettext('Sections'),\n          deps: ['only_data', 'only_schema'], disabled: function(m) {\n            return this.node.type !== 'function' && this.node.type !== 'table'\n                   && this.node.type !== 'trigger'\n                   && this.node.type !== 'trigger_function'\n                   && (m.get('only_data') || m.get('only_schema'));\n          }\n        }]\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Type of objects'),\n        group: gettext('Restore options'),\n        schema:[{\n          id: 'only_data', label: gettext('Only data'),\n          control: Backform.CustomSwitchControl, group: gettext('Type of objects'),\n          deps: ['pre_data', 'data', 'post_data','only_schema'], disabled: function(m) {\n            return (this.node.type !== 'database' && this.node.type !== 'schema')\n                   || ( m.get('pre_data')\n                        ||m.get('data')\n                        || m.get('post_data')\n                        || m.get('only_schema')\n                      );\n          }\n        },{\n          id: 'only_schema', label: gettext('Only schema'),\n          control: Backform.CustomSwitchControl, group: gettext('Type of objects'),\n          deps: ['pre_data', 'data', 'post_data', 'only_data'], disabled: function(m) {\n            return (this.node.type !== 'database' && this.node.type !== 'schema')\n                   || ( m.get('pre_data')\n                        || m.get('data')\n                        || m.get('post_data')\n                        || m.get('only_data')\n                      );\n          }\n        }]\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Do not save'),\n        group: gettext('Restore options'),\n        schema:[{\n          id: 'dns_owner', label: gettext('Owner'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Do not save')\n        },{\n          id: 'dns_privilege', label: gettext('Privilege'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Do not save')\n        },{\n          id: 'dns_tablespace', label: gettext('Tablespace'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Do not save')\n        }]\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Queries'),\n        group: gettext('Restore options'),\n        schema:[{\n          id: 'include_create_database', label: gettext('Include CREATE DATABASE statement'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Queries')\n        },{\n          id: 'clean', label: gettext('Clean before restore'),\n          control: Backform.CustomSwitchControl, group: gettext('Queries'),\n          disabled: function(m) {\n            return this.node.type === 'function' ||\n                     this.node.type === 'trigger_function';\n          }\n        },{\n          id: 'single_transaction', label: gettext('Single transaction'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Queries')\n        }]\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Disable'),\n        group: gettext('Restore options'),\n        schema:[{\n          id: 'disable_trigger', label: gettext('Trigger'),\n          control: Backform.CustomSwitchControl, group: gettext('Disable')\n        },{\n          id: 'no_data_fail_table', label: gettext('No data for Failed Tables'),\n          control: Backform.CustomSwitchControl, disabled: false, group: gettext('Disable')\n        }]\n      },{\n        type: 'nested', control: 'fieldset', label: gettext('Miscellaneous / Behavior'),\n        group: gettext('Restore options'),\n        schema:[{\n          id: 'verbose', label: gettext('Verbose messages'),\n          control: Backform.CustomSwitchControl, disabled: false,\n          group: gettext('Miscellaneous / Behavior')\n        },{\n          id: 'use_set_session_auth', label: gettext('Use SET SESSION AUTHORIZATION'),\n          control: Backform.CustomSwitchControl, disabled: false,\n          group: gettext('Miscellaneous / Behavior')\n        },{\n          id: 'exit_on_error', label: gettext('Exit on error'),\n          control: Backform.CustomSwitchControl, disabled: false,\n          group: gettext('Miscellaneous / Behavior')\n        }]\n      }],\n      validate: function() {\n        return null;\n      }\n    });\n\n    // Create an Object Restore of pgBrowser class\n    pgBrowser.Restore  = {\n      init: function() {\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        // Define list of nodes on which restore context menu option appears\n        var restore_supported_nodes = [\n              'database', 'schema',\n              'table', 'function',\n              'trigger', 'index',\n              'partition'\n            ];\n\n        /**\n          Enable/disable restore menu in tools based\n          on node selected\n          if selected node is present in supported_nodes,\n          menu will be enabled otherwise disabled.\n          Also, hide it for system view in catalogs\n        */\n        var menu_enabled = function(itemData, item, data) {\n          var t = pgBrowser.tree, i = item, d = itemData;\n          var parent_item = t.hasParent(i) ? t.parent(i): null,\n              parent_data = parent_item ? t.itemData(parent_item) : null;\n            if(!_.isUndefined(d) && !_.isNull(d) && !_.isNull(parent_data)) {\n              if (_.indexOf(restore_supported_nodes, d._type) !== -1 &&\n                is_parent_catalog(itemData, item, data) ) {\n                  if (d._type == 'database' && d.allowConn)\n                    return true;\n                  else if(d._type != 'database')\n                    return true;\n                  else\n                    return false;\n              }\n              else\n                return false;\n            }\n            else\n              return false;\n        };\n\n        var is_parent_catalog = function(itemData, item, data) {\n          var t = pgBrowser.tree, i = item, d = itemData;\n          // To iterate over tree to check parent node\n          while (i) {\n            // If it is schema then allow user to restore\n            if (_.indexOf(['catalog'], d._type) > -1)\n              return false;\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // by default we do not want to allow create menu\n          return true;\n        }\n\n        // Define the nodes on which the menus to be appear\n        var menus = [{\n          name: 'restore_object', module: this,\n          applies: ['tools'], callback: 'restore_objects',\n          priority: 13, label: gettext('Restore...'),\n          icon: 'fa fa-upload', enable: menu_enabled\n        }];\n\n        for (var idx = 0; idx < restore_supported_nodes.length; idx++) {\n          menus.push({\n            name: 'restore_' + restore_supported_nodes[idx],\n            node: restore_supported_nodes[idx], module: this,\n            applies: ['context'], callback: 'restore_objects',\n            priority: 13, label: gettext('Restore...'),\n            icon: 'fa fa-upload', enable: menu_enabled\n            });\n        }\n\n        pgAdmin.Browser.add_menus(menus);\n        return this;\n      },\n      // Callback to draw Backup Dialog for objects\n      restore_objects: function(action, treeItem) {\n\n        var i = treeItem || pgBrowser.tree.selected(),\n          server_data = null;\n\n        while (i) {\n          var node_data = pgBrowser.tree.itemData(i);\n          if (node_data._type == 'server') {\n            server_data = node_data;\n            break;\n          }\n\n          if (pgBrowser.tree.hasParent(i)) {\n            i = $(pgBrowser.tree.parent(i));\n          } else {\n            alertify.alert(gettext(\"Please select server or child node from tree.\"));\n            break;\n          }\n        }\n\n        if (!server_data) {\n          return;\n        }\n\n        var module = 'paths',\n          preference_name = 'pg_bin_dir',\n          msg = gettext('Please configure the PostgreSQL Binary Path in the Preferences dialog.');\n\n        if ((server_data.type && server_data.type == 'ppas') ||\n            server_data.server_type == 'ppas') {\n          preference_name = 'ppas_bin_dir';\n          msg = gettext('Please configure the EDB Advanced Server Binary Path in the Preferences dialog.');\n        }\n\n        var preference = pgBrowser.get_preference(module, preference_name);\n\n        if(preference) {\n          if (!preference.value) {\n            alertify.alert(gettext('Configuration required'), msg);\n            return;\n          }\n        } else {\n          alertify.alert(S(gettext('Failed to load preference %s of module %s')).sprintf(preference_name, module).value());\n          return;\n        }\n\n        var title = S(gettext('Restore (%s: %s)')),\n            tree = pgBrowser.tree,\n            item = treeItem || tree.selected(),\n            data = item && item.length == 1 && tree.itemData(item),\n            node = data && data._type && pgBrowser.Nodes[data._type];\n\n        if (!node)\n          return;\n\n        title = title.sprintf(node.label, data.label).value();\n\n        if(!alertify.pg_restore) {\n          // Create Dialog title on the fly with node details\n          alertify.dialog('pg_restore' ,function factory() {\n            return {\n               main: function(title, item, data, node) {\n                this.set('title', title);\n                this.setting('pg_node', node);\n                this.setting('pg_item', item);\n                this.setting('pg_item_data', data);\n               },\n               build: function() {\n                alertify.pgDialogBuild.apply(this)\n               },\n               setup:function() {\n                return {\n                  buttons: [{\n                    text: '', className: 'btn btn-default pull-left fa fa-lg fa-info',\n                    attrs:{name:'object_help', type:'button', url: 'backup.html', label: gettext('Restore')}\n                  },{\n                    text: '', key: 112, className: 'btn btn-default pull-left fa fa-lg fa-question',\n                    attrs:{\n                      name:'dialog_help', type:'button', label: gettext('Restore'),\n                      url: url_for('help.static', {'filename': 'restore_dialog.html'})\n                    }\n                  },{\n                    text: gettext('Restore'), key: 13,\n                    className: 'btn btn-primary fa fa-upload pg-alertify-button', restore: true,\n                    'data-btn-name': 'restore'\n                  },{\n                    text: gettext('Cancel'), key: 27,\n                    className: 'btn btn-danger fa fa-lg fa-times pg-alertify-button', restore: false,\n                    'data-btn-name': 'cancel'\n                  }],\n                  // Set options for dialog\n                  options: {\n                    title: title,\n                    //disable both padding and overflow control.\n                    padding : !1,\n                    overflow: !1,\n                    model: 0,\n                    resizable: true,\n                    maximizable: true,\n                    pinnable: false,\n                    closableByDimmer: false,\n                    modal: false\n                  }\n                };\n              },\n              hooks: {\n                // triggered when the dialog is closed\n                onclose: function() {\n                  if (this.view) {\n                    this.view.remove({data: true, internal: true, silent: true});\n                  }\n                }\n              },\n              settings:{\n                pg_node: null,\n                pg_item: null,\n                pg_item_data: null\n              },\n              prepare: function() {\n\n                var self = this;\n                // Disable Backup button until user provides Filename\n                this.__internal.buttons[2].element.disabled = true;\n                var $container = $(\"<div class='restore_dialog'></div>\");\n                var t = pgBrowser.tree,\n                  i = t.selected(),\n                  d = i && i.length == 1 ? t.itemData(i) : undefined,\n                  node = d && pgBrowser.Nodes[d._type];\n\n                if (!d)\n                  return;\n\n                var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n                var newModel = new RestoreObjectModel(\n                  {node_data: node}, {node_info: treeInfo}\n                  ),\n                  fields = Backform.generateViewSchema(\n                    treeInfo, newModel, 'create', node, treeInfo.server, true\n                  );\n\n                var view = this.view = new Backform.Dialog({\n                  el: $container, model: newModel, schema: fields\n                });\n\n                $(this.elements.body.childNodes[0]).addClass(\n                  'alertify_tools_dialog_properties obj_properties'\n                );\n\n                view.render();\n\n                this.elements.content.appendChild($container.get(0));\n\n                 // Listen to model & if filename is provided then enable Backup button\n                this.view.model.on('change', function() {\n                    if (!_.isUndefined(this.get('file')) && this.get('file') !== '') {\n                      this.errorModel.clear();\n                      self.__internal.buttons[2].element.disabled = false;\n                    } else {\n                      self.__internal.buttons[2].element.disabled = true;\n                      this.errorModel.set('file', gettext('Please provide filename'))\n                    }\n                });\n\n              },\n              // Callback functions when click on the buttons of the Alertify dialogs\n              callback: function(e) {\n                // Fetch current server id\n                var t = pgBrowser.tree,\n                  i = this.settings['pg_item'] || t.selected(),\n                  d = this.settings['pg_item_data'] || (\n                    i && i.length == 1 ? t.itemData(i) : undefined\n                  ),\n                  node = this.settings['pg_node'] || (\n                    d && pgBrowser.Nodes[d._type]\n                  );\n\n                if (e.button.element.name == \"dialog_help\" || e.button.element.name == \"object_help\") {\n                  e.cancel = true;\n                  pgBrowser.showHelp(e.button.element.name, e.button.element.getAttribute('url'),\n                    node, i, e.button.element.getAttribute('label'));\n                  return;\n                }\n\n                if (e.button['data-btn-name'] === \"restore\") {\n                  if (!d)\n                    return;\n\n                  var info = node.getTreeNodeHierarchy.apply(node, [i]),\n                      m = this.view.model;\n                  // Set current node info into model\n                  m.set('database', info.database._label);\n                  if (!m.get('custom')) {\n                    switch (d._type) {\n                      case 'schema':\n                        m.set('schemas', [d._label]);\n                        break;\n                      case 'table':\n                        m.set('schemas', [info.schema._label]);\n                        m.set('tables', [d._label]);\n                        break;\n                      case 'function':\n                        m.set('schemas', [info.schema._label]);\n                        m.set('functions', [d._label]);\n                        break;\n                      case 'index':\n                        m.set('schemas', [info.schema._label]);\n                        m.set('indexes', [d._label]);\n                        break;\n                      case 'trigger':\n                        m.set('schemas', [info.schema._label]);\n                        m.set('triggers', [d._label]);\n                        break;\n                      case 'trigger_func':\n                        m.set('schemas', [info.schema._label]);\n                        m.set('trigger_funcs', [d._label]);\n                        break;\n                    }\n                  } else {\n                    // TODO::\n                    // When we will implement the object selection in the\n                    // import dialog, we will need to select the objects from\n                    // the tree selection tab.\n                  }\n\n                  var self = this,\n                      baseUrl = url_for('restore.create_job', {'sid': info.server._id}),\n                      args =  this.view.model.toJSON();\n\n                  $.ajax({\n                    url: baseUrl,\n                    method: 'POST',\n                    data:{ 'data': JSON.stringify(args) },\n                    success: function(res) {\n                      if (res.success) {\n                        alertify.success(\n                          gettext('Restore job created.'), 5\n                        );\n                        pgBrowser.Events.trigger('pgadmin-bgprocess:created', self);\n                      } else {\n                        console.log(res);\n                      }\n                    },\n                    error: function(xhr, status, error) {\n                      try {\n                        var err = $.parseJSON(xhr.responseText);\n                        alertify.alert(\n                          gettext('Restore failed.'),\n                          err.errormsg\n                        );\n                      } catch (e) {}\n                    }\n                  });\n                }\n             }\n          };\n        });\n      }\n\n      alertify.pg_restore(title, item, data, node).resizeTo('65%','60%');\n      }\n    };\n    return pgBrowser.Restore;\n  });\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/restore/static/js/restore.js","// Grant Wizard\ndefine([\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'alertify', 'pgadmin.browser', 'backbone', 'backgrid',\n  'pgadmin.browser.node', 'backgrid.select.all', 'backgrid.filter',\n  'pgadmin.browser.server.privilege', 'pgadmin.browser.wizard',\n], function(gettext, url_for, $, _, S, alertify, pgBrowser, Backbone, Backgrid, pgNode) {\n\n    // if module is already initialized, refer to that.\n    if (pgBrowser.GrantWizard) {\n      return pgBrowser.GrantWizard;\n    }\n\n    /**\n      It is sub model for field \"Objects\". It has fields\n      for database object types such as Schemas, Views and\n      Sequence etc.\n    */\n    var DatabaseObjectModel = pgNode.Model.extend({\n      defaults: {\n        selected: false,\n        icon: 'icon-unknown',\n        name: undefined,\n        name_with_args: undefined,\n        nspname: undefined,\n        proargs: undefined,\n        object_type: undefined,\n        object_id: undefined\n      },\n      idAttribute: 'object_id', // to uniquely identify a model object\n      toJSON: function(obj) {\n        var d = pgNode.Model.prototype.toJSON.apply(this);\n        delete d.icon;\n        return d;\n      },\n      parse: function(res) {\n\n        // Create unique object id\n        res.object_id = res.name_with_args;\n\n        // create name with args if its object is function\n        if(!_.isUndefined(res.object_type) &&\n          (res.object_type == 'Function' ||\n          res.object_type == 'Trigger Function' ||\n          res.object_type == 'Procedure'\n          ))\n          res.name_with_args = res.name+'('+(typeof(res.proargs) != 'undefined' ? res.proargs : '')+')';\n        else\n          res.name_with_args = res.name;\n\n        return res;\n      },\n\n      validate: function() {\n\n        /*\n        * Triggers error messages for object types \"selected\"\n        * if it is empty/undefined/null\n        */\n        var err = {},\n          errmsg,\n          node = this.get('objects').toJSON();\n        if (_.isEmpty(node)) {\n          err['selected'] = gettext('Please select any database object type.');\n          errmsg = errmsg || err['selected'];\n          this.errorModel.set('selected', errmsg);\n          return errmsg;\n        } else {\n          this.errorModel.unset('selected');\n        }\n        return null;\n      }\n    });\n\n    // Define columns for the Db Object Types grid\n    var columns = [{\n      name: \"selected\",\n\n      /*\n      Override render method of Backgrid.Extension.SelectRowCell\n      class. It has an issue: It doesn't mark rows checked if we move to next\n      page and then go back to previous page. but it must show.\n      so we handle this case by overriding the render method.\n      */\n      cell: Backgrid.Extension.SelectRowCell.extend({\n        render: function() {\n\n          // Use the Backform Control's render function\n          Backgrid.Extension.SelectRowCell.prototype.render.apply(this, arguments);\n\n          var col = this.column.get('name');\n          if (this.model && this.model.has(col)) {\n            if (this.model.get(col)) {\n              this.$el.parent().toggleClass(\"selected\", true);\n              this.model.trigger(\"backgrid:selected\", this.model, true);\n            }\n          }\n          return this;\n        }\n      }),\n\n      headerCell: \"select-all\",\n\n    },{\n      name: \"object_type\",\n      label: \"Object Type\",\n      editable: false,\n      cell: Backgrid.Cell.extend({\n        render: function() {\n\n          // Override render to add icon to Db Object column\n          Backgrid.Cell.prototype.render.apply(this, arguments);\n          this.$el.addClass(this.model.get('icon')).css({\"padding-left\": \"24px\"});\n\n          return this;\n        }\n      })\n    },{\n      name: \"nspname\",\n      label: \"Schema\",\n      cell: \"string\",\n      editable: false\n    },{\n      name: \"name_with_args\",\n      label: \"Name\",\n      cell: \"string\",\n      editable: false\n    }];\n\n    // Create an Object GrantWizard of pgBrowser class\n    pgBrowser.GrantWizard  = {\n      init: function() {\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        // Define list of nodes on which grant wizard context menu option appears\n        var supported_nodes = [\n              'schema', 'coll-function', 'coll-sequence',\n              'coll-table', 'coll-view', 'coll-procedure',\n              'coll-mview', 'database', 'coll-trigger_function'\n            ],\n\n            /**\n              Enable/disable grantwizard menu in tools based\n              on node selected\n              if selected node is present in supported_nodes,\n              menu will be enabled otherwise disabled.\n              Also, hide it for system view in catalogs\n            */\n            menu_enabled = function(itemData, item, data) {\n              var t = pgBrowser.tree, i = item, d = itemData;\n              var parent_item = t.hasParent(i) ? t.parent(i): null,\n                  parent_data = parent_item ? t.itemData(parent_item) : null;\n              if(!_.isUndefined(d) && !_.isNull(d) && !_.isNull(parent_data)) {\n                if (_.indexOf(supported_nodes, d._type) !== -1 &&\n                  parent_data._type != 'catalog') {\n                    if (d._type == 'database' && d.allowConn)\n                      return true;\n                    else if(d._type != 'database')\n                      return true;\n                    else\n                      return false;\n                }\n                else\n                  return false;\n              }\n              else\n                return false;\n            };\n\n        // Define the nodes on which the menus to be appear\n        var menus = [{\n          name: 'grant_wizard_schema', module: this,\n          applies: ['tools'], callback: 'start_grant_wizard',\n          priority: 14, label: gettext('Grant Wizard...'),\n          icon: 'fa fa-unlock-alt', enable: menu_enabled\n        }];\n\n        // Add supported menus into the menus list\n        for (var idx = 0; idx < supported_nodes.length; idx++) {\n          menus.push({\n            name: 'grant_wizard_schema_context_' + supported_nodes[idx],\n            node: supported_nodes[idx], module: this,\n            applies: ['context'], callback: 'start_grant_wizard',\n            priority: 14, label: gettext('Grant Wizard...'),\n            icon: 'fa fa-unlock-alt', enable: menu_enabled\n            });\n        }\n        pgAdmin.Browser.add_menus(menus);\n\n        return this;\n      },\n\n      // Callback to draw Wizard Dialog\n      start_grant_wizard: function(action, item) {\n\n        // Declare Wizard dialog\n        if (!alertify.wizardDialog) {\n          alertify.dialog('wizardDialog', function factory() {\n\n            // Generate wizard main container\n            var $container = $(\"<div class='wizard_dlg'></div>\");\n\n            return {\n              main: function(title) {\n                this.set('title', title);\n              },\n              setup:function() {\n                return {\n                  // Set options for dialog\n                  options: {\n                    frameless: true,\n                    resizable: true,\n                    autoReset: false,\n                    maximizable: false,\n                    closable: false,\n                    closableByDimmer: false,\n                    modal: false,\n                    pinnable: false\n                  }\n                };\n              },\n              hooks:{\n                onshow: function() {\n\n                  // Add pgadmin_grant_wizard_body class to dialog\n                  $(this.elements.body).addClass('pgadmin_grant_wizard_body');\n                }\n              },\n\n              /**\n                Returns a Paginator Class Object which is again to be rendered\n\n                @class {Backgrid.Extension.Paginator}\n                @param {Backbone.Collection} coll - from which data is fetched\n                @return {Object} paginator\n              */\n              DbPaginator: function(coll){\n                var paginator = this.paginator = new Backgrid.Extension.Paginator({\n                  collection: coll,\n                  windowSize: 8\n                });\n                return paginator;\n              },\n\n              /**\n                Create new Filter which will filter the\n                rendered grid for Select Type Tabular Data\n                @param {Backbone.PageableCollection} coll\n              */\n              DbObjectFilter: function(coll){\n                var clientSideFilter = this.clientSideFilter = new Backgrid.Extension.ClientSideFilter({\n                  collection: coll,\n                  placeholder: _('Search by object type or name'),\n\n                  // The model fields to search for matches\n                  fields: ['object_type', 'name'],\n\n                  // How long to wait after typing has stopped before searching can start\n                  wait: 150\n                });\n                return clientSideFilter;\n              },\n\n              //Enable Disable Next button of PrivilegePage\n              updateButtons: function(modified){\n                if(!modified)\n                  $('.wizard-next').prop('disabled', true);\n                else\n                  $('.wizard-next').prop('disabled', false);\n              },\n\n              /**\n                Callback called when an errorModel is set\n                with invalid value and errormsg is set into\n                status bar element and next button is disabled\n              */\n              onSessionInvalid: function(msg) {\n                $('.pg-prop-status-bar .alert-text').html(msg);\n                $('.pg-prop-status-bar').css(\"visibility\", \"visible\");\n\n                // Enable disable Next button\n                this.updateButtons(false);\n                return true;\n              },\n\n              /**\n                Callback called when anything is set into model\n                thus hide error msg element and enable next button\n                status bar element and next button is disabled\n              */\n              onSessionValidated: function(sessHasChanged) {\n                $('.pg-prop-status-bar .alert-text').empty();\n                $('.pg-prop-status-bar').css(\"visibility\", \"hidden\");\n\n                // Enable disable Next button\n                this.updateButtons(sessHasChanged);\n              },\n\n              /**\n                Remove/Delete objects, attributes\n                in wizard on wizard close or finish\n                to reclaim memory\n              */\n              releaseObjects: function(){\n                var self = this;\n\n                if(!_.isUndefined(self.dbObjectFilter)) {\n                  self.dbObjectFilter.remove();\n                  self.dbObjectFilter = undefined;\n                }\n\n                if(!_.isUndefined(self.clientSideFilter)) {\n                  self.clientSideFilter.remove();\n                  self.clientSideFilter = undefined;\n                }\n\n                // clear object priv array\n                if(!_.isNull(self.obj_priv) &&\n                  !_.isUndefined(self.obj_priv)) {\n                  self.obj_priv = [];\n                  delete self.obj_priv;\n                }\n\n                // Delete Wizard Pages, clear model and cleanup view\n                if(!_.isUndefined(self.dbObjectTypePage) &&\n                  !_.isNull(self.dbObjectTypePage)) {\n                  if(!_.isUndefined(self.dbObjectTypePage.get('model')) &&\n                    !_.isNull(self.dbObjectTypePage.get('model'))) {\n                    self.dbObjectTypePage.get('model').clear();\n                    self.dbObjectTypePage.get('view').cleanup();\n                    self.dbObjectTypePage = undefined;\n                  }\n                }\n\n                if(!_.isUndefined(self.privilegePage) &&\n                  !_.isNull(self.privilegePage)) {\n                  if(!_.isUndefined(self.privilegePage.get('model')) &&\n                    !_.isNull(self.privilegePage.get('model'))) {\n                    self.privilegePage.get('model').clear();\n                    self.privilegePage.get('view').cleanup();\n                    self.privilegePage = undefined;\n                  }\n                }\n\n                if(!_.isUndefined(self.reviewSQLPage) &&\n                  !_.isNull(self.reviewSQLPage)) {\n                  if(!_.isUndefined(self.reviewSQLPage.get('model')) &&\n                    !_.isNull(self.reviewSQLPage.get('model'))) {\n                    self.reviewSQLPage.get('model').clear();\n                    self.reviewSQLPage = undefined;\n                  }\n                }\n\n                // Remove Sql control\n                if (!_.isUndefined(self.sqlControl)) {\n                  self.sqlControl.remove();\n                }\n\n                // Clear privModel\n                if(!_.isNull(self.privModel) &&\n                  !_.isUndefined(self.privModel)) {\n                  self.privModel.clear();\n                }\n\n                // Remove collection containing db object data\n                if(!_.isNull(self.coll) &&\n                  !_.isUndefined(self.coll)) {\n                  self.coll.reset();\n                  self.coll = undefined;\n                }\n                // Delete Wizard\n                if(!_.isNull(self.wizard) &&\n                  !_.isUndefined(self.wizard)) {\n                  self.wizard.collection.reset();\n                  self.wizard.curr_page = undefined;\n                }\n\n              },\n\n              /**\n                Every time a wizard is opened, this function\n                is called everytime. It has Wizard Pages which\n                are rendered by the Wizard Class:\n\n                @class {pgBrowser.WizardPage} dbObjectType1 - This page\n                @extends {Backbone.Model}\n                renders a grid of Database Object Types such as\n                  Schemas, Views and Sequences etc.\n\n                @class {pgBrowser.WizardPage} WizardPage2 - This page\n                @extends {Backbone.Model}\n                adds Privilege Control which provides grant privileges\n                such as \"Create, Insert, Delete, Update\" so on the\n                database objects selected on Wizard Pages.\n\n                @class {pgBrowser.WizardPage} WizardPage3 - This page\n                displays the generated GRANT SQL query for the Db\n                objects selected with the specific privileges added to it.\n                @extends {Backbone.Model}\n\n                @class {Backbone.Collection} WizardCollection - It is the\n                collection of wizard pages\n\n                @class {pgBrowser.Wizard} wizard - Its task is:\n                - Create a Wizard\n                - Add Buttons, Callbacks to it.\n                - Render WizardPages\n                @extends {Backbone.View}\n\n              */\n              build: function() {\n                this.elements.content.appendChild($container.get(0));\n                alertify.pgDialogBuild.apply(this);\n              },\n\n              //Returns list of Acls defined for nodes\n              get_json_data: function(gid, sid, did) {\n                return $.ajax({\n                  async: false,\n                  url: url_for(\n                    'grant_wizard.acl',\n                    {'sid': encodeURI(sid), 'did': encodeURI(did)}\n                  ),\n                  dataType: 'jsonp'\n                });\n\n              },\n              prepare:function() {\n                var that = this;\n                $container.empty().append(\"<div class='grant_wizard_container'></div>\");\n\n                // Define el for wizard view\n                var el = $('.grant_wizard_container');\n\n                // Extract the data from the selected tree node\n                var t = pgBrowser.tree,\n                    i = t.selected(),\n                    d = this.d = i && i.length == 1 ? t.itemData(i) : undefined,\n                    info = this.info = pgBrowser.Node.getTreeNodeHierarchy(i),\n                    icon = d.icon;\n\n                /**\n                  Generate a URL using:\n                  gid, did, sid(server id), node_id(node id),\n                  node_(node name), node_type(node type)\n                  and pass it to collection which will fetch Object Type properties.\n                */\n                var gid = info['server_group']._id,\n                    sid = info.server._id,\n                    did = info.database._id,\n                    node_id = d._id,\n\n                    /**\n                      get node name only. used in mapping with object types defined\n                      in allowed_acl.json\n                     */\n                    node_type = d._type.replace('coll-', '').replace('materialized_', ''),\n                    node_label = d.label;\n\n                // Fetch privileges specific to nodes\n                var json_data = this.get_json_data(gid, sid, did);\n                var privDict = JSON.parse(json_data.responseText);\n\n                // Collection url to fetch database object types for objects field\n                var baseUrl = url_for(\n                      'grant_wizard.objects', {\n                        'sid': encodeURI(sid), 'did': encodeURI(did),\n                        'node_id': encodeURI(node_id),\n                        'node_type': encodeURI(node_type)\n                      }),\n                    // Model's save url\n                    saveUrl = url_for(\n                      'grant_wizard.apply', {\n                        'sid': encodeURI(sid), 'did': encodeURI(did)\n                      }),\n                    // generate encoded url based on wizard type\n                    msql_url = this.msql_url = url_for(\n                      'grant_wizard.modified_sql', {\n                        'sid': encodeURI(sid), 'did': encodeURI(did)\n                      }),\n                    Coll = Backbone.Collection.extend({\n                      model: DatabaseObjectModel,\n                      url: baseUrl\n                    }),\n\n                    // Create instances of collection and filter\n                    coll = this.coll = new Coll(),\n                    self = this;\n\n                coll.comparator = function(model) {\n                  return model.get('object_type');\n                }\n\n                coll.sort();\n                var dbObjectFilter = this.dbObjectFilter = this.DbObjectFilter(coll);\n\n                /**\n                  privArray holds objects selected which further helps\n                  in creating privileges Model\n                */\n                self.privArray = [];\n\n                /**\n                  Override backgrid listener \"backgrid:selected\" to\n                  Add/Remove model to/from objects collection\n                */\n                coll.on('backgrid:selected', function(model, selected) {\n                  model.set('selected', selected);\n\n                  var object_type = model.get('object_type');\n                  switch (object_type)\n                  {\n                    case 'Function':\n                      object_type = 'function';\n                      break;\n                    case 'Trigger Function':\n                      object_type = 'function';\n                      break;\n                    case 'Procedure':\n                      object_type = 'procedure';\n                      break;\n                    case 'Table':\n                      object_type = 'table';\n                      break;\n                    case 'Sequence':\n                      object_type = 'sequence';\n                      break;\n                    case 'View':\n                      object_type = 'table';\n                      break;\n                    case 'Materialized View':\n                      object_type = 'table';\n                      break;\n                    default:\n                      break;\n                  }\n\n                  /**\n                    if a row (checkbox) is checked, add that model\n                    into collection, when unchecked remove it from\n                    model.\n\n                    Also push/pop object type in/from privArray\n                  */\n                  if(selected) {\n                    if(_.indexOf(self.privArray, object_type) == -1)\n                      self.privArray.push(object_type);\n                    newModel.get('objects').add(model, { silent: true });\n                  }\n                  else {\n                    var idx = self.privArray.indexOf(object_type);\n                    if(idx !=-1)\n                      self.privArray.splice(idx, 1);\n                    newModel.get('objects').remove(model);\n                  }\n\n                  // validate model on checkbox check/uncheck\n                  var msg =  model.validate.call(newModel);\n\n                  /**\n                    If no object type is selected, set error msg\n                    and disable next button, else enable next button\n                  */\n                  if(msg)\n                    self.onSessionInvalid.call(self, msg);\n                  else\n                    self.onSessionValidated.call(self, true);\n                });\n\n                /**\n                  It is the main model with schema defined\n                  Every time a new wizard is opened,\n                  a new model should create.\n                */\n                var GrantWizardModel = pgNode.Model.extend({\n                  defaults: {\n                    objects: undefined,\n                    acl: undefined\n                  },\n                  schema: [\n                    {\n                      id: 'objects', label: gettext('Objects'), model: DatabaseObjectModel,\n                      type: 'collection', group: gettext('Objects')\n                    },\n                    {\n                      id: 'acl', label: gettext('Privileges'),\n                      model: pgAdmin.Browser.Node.PrivilegeRoleModel,\n                      type: 'collection', canAdd: true,\n                      canDelete: true, control: 'unique-col-collection'\n                    }\n                  ],\n                  urlRoot: saveUrl\n                });\n\n                /**\n                  Create instance of GrantWizard Model, provide urlRoot\n                  node_info object, Generate fields objects\n                */\n                var newModel = new GrantWizardModel({}, { node_info: info });\n\n                /**\n                  Fetch data from server and set into grid\n                  and show/hide progress bar\n                */\n                $('.wizard-progress-bar p').show();\n\n                coll.fetch({\n                  success: function(collection, data) {\n                    $('.wizard-progress-bar p').html('');\n                    $('.wizard-progress-bar').hide();\n                  },\n                  reset: true\n                }, this);\n\n                //////////////////////////////////////////////////////////////////////\n                //                                                                  //\n                //            Wizard Page for Db Object Type                        //\n                //                                                                  //\n                //////////////////////////////////////////////////////////////////////\n\n                /**\n                  Create wizard page. It renders a grid of\n                  Database Object Types such as\n                  Schemas, Views and Sequences etc.\n                  Set default values\n                */\n                var dbObjectTypePage = self.dbObjectTypePage = new pgBrowser.WizardPage({\n                  id: 1,\n                  page_title: _('Object Selection (step 1 of 3)'),\n                  disable_prev: true,\n                  disable_next: true,\n                  show_description: _('Please select objects from the list below.'),\n                  show_progress_bar: _('Please wait while fetching records...'),\n                  model: newModel,\n                  view: new (function() {\n\n                    // Set page Instance\n                    var pageView = this;\n\n                    _.extend(pageView, {\n\n                      // Remove grid if it is before render\n                      cleanup: function() {\n                        if (this.grid) {\n                          this.grid.remove();\n                          delete this.grid;\n                          this.grid = null;\n                        }\n\n                        // Remove grid element if exists\n                        if (this.el) {\n                          $(this.el).remove();\n                          delete this.el;\n                        }\n                      },\n\n                      // Delete grid before render\n                      grid: null,\n\n                      render: function() {\n\n                        // Create a grid container\n                        var gridBody =\n                              $('<div class=\"db_objects_container pg-el-xs-12\"></div>');\n\n                        // Remove grid if exits before render\n                        if (this.grid) {\n                          this.cleanup();\n                        }\n\n                        // Initialize a new Grid instance\n                        this.grid = new Backgrid.Grid({\n                          columns: _.clone(columns),\n                          collection: coll,\n                          className: \"backgrid table-bordered object_type_table pg-el-xs-12\"\n                          });\n\n                        // Render selection Type grid and paginator\n                        gridBody.append( this.grid.render().$el);\n\n                        // Render Search Filter\n                        gridBody.prepend(\n                          self.clientSideFilter.render().el);\n\n                        // Assign gridBody content to page element\n                        this.el = gridBody;\n\n                        /**\n                          Fetch selected models from collection and\n                          make rows checked in grid\n                        */\n                        newModel.get('objects').each(function(m) {\n                          var model = coll.get(m.get('object_id'));\n                          if (model) {\n                            coll.trigger('backgrid:selected', model, true);\n                          }\n                        });\n\n                        // Refresh grid to re render rows.\n                        coll.trigger('backgrid:refresh');\n\n                        return this;\n                      }\n                    });\n                  }),\n\n                  beforeNext: function(obj){\n                    var self = this;\n                    obj.options.disable_next = true;\n\n                    /**\n                      Enable/Disable next button of privilegePage if objects\n                      are present in model\n                    */\n                    if(!_.isNull(newModel.get('acl')) &&\n                      !_.isUndefined(newModel.get('acl'))) {\n                      if(newModel.get('acl').length > 0)\n                        obj.collection.at(1).set('disable_next', false);\n                      }\n\n                    // Clean the view\n                    if (self.view) {\n                      self.view.cleanup();\n                      delete self.view;\n                      self.view = null;\n                    }\n                    return true;\n                  },\n\n                });\n\n                //////////////////////////////////////////////////////////////////////\n                //                                                                  //\n                //            Wizard Page for Privilege Control                     //\n                //                                                                  //\n                //////////////////////////////////////////////////////////////////////\n\n                // Wizard for Privelege control\n                var privilegePage = self.privilegePage = new pgBrowser.WizardPage({\n                  id: 2,\n                  page_title: _('Privileges Selection (step 2 of 3)'),\n                  show_description: _('Please select privileges for the selected objects.'),\n                  disable_next: true,\n                  model: newModel,\n\n                  // Create a view function object\n                  view: new (function() {\n                    var pageView = this;\n                      _.extend(pageView, {\n\n                        // Render Privelege control to generate its html markup\n                        render: function() {\n\n                          var obj_priv = [];\n                          self.privArray = _.uniq(self.privArray);\n                          _.each(self.privArray, function(priv){\n                            self.obj_priv = obj_priv = _.union(obj_priv , privDict[priv].acl);\n                          });\n\n                          /**\n                            Define PrivModel and its instance.\n                            Privileges array is generated based on\n                            the type of nodes selected.\n                           */\n                          var privModel = self.privModel;\n                          var PrivModel = pgNode.Model.extend({\n                            defaults: {\n                              acl: undefined\n                            },\n                            schema: [\n                              {\n                                id: 'acl', label: gettext('Privileges'),\n                                model: pgAdmin.Browser.Node.PrivilegeRoleModel.extend({\n\n                                  // privileges are selected based on node clicked\n                                  privileges: obj_priv\n                                }), uniqueCol : ['grantee', 'grantor'], editable: true,\n                                type: 'collection', canAdd: true,\n                                canDelete: true, control: 'unique-col-collection'\n                              }\n                            ]\n                          });\n\n                          /**\n                            When privelege control is re-rendered, in order to\n                            render privileges based on object type selected,\n                            delete privileges from privModel which are now not\n                            present in object privileges array(object_priv)\n                           */\n                          var data = {};\n                          if (privModel) {\n                            data = privModel.toJSON();\n                            var rolePrivs = data['acl'];\n                            if (!_.isUndefined(rolePrivs) && rolePrivs.length > 0) {\n                              for (var idx in rolePrivs) {\n                                var rolePriv = (rolePrivs[idx])['privileges'],\n                                    removeIdx = [], j;\n\n                                for (j in rolePriv) {\n                                  var p = rolePriv[j];\n                                  if (_.indexOf(obj_priv, p['privilege_type']) == -1) {\n                                    removeIdx.push(j);\n                                  }\n                                }\n\n                                for (j in removeIdx) {\n                                  rolePriv.splice(j, 1);\n                                }\n                              }\n                            } else {\n                              console.log('Acls are not defined');\n                            }\n                          }\n\n                          // Instantiate privModel\n                          privModel = self.privModel = new PrivModel(data, { node_info: self.info });\n\n                          /*\n                          To track changes into model, start new session\n                          and Add event listener for privileges control\n                          */\n                          self.privModel.startNewSession();\n                          self.privModel.on('pgadmin-session:valid', self.onSessionValidated.bind(self));\n                          self.privModel.on('pgadmin-session:invalid', self.onSessionInvalid.bind(self));\n\n                        /**\n                          Create Field Object which has properties like\n                          node_data, node_info which is required for rendering\n                          Privilege control\n                          */\n                          var fields = Backform.generateViewSchema(\n                              self.info, self.privModel, 'create', self.d._type, self.d\n                              );\n                          var privilegesField = new Backform.Field(fields[0].fields[0]);\n\n                          this.privControl = new (privilegesField.get('control')) ({\n                            field: privilegesField,\n                            model: self.privModel\n                          });\n\n                          return {el: this.privControl.render().$el};\n                        },\n\n                        // Remove the privilege control\n                        cleanup: function() {\n                          if (this.privControl) {\n                            this.privControl.remove();\n                            delete this.privControl;\n                            this.privControl = null;\n                          }\n                        }\n                      });\n                  }),\n\n                  beforePrev: function(wizardObj) {\n\n                    // Remove the privilege control\n                    if (this.view) {\n                      this.view.cleanup();\n                      delete this.view;\n                      this.view = null;\n                    }\n\n                    /**\n                      Enable/Disable next button of DbObjectType page if objects\n                      are present in model\n                     */\n                    var objectsModel = newModel.get('objects');\n\n                    if(!_.isUndefined(objectsModel) && !_.isEmpty(objectsModel) &&\n                        objectsModel.length > 0) {\n                      wizardObj.collection.at(0).set('disable_next', false);\n\n                      // Don't show progress bar\n                      wizardObj.collection.at(0).set('show_progress_bar', '');\n                    }\n\n                    /**\n                      We're re-rendering the controls as they are deleted\n                      before heading to next page\n                      Refresh Backgrid to re-render the elements selected\n                      re-render Filter\n                    */\n                    newModel.trigger(\"backgrid:refresh\", newModel, false);\n                    self.clientSideFilter.render();\n                    return true;\n                  },\n\n                  beforeNext: function() { return true; },\n\n                  onNext: function(obj){\n\n                    // Assign acls of privModel to main model newModel\n                    if (!_.isUndefined(self.privModel)) {\n                      newModel.set({'acl': self.privModel.get('acl')});\n                    }\n\n                    // Remove the privilege control\n                    if (this.view) {\n                      this.view.cleanup();\n                      delete this.view;\n                      this.view = null;\n                    }\n\n                    // Enable finish button\n                    self.wizard.options.disable_finish = false;\n\n                    /**\n                      triggers to get SQL queries data to render\n                      into the reviewSQLPage\n                    */\n                    newModel.trigger('pgadmin-wizard:nextpage:sql', {'node_type': node_type });\n                  }\n                });\n\n\n                //////////////////////////////////////////////////////////////////////\n                //                                                                  //\n                //            Review SQL Query Page                                 //\n                //                                                                  //\n                //////////////////////////////////////////////////////////////////////\n\n                //Create SqlField Object\n                var sqlField = new Backform.Field(\n                    {\n                      id: 'sqltab',\n                      label: _('Sql Tab'),\n\n                      /**\n                        Extend 'SqlTabControl' to define new\n                        function 'onWizardNextPageChange'\n                        which gets triggered on next button\n                        click to fetch generated SQL query\n                        for the selected db objects.\n                      */\n                      control: Backform.SqlTabControl.extend({\n                        initialize: function() {\n\n                          // Initialize parent class\n                          Backform.SqlTabControl.prototype.initialize.apply(this, arguments);\n\n                          this.msql_url = self.msql_url;\n\n                          // define trigger events for prev and next page\n                          this.model.on('pgadmin-wizard:nextpage:sql', this.onWizardNextPageChange, this);\n                          this.model.on('pgadmin-wizard:prevpage:sql', this.onWizardPrevPageChange, this);\n                        },\n\n                        // This method fetches the modified SQL for the wizard\n                        onWizardNextPageChange: function(){\n\n                          var self = this;\n\n                          // Fetches modified SQL\n                          $.ajax({\n                            url: this.msql_url,\n                            type: 'GET',\n                            cache: false,\n                            data: self.model.toJSON(true, 'GET'),\n                            dataType: \"json\",\n                            contentType: \"application/json\"\n                          }).done(function(res) {\n                            self.sqlCtrl.clearHistory();\n                            self.sqlCtrl.setValue(res.data);\n                            self.sqlCtrl.refresh();\n                          }).fail(function() {\n                            self.model.trigger('pgadmin-view:msql:error');\n                          }).always(function() {\n                            self.model.trigger('pgadmin-view:msql:fetched');\n                          });\n                        },\n\n                        remove: function() {\n\n                          // Clear html dom elements of CodeMirror sql tab\n                          self.sqlControl.unbind(); // Unbind all local event bindings\n                          var cmElem = self.sqlControl.sqlCtrl.getWrapperElement();\n                          $(cmElem).remove();\n                          self.sqlControl.sqlCtrl = undefined;\n                        }\n\n                      })\n                    }),\n\n                  /**\n                    Create sqlField view instance\n                    to render it into wizard page\n                  */\n                  sqlControl = self.sqlControl = new (sqlField.get('control'))({\n                    field: sqlField,\n                    model: newModel\n                  });\n\n                // Wizard for SQL tab control\n                var reviewSQLPage = self.reviewSQLPage = new pgBrowser.WizardPage({\n                  id: 3,\n                  page_title: _('Final (Review Selection) (step 3 of 3)'),\n                  show_description: _('The SQL below will be executed on the ' +\n                                'database server to grant the selected privileges. ' +\n                                'Please click on <b>Finish</b> to complete the process. '),\n                  model: newModel,\n                  view: new(function() {\n\n                    // Render SqlTab control to generate its html markup\n                    var sqlCtrlHtml = sqlControl.render().$el;\n                    this.render = function() {\n                        return { el: sqlCtrlHtml };\n                    };\n                  }),\n\n                  beforePrev: function(wizardObj) {\n\n                    /**\n                      Enable next button if privilege\n                      model is not empty else disable\n                      next button\n                     */\n                    var aclModel = newModel.get('acl');\n\n                    if(!_.isUndefined(wizardObj.collection) &&\n                      wizardObj.collection.models.length > 0) {\n                      if(!_.isUndefined(aclModel) && !_.isEmpty(aclModel) &&\n                          aclModel.length > 0) {\n                        wizardObj.collection.at(1).set('disable_next', false);\n                      }\n                      else {\n                        wizardObj.collection.at(1).set('disable_next', true);\n                      }\n\n                      return true;\n                    }\n                  },\n                });\n\n\n                // Create Wizard Collection of Wizard Pages\n                var WizardCollection = Backbone.Collection.extend({\n                  model: pgBrowser.WizardPage\n                });\n\n                // It holds all the wizard pages to be rendered\n                this.wizardCollection = new WizardCollection(\n                  [dbObjectTypePage, privilegePage, reviewSQLPage]\n                );\n\n                /**\n                  Create wizard which has following operations:\n                  - renders wizard pages\n                  - defines the first page to render in wizard\n                  - Save the model on finishbutton\n                  - Remove wizard on cancel button\n                  */\n                self.wizard = new (pgBrowser.Wizard.extend({\n                  options: {\n                    title: _('Grant Wizard'), /* Main Wizard Title */\n                    width: '',\n                    height: '',\n                    curr_page: 0,\n                    show_left_panel: false,\n                    show_header_cancel_btn: true,\n                    show_header_maximize_btn: true,\n                    disable_finish: true,\n                    dialog_api: that,\n                    wizard_help: url_for(\n                      'help.static', {'filename': 'grant_wizard.html'}\n                    )\n                  },\n\n                  // Callback for finish button\n                  onFinish: function() {\n                    var m = newModel,\n                        d = m.toJSON('GET');\n\n                    // Save model\n                    if (d && !_.isEmpty(d) && !_.isUndefined(d.objects)) {\n                      m.save({}, {\n                        attrs: d,\n                        validate: false,\n                        cache: false,\n                        success: function(res) {\n\n                          // Release wizard objects\n                          self.releaseObjects();\n                          self.close();\n                        },\n                        error: function(m, jqxhr) {\n                          alertify.pgNotifier(\n                            \"error\", jqxhr,\n                            S(\n                              gettext(\"Error saving properties: %s\")\n                              ).sprintf(jqxhr.statusText).value()\n                            );\n\n                            // Release wizard objects\n                            self.releaseObjects();\n                            self.close();\n                        }\n                      });\n                    }\n                  },\n\n                  // Callback for cancel button\n                  onCancel: function() {\n\n                    // Release wizard objects\n                    self.releaseObjects();\n                    self.close();\n                  }\n                })) ({\n                  collection: this.wizardCollection,\n                  el: el,\n                  model: newModel\n                });\n\n                // Render wizard\n                self.wizard.render();\n              }\n            };\n          });\n        }\n\n        // Call Grant Wizard Dialog and set dimensions for wizard\n        alertify.wizardDialog(true).resizeTo('55%', '75%');\n      }\n    };\n\n    return pgBrowser.GrantWizard;\n  });\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/grant_wizard/static/js/grant_wizard.js","define([\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'pgadmin.alertifyjs', 'sources/pgadmin', 'pgadmin.browser', 'backbone',\n  'backgrid', 'backform',\n  'pgadmin.backform', 'pgadmin.backgrid',\n  'pgadmin.browser.node.ui'\n], function(\n  gettext, url_for, $, _, S, Alertify, pgAdmin, pgBrowser, Backbone, Backgrid,\n  Backform\n) {\n\n  pgAdmin = pgAdmin || window.pgAdmin || {};\n\n  var pgTools = pgAdmin.Tools = pgAdmin.Tools || {};\n\n  // Return back, this has been called more than once\n  if (pgAdmin.Tools.maintenance)\n    return pgAdmin.Tools.maintenance;\n\n  var CustomSwitchControl = Backform.CustomSwitchControl = Backform.SwitchControl.extend({\n      template: _.template([\n        '<label class=\"<%=Backform.controlLabelClassName%> custom_switch_label_class\"><%=label%></label>',\n        '<div class=\"<%=Backform.controlsClassName%> custom_switch_control_class\">',\n        '  <div class=\"checkbox\">',\n        '    <label>',\n        '      <input type=\"checkbox\" class=\"<%=extraClasses.join(\\' \\')%>\" name=\"<%=name%>\" <%=value ? \"checked=\\'checked\\'\" : \"\"%> <%=disabled ? \"disabled\" : \"\"%> <%=required ? \"required\" : \"\"%> />',\n        '    </label>',\n        '  </div>',\n        '</div>',\n        '<% if (helpMessage && helpMessage.length) { %>',\n        '  <span class=\"<%=Backform.helpMessageClassName%>\"><%=helpMessage%></span>',\n        '<% } %>'\n      ].join(\"\\n\")),\n      className: 'pgadmin-control-group form-group col-xs-6'\n    });\n\n  // Main model for Maintenance functionality\n  var MaintenanceModel = Backbone.Model.extend({\n    defaults: {\n      op: 'VACUUM',\n      vacuum_full: false,\n      vacuum_freeze: false,\n      vacuum_analyze: false,\n      verbose: true\n    },\n    initialize: function() {\n        var node_info = arguments[1]['node_info'];\n        // If node is Unique or Primary key then set op to reindex\n        if ('primary_key' in node_info || 'unique_constraint' in node_info\n                                       || 'index' in node_info) {\n          this.set('op', 'REINDEX');\n          this.set('verbose', false);\n        }\n    },\n    schema: [\n      {\n        id: 'op', label: gettext('Maintenance operation'), cell: 'string',\n        type: 'text', group: gettext('Options'),\n        options:[\n          {'label': \"VACUUM\", 'value': \"VACUUM\"},\n          {'label': \"ANALYZE\", 'value': \"ANALYZE\"},\n          {'label': \"REINDEX\", 'value': \"REINDEX\"},\n          {'label': \"CLUSTER\", 'value': \"CLUSTER\"},\n        ],\n        control: Backform.RadioControl.extend({\n          template: _.template([\n            '<label class=\"control-label col-sm-4 col-xs-12\"><%=label%></label>',\n            '<div class=\"pgadmin-controls col-xs-12 col-sm-8 btn-group pg-maintenance-op\" data-toggle=\"buttons\">',\n            ' <% for (var i=0; i < options.length; i++) { %>',\n            ' <% var option = options[i]; %>',\n            ' <label class=\"btn btn-primary<% if (i == 0) { %> active<%}%>\">',\n            '  <input type=\"radio\" name=\"op\" id=\"op\" autocomplete=\"off\" value=<%-formatter.fromRaw(option.value)%><% if (i == 0) { %> selected<%}%> > <%-option.label%>',\n            ' </label>',\n            ' <% } %>',\n            '</div>'\n          ].join(\"\\n\"))\n        }),\n        select2: {\n          allowClear: false,\n          width: \"100%\",\n          placeholder: gettext('Select from list...')\n        },\n      },\n      {\n        type: 'nested', control: 'fieldset', label: gettext('Vacuum'), group: gettext('Options'),\n        schema:[{\n          id: 'vacuum_full', group: gettext('Vacuum'), disabled: 'isDisabled',\n          control: Backform.CustomSwitchControl, label: gettext('FULL'), deps: ['op']\n        },{\n          id: 'vacuum_freeze', deps: ['op'], disabled: 'isDisabled',\n          control: Backform.CustomSwitchControl, label: gettext('FREEZE'), group: gettext('Vacuum')\n        },{\n          id: 'vacuum_analyze', deps: ['op'], disabled: 'isDisabled',\n          control: Backform.CustomSwitchControl, label: gettext('ANALYZE'), group: gettext('Vacuum')\n        }]\n      },\n      {\n        id: 'verbose', group: gettext('Options'), deps: ['op'],\n        control: Backform.CustomSwitchControl, label: gettext('Verbose Messages'), disabled: 'isDisabled'\n      }\n    ],\n\n    // Enable/Disable the items based on the user maintenance operation selection\n    isDisabled: function(m) {\n      var name = this.name,\n        node_info = this.node_info;\n      switch(name) {\n        case 'vacuum_full':\n        case 'vacuum_freeze':\n        case 'vacuum_analyze':\n          if (m.get('op') != 'VACUUM') {\n            return true;\n          }\n          else {\n            return false;\n          }\n          break;\n        case 'verbose':\n          if ('primary_key' in node_info || 'unique_constraint' in node_info ||\n                'index' in node_info ) {\n            if (m.get('op') == 'REINDEX') {\n              setTimeout(function() { m.set('verbose', false); }, 10);\n              return true;\n            }\n          }\n          if (m.get('op') == 'REINDEX') {\n            return true;\n          }\n          else {\n            return false;\n          }\n          break;\n        default:\n          return false;\n      }\n      return false;\n    }\n  });\n\n  pgTools.maintenance = {\n      init: function() {\n\n        // We do not want to initialize the module multiple times.\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        var maintenance_supported_nodes = [\n              'database', 'table', 'primary_key',\n              'unique_constraint', 'index', 'partition'\n            ];\n\n        /**\n         Enable/disable Maintenance menu in tools based on node selected.\n         Maintenance menu will be enabled only when user select table and database node.\n        */\n        var menu_enabled = function(itemData, item, data) {\n         var t = pgBrowser.tree, i = item, d = itemData;\n         var parent_item = t.hasParent(i) ? t.parent(i): null,\n             parent_data = parent_item ? t.itemData(parent_item) : null;\n           if(!_.isUndefined(d) && !_.isNull(d) && !_.isNull(parent_data)) {\n             if (_.indexOf(maintenance_supported_nodes, d._type) !== -1 &&\n               parent_data._type != 'catalog') {\n               if (d._type == 'database' && d.allowConn)\n                 return true;\n               else if(d._type != 'database')\n                 return true;\n               else\n                 return false;\n              }\n              else\n                return false;\n           }\n           else\n             return false;\n        };\n\n        var menus = [{\n          name: 'maintenance', module: this,\n          applies: ['tools'], callback: 'callback_maintenance',\n          priority: 10, label: gettext('Maintenance...'),\n          icon: 'fa fa-wrench', enable: menu_enabled\n        }];\n\n        // Add supported menus into the menus list\n        for (var idx = 0; idx < maintenance_supported_nodes.length; idx++) {\n          menus.push({\n            name: 'maintenance_context_' + maintenance_supported_nodes[idx],\n            node: maintenance_supported_nodes[idx], module: this,\n            applies: ['context'], callback: 'callback_maintenance',\n            priority: 10, label: gettext('Maintenance...'),\n            icon: 'fa fa-wrench', enable: menu_enabled\n          });\n        }\n        pgBrowser.add_menus(menus);\n      },\n\n      /*\n        Open the dialog for the maintenance functionality\n      */\n      callback_maintenance: function(args, item) {\n        var i = item || pgBrowser.tree.selected(),\n          server_data = null;\n\n        while (i) {\n          var node_data = pgBrowser.tree.itemData(i);\n          if (node_data._type == 'server') {\n            server_data = node_data;\n            break;\n          }\n\n          if (pgBrowser.tree.hasParent(i)) {\n            i = $(pgBrowser.tree.parent(i));\n          } else {\n            Alertify.alert(gettext(\"Please select server or child node from tree.\"));\n            break;\n          }\n        }\n\n        if (!server_data) {\n          return;\n        }\n\n        var module = 'paths',\n          preference_name = 'pg_bin_dir',\n          msg = gettext('Please configure the PostgreSQL Binary Path in the Preferences dialog.');\n\n        if ((server_data.type && server_data.type == 'ppas') ||\n            server_data.server_type == 'ppas') {\n          preference_name = 'ppas_bin_dir';\n          msg = gettext('Please configure the EDB Advanced Server Binary Path in the Preferences dialog.');\n        }\n\n        var preference = pgBrowser.get_preference(module, preference_name);\n\n        if(preference) {\n          if (!preference.value) {\n            Alertify.alert(gettext('Configuration required'), msg);\n            return;\n          }\n        } else {\n          Alertify.alert(S(gettext('Failed to load preference %s of module %s')).sprintf(preference_name, module).value());\n          return;\n        }\n\n        var self = this,\n          input = args || {},\n          t = pgBrowser.tree,\n          i = item || t.selected(),\n          d = i && i.length == 1 ? t.itemData(i) : undefined,\n          node = d && pgBrowser.Nodes[d._type];\n\n        if (!d)\n          return;\n\n        var objName = d.label;\n        var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n        if (!Alertify.MaintenanceDialog) {\n          Alertify.dialog('MaintenanceDialog', function factory() {\n\n            return {\n              main: function(title) {\n                this.set('title', title);\n              },\n              setup: function() {\n                return {\n                  buttons:[{\n                    text: '', className: 'btn btn-default pull-left fa fa-lg fa-info',\n                    attrs:{name:'object_help', type:'button', url: 'maintenance.html', label: gettext('Maintenance')}\n                  },{\n                    text: '', key: 112,\n                    className: 'btn btn-default pull-left fa fa-lg fa-question',\n                    attrs:{\n                      name:'dialog_help', type:'button',\n                      label: gettext('Maintenance'),\n                      url: url_for(\n                        'help.static', {'filename': 'maintenance_dialog.html'}\n                      )\n                    }\n                  },{\n                    text: gettext(\"OK\"), key: 13, className: \"btn btn-primary fa fa-lg fa-save pg-alertify-button\",\n                    'data-btn-name': 'ok',\n                  },{\n                    text: gettext(\"Cancel\"), key: 27, className: \"btn btn-danger fa fa-lg fa-times pg-alertify-button\",\n                    'data-btn-name': 'cancel',\n                  }],\n                  options: { modal: 0, pinnable: false}\n                };\n              },\n              // Callback functions when click on the buttons of the Alertify dialogs\n              callback: function(e) {\n                var i = pgBrowser.tree.selected(),\n                  d = i && i.length == 1 ? pgBrowser.tree.itemData(i) : undefined,\n                  node = d && pgBrowser.Nodes[d._type];\n\n                if (e.button.element.name == \"dialog_help\" || e.button.element.name == \"object_help\") {\n                  e.cancel = true;\n                  pgBrowser.showHelp(e.button.element.name, e.button.element.getAttribute('url'),\n                    node, i, e.button.element.getAttribute('label'));\n                  return;\n                }\n\n                if (e.button['data-btn-name'] === \"ok\") {\n\n                  var schema = undefined,\n                    table = undefined,\n                    primary_key = undefined,\n                    unique_constraint = undefined,\n                    index = undefined;\n\n                  if (!d)\n                    return;\n\n                  var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n                  if (treeInfo.schema != undefined) {\n                    schema = treeInfo.schema._label;\n                  }\n\n                  if (treeInfo.partition != undefined) {\n                    table = treeInfo.partition._label;\n                  } else if  (treeInfo.table != undefined) {\n                    table = treeInfo.table._label;\n                  }\n\n                  if (treeInfo.primary_key != undefined) {\n                    primary_key = treeInfo.primary_key._label;\n                  } else if (treeInfo.unique_constraint != undefined) {\n                    unique_constraint = treeInfo.unique_constraint._label;\n                  } else if (treeInfo.index != undefined) {\n                    index = treeInfo.index._label;\n                  }\n\n                  this.view.model.set({'database': treeInfo.database._label,\n                                      'schema': schema,\n                                      'table': table,\n                                      'primary_key': primary_key,\n                                      'unique_constraint': unique_constraint,\n                                      'index': index})\n\n                  $.ajax({\n                    url: url_for(\n                      'maintenance.create_job', {\n                        'sid': treeInfo.server._id,\n                        'did': treeInfo.database._id\n                      }),\n                    method: 'POST',\n                    data:{'data': JSON.stringify(this.view.model.toJSON())},\n                    success: function(res) {\n                      if (res.data && res.data.status) {\n                        //Do nothing as we are creating the job and exiting from the main dialog\n                        Alertify.success(res.data.info);\n                        pgBrowser.Events.trigger('pgadmin-bgprocess:created', self);\n                      }\n                      else {\n                        Alertify.error(res.data.errmsg);\n                      }\n                    },\n                    error: function(e) {\n                      Alertify.alert(\n                        gettext(\"Maintenance job creation failed.\")\n                      );\n                    }\n                  });\n                }\n              },\n              build: function() {\n                Alertify.pgDialogBuild.apply(this)\n              },\n              hooks: {\n                onclose: function() {\n                  if (this.view) {\n                    this.view.remove({data: true, internal: true, silent: true});\n                  }\n                }\n              },\n              prepare: function() {\n                // Main maintenance tool dialog container\n                var $container = $(\"<div class='maintenance_dlg'></div>\");\n\n                var t = pgBrowser.tree,\n                  i = t.selected(),\n                  d = i && i.length == 1 ? t.itemData(i) : undefined,\n                  node = d && pgBrowser.Nodes[d._type];\n\n                if (!d)\n                  return;\n\n                var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n                var newModel = new MaintenanceModel (\n                  {}, {node_info: treeInfo}\n                  ),\n                  fields = Backform.generateViewSchema(\n                    treeInfo, newModel, 'create', node, treeInfo.server, true\n                  );\n\n                  var view = this.view = new Backform.Dialog({\n                    el: $container, model: newModel, schema: fields\n                  });\n\n                  $(this.elements.body.childNodes[0]).addClass('alertify_tools_dialog_properties obj_properties');\n                  view.render();\n\n                 // If node is Index, Unique or Primary key then disable vacuum & analyze button\n                  if (d._type == 'primary_key' || d._type == 'unique_constraint'\n                                               || d._type == 'index') {\n                    var vacuum_analyze_btns = $container.find(\n                                                '.pgadmin-controls label:lt(2)'\n                                                ).removeClass('active').addClass('disabled');\n                    // Find reindex button element & add active class to it\n                    var reindex_btn = vacuum_analyze_btns[1].nextElementSibling;\n                    $(reindex_btn).addClass('active');\n                  }\n\n                  this.elements.content.appendChild($container.get(0));\n              }\n            };\n          });\n        }\n\n        // Open the Alertify dialog\n        Alertify.MaintenanceDialog('Maintenance...').set('resizable',true).resizeTo('60%','80%');\n      },\n    };\n\n    return pgAdmin.Tools.maintenance;\n  });\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/maintenance/static/js/maintenance.js","define([\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'underscore.string', 'pgadmin.alertifyjs',\n  'sources/pgadmin', 'pgadmin.browser', 'backbone', 'backgrid', 'backform',\n  'pgadmin.backform', 'pgadmin.backgrid', 'pgadmin.browser.node.ui'\n], function(\n  gettext, url_for, $, _, S, Alertify, pgAdmin, pgBrowser, Backbone, Backgrid, Backform\n) {\n\n  pgAdmin = pgAdmin || window.pgAdmin || {};\n\n  var pgTools = pgAdmin.Tools = pgAdmin.Tools || {};\n\n  // Return back, this has been called more than once\n  if (pgAdmin.Tools.import_utility)\n    return pgAdmin.Tools.import_utility;\n\n  // Main model for Import/Export functionality\n  var ImportExportModel = Backbone.Model.extend({\n    defaults: {\n      is_import: false, /* false for Export */\n      filename: undefined,\n      format: 'csv',\n      encoding: undefined,\n      oid: undefined,\n      header: undefined,\n      delimiter: '',\n      quote: '\\\"',\n      escape: '\\'',\n      null_string: undefined,\n      columns: null,\n      icolumns: [],\n      database: undefined,\n      schema: undefined,\n      table: undefined\n    },\n    schema: [{\n      id: 'is_import', label: gettext('Import/Export'), cell: 'switch',\n      type: 'switch', group: gettext('Options'),\n      options: {\n         'onText': gettext('Import'), 'offText': gettext('Export'),\n         'onColor': 'success', 'offColor': 'primary'\n      }\n    }, {\n      type: 'nested', control: 'fieldset', label: gettext('File Info'),\n      group: gettext('Options'),\n      schema:[{ /* select file control for import */\n      id: 'filename', label: gettext('Filename'), deps: ['is_import'],\n      type: 'text', control: Backform.FileControl, group: gettext('File Info'),\n      dialog_type: 'select_file', supp_types: ['csv', 'txt', '*'],\n      visible: 'importing'\n    }, { /* create file control for export */\n        id: 'filename', label: gettext('Filename'), deps: ['is_import'],\n        type: 'text', control: Backform.FileControl, group: gettext('File Info'),\n        dialog_type: 'create_file', supp_types: ['csv', 'txt', '*'],\n        visible: 'exporting'\n      }, {\n        id: 'format', label: gettext('Format'), cell: 'string',\n        control: 'select2', group: gettext('File Info'),\n        options:[\n            {'label': 'binary', 'value': 'binary'}, {'label': 'csv', 'value': 'csv'}, {'label': 'text', 'value': 'text'},\n          ],\n        disabled: 'isDisabled', select2: {allowClear: false, width: \"100%\" },\n      }, {\n        id: 'encoding', label: gettext('Encoding'), cell: 'string',\n        control: 'node-ajax-options', node: 'database', url: 'get_encodings', first_empty: true,\n        group: gettext('File Info')\n      }]\n    },{\n        id: 'columns', label: gettext('Columns to import'), cell: 'string',\n        deps: ['is_import'], type: 'array', first_empty: false,\n        control: Backform.NodeListByNameControl.extend({\n          // By default, all the import columns should be selected\n          initialize: function() {\n            Backform.NodeListByNameControl.prototype.initialize.apply(this, arguments);\n            var self = this,\n                options = self.field.get('options'),\n                op_vals = [];\n\n            if (_.isFunction(options)) {\n              try {\n                var all_cols = options.apply(self);\n                for(var idx in all_cols) {\n                  op_vals.push((all_cols[idx])['value']);\n                }\n              } catch(e) {\n                // Do nothing\n                options = [];\n              }\n            } else {\n              for (idx in options) {\n                op_vals.push((options[idx])['value']);\n              }\n            }\n\n            self.model.set('columns',op_vals);\n          }\n        }),\n        transform: function(rows) {\n          var self = this,\n              node = self.field.get('schema_node'),\n              res = [];\n\n          _.each(rows, function(r) {\n              var l = (_.isFunction(node['node_label']) ?\n                    (node['node_label']).apply(node, [r, self.model, self]) :\n                    r.label),\n                  image = (_.isFunction(node['node_image']) ?\n                    (node['node_image']).apply(\n                      node, [r, self.model, self]\n                      ) :\n                    (node['node_image'] || ('icon-' + node.type)));\n              res.push({\n                'value': r.label,\n                'image': image,\n                'label': l\n              });\n          });\n\n          return res;\n        },\n        node: 'column', url: 'nodes', group: gettext('Columns'),\n        select2: {\n          multiple: true, allowClear: false,\n          placeholder: gettext('Columns for importing...'),\n          first_empty: false\n        }, visible: 'importing',\n        helpMessage:\n        gettext('An optional list of columns to be copied. If no column list is specified, all columns of the table will be copied.')\n      }, {\n        id: 'columns', label: gettext('Columns to export'), cell: 'string',\n        deps: ['is_import'], type: 'array',\n        control: 'node-list-by-name', first_empty: false,\n        node: 'column', url: 'nodes', group: gettext('Columns'),\n        select2: {\n          multiple: true, allowClear: true,\n          placeholder: gettext('Colums for exporting...')\n        }, visible: 'exporting',\n        transform: function(rows) {\n          var self = this,\n              node = self.field.get('schema_node'),\n              res = [];\n\n          _.each(rows, function(r) {\n              var l = (_.isFunction(node['node_label']) ?\n                    (node['node_label']).apply(node, [r, self.model, self]) :\n                    r.label),\n                  image = (_.isFunction(node['node_image']) ?\n                    (node['node_image']).apply(\n                      node, [r, self.model, self]\n                      ) :\n                    (node['node_image'] || ('icon-' + node.type)));\n              res.push({\n                'value': r.label,\n                'image': image,\n                'label': l\n              });\n          });\n\n          return res;\n        },\n        helpMessage:\n          gettext('An optional list of columns to be copied. If no column list is specified, all columns of the table will be copied.')\n      }, {\n        id: 'null_string', label: gettext('NULL Strings'), cell: 'string',\n        type: 'text', group: gettext('Columns'), disabled: 'isDisabled',\n        deps: ['format'],\n        helpMessage:\n          gettext(\"Specifies the string that represents a null value. The default is \\\\N (backslash-N) in text format, and an unquoted empty string in CSV format. You might prefer an empty string even in text format for cases where you don't want to distinguish nulls from empty strings. This option is not allowed when using binary format.\")\n      }, {\n        id: 'icolumns', label: gettext('Not null columns'), cell: 'string',\n        control: 'node-list-by-name', node: 'column',\n        group: gettext('Columns'), deps: ['format', 'is_import'], disabled: 'isDisabled',\n        type: 'array', first_empty: false,\n        select2: {\n          multiple: true, allowClear: true, first_empty: true,\n          placeholder: gettext('Not null columns...')\n        },\n        helpMessage:\n          gettext('Do not match the specified column values against the null string. In the default case where the null string is empty, this means that empty values will be read as zero-length strings rather than nulls, even when they are not quoted. This option is allowed only in import, and only when using CSV format.')\n      }, {\n        type: 'nested', control: 'fieldset', label: gettext('Miscellaneous'),\n        group: gettext('Options'),\n        schema:[{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'switch', group: gettext('Miscellaneous')\n        },{\n          id: 'header', label: gettext('Header'), cell: 'string',\n          type: 'switch', group: gettext('Miscellaneous'), deps: ['format'], disabled: 'isDisabled'\n        },{\n          id: 'delimiter', label: gettext('Delimiter'), cell: 'string', first_empty: true,\n          type: 'text', control: 'node-ajax-options', group: gettext('Miscellaneous'), disabled: 'isDisabled',\n          deps: ['format'],\n          options:[\n            {'label': ';', 'value': ';'},\n            {'label': ',', 'value': ','},\n            {'label': '|', 'value': '|'},\n            {'label': '[tab]', 'value': '[tab]'}\n          ],\n          select2: {\n            tags: true,\n            allowClear: false,\n            width: \"100%\",\n            placeholder: gettext('Select from list...')\n          }, helpMessage:\n            gettext('Specifies the character that separates columns within each row (line) of the file. The default is a tab character in text format, a comma in CSV format. This must be a single one-byte character. This option is not allowed when using binary format.')\n        },\n        {\n          id: 'quote', label: gettext('Quote'), cell: 'string', first_empty: true, deps: ['format'],\n          type: 'text', control: 'node-ajax-options', group: gettext('Miscellaneous'), disabled: 'isDisabled',\n          options:[\n            {'label': '\\\"', 'value': '\\\"'},\n            {'label': '\\'', 'value': '\\''},\n          ],\n          select2: {\n            tags: true,\n            allowClear: false,\n            width: \"100%\",\n            placeholder: gettext('Select from list...')\n          }, helpMessage:\n            gettext('Specifies the quoting character to be used when a data value is quoted. The default is double-quote. This must be a single one-byte character. This option is allowed only when using CSV format.')\n        },\n        {\n          id: 'escape', label: gettext('Escape'), cell: 'string', first_empty: true, deps: ['format'],\n          type: 'text', control: 'node-ajax-options', group: gettext('Miscellaneous'), disabled: 'isDisabled',\n          options:[\n            {'label': '\\\"', 'value': '\\\"'},\n            {'label': '\\'', 'value': '\\''},\n          ],\n          select2: {\n            tags: true,\n            allowClear: false,\n            width: \"100%\",\n            placeholder: gettext('Select from list...')\n          }, helpMessage:\n            gettext('Specifies the character that should appear before a data character that matches the QUOTE value. The default is the same as the QUOTE value (so that the quoting character is doubled if it appears in the data). This must be a single one-byte character. This option is allowed only when using CSV format.')\n        }]\n      }\n    ],\n\n    // Enable/Disable the items based on the user file format selection\n    isDisabled: function(m) {\n      name = this.name;\n      switch(name) {\n        case 'quote':\n        case 'escape':\n        case 'header':\n          return (m.get('format') != 'csv')\n        case 'icolumns':\n          return (m.get('format') != 'csv' || !m.get('is_import'));\n        case 'null_string':\n        case 'delimiter':\n          return (m.get('format') == 'binary');\n        default:\n          return false;\n      }\n    },\n    importing: function(m) {\n      return m.get('is_import');\n    },\n    exporting: function(m) {\n      return !(m.importing.apply(this, arguments));\n    }\n  });\n\n  pgTools.import_utility = {\n      init: function() {\n        // We do not want to initialize the module multiple times.\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        /**\n         Enable/disable import menu in tools based on node selected\n         Import menu will be enabled only when user select table node.\n        */\n        var menu_enabled = function(itemData, item, data) {\n         var t = pgBrowser.tree, i = item, d = itemData;\n         var parent_item = t.hasParent(i) ? t.parent(i): null,\n             parent_data = parent_item ? t.itemData(parent_item) : null;\n           if(!_.isUndefined(d) && !_.isNull(d) && !_.isNull(parent_data))\n             return (\n               (_.indexOf(['table'], d._type) !== -1 &&\n               parent_data._type != 'catalog') ? true: false\n             );\n           else\n             return false;\n        };\n\n        // Initialize the context menu to display the import options when user open the context menu for table\n        pgBrowser.add_menus([{\n          name: 'import', node: 'table', module: this,\n          applies: ['tools', 'context'], callback: 'callback_import_export',\n          category: 'import', priority: 10, label: gettext('Import/Export...'),\n          icon: 'fa fa-shopping-cart', enable: menu_enabled\n        }]);\n      },\n\n      /*\n        Open the dialog for the import functionality\n      */\n      callback_import_export: function(args, item) {\n        var i = item || pgBrowser.tree.selected(),\n          server_data = null;\n\n        while (i) {\n          var node_data = pgBrowser.tree.itemData(i);\n          if (node_data._type == 'server') {\n            server_data = node_data;\n            break;\n          }\n\n          if (pgBrowser.tree.hasParent(i)) {\n            i = $(pgBrowser.tree.parent(i));\n          } else {\n            Alertify.alert(gettext(\"Please select server or child node from tree.\"));\n            break;\n          }\n        }\n\n        if (!server_data) {\n          return;\n        }\n\n        var module = 'paths',\n          preference_name = 'pg_bin_dir',\n          msg = gettext('Please configure the PostgreSQL Binary Path in the Preferences dialog.');\n\n        if ((server_data.type && server_data.type == 'ppas') ||\n            server_data.server_type == 'ppas') {\n          preference_name = 'ppas_bin_dir';\n          msg = gettext('Please configure the EDB Advanced Server Binary Path in the Preferences dialog.');\n        }\n\n        var preference = pgBrowser.get_preference(module, preference_name);\n\n        if(preference) {\n          if (!preference.value) {\n            Alertify.alert(gettext('Configuration required'), msg);\n            return;\n          }\n        } else {\n          Alertify.alert(S(gettext('Failed to load preference %s of module %s')).sprintf(preference_name, module).value());\n          return;\n        }\n\n        var self = this;\n        var input = args || {},\n            t = pgBrowser.tree,\n            i = item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined,\n            node = d && pgBrowser.Nodes[d._type];\n\n        if (!d)\n          return;\n\n        var objName = d.label;\n        var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n        if (!Alertify.ImportDialog) {\n          Alertify.dialog('ImportDialog', function factory() {\n\n            return {\n              main: function(title, node, item, data) {\n                this.set('title', title);\n                this.setting('pg_node', node);\n                this.setting('pg_item', item);\n                this.setting('pg_item_data', data);\n              },\n\n              build: function() {\n                Alertify.pgDialogBuild.apply(this)\n              },\n\n              setup: function() {\n                return {\n                  buttons:[{\n                    text: gettext(\"OK\"), key: 13, disable: true,\n                    'data-btn-name': 'ok',\n                    className:\n                      \"btn btn-primary fa fa-lg fa-save pg-alertify-button\"\n                  }, {\n                    text: gettext(\"Cancel\"), key: 27,\n                    'data-btn-name': 'cancel',\n                    className:\n                      \"btn btn-danger fa fa-lg fa-times pg-alertify-button\"\n                  }],\n                  options: {modal: true}\n                };\n              },\n\n              settings: {\n                pg_node: null,\n                pg_item: null,\n                pg_item_data: null\n              },\n\n              // Callback functions when click on the buttons of the Alertify dialogs\n              callback: function(e) {\n                if (e.button['data-btn-name'] === \"ok\") {\n\n                  var n = this.settings['pg_node'],\n                    i = this.settings['pg_item'],\n                    treeInfo = n.getTreeNodeHierarchy.apply(n, [i])\n\n                  this.view.model.set({\n                    'database': treeInfo.database._label,\n                    'schema': treeInfo.schema._label,\n                    'table': treeInfo.table._label\n                  });\n                  var self = this;\n\n                  $.ajax({\n                    url: url_for(\n                      'import_export.create_job', {'sid': treeInfo.server._id}\n                    ),\n                    method: 'POST',\n                    data:{ 'data': JSON.stringify(this.view.model.toJSON()) },\n                    success: function(res) {\n                      if (res.success) {\n                        Alertify.success(gettext('Import/export job created.'), 5);\n                        pgBrowser.Events.trigger('pgadmin-bgprocess:created', self);\n                      }\n                    },\n                    error: function(xhr, status, error) {\n                      try {\n                        var err = $.parseJSON(xhr.responseText);\n                        Alertify.alert(\n gettext('Import/export job failed.'),\n                          err.errormsg\n                        );\n                      } catch (e) {}\n                    }\n                  });\n                }\n              },\n\n              hooks: {\n                onclose: function() {\n                  if (this.view) {\n                    this.view.remove({data: true, internal: true, silent: true});\n                  }\n                },\n\n                // triggered when a dialog option gets update.\n                onupdate: function(option,oldValue, newValue) {\n\n                  switch(option){\n                    case 'resizable':\n                      if(newValue){\n                        this.elements.content.removeAttribute('style');\n                      } else {\n                        this.elements.content.style.minHeight = 'inherit';\n                      }\n                      break;\n                  }\n                }\n              },\n\n              prepare: function() {\n                // Main import module container\n                var self = this;\n\n                // Disable OK button until user provides valid Filename\n                this.__internal.buttons[0].element.disabled = true;\n\n                var $container = $(\"<div class='import_dlg'></div>\"),\n                    n = this.settings.pg_node,\n                    i = this.settings.pg_item,\n                    treeInfo = n.getTreeNodeHierarchy.apply(n, [i]),\n                    newModel = new ImportExportModel ({}, {\n                      node_info: treeInfo\n                    }),\n                    fields = Backform.generateViewSchema(\n                        treeInfo, newModel, 'create', node, treeInfo.server, true\n                    ),\n                    view = this.view = new Backform.Dialog({\n                      el: $container, model: newModel, schema: fields\n                    });\n\n                $(this.elements.body.childNodes[0]).addClass(\n                  'alertify_tools_dialog_properties obj_properties'\n                );\n                view.render();\n\n                this.elements.content.appendChild($container.get(0));\n\n                // Listen to model & if filename is provided then enable OK button\n                // For the 'Quote', 'escape' and 'delimiter' only one character is allowed to enter\n                this.view.model.on('change', function() {\n                    if (!_.isUndefined(this.get('filename')) && this.get('filename') !== '') {\n                      this.errorModel.clear();\n                      if (!_.isUndefined(this.get('delimiter')) && !_.isNull(this.get('delimiter'))\n                      ) {\n                        this.errorModel.clear();\n                        if (!_.isUndefined(this.get('quote')) && this.get('quote') !== '' &&\n                            this.get('quote').length == 1) {\n                          this.errorModel.clear();\n                          if (!_.isUndefined(this.get('escape')) && this.get('escape') !== '' &&\n                              this.get('escape').length == 1) {\n                            this.errorModel.clear();\n                            self.__internal.buttons[0].element.disabled = false;\n                          } else {\n                            self.__internal.buttons[0].element.disabled = true;\n                            this.errorModel.set('escape', gettext('Escape should contain only one character'))\n                          }\n                        } else {\n                          self.__internal.buttons[0].element.disabled = true;\n                          this.errorModel.set('quote', gettext('Quote should contain only one character'))\n                        }\n                      } else {\n                        self.__internal.buttons[0].element.disabled = true;\n                        this.errorModel.set('delimiter', gettext('Delimiter should contain only one character'))\n                      }\n                    } else {\n                      self.__internal.buttons[0].element.disabled = true;\n                      this.errorModel.set('filename', gettext('Please provide filename'))\n                    }\n                });\n\n                // Give the dialog initial height & width\n                this.elements.dialog.style.minHeight = '80%';\n                this.elements.dialog.style.minWidth = '70%';\n              }\n            };\n          });\n        }\n\n        // Open the Alertify dialog for the import/export module\n        Alertify.ImportDialog(\n            S(\n gettext(\"Import/Export data - table '%s'\")\n            ).sprintf(treeInfo.table.label).value(), node, i, d\n         ).set('resizable',true).resizeTo('70%','80%');\n      }\n    };\n\n    return pgAdmin.Tools.import_utility;\n  });\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/import_export/static/js/import_export.js","define([\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'underscore.string', 'alertify',\n  'sources/pgadmin', 'pgadmin.browser', 'backbone', 'backgrid', 'codemirror',\n  'backform', 'pgadmin.tools.debugger.ui', 'wcdocker', 'pgadmin.backform',\n  'pgadmin.backgrid', 'pgadmin.browser.frame'\n], function(gettext, url_for, $, _, S, Alertify, pgAdmin, pgBrowser, Backbone, Backgrid, CodeMirror, Backform, get_function_arguments) {\n\n  pgAdmin = pgAdmin || window.pgAdmin || {};\n\n  var pgTools = pgAdmin.Tools = pgAdmin.Tools || {};\n\n  /* Return back, this has been called more than once */\n  if (pgAdmin.Tools.Debugger)\n    return pgAdmin.Tools.Debugger;\n\n  pgTools.Debugger = {\n      init: function() {\n        // We do not want to initialize the module multiple times.\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        // Initialize the context menu to display the debugging options when user open the context menu for functions\n        pgBrowser.add_menus([{\n          name: 'direct_debugger', node: 'function', module: this,\n          applies: ['object', 'context'], callback: 'get_function_information',\n          category: gettext('Debugging'), priority: 10, label: gettext('Debug'),\n          data: {object: 'function'}, icon: 'fa fa-arrow-circle-right',\n          enable: 'can_debug'\n        },{\n          name: 'global_debugger', node: 'function', module: this,\n          applies: ['object', 'context'], callback: 'check_func_debuggable',\n          category: gettext('Debugging'), priority: 10, label: gettext('Set breakpoint'),\n          data: {object: 'function', debug_type: 'indirect'},\n          icon: 'fa fa-arrow-circle-right', enable: 'can_debug'\n        },{\n          name: 'procedure_direct_debugger', node: 'procedure', module: this,\n          applies: ['object', 'context'], callback: 'get_function_information',\n          category: gettext('Debugging'), priority: 10, label: gettext('Debug'),\n          data: {object: 'procedure'}, icon: 'fa fa-arrow-circle-right',\n          enable: 'can_debug'\n        }, {\n          name: 'procedure_indirect_debugger', node: 'procedure', module: this,\n          applies: ['object', 'context'], callback: 'check_func_debuggable',\n          category: gettext('Debugging'), priority: 10, label: gettext('Set breakpoint'),\n          data: {object: 'procedure', debug_type: 'indirect'},\n          icon: 'fa fa-arrow-circle-right', enable: 'can_debug'\n        }, {\n          name: 'trigger_function_indirect_debugger', node: 'trigger_function', module: this,\n          applies: ['object', 'context'], callback: 'check_func_debuggable',\n          priority: 10, label: gettext('Set breakpoint'), category: gettext('Debugging'),\n          icon: 'fa fa-arrow-circle-right',\n          data: {object:'trigger_function', debug_type: 'indirect'}, enable: 'can_debug'\n        }, {\n          name: 'trigger_indirect_debugger', node: 'trigger', module: this,\n          applies: ['object', 'context'], callback: 'check_func_debuggable',\n          priority: 10, label: gettext('Set breakpoint'), category: gettext('Debugging'),\n          icon: 'fa fa-arrow-circle-right',\n          data: {object:'trigger', debug_type: 'indirect'}, enable: 'can_debug'\n        }, {\n          name: 'package_function_direct_debugger', node: 'edbfunc', module: this,\n          applies: ['object', 'context'], callback: 'get_function_information',\n          category: gettext('Debugging'), priority: 10, label: gettext('Debug'),\n          data: {object: 'edbfunc'}, icon: 'fa fa-arrow-circle-right',\n          enable: 'can_debug'\n        },{\n          name: 'package_function_global_debugger', node: 'edbfunc', module: this,\n          applies: ['object', 'context'], callback: 'check_func_debuggable',\n          category: gettext('Debugging'), priority: 10, label: gettext('Set breakpoint'),\n          data: {object: 'edbfunc', debug_type: 'indirect'},\n          icon: 'fa fa-arrow-circle-right', enable: 'can_debug'\n        },{\n          name: 'package_procedure_direct_debugger', node: 'edbproc', module: this,\n          applies: ['object', 'context'], callback: 'get_function_information',\n          category: gettext('Debugging'), priority: 10, label: gettext('Debug'),\n          data: {object: 'edbproc'}, icon: 'fa fa-arrow-circle-right',\n          enable: 'can_debug'\n        }, {\n          name: 'package_procedure_global_debugger', node: 'edbproc', module: this,\n          applies: ['object', 'context'], callback: 'check_func_debuggable',\n          category: gettext('Debugging'), priority: 10, label: gettext('Set breakpoint'),\n          data: {object: 'edbproc', debug_type: 'indirect'},\n          icon: 'fa fa-arrow-circle-right', enable: 'can_debug'\n        }]);\n\n        // Create and load the new frame required for debugger panel\n        this.frame = new pgBrowser.Frame({\n          name: 'frm_debugger',\n          title: gettext('Debugger'),\n          width: 500,\n          isCloseable: true,\n          isPrivate: true,\n          icon: 'fa fa-arrow-circle-right',\n          url: 'about:blank'\n        });\n\n        this.frame.load(pgBrowser.docker);\n      },\n      // It will check weather the function is actually debuggable or not with pre-required condition.\n      can_debug: function(itemData, item, data) {\n        var t = pgBrowser.tree, i = item, d = itemData;\n        // To iterate over tree to check parent node\n        while (i) {\n          if ('catalog' == d._type) {\n            //Check if we are not child of catalog\n            return false;\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n\n        // Find the function is really available in database\n        var tree = pgBrowser.tree,\n          info = tree.selected(),\n          d_ = info && info.length == 1 ? tree.itemData(info) : undefined,\n          node = d_ && pgBrowser.Nodes[d_._type];\n\n        if (!d_)\n          return false;\n\n        var treeInfo = node.getTreeNodeHierarchy.apply(node, [info]);\n\n        // For indirect debugging user must be super user\n        if(data && data.debug_type && data.debug_type == 'indirect'\n            && !treeInfo.server.user.is_superuser)\n          return false;\n\n        // Fetch object owner\n        var obj_owner = treeInfo.function && treeInfo.function.funcowner ||\n            treeInfo.procedure && treeInfo.procedure.funcowner ||\n            treeInfo.edbfunc && treeInfo.edbfunc.funcowner ||\n            treeInfo.edbproc && treeInfo.edbproc.funcowner;\n\n        // Must be a super user or object owner to create breakpoints of any kind\n        if (!(treeInfo.server.user.is_superuser || obj_owner == treeInfo.server.user.name))\n          return false;\n\n        // For trigger node, language will be undefined - we should allow indirect debugging for trigger node\n        if ((d_.language == undefined && d_._type == 'trigger') ||\n            (d_.language == undefined && d_._type == 'edbfunc') ||\n            (d_.language == undefined && d_._type == 'edbproc')) {\n          return true;\n        }\n\n        if (d_.language != 'plpgsql' && d_.language != 'edbspl') {\n           return false;\n        }\n\n        return true;\n      },\n      /*\n        For the direct debugging, we need to fetch the function information to display in the dialog so \"generate_url\"\n        will dynamically generate the URL from the server_id, database_id, schema_id and function id.\n      */\n      generate_url: function(_url, treeInfo, node) {\n        var url = '{BASEURL}{URL}/{OBJTYPE}{REF}',\n            ref = '';\n\n        _.each(\n          _.sortBy(\n            _.values(\n              _.pick(treeInfo,\n              function(v, k, o) {\n                return (k != 'server_group');\n              })\n            ),\n            function(o) { return o.priority; }\n          ),\n          function(o) {\n            ref = S('%s/%s').sprintf(ref, encodeURI(o._id)).value();\n          });\n\n        var args = {\n          'URL': _url,\n          'BASEURL': url_for('debugger.index'),\n          'REF': ref,\n          'OBJTYPE': encodeURI(node.type)\n        };\n\n        return url.replace(/{(\\w+)}/g, function(match, arg) {\n          return args[arg];\n        });\n      },\n\n      check_func_debuggable: function(args, item) {\n        var input = args || {},\n          t = pgBrowser.tree,\n          i = item || t.selected(),\n          d = i && i.length == 1 ? t.itemData(i) : undefined,\n          node = d && pgBrowser.Nodes[d._type];\n\n        if (!d)\n          return;\n\n        var objName = d.label,\n            treeInfo = node.getTreeNodeHierarchy.apply(node, [i]),\n            _url = this.generate_url('init', treeInfo, node);\n\n        var self = this;\n        $.ajax({\n          url: _url,\n          cache: false,\n          success: function(res) {\n            self.start_global_debugger();\n          },\n          error: function(xhr, status, error) {\n            try {\n              var err = $.parseJSON(xhr.responseText);\n              if (err.success == 0) {\n                Alertify.alert(err.errormsg);\n              }\n            } catch (e) {}\n          }\n        });\n      },\n\n      //Callback function when user start the indirect debugging ( Listen to another session to invoke the target )\n      start_global_debugger: function(args, item) {\n        // Initialize the target and create asynchronous connection and unique transaction ID\n        var t = pgBrowser.tree,\n          i = t.selected(),\n          d = i && i.length == 1 ? t.itemData(i) : undefined,\n          node = d && pgBrowser.Nodes[d._type];\n\n        if (!d)\n          return;\n\n        var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n        if (d._type == \"function\") {\n          var baseUrl = url_for(\n                          'debugger.initialize_target_for_function', {\n                            'debug_type': 'indirect',\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.function._id\n                          }\n                        );\n        }\n        else if (d._type == \"procedure\") {\n          var baseUrl = url_for(\n                          'debugger.initialize_target_for_function', {\n                            'debug_type': 'indirect',\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.procedure._id\n                          }\n                        );\n        }\n        else if (d._type == \"trigger_function\") {\n          var baseUrl = url_for(\n                          'debugger.initialize_target_for_function', {\n                            'debug_type': 'indirect',\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.trigger_function._id\n                          }\n                        );\n        }\n        else if (d._type == \"trigger\" && \"table\" in treeInfo) {\n          var baseUrl = url_for(\n                          'debugger.initialize_target_for_trigger', {\n                            'debug_type': 'indirect',\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.table._id,\n                            'tri_id': treeInfo.trigger._id\n                          }\n                        );\n        }\n        else if (d._type == \"trigger\" && \"view\" in treeInfo) {\n          var baseUrl = url_for(\n                          'debugger.initialize_target_for_trigger', {\n                            'debug_type': 'indirect',\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.view._id,\n                            'tri_id': treeInfo.trigger._id\n                          }\n                        );\n        }\n\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            var url = url_for('debugger.direct', {'trans_id': res.data.debuggerTransId});\n\n            if (res.data.newBrowserTab) {\n              window.open(url, '_blank');\n            } else {\n              pgBrowser.Events.once(\n                'pgadmin-browser:frame:urlloaded:frm_debugger', function(frame) {\n                frame.openURL(url);\n              });\n\n              // Create the debugger panel as per the data received from user input dialog.\n              var dashboardPanel = pgBrowser.docker.findPanels(\n                'properties'\n              ),\n              panel = pgBrowser.docker.addPanel(\n                'frm_debugger', wcDocker.DOCK.STACKED, dashboardPanel[0]\n              );\n\n              panel.focus();\n\n              // Panel Closed event\n              panel.on(wcDocker.EVENT.CLOSED, function() {\n                var closeUrl = url_for('debugger.close', {'trans_id': res.data.debuggerTransId});\n                $.ajax({\n                  url: closeUrl,\n                  method: 'DELETE'\n                });\n              });\n            }\n          },\n          error: function(xhr, status, error) {\n            try {\n              var err = $.parseJSON(xhr.responseText);\n              if (err.success == 0) {\n                Alertify.alert(err.errormsg);\n              }\n            } catch (e) {}\n          }\n        });\n      },\n\n      /*\n        Get the function information for the direct debugging to display the functions arguments and  other informations\n        in the user input dialog\n      */\n      get_function_information: function(args, item) {\n        var input = args || {},\n          t = pgBrowser.tree,\n          i = item || t.selected(),\n          d = i && i.length == 1 ? t.itemData(i) : undefined,\n          node = d && pgBrowser.Nodes[d._type];\n\n        if (!d)\n          return;\n\n        var objName = d.label,\n            treeInfo = node.getTreeNodeHierarchy.apply(node, [i]),\n            _url = this.generate_url('init', treeInfo, node);\n\n        var self = this;\n        $.ajax({\n          url: _url,\n          cache: false,\n          success: function(res) {\n\n            // Open Alertify the dialog to take the input arguments from user if function having input arguments\n            if (res.data[0]['require_input']) {\n              get_function_arguments(res.data[0], 0);\n            }\n            else {\n              // Initialize the target and create asynchronous connection and unique transaction ID\n              // If there is no arguments to the functions then we should not ask for for function arguments and\n              // Directly open the panel\n              var t = pgBrowser.tree,\n                i = t.selected(),\n                d = i && i.length == 1 ? t.itemData(i) : undefined,\n                node = d && pgBrowser.Nodes[d._type];\n\n              if (!d)\n                return;\n\n              var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n              if (d._type == \"function\") {\n                var baseUrl = url_for(\n                                'debugger.initialize_target_for_function', {\n                                  'debug_type': 'direct',\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.function._id\n                                }\n                              );\n              }\n              else {\n                var baseUrl = url_for(\n                                'debugger.initialize_target_for_function', {\n                                  'debug_type': 'direct',\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.procedure._id\n                                }\n                              );\n              }\n\n              $.ajax({\n                url: baseUrl,\n                method: 'GET',\n                success: function(res) {\n\n                  var url = url_for('debugger.direct', {'trans_id': res.data.debuggerTransId});\n\n                  if (res.data.newBrowserTab) {\n                    window.open(url, '_blank');\n                  } else {\n                    pgBrowser.Events.once(\n                      'pgadmin-browser:frame:urlloaded:frm_debugger', function(frame) {\n                      frame.openURL(url);\n                    });\n\n                    // Create the debugger panel as per the data received from user input dialog.\n                    var dashboardPanel = pgBrowser.docker.findPanels(\n                      'properties'\n                      ),\n                      panel = pgBrowser.docker.addPanel(\n                        'frm_debugger', wcDocker.DOCK.STACKED, dashboardPanel[0]\n                        );\n\n                    panel.focus();\n\n                    // Register Panel Closed event\n                    panel.on(wcDocker.EVENT.CLOSED, function() {\n                      var closeUrl = url_for('debugger.close', {'trans_id': res.data.debuggerTransId});\n                      $.ajax({\n                        url: closeUrl,\n                        method: 'DELETE'\n                      });\n                    });\n                  }\n                },\n                error: function(e) {\n                  Alertify.alert(\n                    'Debugger target Initialize Error',\n                    e.responseJSON.errormsg\n                  );\n                }\n              });\n            }\n          },\n          error: function(xhr, status, error) {\n            try {\n              var err = $.parseJSON(xhr.responseText);\n              if (err.success == 0) {\n                Alertify.alert('Debugger Error', err.errormsg);\n              }\n            } catch (e) {}\n          }\n        });\n      }\n    };\n\n    return pgAdmin.Tools.Debugger;\n  });\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/debugger/static/js/debugger.js","define('pgadmin.node.pga_job', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'pgadmin.alertifyjs',\n  'pgadmin.node.pga_jobstep', 'pgadmin.node.pga_schedule'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-pga_job']) {\n    var pga_jobs = pgBrowser.Nodes['coll-pga_job'] =\n      pgBrowser.Collection.extend({\n        node: 'pga_job',\n        label: gettext('pga_jobs'),\n        type: 'coll-pga_job',\n        columns: ['jobid', 'jobname', 'jobenabled', 'jlgstatus', 'jobnextrun', 'joblastrun', 'jobdesc'],\n        hasStatistics: false\n      });\n  };\n\n  if (!pgBrowser.Nodes['pga_job']) {\n    pgBrowser.Nodes['pga_job'] = pgBrowser.Node.extend({\n      parent_type: 'server',\n      type: 'pga_job',\n      dialogHelp: url_for('help.static', {'filename': 'pgagent_jobs.html'}),\n      hasSQL: true,\n      hasDepends: false,\n      hasStatistics: true,\n      hasCollectiveStatistics: true,\n      width: '80%',\n      height: '80%',\n      canDrop: function(node) {\n        return true;\n      },\n      label: gettext('pgAgent Job'),\n      node_image: function() {\n        return 'icon-pga_job';\n      },\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_pga_job_on_coll', node: 'coll-pga_job', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('pgAgent Job...'),\n          icon: 'wcTabIcon icon-pga_job', data: {action: 'create'}\n        },{\n          name: 'create_pga_job', node: 'pga_job', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('pgAgent Job...'),\n          icon: 'wcTabIcon icon-pga_job', data: {action: 'create'}\n        }, {\n          name: 'run_now_pga_job', node: 'pga_job', module: this,\n          applies: ['object', 'context'], callback: 'run_pga_job_now',\n          priority: 4, label: gettext('Run now'), data: {action: 'create'},\n          icon: 'fa fa-play-circle'\n        }]);\n      },\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          jobname: '',\n          jobid: undefined,\n          jobenabled: true,\n          jobhostagent: '',\n          jobjclid: 1,\n          jobcreated: undefined,\n          jobchanged: undefined,\n          jobnextrun: undefined,\n          joblastrun: undefined,\n          jlgstatus: undefined,\n          jobrunningat: undefined,\n          jobdesc: '',\n          jsteps: [],\n          jschedules: []\n        },\n        idAttribute: 'jobid',\n        parse: function() {\n          var d = pgBrowser.Node.Model.prototype.parse.apply(this, arguments);\n\n          if (d) {\n            d.jobrunningat = d.jaghostagent || gettext(\"Not running currently.\");\n            d.jlgstatus = d.jlgstatus || gettext(\"Unknown\");\n          }\n          return d;\n        },\n        schema: [{\n          id: 'jobname', label: gettext('Name'), type: 'text',\n          cellHeaderClasses: 'width_percent_30'\n        },{\n          id: 'jobid', label: gettext('ID'), mode: ['properties'],\n          type: 'int'\n        },{\n          id: 'jobenabled', label: gettext('Enabled?'), type: 'switch',\n          cellHeaderClasses: 'width_percent_5'\n        },{\n          id: 'jobclass', label: gettext('Job class'), type: 'text',\n          mode: ['properties']\n        },{\n          id: 'jobjclid', label: gettext('Job class'), type: 'int',\n          control: 'node-ajax-options', url: 'classes', url_with_id: false,\n          cache_node: 'server', mode: ['create', 'edit'],\n          select2: {allowClear: false},\n          helpMessage: gettext('Please select a class to categorize the job. This option will not affect the way the job runs.')\n        },{\n          id: 'jobhostagent', label: gettext('Host agent'), type: 'text',\n          mode: ['edit', 'create'],\n          helpMessage: gettext('Enter the hostname of a machine running pgAgent if you wish to ensure only that machine will run this job. Leave blank if any host may run the job.')\n        },{\n          id: 'jobhostagent', label: gettext('Host agent'), type: 'text',\n          mode: ['properties']\n        },{\n          id: 'jobcreated', type: 'text', mode: ['properties'],\n          label: gettext('Created')\n        },{\n          id: 'jobchanged', type: 'text', mode: ['properties'],\n          label: gettext('Changed')\n        },{\n          id: 'jobnextrun', type: 'text', mode: ['properties'],\n          label: gettext('Next run'), cellHeaderClasses: 'width_percent_20'\n        },{\n          id: 'joblastrun', type: 'text', mode: ['properties'],\n          label: gettext('Last run'), cellHeaderClasses: 'width_percent_20'\n        },{\n          id: 'jlgstatus', type: 'text', label: gettext('Last result'),\n          cellHeaderClasses: 'width_percent_5', mode: ['properties']\n        },{\n          id: 'jobrunningat', type: 'text', mode: ['properties'],\n          label: gettext('Running at')\n        },{\n          id: 'jobdesc', label: gettext('Comment'), type: 'multiline',\n          cellHeaderClasses: 'width_percent_15'\n        },{\n          id: 'jsteps', label: '', group: gettext('Steps'),\n          type: 'collection', mode: ['edit', 'create'],\n          model: pgBrowser.Nodes['pga_jobstep'].model, canEdit: true,\n          control: 'sub-node-collection', canAdd: true, canDelete: true,\n          columns: [\n            'jstname', 'jstenabled', 'jstkind', 'jstconntype', 'jstonerror'\n          ]\n        },{\n          id: 'jschedules', label: '', group: gettext('Schedules'),\n          type: 'collection', mode: ['edit', 'create'],\n          control: 'sub-node-collection', canAdd: true, canDelete: true,\n          canEdit: true, model: pgBrowser.Nodes['pga_schedule'].model,\n          columns: ['jscname', 'jscenabled', 'jscstart', 'jscend']\n        }],\n        validate: function(keys) {\n          var name = this.get('jobname');\n          if (_.isUndefined(name) || _.isNull(name) ||\n            String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Name cannot be empty.');\n            this.errorModel.set('jobname', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('jobname');\n          }\n          return null;\n        }\n      }),\n      /* Run pgagent job now */\n      run_pga_job_now: function(args) {\n        var input = args || {},\n          obj = this,\n          t = pgBrowser.tree,\n          i = input.item || t.selected(),\n          d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n        if (!d)\n          return false;\n\n        $.ajax({\n          url: obj.generate_url(i, 'run_now', d, true),\n          method:'PUT',\n          success: function(res) {\n            // 'pgagent.pga_job' table updated with current time\n            // to run the job now.\n            t.unload(i);\n          },\n          error: function(xhr, status, error) {\n\t          var error_msg = \"Unable to run pgagent job.\";\n            if (xhr.readyState == 0) {\n              alertify.error(gettext('Not connected to the server or the connection to the server has been closed.'));\n            }\n            else {\n              if (_.isUndefined(xhr.responseText)) {\n                alertify.error(error_msg);\n              }\n              else {\n                var err = $.parseJSON(xhr.responseText);\n                if (err.success == 0) {\n                  alertify.error(err.errormsg);\n                }\n              }\n            }\n            t.unload(i);\n          }\n        });\n\n        return false;\n      },\n    });\n  }\n\n  return pgBrowser.Nodes['pga_job'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/pgagent/static/js/pga_job.js","define('pgadmin.node.pga_jobstep', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify', 'backform',\n  'backgrid', 'pgadmin.backform', 'pgadmin.backgrid'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, Alertify, Backform, Backgrid) {\n\n  if (!pgBrowser.Nodes['coll-pga_jobstep']) {\n    pgBrowser.Nodes['coll-pga_jobstep'] =\n      pgBrowser.Collection.extend({\n        node: 'pga_jobstep',\n        label: gettext('Steps'),\n        type: 'coll-pga_jobstep',\n        columns: [\n          'jstid', 'jstname', 'jstenabled', 'jstkind', 'jstconntype',\n          'jstonerror'\n        ],\n        hasStatistics: false\n      });\n  }\n\n  // Switch Cell with Deps, Needed for SubNode control\n  var SwitchDepsCell = Backgrid.Extension.SwitchCell.extend({\n    initialize: function initialize() {\n      Backgrid.Extension.SwitchCell.prototype.initialize.apply(this, arguments);\n      Backgrid.Extension.DependentCell.prototype.initialize.apply(this, arguments);\n    },\n    dependentChanged: function dependentChanged() {\n      var model = this.model,\n          column = this.column,\n          editable = this.column.get(\"editable\"),\n          input = this.$el.find('input[type=checkbox]').first(),\n          self_name = column.get('name'),\n          is_editable;\n\n      is_editable = _.isFunction(editable) ? !!editable.apply(column, [model]) : !!editable;\n      if (is_editable) {\n        this.$el.addClass(\"editable\");\n        input.bootstrapSwitch('disabled', false);\n      } else {\n        this.$el.removeClass(\"editable\");\n        input.bootstrapSwitch('disabled', true);\n        // Set self value into model\n        setTimeout(function () {\n          model.set(self_name, true);\n        }, 10);\n\n      }\n\n      this.delegateEvents();\n      return this;\n    },\n    remove: Backgrid.Extension.DependentCell.prototype.remove\n  });\n\n  if (!pgBrowser.Nodes['pga_jobstep']) {\n    pgBrowser.Nodes['pga_jobstep'] = pgBrowser.Node.extend({\n      parent_type: 'pga_job',\n      type: 'pga_jobstep',\n      dialogHelp: url_for('help.static', {'filename': 'pgagent_jobs.html'}),\n      hasSQL: true,\n      hasDepends: false,\n      hasStatistics: true,\n      hasCollectiveStatistics: true,\n      width: '70%',\n      height: '80%',\n      canDrop: function(node) {\n        return true;\n      },\n      label: gettext('Step'),\n      node_image: function() {\n        return 'icon-pga_jobstep';\n      },\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_pga_jobstep_on_job', node: 'pga_job', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Job Step...'),\n          data: {'action': 'create'}, icon: 'wcTabIcon icon-pga_jobstep'\n        },{\n          name: 'create_pga_jobstep_on_coll', node: 'coll-pga_jobstep', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Job Step...'),\n          data: {'action': 'create'}, icon: 'wcTabIcon icon-pga_jobstep'\n        },{\n          name: 'create_pga_jobstep', node: 'pga_jobstep', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Job Step...'),\n          data: {'action': 'create'}, icon: 'wcTabIcon icon-pga_jobstep'\n        }]);\n      },\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          jstid: null,\n          jstjobid: null,\n          jstname: '',\n          jstdesc: '',\n          jstenabled: true,\n          jstkind: true,\n          jstconntype: true,\n          jstcode: '',\n          jstconnstr: null,\n          jstdbname: null,\n          jstonerror: 'f',\n          jstnextrun: ''\n        },\n        initialize: function() {\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n          if (this.isNew() && this.get('jstconntype')) {\n            var args = arguments && arguments.length > 1 && arguments[1];\n\n            if (args) {\n              this.set(\n                'jstdbname',\n                (args['node_info'] || args.collection.top['node_info'])['server']['db']\n              );\n            }\n          }\n        },\n        idAttribute: 'jstid',\n        schema: [{\n          id: 'jstid', label: gettext('ID'), type: 'int',\n          cellHeaderClasses: 'width_percent_5', mode: ['properties']\n        },{\n          id: 'jstname', label: gettext('Name'), type: 'text',\n          disabled: function(m) { return false; },\n          cellHeaderClasses: 'width_percent_60'\n        },{\n          id: 'jstenabled', label: gettext('Enabled?'), type: 'switch',\n          disabled: function(m) { return false; }\n        },{\n          id: 'jstkind', label: gettext('Kind'), type: 'switch',\n          options: {\n            'onText': gettext('SQL'), 'offText': gettext('Batch'),\n            'onColor': 'primary', 'offColor': 'primary'\n          }, control: Backform.SwitchControl,\n          disabled: function(m) { return false; }\n        },{\n          id: 'jstconntype', label: gettext('Connection type'),\n          type: 'switch', deps: ['jstkind'], mode: ['properties'],\n          disabled: function(m) { return !m.get('jstkind'); },\n          options: {\n            'onText': gettext('Local'), 'offText': gettext('Remote'),\n            'onColor': 'primary', 'offColor': 'primary'\n          }\n        },{\n          id: 'jstconntype', label: gettext('Connection type'),\n          type: 'switch', deps: ['jstkind'], mode: ['create', 'edit'],\n          disabled: function(m) { return !m.get('jstkind'); },\n          cell: SwitchDepsCell,\n          editable: function(m) {\n            // If jstkind is Batch then disable it\n            return m.get('jstkind');\n          },\n          options: {\n            'onText': gettext('Local'), 'offText': gettext('Remote'),\n            'onColor': 'primary', 'offColor': 'primary'\n          }, helpMessage: gettext('Select <b>Local</b> if the job step will execute on the local database server, or <b>Remote</b> to specify a remote database server.')\n        },{\n          id: 'jstdbname', label: gettext('Database'), type: 'text',\n          mode: ['properties'], disabled: function(m) { return false; }\n        },{\n          id: 'jstconnstr', type: 'text', mode: ['properties'],\n          label: gettext('Connection string')\n        },{\n          id: 'jstdbname', label: gettext('Database'), type: 'text',\n          control: 'node-list-by-name', node: 'database',\n          cache_node: 'database', select2: {allowClear: true, placeholder: ''},\n          disabled: function(m) {\n            return !m.get('jstkind') || !m.get('jstconntype');\n          }, deps: ['jstkind', 'jstconntype'], mode: ['create', 'edit'],\n          helpMessage: gettext('Please select the database on which the job step will run.')\n        },{\n          id: 'jstconnstr', label: gettext('Connection string'), type: 'text',\n          deps: ['jstkind', 'jstconntype'], disabled: function(m) {\n            return !m.get('jstkind') || m.get('jstconntype');\n          }, helpMessage: S(\n            gettext(\"Please specify the connection string for the remote database server. Each parameter setting is in the form keyword = value. Spaces around the equal sign are optional. To write an empty value, or a value containing spaces, surround it with single quotes, e.g., keyword = 'a value'. Single quotes and backslashes within the value must be escaped with a backslash, i.e., \\' and \\\\.<br>For more information, please see the documentation on %s\")\n          ).sprintf(\n            '<a href=\"https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING\" target=\"_blank\">libpq connection strings</a>'\n          ).value(), mode: ['create', 'edit']\n        },{\n          id: 'jstonerror', label: gettext('On error'), cell: 'select2',\n          control: 'select2', options: [\n            {'label': gettext('Fail'), 'value': \"f\"},\n            {'label': gettext('Success'), 'value': \"s\"},\n            {'label': gettext('Ignore'), 'value': \"i\"}\n          ], select2: {allowClear: false}, disabled: function(m) {\n            return false;\n          }\n        },{\n          id: 'jstdesc', label: gettext('Comment'), type: 'multiline'\n        },{\n          id: 'jstcode', label: '', cell: 'string', deps: ['jstkind'],\n          type: 'text', control: 'sql-field', group: gettext('Code'),\n          control: Backform.SqlFieldControl.extend({\n            render: function() {\n              if (this.model.get('jstkind')) {\n                this.field.set('label', gettext('SQL query'));\n              } else {\n                this.field.set('label', gettext('Script'));\n              }\n              return Backform.SqlFieldControl.prototype.render.apply(\n                this, arguments\n              );\n            }\n          })\n        }],\n        validate: function(keys) {\n          var val = this.get('jstname'),\n              errMsg = null;\n\n          if (\n            _.isUndefined(val) || _.isNull(val) ||\n            String(val).replace(/^\\s+|\\s+$/g, '') == ''\n          ) {\n            errMsg = gettext('Name cannot be empty.');\n            this.errorModel.set('jstname', errMsg);\n          } else {\n            this.errorModel.unset('jstname');\n          }\n          if (this.get('jstkind')) {\n            if (this.get('jstconntype')) {\n              this.errorModel.unset('jstconnstr');\n              val = this.get('jstdbname');\n              if (\n                _.isUndefined(val) || _.isNull(val) ||\n                  String(val).replace(/^\\s+|\\s+$/g, '') == ''\n              ) {\n                var msg = gettext('Please select a database.');\n                errMsg = errMsg || msg;\n                this.errorModel.set('jstdbname', msg);\n              } else {\n                this.errorModel.unset('jstdbname');\n              }\n            } else {\n              this.errorModel.unset('jstdbname');\n              var msg,\n                r = /\\s*\\b(\\w+)\\s*=\\s*('([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'|[\\w|\\.]*)/g;\n              val = this.get('jstconnstr');\n              if (\n                _.isUndefined(val) || _.isNull(val) ||\n                  String(val).replace(/^\\s+|\\s+$/g, '') == ''\n              ) {\n                msg = gettext('Please enter a connection string.');\n              } else if (String(val).replace(r, '') != '') {\n                msg = gettext('Please enter a valid connection string.');\n              } else {\n                var m,\n                    params = {\n                      'host': true, 'hostaddr': true, 'port': true,\n                      'dbname': true, 'user': true, 'password': true,\n                      'connect_timeout': true, 'client_encoding': true,\n                      'application_name': true, 'options': true,\n                      'fallback_application_name': true, 'sslmode': true,\n                      'sslcert': true, 'sslkey': true, 'sslrootcert': true,\n                      'sslcrl': true, 'keepalives': true, 'service': true,\n                      'keepalives_idle': true, 'keepalives_interval': true,\n                      'keepalives_count': true, 'sslcompression': true,\n                      'requirepeer': true, 'krbsrvname': true, 'gsslib': true,\n                    };\n\n                while((m = r.exec(val))) {\n                  if (params[m[1]]) {\n                    if (m[2])\n                      continue;\n                    msg = gettext('Please enter a valid connection string.');\n                    break;\n                  }\n\n                  msg = S(\n                    gettext('Invalid parameter in the connection string - %s.')\n                  ).sprintf(m[1]).value();\n                  break;\n                }\n              }\n\n              if (msg) {\n                errMsg = errMsg || msg;\n                this.errorModel.set('jstconnstr', msg);\n              } else {\n                this.errorModel.unset('jstconnstr');\n              }\n            }\n          } else {\n            this.errorModel.unset('jstconnstr');\n            this.errorModel.unset('jstdbname');\n          }\n\n          val = this.get('jstcode');\n          if (\n            _.isUndefined(val) || _.isNull(val) ||\n            String(val).replace(/^\\s+|\\s+$/g, '') == ''\n          ) {\n            var msg = gettext('Please specify code to execute.');\n            errMsg = errMsg || msg;\n            this.errorModel.set('jstcode', msg);\n          } else {\n            this.errorModel.unset('jstcode');\n          }\n\n          return errMsg;\n        }\n      })\n    });\n  }\n\n  return pgBrowser.Nodes['pga_job'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/pgagent/steps/static/js/pga_jobstep.js","define('pgadmin.node.pga_schedule', [\n    'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n    'underscore.string', 'sources/pgadmin', 'moment', 'pgadmin.browser', 'alertify',\n    'backform', 'pgadmin.backform'\n], function(gettext, url_for, $, _, S, pgAdmin, moment, pgBrowser, Alertify, Backform) {\n\n  if (!pgBrowser.Nodes['coll-pga_schedule']) {\n    pgBrowser.Nodes['coll-pga_schedule'] =\n      pgBrowser.Collection.extend({\n        node: 'pga_schedule',\n        label: gettext('Schedules'),\n        type: 'coll-pga_schedule',\n        columns: ['jscid', 'jscname', 'jscenabled'],\n        hasStatistics: false\n      });\n  }\n\n  if (!pgBrowser.Nodes['pga_schedule']) {\n\n    var weekdays = [\n        gettext('Sunday'), gettext('Monday'), gettext('Tuesday'),\n        gettext('Wednesday'), gettext('Thursday'), gettext('Friday'),\n        gettext('Saturday')\n      ],\n      monthdays = [\n        gettext('1st'), gettext('2nd'), gettext('3rd'),\n        gettext('4th'), gettext('5th'), gettext('6th'),\n        gettext('7th'), gettext('8th'), gettext('9th'),\n        gettext('10th'), gettext('11th'), gettext('12th'),\n        gettext('13th'), gettext('14th'), gettext('15th'),\n        gettext('16th'), gettext('17th'), gettext('18th'),\n        gettext('19th'), gettext('20th'), gettext('21st'),\n        gettext('22nd'), gettext('23rd'), gettext('24th'),\n        gettext('25th'), gettext('26th'), gettext('27th'),\n        gettext('28th'), gettext('29th'), gettext('30th'),\n        gettext('31st'), gettext('Last day')\n      ],\n      months = [\n        gettext('January'), gettext('February'), gettext('March'),\n        gettext('April'), gettext('May'), gettext('June'),\n        gettext('July'), gettext('August'), gettext('September'),\n        gettext('October'), gettext('November'), gettext('December')\n      ],\n      hours = [\n        gettext('00'), gettext('01'), gettext('02'), gettext('03'),\n        gettext('04'), gettext('05'), gettext('06'), gettext('07'),\n        gettext('08'), gettext('09'), gettext('10'), gettext('11'),\n        gettext('12'), gettext('13'), gettext('14'), gettext('15'),\n        gettext('16'), gettext('17'), gettext('18'), gettext('19'),\n        gettext('20'), gettext('21'), gettext('22'), gettext('23')\n      ],\n      minutes = [\n        gettext('00'), gettext('01'), gettext('02'), gettext('03'),\n        gettext('04'), gettext('05'), gettext('06'), gettext('07'),\n        gettext('08'), gettext('09'), gettext('10'), gettext('11'),\n        gettext('12'), gettext('13'), gettext('14'), gettext('15'),\n        gettext('16'), gettext('17'), gettext('18'), gettext('19'),\n        gettext('20'), gettext('21'), gettext('22'), gettext('23'),\n        gettext('24'), gettext('25'), gettext('26'), gettext('27'),\n        gettext('28'), gettext('29'), gettext('30'), gettext('31'),\n        gettext('32'), gettext('33'), gettext('34'), gettext('35'),\n        gettext('36'), gettext('37'), gettext('38'), gettext('39'),\n        gettext('40'), gettext('41'), gettext('42'), gettext('43'),\n        gettext('44'), gettext('45'), gettext('46'), gettext('47'),\n        gettext('48'), gettext('49'), gettext('50'), gettext('51'),\n        gettext('52'), gettext('53'), gettext('54'), gettext('55'),\n        gettext('56'), gettext('57'), gettext('58'), gettext('59')\n      ],\n      AnyDatetimeCell = Backgrid.Extension.MomentCell.extend({\n        editor: Backgrid.Extension.DatetimePickerEditor,\n        render: function() {\n          this.$el.empty();\n          var model = this.model;\n          this.$el.text(this.formatter.fromRaw(model.get(this.column.get(\"name\")), model) || gettext('<any>'));\n          this.delegateEvents();\n\n          return this;\n        }\n      }),\n      BooleanArrayFormatter = function(selector, indexes) {\n        var self = this;\n\n        self.selector = selector;\n        self.indexes = indexes;\n\n        this.fromRaw = function(rawData) {\n          if (!_.isArray(rawData)) {\n            return rawData;\n          }\n\n          var res = [], idx = 0, resIdx = [];\n\n          for (; idx < rawData.length; idx++) {\n            if (!rawData[idx])\n              continue;\n            res.push(self.selector[idx]);\n            resIdx.push(idx + 1);\n          }\n\n          return self.indexes ? resIdx : res.join(', ');\n        }\n        this.toRaw = function(d) {\n          if (!self.indexes)\n            return d;\n          var res = [], i = 0, l = self.selector.length;\n\n          for (; i < l; i++) {\n            res.push(_.indexOf(d, String(i + 1)) != -1);\n          }\n          return res;\n        }\n\n        return self;\n      },\n      BooleanArrayOptions = function(ctrl) {\n        var selector = ctrl.field.get('selector'),\n            val = ctrl.model.get(ctrl.field.get('name')),\n            res = [];\n\n        if (selector) {\n          res = _.map(\n            selector, function(v, i) {\n              return {label: v, value: i + 1, selected: val[i]};\n            }\n          );\n        }\n        return res;\n      },\n      ExceptionModel = pgBrowser.Node.Model.extend({\n        defaults: {\n          jexid: undefined,\n          jexdate: null,\n          jextime: null\n        },\n        idAttribute: 'jexid',\n        schema: [{\n          id: 'jexdate', type: 'text', label: gettext('Date'),\n          editable: true, placeholder: gettext('<any>'),\n          cell: AnyDatetimeCell, options: {format: 'YYYY-MM-DD'},\n          displayFormat: 'YYYY-MM-DD', modelFormat: 'YYYY-MM-DD',\n          cellHeaderClasses:'width_percent_50', allowEmpty: true\n        },{\n          id: 'jextime', type: 'text', placeholder: gettext('<any>'),\n          label: gettext('Time'), editable: true, cell: AnyDatetimeCell,\n          options: {format: 'HH:mm'}, displayFormat: 'HH:mm',\n          modelFormat: 'HH:mm:ss', displayInUTC: false, allowEmpty: true,\n          cellHeaderClasses:'width_percent_50', modalInUTC: false\n        }],\n        validate: function() {\n          var self = this, exceptions = this.collection,\n              dates = {}, errMsg, hasExceptionErr = false,\n              d = (this.get('jexdate') || '<any>'),\n              t = this.get('jextime') || '<any>',\n              id = this.get('jexid') || this.cid;\n\n          self.errorModel.unset('jscdate');\n          if (d == t && d == '<any>') {\n            errMsg = gettext('Please specify date/time.');\n            self.errorModel.set('jscdate', errMsg);\n            return errMsg ;\n          }\n\n          exceptions.each(function(ex) {\n            if (hasExceptionErr || id == (ex.get('jexid') || ex.cid))\n              return;\n\n            if (\n              d == (ex.get('jexdate') || '<any>') &&\n              t == (ex.get('jextime') || '<any>')\n            ) {\n              errMsg = gettext('Please specify unique set of exceptions.');\n              if (ex.errorModel.get('jscdate') != errMsg)\n                  self.errorModel.set('jscdate', errMsg);\n              hasExceptionErr = true;\n            }\n          });\n\n          return errMsg;\n        }\n      });\n\n    pgBrowser.Nodes['pga_schedule'] = pgBrowser.Node.extend({\n      parent_type: 'pga_job',\n      type: 'pga_schedule',\n      dialogHelp: url_for('help.static', {'filename': 'pgagent_jobs.html'}),\n      hasSQL: true,\n      hasDepends: false,\n      hasStatistics: false,\n      canDrop: function(node) {\n        return true;\n      },\n      label: gettext('Schedule'),\n      node_image: 'icon-pga_schedule',\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_pga_schedule_on_job', node: 'pga_job', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Schedule...'),\n          icon: 'wcTabIcon icon-pga_schedule', data: {action: 'create'}\n        },{\n          name: 'create_pga_schedule_on_coll', node: 'coll-pga_schedule', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Schedule...'),\n          icon: 'wcTabIcon icon-pga_schedule', data: {action: 'create'}\n        },{\n          name: 'create_pga_schedule', node: 'pga_schedule', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Schedule...'),\n          icon: 'wcTabIcon icon-pga_schedule', data: {action: 'create'}\n        }]);\n      },\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          jscid: null,\n          jscjobid: null,\n          jscname: '',\n          jscdesc: '',\n          jscenabled: true,\n          jscstart: null,\n          jscend: null,\n          jscweekdays: _.map(weekdays, function() { return false; }),\n          jscmonthdays: _.map(monthdays, function() { return false; }),\n          jscmonths: _.map(months, function() { return false; }),\n          jschours: _.map(hours, function() { return false; }),\n          jscminutes: _.map(minutes, function() { return false; }),\n          jscexceptions: []\n        },\n        idAttribute: 'jscid',\n        parse: function(d) {\n          d.jscexceptions = [];\n          if (d.jexid && d.jexid.length) {\n            var idx = 0;\n            for (; idx < d.jexid.length; idx++) {\n              d.jscexceptions.push({\n                'jexid': d.jexid[idx],\n                'jexdate': d.jexdate[idx],\n                'jextime': d.jextime[idx]\n              });\n            }\n          }\n          delete d.jexid;\n          delete d.jexdate;\n          delete d.jextime;\n\n          return pgBrowser.Node.Model.prototype.parse.apply(this, arguments);\n        },\n        schema: [{\n          id: 'jscid', label: gettext('ID'), type: 'int',\n          cellHeaderClasses: 'width_percent_5', mode: ['properties']\n        },{\n          id: 'jscname', label: gettext('Name'), type: 'text',\n          cellHeaderClasses: 'width_percent_45',\n          disabled: function() { return false; }\n        },{\n          id: 'jscenabled', label: gettext('Enabled?'), type: 'switch',\n          disabled: function() { return false; },\n          cellHeaderClasses: 'width_percent_5'\n        },{\n          id: 'jscstart', label: gettext('Start'), type: 'text',\n          control: 'datetimepicker', cell: 'moment',\n          disabled: function() { return false; }, displayInUTC: false,\n          displayFormat: 'YYYY-MM-DD HH:mm:ss Z',\n          modelFormat: 'YYYY-MM-DD HH:mm:ss Z', options: {\n            format: 'YYYY-MM-DD HH:mm:ss Z',\n          }, cellHeaderClasses: 'width_percent_25'\n        },{\n          id: 'jscend', label: gettext('End'), type: 'text',\n          control: 'datetimepicker', cell: 'moment',\n          disabled: function() { return false; }, displayInUTC: false,\n          displayFormat: 'YYYY-MM-DD HH:mm:ss Z', options: {\n            format: 'YYYY-MM-DD HH:mm:ss Z', useCurrent: false\n          }, cellHeaderClasses: 'width_percent_25',\n          modelFormat: 'YYYY-MM-DD HH:mm:ss Z'\n        },{\n          id: 'jscweekdays', label: gettext('Week days'), type: 'text',\n          control: Backform.Control.extend({\n            formatter: new BooleanArrayFormatter(weekdays, false)\n          }), mode: ['properties']\n        },{\n          id: 'jscmonthdays', label: gettext('Month days'), type: 'text',\n          control: Backform.Control.extend({\n            formatter: new BooleanArrayFormatter(monthdays, false)\n          }), mode: ['properties']\n        },{\n          id: 'jscmonths', label: gettext('Months'), type: 'text',\n          control: Backform.Control.extend({\n            formatter: new BooleanArrayFormatter(months, false)\n          }), mode: ['properties']\n        },{\n          id: 'jschours', label: gettext('Hours'), type: 'text',\n          control: Backform.Control.extend({\n            formatter: new BooleanArrayFormatter(hours, false)\n          }), mode: ['properties']\n        },{\n          id: 'jscminutes', label: gettext('Minutes'), type: 'text',\n          control: Backform.Control.extend({\n            formatter: new BooleanArrayFormatter(minutes, false)\n          }), mode: ['properties']\n        },{\n          id: 'jscexceptions', label: gettext('Exceptions'), type: 'text',\n          control: Backform.Control.extend({\n            formatter: new function() {\n              this.fromRaw = function(rawData) {\n                var res = '', idx = 0, d;\n\n                if (!rawData) {\n                  return res;\n                }\n\n                for (; idx < rawData.length; idx++) {\n                  d = rawData[idx];\n                  if (idx)\n                      res += ', ';\n                  res += '[' + String((d.jexdate || '') + ' ' + (d.jextime || '')).replace(/^\\s+|\\s+$/g, '') + ']';\n                }\n\n                return res;\n              }\n              this.toRaw = function(data) { return data; }\n\n              return this;\n            }\n          }), mode: ['properties']\n        },{\n          type: 'nested', label: gettext('Days'), group: gettext('Repeat'),\n          mode: ['create', 'edit'],\n          control: Backform.FieldsetControl.extend({\n            render: function() {\n              var res = Backform.FieldsetControl.prototype.render.apply(\n                this, arguments\n              );\n\n              this.$el.prepend(\n                '<div class=\"set-group pg-el-xs-12 ' +\n                Backform.helpMessageClassName + '\">' +\n                gettext('Schedules are specified using a <b>cron-style</b> format.<br/><ul><li>For each selected time or date element, the schedule will execute.<br/>e.g. To execute at 5 minutes past every hour, simply select ‘05’ in the Minutes list box.<br/></li><li>Values from more than one field may be specified in order to further control the schedule.<br/>e.g. To execute at 12:05 and 14:05 every Monday and Thursday, you would click minute 05, hours 12 and 14, and weekdays Monday and Thursday.</li><li>For additional flexibility, the Month Days check list includes an extra Last Day option. This matches the last day of the month, whether it happens to be the 28th, 29th, 30th or 31st.</li></ul>') +\n                '</div>'\n              );\n\n              return res;\n            }\n          }),\n          schema:[{\n            id: 'jscweekdays', label: gettext('Week Days'), cell: 'select2',\n            group: gettext('Days'), control: 'select2',\n            select2: {\n              first_empty: false,\n              multiple: true,\n              allowClear: true,\n              placeholder: gettext('Select the weekdays...'),\n              width: 'style',\n              dropdownAdapter: $.fn.select2.amd.require(\n                'select2/selectAllAdapter'\n              )\n            },\n            selector: weekdays,\n            formatter: new BooleanArrayFormatter(weekdays, true),\n            options: BooleanArrayOptions\n          },{\n            id: 'jscmonthdays', label: gettext('Month Days'), cell: 'select2',\n            group: gettext('Days'), control: 'select2',\n            select2: {\n              first_empty: false,\n              multiple: true,\n              allowClear: true,\n              placeholder: gettext('Select the month days...'),\n              width: 'style',\n              dropdownAdapter: $.fn.select2.amd.require(\n                'select2/selectAllAdapter'\n              )\n            },\n            formatter: new BooleanArrayFormatter(monthdays, true),\n            selector: monthdays, options: BooleanArrayOptions\n          },{\n            id: 'jscmonths', label: gettext('Months'), cell: 'select2',\n            group: gettext('Days'), control: 'select2',\n            select2: {\n              first_empty: false,\n              multiple: true,\n              allowClear: true,\n              placeholder: gettext('Select the months...'),\n              width: 'style',\n              dropdownAdapter: $.fn.select2.amd.require(\n                'select2/selectAllAdapter'\n              )\n            },\n            formatter: new BooleanArrayFormatter(months, true),\n            selector: months, options: BooleanArrayOptions\n          }]\n        },{\n          type: 'nested', control: 'fieldset', label: gettext('Times'),\n          group: gettext('Repeat'), mode: ['create', 'edit'],\n          schema:[{\n            id: 'jschours', label: gettext('Hours'), cell: 'select2',\n            group: gettext('Times'), control: 'select2',\n            select2: {\n              first_empty: false,\n              multiple: true,\n              allowClear: true,\n              placeholder: gettext('Select the hours...'),\n              width: 'style',\n              dropdownAdapter: $.fn.select2.amd.require(\n                'select2/selectAllAdapter'\n              )\n            },\n            formatter: new BooleanArrayFormatter(hours, true),\n            selector: hours, options: BooleanArrayOptions\n          },{\n            id: 'jscminutes', label: gettext('Minutes'), cell: 'select2',\n            group: gettext('Times'), control: 'select2',\n            select2: {\n              first_empty: false,\n              multiple: true,\n              allowClear: true,\n              placeholder: gettext('Select the minutes...'),\n              width: 'style',\n              dropdownAdapter: $.fn.select2.amd.require(\n                'select2/selectAllAdapter'\n              )\n            },\n            formatter: new BooleanArrayFormatter(minutes, true),\n            selector: minutes, options: BooleanArrayOptions\n          }]\n        },{\n          id: 'jscexceptions', type: 'collection', mode: ['edit', 'create'],\n          label: \"\", canEdit: false, model: ExceptionModel, canAdd: true,\n          group: gettext('Exceptions'), canDelete: true,\n          cols: ['jexdate', 'jextime'], control: 'sub-node-collection'\n        },{\n          id: 'jscdesc', label: gettext('Comment'), type: 'multiline'\n        }],\n        validate: function(keys) {\n          var val = this.get('jscname'),\n              errMsg = null;\n\n          if (_.isUndefined(val) || _.isNull(val) ||\n            String(val).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Name cannot be empty.');\n            this.errorModel.set('jscname', msg);\n            errMsg = msg;\n          } else {\n            this.errorModel.unset('jscname');\n          }\n\n          val = this.get('jscstart');\n          if (_.isUndefined(val) || _.isNull(val) ||\n            String(val).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Please enter the start time.');\n            this.errorModel.set('jscstart', msg);\n            errMsg = errMsg || msg;\n          } else {\n            this.errorModel.unset('jscstart');\n          }\n\n          val = this.get('jscend');\n          if (_.isUndefined(val) || _.isNull(val) ||\n            String(val).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Please enter the end time.');\n            this.errorModel.set('jscend', msg);\n            errMsg = errMsg || msg;\n          } else {\n            this.errorModel.unset('jscend');\n          }\n\n          return errMsg;\n        }\n      })\n    });\n  }\n\n  return pgBrowser.Nodes['pga_schedule'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/pgagent/schedules/static/js/pga_schedule.js","/*** IMPORTS FROM imports-loader ***/\nvar pgadmin = (pgadmin || {});\npgadmin.dashboard = require(\"pgadmin.dashboard\");\nvar pgadmin = (pgadmin || {});\npgadmin.tools = {};\npgadmin.tools.user_management = require(\"pgadmin.tools.user_management\");\nvar pgadmin = (pgadmin || {});\npgadmin.browser = {};\npgadmin.browser.object_statistics = require(\"pgadmin.browser.object_statistics\");\nvar pgadmin = (pgadmin || {});\npgadmin.browser = {};\npgadmin.browser.object_depends = require(\"pgadmin.browser.object_depends\");\nvar pgadmin = (pgadmin || {});\npgadmin.browser = {};\npgadmin.browser.object_sql = require(\"pgadmin.browser.object_sql\");\nvar pgadmin = (pgadmin || {});\npgadmin.browser = {};\npgadmin.browser.bgprocess = require(\"pgadmin.browser.bgprocess\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.server_group = require(\"pgadmin.node.server_group\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.server = require(\"pgadmin.node.server\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.database = require(\"pgadmin.node.database\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.role = require(\"pgadmin.node.role\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.cast = require(\"pgadmin.node.cast\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.tablespace = require(\"pgadmin.node.tablespace\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.resource_group = require(\"pgadmin.node.resource_group\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.event_trigger = require(\"pgadmin.node.event_trigger\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.extension = require(\"pgadmin.node.extension\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.language = require(\"pgadmin.node.language\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.foreign_data_wrapper = require(\"pgadmin.node.foreign_data_wrapper\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.foreign_server = require(\"pgadmin.node.foreign_server\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.user_mapping = require(\"pgadmin.node.user_mapping\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.schema = require(\"pgadmin.node.schema\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.catalog = require(\"pgadmin.node.catalog\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.catalog_object = require(\"pgadmin.node.catalog_object\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.collation = require(\"pgadmin.node.collation\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.domain = require(\"pgadmin.node.domain\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.domain_constraints = require(\"pgadmin.node.domain_constraints\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.foreign_table = require(\"pgadmin.node.foreign_table\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.fts_configuration = require(\"pgadmin.node.fts_configuration\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.fts_dictionary = require(\"pgadmin.node.fts_dictionary\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.fts_parser = require(\"pgadmin.node.fts_parser\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.fts_template = require(\"pgadmin.node.fts_template\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.function = require(\"pgadmin.node.function\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.procedure = require(\"pgadmin.node.procedure\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.edbfunc = require(\"pgadmin.node.edbfunc\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.edbproc = require(\"pgadmin.node.edbproc\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.edbvar = require(\"pgadmin.node.edbvar\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.trigger_function = require(\"pgadmin.node.trigger_function\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.package = require(\"pgadmin.node.package\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.sequence = require(\"pgadmin.node.sequence\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.synonym = require(\"pgadmin.node.synonym\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.type = require(\"pgadmin.node.type\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.rule = require(\"pgadmin.node.rule\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.index = require(\"pgadmin.node.index\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.trigger = require(\"pgadmin.node.trigger\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.catalog_object_column = require(\"pgadmin.node.catalog_object_column\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.view = require(\"pgadmin.node.view\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.mview = require(\"pgadmin.node.mview\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.table = require(\"pgadmin.node.table\");\nvar pgadmin = (pgadmin || {});\npgadmin.node = {};\npgadmin.node.partition = require(\"pgadmin.node.partition\");\n\ndefine('pgadmin.datagrid', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'alertify', 'sources/pgadmin',\n  'bundled_codemirror',\n  'sources/sqleditor_utils', 'wcdocker'\n], function(gettext, url_for, $, _, alertify, pgAdmin, codemirror, sqlEditorUtils) {\n    // Some scripts do export their object in the window only.\n    // Generally the one, which do no have AMD support.\n    var wcDocker = window.wcDocker,\n      pgBrowser = pgAdmin.Browser,\n      CodeMirror = codemirror.default;\n\n    /* Return back, this has been called more than once */\n    if (pgAdmin.DataGrid)\n      return pgAdmin.DataGrid;\n\n    pgAdmin.DataGrid = {\n      init: function() {\n        if (this.initialized)\n            return;\n        this.initialized = true;\n        this.title_index = 1;\n\n        this.spinner_el = '<div class=\"wcLoadingContainer\">'+\n              '<div class=\"wcLoadingBackground\"></div>'+\n                '<div class=\"wcLoadingIconContainer\">'+\n                  '<i class=\"wcLoadingIcon fa fa-spinner fa-pulse\"></i>'+\n                '</div>'+\n              '</div>';\n        // Define list of nodes on which view data option appears\n        var supported_nodes = [\n           'table', 'view', 'mview',\n           'foreign_table', 'catalog_object', 'partition'\n        ],\n\n        /* Enable/disable View data menu in tools based\n         * on node selected. if selected node is present\n         * in supported_nodes, menu will be enabled\n         * otherwise disabled.\n         */\n        view_menu_enabled = function(obj) {\n          if(!_.isUndefined(obj) && !_.isNull(obj))\n            return (_.indexOf(supported_nodes, obj._type) !== -1 ? true: false);\n          else\n            return false;\n        },\n\n        /* Enable/disable Query tool menu in tools based\n         * on node selected. if selected node is present\n         * in unsupported_nodes, menu will be disabled\n         * otherwise enabled.\n         */\n        query_tool_menu_enabled = function(obj) {\n          if(!_.isUndefined(obj) && !_.isNull(obj)) {\n            if(_.indexOf(pgAdmin.unsupported_nodes, obj._type) == -1) {\n              if (obj._type == 'database' && obj.allowConn)\n                return true;\n              else if(obj._type != 'database')\n                return true;\n              else\n                return false;\n             } else {\n                return false;\n             }\n          } else {\n            return false;\n          }\n        };\n\n        // Define the nodes on which the menus to be appear\n        var menus = [{\n          name: 'query_tool', module: this, applies: ['tools'],\n          callback: 'show_query_tool', enable: query_tool_menu_enabled,\n          priority: 1, label: gettext('Query Tool'),\n          icon: 'fa fa-bolt'\n        }];\n\n        // Create context menu\n        for (var idx = 0; idx < supported_nodes.length; idx++) {\n          menus.push({\n            name: 'view_all_rows_context_' + supported_nodes[idx],\n            node: supported_nodes[idx], module: this, data: {mnuid: 3},\n            applies: ['context', 'object'], callback: 'show_data_grid', enable: view_menu_enabled,\n            category: 'view_data', priority: 101, label: gettext('All Rows')\n          },{\n            name: 'view_first_100_rows_context_' + supported_nodes[idx],\n            node: supported_nodes[idx], module: this, data: {mnuid: 1},\n            applies: ['context', 'object'], callback: 'show_data_grid', enable: view_menu_enabled,\n            category: 'view_data', priority: 102, label: gettext('First 100 Rows')\n          },{\n            name: 'view_last_100_rows_context_' + supported_nodes[idx],\n            node: supported_nodes[idx], module: this, data: {mnuid: 2},\n            applies: ['context', 'object'], callback: 'show_data_grid', enable: view_menu_enabled,\n            category: 'view_data', priority: 103, label: gettext('Last 100 Rows')\n          },{\n            name: 'view_filtered_rows_context_' + supported_nodes[idx],\n            node: supported_nodes[idx], module: this, data: {mnuid: 4},\n            applies: ['context', 'object'], callback: 'show_filtered_row', enable: view_menu_enabled,\n            category: 'view_data', priority: 104, label: gettext('Filtered Rows...')\n         });\n        }\n\n        pgAdmin.Browser.add_menu_category('view_data', gettext('View/Edit Data'), 100, 'fa fa-th');\n        pgAdmin.Browser.add_menus(menus);\n\n        // Creating a new pgAdmin.Browser frame to show the data.\n        var dataGridFrameType = new pgAdmin.Browser.Frame({\n          name: 'frm_datagrid',\n          showTitle: true,\n          isCloseable: true,\n          isPrivate: true,\n          url: 'about:blank'\n        });\n\n        // Load the newly created frame\n        dataGridFrameType.load(pgBrowser.docker);\n      },\n\n      // This is a callback function to show data when user click on menu item.\n      show_data_grid: function(data, i) {\n        var self = this,\n            d = pgAdmin.Browser.tree.itemData(i);\n        if (d === undefined) {\n          alertify.alert(\n            'Data Grid Error',\n            'No object selected.'\n          );\n          return;\n        }\n\n        // Get the parent data from the tree node hierarchy.\n        var node = pgBrowser.Nodes[d._type],\n          parentData = node.getTreeNodeHierarchy(i);\n\n        // If server, database or schema is undefined then return from the function.\n        if (parentData.server === undefined || parentData.database === undefined) {\n          return;\n        }\n        // If schema, view, catalog object all are undefined then return from the function.\n        if (parentData.schema === undefined && parentData.view === undefined &&\n             parentData.catalog === undefined) {\n          return;\n        }\n\n        var nsp_name = '';\n\n        if (parentData.schema != undefined) {\n            nsp_name = parentData.schema.label;\n        }\n        else if (parentData.view != undefined) {\n            nsp_name = parentData.view.label;\n        }\n        else if (parentData.catalog != undefined) {\n            nsp_name = parentData.catalog.label;\n        }\n        var url_params = {\n          'cmd_type': data.mnuid,\n          'obj_type': d._type,\n          'sid': parentData.server._id,\n          'did': parentData.database._id,\n          'obj_id': d._id\n        };\n\n        var baseUrl = url_for('datagrid.initialize_datagrid', url_params);\n        var grid_title = parentData.server.label + ' - ' + parentData.database.label + ' - '\n                        + nsp_name + '.' + d.label;\n\n        // Initialize the data grid.\n        self.initialize_data_grid(baseUrl, grid_title, '', parentData.server.server_type);\n      },\n\n      // This is a callback function to show filtered data when user click on menu item.\n      show_filtered_row: function(data, i) {\n        var self = this,\n            d = pgAdmin.Browser.tree.itemData(i);\n        if (d === undefined) {\n          alertify.alert(\n            'Data Grid Error',\n            'No object selected.'\n          );\n          return;\n        }\n\n        // Get the parent data from the tree node hierarchy.\n        var node = pgBrowser.Nodes[d._type],\n          parentData = node.getTreeNodeHierarchy(i);\n\n        // If server or database is undefined then return from the function.\n        if (parentData.server === undefined || parentData.database === undefined) {\n          return;\n        }\n\n        // If schema, view, catalog object all are undefined then return from the function.\n        if (parentData.schema === undefined && parentData.view === undefined &&\n             parentData.catalog === undefined) {\n          return;\n        }\n\n        var nsp_name = '';\n\n        if (parentData.schema != undefined) {\n            nsp_name = parentData.schema.label;\n        }\n        else if (parentData.view != undefined) {\n            nsp_name = parentData.view.label;\n        }\n        else if (parentData.catalog != undefined) {\n            nsp_name = parentData.catalog.label;\n        }\n\n        var url_params = {\n          'cmd_type': data.mnuid,\n          'obj_type': d._type,\n          'sid': parentData.server._id,\n          'did': parentData.database._id,\n          'obj_id': d._id\n\n        };\n\n        var baseUrl = url_for('datagrid.initialize_datagrid', url_params);\n\n        // Create url to validate the SQL filter\n        var validateUrl = url_for('datagrid.filter_validate', {\n                        'sid': url_params['sid'],\n                        'did': url_params['did'],\n                        'obj_id': url_params['obj_id'],\n                      });\n        var grid_title = parentData.server.label + '-' + parentData.database.label + '-'\n                        + nsp_name + '.' + d.label;\n\n        // Create filter dialog using alertify\n        if (!alertify.filterDialog) {\n          alertify.dialog('filterDialog', function factory() {\n            return {\n              main: function(title, message, baseUrl, validateUrl) {\n                this.set('title', title);\n                this.message = message;\n                this.baseUrl = baseUrl;\n                this.validateUrl = validateUrl;\n              },\n\n              setup:function() {\n                return {\n                  buttons:[\n                    { text: \"OK\", className: \"btn btn-primary\" },\n                    { text: \"Cancel\", className: \"btn btn-danger\" }\n                  ],\n                  options: { modal: 0, resizable: false, maximizable: false, pinnable: false}\n                };\n              },\n\n              build:function() {},\n              prepare:function() {\n\t\t        var $content = $(this.message),\n                    $sql_filter = $content.find('#sql_filter');\n\n                this.setContent($content.get(0));\n\n                // Apply CodeMirror to filter text area.\n                this.filter_obj = CodeMirror.fromTextArea($sql_filter.get(0), {\n                  lineNumbers: true,\n                  indentUnit: 4,\n                  mode: \"text/x-pgsql\",\n                  extraKeys: pgBrowser.editor_shortcut_keys,\n                  tabSize: pgBrowser.editor_options.tabSize,\n                  lineWrapping: pgAdmin.Browser.editor_options.wrapCode,\n                  autoCloseBrackets: pgAdmin.Browser.editor_options.insert_pair_brackets,\n                  matchBrackets: pgAdmin.Browser.editor_options.brace_matching\n                });\n              },\n\n              callback: function(closeEvent) {\n\n                if (closeEvent.button.text == gettext(\"OK\")) {\n                  var sql = this.filter_obj.getValue();\n                  var that = this;\n\n                  // Make ajax call to include the filter by selection\n                  $.ajax({\n                    url: that.validateUrl,\n                    method: 'POST',\n                    async: false,\n                    contentType: \"application/json\",\n                    data: JSON.stringify(sql),\n                    success: function(res) {\n                      if (res.data.status) {\n                        // Initialize the data grid.\n                        self.initialize_data_grid(that.baseUrl, grid_title, sql, parentData.server.server_type);\n                      }\n                      else {\n                        alertify.alert(\n                          'Validation Error',\n                            res.data.result\n                        );\n                      }\n                    },\n                    error: function(e) {\n                      alertify.alert(\n                        'Validation Error',\n                        e\n                      );\n                    }\n                  });\n                }\n              }\n            };\n          });\n        }\n\n        var content = '';\n        $.get(url_for('datagrid.filter'),\n          function(data) {\n            alertify.filterDialog('Data Filter', data, baseUrl, validateUrl).resizeTo(600, 400);\n          }\n        );\n      },\n\n      get_panel_title: function() {\n        // Get the parent data from the tree node hierarchy.\n        var tree = pgAdmin.Browser.tree,\n            selected_item = tree.selected(),\n            item_data = tree.itemData(selected_item);\n        var self = this;\n\n        var node = pgBrowser.Nodes[item_data._type],\n          parentData = node.getTreeNodeHierarchy(selected_item);\n\n        // If server, database is undefined then return from the function.\n        if (parentData.server === undefined) {\n          return;\n        }\n        // If Database is not available then use default db\n        var db_label = parentData.database ? parentData.database.label\n                                           : parentData.server.db;\n\n        var grid_title = db_label + ' on ' + parentData.server.user.name + '@' +\n                parentData.server.label;\n        return grid_title;\n      },\n\n      initialize_data_grid: function(baseUrl, grid_title, sql_filter, server_type) {\n        var self = this;\n          self.grid_title = grid_title;\n\n        /* Ajax call to initialize the edit grid, which creates\n         * an asynchronous connection and create appropriate query\n         * for the selected node.\n         */\n        $.ajax({\n          url: baseUrl,\n          method: 'POST',\n          dataType: 'json',\n          contentType: \"application/json\",\n          data: JSON.stringify(sql_filter),\n          success: function(res) {\n\n            /* On successfully initialization find the dashboard panel,\n             * create new panel and add it to the dashboard panel.\n             */\n            var url_params = {\n              'trans_id': res.data.gridTransId,\n              'is_query_tool': 'false',\n              'editor_title': encodeURIComponent(self.grid_title)\n            };\n\n            var baseUrl = url_for('datagrid.panel', url_params) +\n              \"?query_url=&server_type=\" + encodeURIComponent(server_type);\n            var grid_title = gettext('Edit Data - ') + self.grid_title;\n            if (res.data.newBrowserTab) {\n              var newWin = window.open(baseUrl, '_blank');\n\n              // add a load listener to the window so that the title gets changed on page load\n              newWin.addEventListener(\"load\", function() {\n                newWin.document.title = grid_title;\n              });\n            } else {\n              var propertiesPanel = pgBrowser.docker.findPanels('properties');\n              var dataGridPanel = pgBrowser.docker.addPanel('frm_datagrid', wcDocker.DOCK.STACKED, propertiesPanel[0]);\n\n              // Set panel title and icon\n              dataGridPanel.title('<span title=\"'+grid_title+'\">'+grid_title+'</span>');\n              dataGridPanel.icon('fa fa-bolt');\n              dataGridPanel.focus();\n\n              // Listen on the panel closed event.\n              dataGridPanel.on(wcDocker.EVENT.CLOSED, function() {\n                $.ajax({\n                  url: url_for('datagrid.close', {'trans_id': res.data.gridTransId}),\n                  method: 'GET'\n                });\n              });\n\n              var openDataGridURL = function(j) {\n                // add spinner element\n                $(j).data('embeddedFrame').$container.append(self.spinner_el);\n                setTimeout(function() {\n                  var frameInitialized = $(j).data('frameInitialized');\n                  if (frameInitialized) {\n                    var frame = $(j).data('embeddedFrame');\n                    if (frame) {\n                      frame.openURL(baseUrl);\n                      frame.$container.find('.wcLoadingContainer').hide(1);\n                    }\n                  } else {\n                    openDataGridURL(j);\n                  }\n                }, 100);\n              };\n\n              openDataGridURL(dataGridPanel);\n            }\n          },\n          error: function(e) {\n            alertify.alert(\n              'SQL Tool Initialize Error'\n            );\n          }\n        });\n      },\n\n      // This is a callback function to show query tool when user click on menu item.\n      show_query_tool: function(url, i, panel_title) {\n        var self = this,\n          sURL = url || '',\n          panel_title = panel_title || '',\n          d = pgAdmin.Browser.tree.itemData(i);\n        if (d === undefined) {\n          alertify.alert(\n            'Query tool Error',\n            'No object selected.'\n          );\n          return;\n        }\n\n        // Get the parent data from the tree node hierarchy.\n        var node = pgBrowser.Nodes[d._type],\n          parentData = node.getTreeNodeHierarchy(i);\n\n        // If server, database is undefined then return from the function.\n        if (parentData.server === undefined) {\n          return;\n        }\n\n        var url_params = {\n          'sid': parentData.server._id\n        };\n        var url_endpoint = 'datagrid.initialize_query_tool'\n        // If database not present then use Maintenance database\n        // We will handle this at server side\n        if (parentData.database) {\n          url_params['did'] = parentData.database._id;\n          url_endpoint = 'datagrid.initialize_query_tool_with_did';\n        }\n        var baseUrl = url_for(url_endpoint, url_params);\n\n        $.ajax({\n          url: baseUrl,\n          method: 'POST',\n          dataType: 'json',\n          contentType: \"application/json\",\n          success: function(res) {\n            var grid_title = self.get_panel_title();\n            // Open the panel if frame is initialized\n            var url_params = {\n              'trans_id': res.data.gridTransId,\n              'is_query_tool': 'true',\n              'editor_title': encodeURIComponent(grid_title)\n            }\n\n            var baseUrl = url_for('datagrid.panel', url_params) +\n                '?' + \"query_url=\" + encodeURI(sURL) + \"&server_type=\" + encodeURIComponent(parentData.server.server_type);\n\n            // Create title for CREATE/DELETE scripts\n            if (panel_title) {\n              panel_title =\n                sqlEditorUtils.capitalizeFirstLetter(panel_title) + ' script';\n            }\n            else {\n              panel_title = gettext('Query - ') + grid_title;\n            }\n\n            if (res.data.newBrowserTab) {\n              var newWin = window.open(baseUrl, '_blank');\n\n              // add a load listener to the window so that the title gets changed on page load\n              newWin.addEventListener(\"load\", function() {\n                newWin.document.title = panel_title;\n              });\n            } else {\n              /* On successfully initialization find the dashboard panel,\n               * create new panel and add it to the dashboard panel.\n               */\n              var propertiesPanel = pgBrowser.docker.findPanels('properties');\n              var queryToolPanel = pgBrowser.docker.addPanel('frm_datagrid', wcDocker.DOCK.STACKED, propertiesPanel[0]);\n\n              // Set panel title and icon\n              queryToolPanel.title('<span title=\"'+panel_title+'\">'+panel_title+'</span>');\n              queryToolPanel.icon('fa fa-bolt');\n              queryToolPanel.focus();\n\n              // Listen on the panel closed event.\n              queryToolPanel.on(wcDocker.EVENT.CLOSED, function() {\n                $.ajax({\n                  url: url_for('datagrid.close', {'trans_id': res.data.gridTransId}),\n                  method: 'GET'\n                });\n              });\n\n              var openQueryToolURL = function(j) {\n                // add spinner element\n                $(j).data('embeddedFrame').$container.append(pgAdmin.DataGrid.spinner_el);\n                setTimeout(function() {\n                  var frameInitialized = $(j).data('frameInitialized');\n                  if (frameInitialized) {\n                    var frame = $(j).data('embeddedFrame');\n                    if (frame) {\n                      frame.openURL(baseUrl);\n                      frame.$container.find('.wcLoadingContainer').delay(1000).hide(1);\n                    }\n                  } else {\n                    openQueryToolURL(j);\n                  }\n                }, 100);\n              };\n\n              openQueryToolURL(queryToolPanel);\n            }\n          },\n          error: function(e) {\n            alertify.alert(\n              gettext(\"Query Tool Initialize Error\")\n            );\n          }\n        });\n      }\n    };\n\n    return pgAdmin.DataGrid;\n  });\n\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/datagrid/static/js/datagrid.js","define('pgadmin.dashboard', [\n    'sources/url_for', 'sources/gettext', 'require', 'jquery', 'underscore',\n    'sources/pgadmin', 'backbone', 'backgrid', 'flotr2',\n    'pgadmin.alertifyjs', 'backgrid.filter',\n    'pgadmin.browser', 'bootstrap', 'wcdocker'\n    ],\nfunction(url_for, gettext, r, $, _, pgAdmin, Backbone, Backgrid, Flotr,\n  alertify) {\n\n  var wcDocker = window.wcDocker,\n  pgBrowser = pgAdmin.Browser;\n\n  /* Return back, this has been called more than once */\n  if (pgAdmin.Dashboard)\n    return;\n\n  var dashboardVisible = true,\n    cancel_query_url = '',\n    terminate_session_url = '',\n    is_super_user = false,\n    current_user, maintenance_database,\n    is_server_dashboard = false,\n    is_database_dashboard = false;\n\n  // Custom BackGrid cell, Responsible for cancelling active sessions\n  var cancelQueryCell = Backgrid.Extension.DeleteCell.extend({\n        render: function () {\n          this.$el.empty();\n          this.$el.html(\n            \"<i class='fa fa-stop' data-toggle='tooltip' \" +\n            \"title='\" + gettext('Cancel the active query') +\n            \"'></i>\"\n          );\n          this.delegateEvents();\n          return this;\n        },\n        deleteRow: function(e) {\n          var self = this;\n          e.preventDefault();\n\n          var canDeleteRow = Backgrid.callByNeed(\n            self.column.get('canDeleteRow'), self.column, self.model\n          );\n          // If we are not allowed to cancel the query, return from here\n          if(!canDeleteRow)\n            return;\n\n          // This will refresh the grid\n          var refresh_grid = function() {\n            if(is_server_dashboard) {\n              $('#btn_server_activity_refresh').click();\n            } else if(is_database_dashboard) {\n              $('#btn_database_activity_refresh').click();\n            }\n          };\n\n          var title = gettext('Cancel Active Query?'),\n            txtConfirm = gettext('Are you sure you wish to cancel the active query?');\n\n          alertify.confirm(\n            title,\n            txtConfirm,\n            function(evt) {\n              $.ajax({\n                url: cancel_query_url + self.model.get('pid'),\n                type:'DELETE',\n                success: function(res) {\n                  if (res == gettext('Success')) {\n                    alertify.success(gettext('Active query cancelled successfully.'));\n                    refresh_grid();\n                  } else {\n                    alertify.error(gettext('An error occurred whilst cancelling the active query.'));\n                  }\n                },\n                error: function(xhr, status, error) {\n                  try {\n                    var err = $.parseJSON(xhr.responseText);\n                    if (err.success == 0) {\n                      alertify.error(err.errormsg);\n                    }\n                  } catch (e) {}\n                }\n              });\n            },\n            function(evt) {\n              return true;\n            }\n          );\n        }\n  });\n\n  var terminateSessionCell = Backgrid.Extension.DeleteCell.extend({\n        render: function () {\n          this.$el.empty();\n          this.$el.html(\n            \"<i class='fa fa-times-circle' data-toggle='tooltip' \" +\n            \"title='\" + gettext('Terminate the session') +\n            \"'></i>\"\n          );\n          this.delegateEvents();\n          return this;\n        },\n        deleteRow: function(e) {\n          var self = this;\n          e.preventDefault();\n\n          var canDeleteRow = Backgrid.callByNeed(\n            self.column.get('canDeleteRow'), self.column, self.model\n          );\n          // If we are not allowed to cancel the query, return from here\n          if(!canDeleteRow)\n            return;\n\n          // This will refresh the grid\n          var refresh_grid = function() {\n            if(is_server_dashboard) {\n              $('#btn_server_activity_refresh').click();\n            } else if(is_database_dashboard) {\n              $('#btn_database_activity_refresh').click();\n            }\n          };\n\n          var title = gettext('Terminate Session?'),\n            txtConfirm = gettext('Are you sure you wish to terminate the session?');\n\n          alertify.confirm(\n            title,\n            txtConfirm,\n            function(evt) {\n              $.ajax({\n                url: terminate_session_url + self.model.get('pid'),\n                type:'DELETE',\n                success: function(res) {\n                  if (res == gettext('Success')) {\n                    alertify.success(gettext('Session terminateed successfully.'));\n                    refresh_grid();\n                  } else {\n                    alertify.error(gettext('An error occurred whilst terminateing the active query.'));\n                  }\n                },\n                error: function(xhr, status, error) {\n                  try {\n                    var err = $.parseJSON(xhr.responseText);\n                    if (err.success == 0) {\n                      alertify.error(err.errormsg);\n                    }\n                  } catch (e) {}\n                }\n              });\n            },\n            function(evt) {\n              return true;\n            }\n          );\n        }\n  });\n\n  // Subnode Cell, which will display subnode control\n  var SessionDetailsCell = Backgrid.Extension.ObjectCell.extend({\n   enterEditMode: function () {\n      // Notify that we are about to enter in edit mode for current cell.\n      this.model.trigger(\"enteringEditMode\", [this]);\n\n      Backgrid.Cell.prototype.enterEditMode.apply(this, arguments);\n      /* Make sure - we listen to the click event */\n      this.delegateEvents();\n      var editable = Backgrid.callByNeed(this.column.editable(), this.column, this.model);\n\n      if (editable) {\n        this.$el.html(\n          \"<i class='fa fa-caret-down subnode-edit-in-process'></i>\"\n          );\n        this.model.trigger(\n          \"pg-sub-node:opened\", this.model, this\n          );\n      }\n    },\n    render: function(){\n        this.$el.empty();\n        this.$el.html(\n          \"<i class='fa fa-caret-right' data-toggle='tooltip' \" +\n          \"title='\" + gettext('View the active session details') +\n          \"'></i>\"\n        );\n        this.delegateEvents();\n        if (this.grabFocus)\n          this.$el.focus();\n        return this;\n    }\n  });\n\n  // Subnode Model\n  var ActiveQueryDetailsModel = Backbone.Model.extend({\n    defaults: {\n      version: null /* Postgres version */\n    },\n    schema: [{\n      id: 'backend_type', label: gettext('Backend type'),\n      type: 'text', editable: true, disabled: true,\n      group: gettext('Details'),\n      visible: function(m) {\n        return this.version >= 100000;\n      }\n    },{\n      id: 'query_start', label: gettext('Query started at'),\n      type: 'text', editable: false, disabled: true,\n      group: gettext('Details')\n    },{\n      id: 'state_change', label: gettext('Last state changed at'),\n      type: 'text', editable: true, disabled: true,\n      group: gettext('Details')\n    },{\n      id: 'query', label: gettext('SQL'),\n      type: 'text', editable: true, disabled: true,\n      control: Backform.SqlFieldControl,\n      group: gettext('Details')\n    }]\n  });\n\n  pgAdmin.Dashboard = {\n        init: function() {\n            if (this.initialized)\n                return;\n\n            this.initialized = true;\n\n            // Bind the Dashboard object with the 'object_selected' function\n            var selected = this.object_selected.bind(this);\n            var disconnected = this.object_disconnected.bind(this);\n\n            // Listen for selection of any of object\n            pgBrowser.Events.on('pgadmin-browser:tree:selected', selected);\n\n            // Listen for server disconnected event\n            pgBrowser.Events.on('pgadmin:server:disconnect', disconnected);\n\n            // Load the default welcome dashboard\n            var url = url_for('dashboard.index');\n\n            var dashboardPanel = pgBrowser.panels['dashboard'].panel;\n            if (dashboardPanel) {\n                var div = dashboardPanel.layout().scene().find('.pg-panel-content');\n\n                if (div) {\n                    $.ajax({\n                        url: url,\n                        type: \"GET\",\n                        dataType: \"html\",\n                        success: function (data) {\n                            $(div).html(data);\n                        },\n                        error: function (xhr, status) {\n                            $(div).html(\n                                '<div class=\"alert alert-danger pg-panel-message\" role=\"alert\">' + gettext('An error occurred whilst loading the dashboard.') + '</div>'\n                            );\n                        }\n                    });\n\n                    // Cache the current IDs for next time\n                    $(dashboardPanel).data('sid', -1)\n                    $(dashboardPanel).data('did', -1)\n                }\n            }\n        },\n\n        // Handle Server Disconnect\n        object_disconnected: function(obj) {\n            this.object_selected(obj.item, obj.data, pgBrowser.Nodes[obj.data._type]);\n        },\n\n        // Handle treeview clicks\n        object_selected: function(item, itemData, node) {\n            if (itemData && itemData._type && dashboardVisible) {\n                var treeHierarchy = node.getTreeNodeHierarchy(item),\n                    url = url_for('dashboard.index'),\n                    sid = -1, did = -1, b = pgAdmin.Browser,\n                    m = b && b.Nodes[itemData._type];\n\n                cancel_query_url = url_for('dashboard.index') + 'cancel_query/';\n                terminate_session_url = url_for('dashboard.index') + 'terminate_session/';\n\n                // Check if user is super user\n                var server = treeHierarchy['server'];\n                maintenance_database = (server && server.db) || null;\n\n                if(server && server.user && server.user.is_superuser) {\n                  is_super_user = true;\n                } else {\n                  is_super_user = false;\n                  // Set current user\n                  current_user = (server && server.user) ? server.user.name : null;\n                }\n\n                if (m && m.dashboard) {\n                    if (_.isFunction(m.dashboard)) {\n                        url = m.dashboard.apply(\n                            item, itemData, node, treeHierarchy\n                        );\n                    } else {\n                        url = m.dashboard;\n                    }\n                } else {\n                    if ('database' in treeHierarchy) {\n                        sid = treeHierarchy.server._id;\n                        did = treeHierarchy.database._id;\n                        is_server_dashboard = false;\n                        is_database_dashboard = true;\n                        url += sid + '/' + did;\n                        cancel_query_url += sid + '/' + did + '/';\n                        terminate_session_url += sid + '/' + did + '/';\n                    } else if ('server' in treeHierarchy) {\n                        sid = treeHierarchy.server._id;\n                        is_server_dashboard = true;\n                        is_database_dashboard = false;\n                        url += sid;\n                        cancel_query_url += sid + '/';\n                        terminate_session_url += sid + '/';\n                    }\n                }\n\n                var dashboardPanel = pgBrowser.panels['dashboard'].panel;\n                if (dashboardPanel) {\n                    var div = dashboardPanel.layout().scene().find(\n                            '.pg-panel-content'\n                        );\n\n                    if (div) {\n                        if (itemData.connected || _.isUndefined(itemData.connected)) {\n                            // Avoid unnecessary reloads\n                            if (url != $(dashboardPanel).data('dashboard_url') ||\n                               (url == $(dashboardPanel).data('dashboard_url') && $(dashboardPanel).data('server_status') == false )) {\n                                // Clear out everything so any existing timers die off\n                                $(div).empty();\n\n                                $.ajax({\n                                    url: url,\n                                    type: \"GET\",\n                                    dataType: \"html\",\n                                    success: function (data) {\n                                        $(div).html(data);\n                                    },\n                                    error: function (xhr, status) {\n                                        $(div).html(\n                                            '<div class=\"alert alert-danger pg-panel-message\" role=\"alert\">' + gettext('An error occurred whilst loading the dashboard.') + '</div>'\n                                        );\n                                    }\n                                });\n                                $(dashboardPanel).data('server_status', true);\n                            }\n\n                        }\n                        else {\n                            $(div).empty();\n                            $(div).html(\n                                '<div class=\"alert alert-info pg-panel-message\" role=\"alert\">' + gettext('Please connect to the selected server to view the dashboard.') + '</div>'\n                            );\n                            $(dashboardPanel).data('server_status', false);\n                        }\n                        // Cache the current IDs for next time\n                        $(dashboardPanel).data('dashboard_url', url);\n\n                    }\n                }\n            }\n        },\n\n        // Render a chart\n        render_chart: function(container, data, dataset, sid, did, url, options, counter, refresh) {\n\n            // Data format:\n            // [\n            //     { data: [[0, y0], [1, y1]...], label: 'Label 1', [options] },\n            //     { data: [[0, y0], [1, y1]...], label: 'Label 2', [options] },\n            //     { data: [[0, y0], [1, y1]...], label: 'Label 3', [options] }\n            // ]\n\n            if (!dashboardVisible)\n              return;\n\n            var y = 0;\n            if (dataset.length == 0) {\n                if (counter == true)\n                {\n                    // Have we stashed initial values?\n                    if (_.isUndefined($(container).data('counter_previous_vals'))) {\n                        $(container).data('counter_previous_vals', data[0])\n                    } else {\n                        // Create the initial data structure\n                        for (var x in data[0]) {\n                            dataset.push({ 'data': [[0, data[0][x] - $(container).data('counter_previous_vals')[x]]], 'label': x });\n                        }\n                    }\n                } else {\n                    // Create the initial data structure\n                    for (var x in data[0]) {\n                        dataset.push({ 'data': [[0, data[0][x]]], 'label': x });\n                    }\n                }\n            } else {\n                for (var x in data[0]) {\n                    // Push new values onto the existing data structure\n                    // If this is a counter stat, we need to subtract the previous value\n                    if (counter == false) {\n                        dataset[y]['data'].unshift([0, data[0][x]]);\n                    } else {\n                        // Store the current value, minus the previous one we stashed.\n                        // It's possible the tab has been reloaded, in which case out previous values are gone\n                        if (_.isUndefined($(container).data('counter_previous_vals')))\n                            return\n\n                        dataset[y]['data'].unshift([0, data[0][x] - $(container).data('counter_previous_vals')[x]]);\n                    }\n\n                    // Reset the time index to get a proper scrolling display\n                    for (var z = 0; z < dataset[y]['data'].length; z++) {\n                        dataset[y]['data'][z][0] = z;\n                    }\n\n                    y++;\n                }\n                $(container).data('counter_previous_vals', data[0])\n            }\n\n             // Remove uneeded elements\n            for (x = 0; x < dataset.length; x++) {\n                // Remove old data points\n                if (dataset[x]['data'].length > 101) {\n                    dataset[x]['data'].pop();\n                }\n            }\n\n            // Draw Graph, if the container still exists and has a size\n            var dashboardPanel = pgBrowser.panels['dashboard'].panel;\n            var div = dashboardPanel.layout().scene().find('.pg-panel-content');\n            if ($(div).find(container).length) { // Exists?\n                if (container.clientHeight > 0 && container.clientWidth > 0) { // Not hidden?\n                    Flotr.draw(container, dataset, options);\n                }\n            } else {\n                return;\n            }\n\n            // Animate\n            var setTimeoutFunc = function () {\n                var path = url + sid;\n                if (did != -1) {\n                    path += '/' + did;\n                }\n                $.ajax({\n                    url: path,\n                    type: \"GET\",\n                    dataType: \"html\",\n                    success: function (resp) {\n                        $(container).removeClass('graph-error')\n                        data = JSON.parse(resp);\n                        pgAdmin.Dashboard.render_chart(container, data, dataset, sid, did, url, options, counter, refresh);\n                    },\n                    error: function (xhr, status, msg) {\n                        var err = $.parseJSON(xhr.responseText),\n                            msg = err.errormsg,\n                            cls;\n                        // If we get a 428, it means the server isn't connected\n                        if (xhr.status == 428) {\n                            if (_.isUndefined(msg) || _.isNull(msg)) {\n                              msg = gettext('Please connect to the selected server to view the graph.');\n                            }\n                            cls = 'info';\n                        } else {\n                            msg = gettext('An error occurred whilst rendering the graph.');\n                            cls = 'danger';\n                        }\n\n                        $(container).addClass('graph-error');\n                        $(container).html(\n                            '<div class=\"alert alert-' + cls + ' pg-panel-message\" role=\"alert\">' + msg + '</div>'\n                        );\n\n                        // Try again...\n                        if (container.clientHeight > 0 && container.clientWidth > 0) {\n                            setTimeout(setTimeoutFunc, refresh * 1000);\n                        }\n                    },\n                });\n            };\n\n            setTimeout(setTimeoutFunc, refresh * 1000);\n        },\n\n        // Handler function to support the \"Add Server\" link\n        add_new_server: function() {\n            if (pgBrowser && pgBrowser.tree) {\n                var i = pgBrowser.tree.selected().length != 0 ?\n                          pgBrowser.tree.selected() :\n                          pgBrowser.tree.first(null, false),\n                     serverModule = r('pgadmin.node.server'),\n                     itemData = pgBrowser.tree.itemData(i);\n\n                while (itemData && itemData._type != \"server_group\") {\n                    i = pgBrowser.tree.next(i);\n                    itemData = pgBrowser.tree.itemData(i);\n                }\n\n                if (!itemData) {\n                    return;\n                }\n\n                if (serverModule) {\n                    serverModule.callbacks.show_obj_properties.apply(\n                        serverModule, [{action: 'create'}, i]\n                    );\n                }\n            }\n        },\n\n        // Render a grid\n        render_grid: function(container, sid, did, url, columns) {\n            var Datum = Backbone.Model.extend({});\n\n            var path = url + sid;\n            if (did != -1) {\n                path += '/' + did;\n            }\n\n            var Data = Backbone.Collection.extend({\n              model: Datum,\n              url: path,\n              mode: \"client\"\n            });\n\n            var data = new Data();\n\n            // Set up the grid\n            var grid = new Backgrid.Grid({\n              columns: columns,\n              collection: data,\n              className: \"backgrid table-bordered presentation table backgrid-striped\"\n            });\n\n            // Render the grid\n            $(container).append(grid.render().el)\n\n            // Initialize a client-side filter to filter on the client\n            // mode pageable collection's cache.\n            var filter = new Backgrid.Extension.ClientSideFilter({\n              collection: data\n            });\n\n            // Render the filter\n            $('#' + container.id + '_filter').before(filter.render().el);\n\n            // Add some space to the filter and move it to the right\n            $(filter.el).css({float: \"right\", margin: \"5px\", \"margin-right\": \"2px\", \"margin-top\": \"3px\"});\n\n            // Stash objects for future use\n            $(container).data('data', data);\n            $(container).data('grid', grid);\n            $(container).data('filter', filter);\n        },\n\n        // Render the data in a grid\n        render_grid_data: function(container) {\n            var data = $(container).data('data'),\n                grid = $(container).data('grid'),\n                filter = $(container).data('filter');\n\n            if(_.isUndefined(data)){\n              return null;\n            }\n\n            data.fetch({\n                reset: true,\n                success: function() {\n                    // If we're showing an error, remove it, and replace the grid & filter\n                    if ($(container).hasClass('grid-error')) {\n                        $(container).removeClass('grid-error');\n                        $(container).html(grid.render().el)\n                        $(filter.el).show();\n                    }\n\n                    // Re-apply search criteria\n                    filter.search();\n                },\n                error: function(model, xhr, options) {\n                     var err = $.parseJSON(xhr.responseText),\n                         msg = err.errormsg,\n                         cls;\n                    // If we get a 428, it means the server isn't connected\n                    if (xhr.status == 428) {\n                        if (_.isUndefined(msg) || _.isNull(msg)) {\n                            msg = gettext('Please connect to the selected server to view the table.');\n                        }\n                        cls = 'info';\n                    } else {\n                        msg = gettext('An error occurred whilst rendering the table.');\n                        cls = 'danger';\n                    }\n\n                    // Replace the content with the error, if not already present. Always update the message\n                    if (!$(container).hasClass('grid-error')) {\n                        $(filter.el).hide();\n                        $(container).addClass('grid-error');\n                    }\n\n                    $(container).html(\n                        '<div class=\"alert alert-' + cls + ' pg-panel-message\" role=\"alert\">' + msg + '</div>'\n                    );\n\n                    // Try again\n                    setTimeout(function() {\n                        pgAdmin.Dashboard.render_grid_data(container, data);\n                    }, 5000)\n                }\n            });\n        },\n\n        // Rock n' roll on the server dashboard\n        init_server_dashboard: function(sid, version, session_stats_refresh, tps_stats_refresh, ti_stats_refresh, to_stats_refresh, bio_stats_refresh) {\n            var div_sessions = $('.dashboard-container').find('#graph-sessions')[0];\n            var div_tps = $('.dashboard-container').find('#graph-tps')[0];\n            var div_ti = $('.dashboard-container').find('#graph-ti')[0];\n            var div_to = $('.dashboard-container').find('#graph-to')[0];\n            var div_bio = $('.dashboard-container').find('#graph-bio')[0];\n            var div_server_activity = $('.dashboard-container').find('#server_activity');\n            var div_server_locks = $('.dashboard-container').find('#server_locks');\n            var div_server_prepared = $('.dashboard-container').find('#server_prepared');\n            var div_server_config = $('.dashboard-container').find('#server_config');\n            var dataset_sessions = [];\n            var data_sessions = [];\n            var dataset_tps = [];\n            var data_tps = [];\n            var dataset_ti = [];\n            var data_ti = [];\n            var dataset_to = [];\n            var data_to = [];\n            var dataset_bio = [];\n            var data_bio = [];\n\n            // Fake DB ID\n            var did = -1;\n\n            var options_line = {\n                  parseFloat: false,\n                  xaxis: {\n                      min: 100,\n                      max: 0,\n                      autoscale: 0\n                  },\n                  yaxis : {\n                      autoscale: 1\n                  },\n                  legend : {\n                      position : 'nw',\n                      backgroundColor : '#D2E8FF'\n                  }\n            }\n\n            var server_activity_columns = [{\n                name: \"pid\",\n                label: gettext('PID'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"datname\",\n                label: gettext('Database'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"usename\",\n                label: gettext('User'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"application_name\",\n                label: gettext('Application'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"client_addr\",\n                label: gettext('Client'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"backend_start\",\n                label: gettext('Backend start'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"state\",\n                label: gettext('State'),\n                editable: false,\n                cell: \"string\"\n            }];\n\n            if (version < 90600) {\n                server_activity_columns = server_activity_columns.concat(\n                [{\n                    name: \"waiting\",\n                    label: gettext('Waiting?'),\n                    editable: false,\n                    cell: \"string\"\n                }]);\n            } else {\n                server_activity_columns = server_activity_columns.concat(\n                [{\n                    name: \"wait_event\",\n                    label: gettext('Wait Event'),\n                    editable: false,\n                    cell: \"string\"\n                },{\n                    name: \"blocking_pids\",\n                    label: gettext('Blocking PIDs'),\n                    editable: false,\n                    cell: \"string\"\n                }]);\n            }\n\n            var newActiveQueryDetailsModel = new ActiveQueryDetailsModel();\n\n            var subNodeFieldsModel = Backform.generateViewSchema(\n              null, newActiveQueryDetailsModel, 'create', null, null, true\n            );\n\n            // Add version to each field\n            _.each(subNodeFieldsModel[0].fields, function(obj) {\n              obj['version'] = version;\n            });\n\n            // Add cancel active query button\n            server_activity_columns.unshift({\n              name: \"pg-backform-expand\", label: \"\",\n              cell: SessionDetailsCell,\n              cell_priority: -1,\n              postgres_version: version,\n              schema: subNodeFieldsModel\n            });\n\n            // Add cancel active query button\n            server_activity_columns.unshift({\n              name: \"pg-backform-delete\", label: \"\",\n              cell: cancelQueryCell,\n              editable: false, cell_priority: -1,\n              canDeleteRow: pgAdmin.Dashboard.can_cancel_active_query,\n              postgres_version: version\n            });\n\n            server_activity_columns.unshift({\n              name: \"pg-backform-delete\", label: \"\",\n              cell: terminateSessionCell,\n              editable: false, cell_priority: -1,\n              canDeleteRow: pgAdmin.Dashboard.can_terminate_session,\n              postgres_version: version\n            });\n\n            var server_locks_columns = [{\n                name: \"pid\",\n                label: gettext('PID'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"datname\",\n                label: gettext('Database'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"locktype\",\n                label: gettext('Lock type'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"relation\",\n                label: gettext('Target relation'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"page\",\n                label: gettext('Page'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"tuple\",\n                label: gettext('Tuple'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"virtualxid\",\n                label: gettext('vXID (target)'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"transactionid\",\n                label: gettext('XID (target)'),\n                editable: false,\n                cell: \"string\"\n            },{\n                name: \"classid\",\n                label: gettext('Class'),\n                editable: false,\n                cell: \"string\"\n            },{\n                name: \"objid\",\n                label: gettext('Object ID'),\n                editable: false,\n                cell: \"string\"\n            },{\n                name: \"virtualtransaction\",\n                label: gettext('vXID (owner)'),\n                editable: false,\n                cell: \"string\"\n            },{\n                name: \"mode\",\n                label: gettext('Mode'),\n                editable: false,\n                cell: \"string\"\n            },{\n                name: \"granted\",\n                label: gettext('Granted?'),\n                editable: false,\n                cell: \"string\"\n            }];\n\n            var server_prepared_columns = [{\n                name: \"git\",\n                label: gettext('Name'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"database\",\n                label: gettext('Database'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"Owner\",\n                label: gettext('Owner'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"transaction\",\n                label: gettext('XID'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"prepared\",\n                label: gettext('Prepared at'),\n                editable: false,\n                cell: \"string\"\n            }];\n\n            var server_config_columns = [{\n                name: \"name\",\n                label: gettext('Name'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"category\",\n                label: gettext('Category'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"setting\",\n                label: gettext('Setting'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"unit\",\n                label: gettext('Unit'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"short_desc\",\n                label: gettext('Description'),\n                editable: false,\n                cell: \"string\"\n            }];\n\n            // Render the graphs\n            pgAdmin.Dashboard.render_chart(\n              div_sessions, data_sessions, dataset_sessions, sid, did,\n              url_for('dashboard.session_stats'), options_line, false,\n              session_stats_refresh\n            );\n            pgAdmin.Dashboard.render_chart(\n              div_tps, data_tps, dataset_tps, sid, did,\n              url_for('dashboard.tps_stats'), options_line, true,\n              tps_stats_refresh\n            );\n            pgAdmin.Dashboard.render_chart(\n              div_ti, data_ti, dataset_ti, sid, did,\n              url_for('dashboard.ti_stats'), options_line, true,\n              ti_stats_refresh\n            );\n            pgAdmin.Dashboard.render_chart(\n              div_to, data_to, dataset_to, sid, did,\n              url_for('dashboard.to_stats'), options_line, true,\n              to_stats_refresh\n            );\n            pgAdmin.Dashboard.render_chart(\n              div_bio, data_bio, dataset_bio, sid, did,\n              url_for('dashboard.bio_stats'), options_line, true,\n              bio_stats_refresh\n            );\n\n            // To align subnode controls properly\n            $(div_server_activity).addClass('pg-el-container');\n            $(div_server_activity).attr('el', 'sm');\n\n            // Render the tabs, but only get data for the activity tab for now\n            pgAdmin.Dashboard.render_grid(\n              div_server_activity, sid, did,\n              url_for('dashboard.activity'), server_activity_columns\n            );\n            pgAdmin.Dashboard.render_grid(\n              div_server_locks, sid, did, url_for('dashboard.locks'),\n              server_locks_columns\n            );\n            pgAdmin.Dashboard.render_grid(\n              div_server_prepared, sid, did, url_for('dashboard.prepared'),\n              server_prepared_columns\n            );\n            pgAdmin.Dashboard.render_grid(\n              div_server_config, sid, did, url_for('dashboard.config'),\n              server_config_columns\n            );\n\n            pgAdmin.Dashboard.render_grid_data(div_server_activity);\n\n            // (Re)render the appropriate tab\n            $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n                switch ($(e.target).attr('aria-controls')) {\n                    case \"tab_server_activity\":\n                        pgAdmin.Dashboard.render_grid_data(div_server_activity);\n                        break;\n\n                    case \"tab_server_locks\":\n                        pgAdmin.Dashboard.render_grid_data(div_server_locks);\n                        break;\n\n                    case \"tab_server_prepared\":\n                        pgAdmin.Dashboard.render_grid_data(div_server_prepared);\n                        break;\n\n                    case \"tab_server_config\":\n                        pgAdmin.Dashboard.render_grid_data(div_server_config);\n                        break;\n                }\n            });\n\n            // Handle button clicks\n            $(\"button\").click(function(e){\n                switch(this.id) {\n                    case \"btn_server_activity_refresh\":\n                        pgAdmin.Dashboard.render_grid_data(div_server_activity);\n                        break;\n\n                    case \"btn_server_locks_refresh\":\n                        pgAdmin.Dashboard.render_grid_data(div_server_locks);\n                        break;\n\n                    case \"btn_server_prepared_refresh\":\n                        pgAdmin.Dashboard.render_grid_data(div_server_prepared);\n                        break;\n\n                    case \"btn_server_config_refresh\":\n                        pgAdmin.Dashboard.render_grid_data(div_server_config);\n                        break;\n                }\n            });\n\n        },\n\n        // Rock n' roll on the database dashboard\n        init_database_dashboard: function(sid, did, version, session_stats_refresh, tps_stats_refresh, ti_stats_refresh, to_stats_refresh, bio_stats_refresh) {\n            var div_sessions = document.getElementById('graph-sessions');\n            var div_tps = document.getElementById('graph-tps');\n            var div_ti = document.getElementById('graph-ti');\n            var div_to = document.getElementById('graph-to');\n            var div_bio = document.getElementById('graph-bio');\n            var div_database_activity = document.getElementById('database_activity');\n            var div_database_locks = document.getElementById('database_locks');\n            var div_database_prepared = document.getElementById('database_prepared');\n            var dataset_sessions = [];\n            var data_sessions = [];\n            var dataset_tps = [];\n            var data_tps = [];\n            var dataset_ti = [];\n            var data_ti = [];\n            var dataset_to = [];\n            var data_to = [];\n            var dataset_bio = [];\n            var data_bio = [];\n\n            var options_line = {\n                  parseFloat: false,\n                  xaxis: {\n                      min: 100,\n                      max: 0,\n                      autoscale: 0\n                  },\n                  yaxis : {\n                      autoscale: 1\n                  },\n                  legend : {\n                      position : 'nw',\n                      backgroundColor : '#D2E8FF'\n                  }\n            }\n\n            var database_activity_columns = [{\n                name: \"pid\",\n                label: gettext('PID'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"usename\",\n                label: gettext('User'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"application_name\",\n                label: gettext('Application'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"client_addr\",\n                label: gettext('Client'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"backend_start\",\n                label: gettext('Backend start'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"state\",\n                label: gettext('State'),\n                editable: false,\n                cell: \"string\"\n            }];\n\n            if (version < 90600) {\n                database_activity_columns = database_activity_columns.concat(\n                [{\n                    name: \"waiting\",\n                    label: gettext('Waiting?'),\n                    editable: false,\n                    cell: \"string\"\n                }]);\n            } else {\n                database_activity_columns = database_activity_columns.concat(\n                [{\n                    name: \"wait_event\",\n                    label: gettext('Wait Event'),\n                    editable: false,\n                    cell: \"string\"\n                },{\n                    name: \"blocking_pids\",\n                    label: gettext('Blocking PIDs'),\n                    editable: false,\n                    cell: \"string\"\n                }]);\n            }\n\n            var newActiveQueryDetailsModel = new ActiveQueryDetailsModel();\n\n            var subNodeFieldsModel = Backform.generateViewSchema(\n              null, newActiveQueryDetailsModel, 'create', null, null, true\n            );\n\n            // Add version to each field\n            _.each(subNodeFieldsModel[0].fields, function(obj) {\n              obj['version'] = version;\n            });\n\n\n            // Add cancel active query button\n            database_activity_columns.unshift({\n              name: \"pg-backform-expand\", label: \"\",\n              cell: SessionDetailsCell,\n              cell_priority: -1,\n              postgres_version: version,\n              schema: subNodeFieldsModel\n            });\n\n            database_activity_columns.unshift({\n              name: \"pg-backform-delete\", label: \"\",\n              cell: cancelQueryCell,\n              editable: false, cell_priority: -1,\n              canDeleteRow: pgAdmin.Dashboard.can_cancel_active_query,\n              postgres_version: version\n            });\n            database_activity_columns.unshift({\n              name: \"pg-backform-delete\", label: \"\",\n              cell: terminateSessionCell,\n              editable: false, cell_priority: -1,\n              canDeleteRow: pgAdmin.Dashboard.can_terminate_session,\n              postgres_version: version\n            });\n\n            var database_locks_columns = [{\n                name: \"pid\",\n                label: gettext('PID'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"locktype\",\n                label: gettext('Lock type'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"relation\",\n                label: gettext('Target relation'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"page\",\n                label: gettext('Page'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"tuple\",\n                label: gettext('Tuple'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"virtualxid\",\n                label: gettext('vXID (target)'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"transactionid\",\n                label: gettext('XID (target)'),\n                editable: false,\n                cell: \"string\"\n            },{\n                name: \"classid\",\n                label: gettext('Class'),\n                editable: false,\n                cell: \"string\"\n            },{\n                name: \"objid\",\n                label: gettext('Object ID'),\n                editable: false,\n                cell: \"string\"\n            },{\n                name: \"virtualtransaction\",\n                label: gettext('vXID (owner)'),\n                editable: false,\n                cell: \"string\"\n            },{\n                name: \"mode\",\n                label: gettext('Mode'),\n                editable: false,\n                cell: \"string\"\n            },{\n                name: \"granted\",\n                label: gettext('Granted?'),\n                editable: false,\n                cell: \"string\"\n            }];\n\n            var database_prepared_columns = [{\n                name: \"git\",\n                label: gettext('Name'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"Owner\",\n                label: gettext('Owner'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"transaction\",\n                label: gettext('XID'),\n                editable: false,\n                cell: \"string\"\n            }, {\n                name: \"prepared\",\n                label: gettext('Prepared at'),\n                editable: false,\n                cell: \"string\"\n            }];\n\n            // Render the graphs\n            pgAdmin.Dashboard.render_chart(\n              div_sessions, data_sessions, dataset_sessions, sid, did,\n              url_for('dashboard.session_stats'), options_line, false,\n              session_stats_refresh\n            );\n            pgAdmin.Dashboard.render_chart(\n              div_tps, data_tps, dataset_tps, sid, did,\n              url_for('dashboard.tps_stats'), options_line, true,\n              tps_stats_refresh\n            );\n            pgAdmin.Dashboard.render_chart(\n              div_ti, data_ti, dataset_ti, sid, did,\n              url_for('dashboard.ti_stats'), options_line, true,\n              ti_stats_refresh\n            );\n            pgAdmin.Dashboard.render_chart(\n              div_to, data_to, dataset_to, sid, did,\n              url_for('dashboard.to_stats'), options_line, true,\n              to_stats_refresh\n            );\n            pgAdmin.Dashboard.render_chart(\n              div_bio, data_bio, dataset_bio, sid, did,\n              url_for('dashboard.bio_stats'), options_line, true,\n              bio_stats_refresh\n            );\n\n            // To align subnode controls properly\n            $(div_database_activity).addClass('pg-el-container');\n            $(div_database_activity).attr('el', 'sm');\n\n            // Render the tabs, but only get data for the activity tab for now\n            pgAdmin.Dashboard.render_grid(\n              div_database_activity, sid, did, url_for('dashboard.activity'),\n              database_activity_columns\n            );\n            pgAdmin.Dashboard.render_grid(\n              div_database_locks, sid, did, url_for('dashboard.locks'),\n              database_locks_columns\n            );\n            pgAdmin.Dashboard.render_grid(\n              div_database_prepared, sid, did, url_for('dashboard.prepared'),\n              database_prepared_columns\n            );\n\n            pgAdmin.Dashboard.render_grid_data(div_database_activity);\n\n            // (Re)render the appropriate tab\n            $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n                switch ($(e.target).attr('aria-controls')) {\n                    case \"tab_database_activity\":\n                        pgAdmin.Dashboard.render_grid_data(div_database_activity);\n                        break;\n\n                    case \"tab_database_locks\":\n                        pgAdmin.Dashboard.render_grid_data(div_database_locks);\n                        break;\n\n                    case \"tab_database_prepared\":\n                        pgAdmin.Dashboard.render_grid_data(div_database_prepared);\n                        break;\n                }\n            });\n\n            // Handle button clicks\n            $(\"button\").click(function(e){\n                switch(this.id) {\n                    case \"btn_database_activity_refresh\":\n                        pgAdmin.Dashboard.render_grid_data(div_database_activity);\n                        break;\n\n                    case \"btn_database_locks_refresh\":\n                        pgAdmin.Dashboard.render_grid_data(div_database_locks);\n                        break;\n\n                    case \"btn_database_prepared_refresh\":\n                        pgAdmin.Dashboard.render_grid_data(div_database_prepared);\n                        break;\n                }\n            });\n\n        },\n        toggleVisibility: function(flag) {\n          dashboardVisible = flag;\n        },\n        can_cancel_active_query: function(m) {\n          // We will validate if user is allowed to cancel the active query\n          // If there is only one active session means it probably our main\n          // connection session\n          var active_sessions = m.collection.where({'state': 'active'}),\n            pg_version = this.get('postgres_version') || null;\n\n          // With PG10, We have background process showing on dashboard\n          // We will not allow user to cancel them as they will fail with error\n          // anyway, so better usability we will throw our on notification\n\n          // Background processes do not have database field populated\n          if (pg_version && pg_version >= 100000 && !m.get('datname')) {\n            alertify.info(\n              gettext('You cannot cancel background worker processes.')\n            );\n            return false;\n          // If it is the last active connection on maintenance db then error out\n          } else if (maintenance_database == m.get('datname') &&\n              m.get('state') == 'active' && active_sessions.length == 1) {\n            alertify.error(\n              gettext('You are not allowed to cancel the main active session.')\n            );\n            return false;\n          } else if(m.get('state') == 'idle') {\n            // If this session is already idle then do nothing\n            alertify.info(\n              gettext('The session is already in idle state.')\n            );\n            return false;\n          } else if(is_super_user) {\n            // Super user can do anything\n            return true;\n          } else if (current_user && current_user == m.get('usename')) {\n            // Non-super user can cancel only their active queries\n            return true;\n          } else {\n            // Do not allow to cancel someone else session to non-super user\n            alertify.error(\n              gettext('Superuser privileges are required to cancel another users query.')\n            );\n            return false;\n          }\n        },\n        can_terminate_session: function(m) {\n          // We will validate if user is allowed to cancel the active query\n          // If there is only one active session means it probably our main\n          // connection session\n          var active_sessions = m.collection.where({'state': 'active'}),\n            pg_version = this.get('postgres_version') || null;\n\n          // With PG10, We have background process showing on dashboard\n          // We will not allow user to cancel them as they will fail with error\n          // anyway, so better usability we will throw our on notification\n\n          // Background processes do not have database field populated\n          if (pg_version && pg_version >= 100000 && !m.get('datname')) {\n            alertify.info(\n              gettext('You cannot terminate background worker processes.')\n            );\n            return false;\n          // If it is the last active connection on maintenance db then error out\n          } else if (maintenance_database == m.get('datname') &&\n              m.get('state') == 'active' && active_sessions.length == 1) {\n            alertify.error(\n              gettext('You are not allowed to terminate the main active session.')\n            );\n            return false;\n          } else if(is_super_user) {\n            // Super user can do anything\n            return true;\n          } else if (current_user && current_user == m.get('usename')) {\n            // Non-super user can terminate only their active queries\n            return true;\n          } else {\n            // Do not allow to cancel someone else session to non-super user\n            alertify.error(\n              gettext('Superuser privileges are required to terminate another users query.')\n            );\n            return false;\n          }\n        },\n  };\n\n  return pgAdmin.Dashboard;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/dashboard/static/js/dashboard.js","module.exports = __WEBPACK_EXTERNAL_MODULE_268__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.server.supported_servers\"\n// module id = 268\n// module chunks = 0","define([\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'underscore.string', 'pgadmin.alertifyjs',\n  'pgadmin.browser', 'backbone', 'backgrid', 'backform', 'pgadmin.browser.node',\n  'pgadmin.user_management.current_user',\n  'backgrid.select.all', 'backgrid.filter'\n], function(\n  gettext, url_for, $, _, S, alertify, pgBrowser, Backbone, Backgrid, Backform,\n  pgNode, userInfo\n) {\n\n    // if module is already initialized, refer to that.\n    if (pgBrowser.UserManagement) {\n      return pgBrowser.UserManagement;\n    }\n\n    var USERURL = url_for('user_management.users'),\n        ROLEURL = url_for('user_management.roles'),\n        userFilter = function(collection) {\n          return (new Backgrid.Extension.ClientSideFilter({\n            collection: collection,\n            placeholder: _('Filter by email'),\n\n            // The model fields to search for matches\n            fields: ['email'],\n\n            // How long to wait after typing has stopped before searching can start\n            wait: 150\n          }));\n        }\n\n    pgBrowser.UserManagement  = {\n      init: function() {\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        return this;\n      },\n      // Callback to draw User Management Dialog.\n      show_users: function(action, item, params) {\n        if (!userInfo['is_admin']) return;\n        var Roles = [];\n\n        var UserModel = pgAdmin.Browser.Node.Model.extend({\n            idAttribute: 'id',\n            urlRoot: USERURL,\n            defaults: {\n              id: undefined,\n              email: undefined,\n              active: true,\n              role: undefined,\n              newPassword: undefined,\n              confirmPassword: undefined\n            },\n            schema: [\n            {\n              id: 'email', label: gettext('Email'), type: 'text',\n              cell: Backgrid.Extension.StringDepCell, cellHeaderClasses: 'width_percent_30',\n              deps: ['id'],\n              editable: function(m) {\n                if(m instanceof Backbone.Collection) {\n                  return false;\n                }\n                // Disable email edit for existing user.\n                if (m.isNew()){\n                    return true;\n                }\n                return false;\n              }\n            },{\n              id: 'role', label: gettext('Role'),\n              type: 'text', control: \"Select2\", cellHeaderClasses:'width_percent_20',\n              cell: 'select2', select2: {allowClear: false, openOnEnter: false},\n              options: function (controlOrCell) {\n                var options = [];\n\n                if( controlOrCell instanceof Backform.Control){\n                  // This is be backform select2 control\n                  _.each(Roles, function(role) {\n                    options.push({\n                      label: role.name,\n                      value: role.id.toString()}\n                    );\n                  });\n                } else {\n                  // This must be backgrid select2 cell\n                  _.each(Roles, function(role) {\n                    options.push([role.name, role.id.toString()]);\n                  });\n                }\n\n                return options;\n              },\n              editable: function(m) {\n                if(m instanceof Backbone.Collection) {\n                  return true;\n                }\n                if (m.get(\"id\") == userInfo['id']){\n                    return false;\n                } else {\n                    return true;\n                }\n              }\n            },{\n              id: 'active', label: gettext('Active'),\n              type: 'switch', cell: 'switch', cellHeaderClasses:'width_percent_10',\n              options: { 'onText': 'Yes', 'offText': 'No'},\n              editable: function(m) {\n                if(m instanceof Backbone.Collection) {\n                  return true;\n                }\n                if (m.get(\"id\") == userInfo['id']){\n                    return false;\n                } else {\n                    return true;\n                }\n              }\n            },{\n              id: 'newPassword', label: gettext('New password'),\n              type: 'password', disabled: false, control: 'input',\n              cell: 'password', cellHeaderClasses:'width_percent_20'\n            },{\n              id: 'confirmPassword', label: gettext('Confirm password'),\n              type: 'password', disabled: false, control: 'input',\n              cell: 'password', cellHeaderClasses:'width_percent_20'\n            }],\n            validate: function() {\n              var err = {},\n                  errmsg = null,\n                  changedAttrs = this.changed || {},\n                  email_filter = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\n              if (('email' in changedAttrs || !this.isNew()) && (_.isUndefined(this.get('email')) ||\n                    _.isNull(this.get('email')) ||\n                    String(this.get('email')).replace(/^\\s+|\\s+$/g, '') == '')) {\n                errmsg = gettext('Email address cannot be empty.');\n                this.errorModel.set('email', errmsg);\n                return errmsg;\n              } else if (!!this.get('email') && !email_filter.test(this.get('email'))) {\n\n                errmsg =  S(gettext(\"Invalid email address: %s.\")).sprintf(\n                            this.get('email')\n                          ).value();\n                this.errorModel.set('email', errmsg);\n                return errmsg;\n              } else if (!!this.get('email') && this.collection.where({\"email\":this.get('email')}).length > 1) {\n\n                errmsg =  S(gettext(\"The email address %s already exists.\")).sprintf(\n                            this.get('email')\n                          ).value();\n\n                this.errorModel.set('email', errmsg);\n                return errmsg;\n              } else {\n                this.errorModel.unset('email');\n              }\n\n              if ('role' in changedAttrs && (_.isUndefined(this.get('role')) ||\n                    _.isNull(this.get('role')) ||\n                    String(this.get('role')).replace(/^\\s+|\\s+$/g, '') == '')) {\n\n                errmsg =  S(gettext(\"Role cannot be empty for user %s.\")).sprintf(\n                            (this.get('email') || '')\n                          ).value();\n\n                this.errorModel.set('role', errmsg);\n                return errmsg;\n              } else {\n                this.errorModel.unset('role');\n              }\n\n              if(this.isNew()){\n                // Password is compulsory for new user.\n                if ('newPassword' in changedAttrs && (_.isUndefined(this.get('newPassword')) ||\n                      _.isNull(this.get('newPassword')) ||\n                      this.get('newPassword') == '')) {\n\n                  errmsg =  S(gettext(\"Password cannot be empty for user %s.\")).sprintf(\n                            (this.get('email') || '')\n                          ).value();\n\n                  this.errorModel.set('newPassword', errmsg);\n                  return errmsg;\n                } else if (!_.isUndefined(this.get('newPassword')) &&\n                  !_.isNull(this.get('newPassword')) &&\n                  this.get('newPassword').length < 6) {\n\n                  errmsg =  S(gettext(\"Password must be at least 6 characters for user %s.\")).sprintf(\n                            (this.get('email') || '')\n                          ).value();\n\n                  this.errorModel.set('newPassword', errmsg);\n                  return errmsg;\n                } else {\n                  this.errorModel.unset('newPassword');\n                }\n\n                if ('confirmPassword' in changedAttrs && (_.isUndefined(this.get('confirmPassword')) ||\n                      _.isNull(this.get('confirmPassword')) ||\n                      this.get('confirmPassword') == '')) {\n\n                  errmsg =  S(gettext(\"Confirm Password cannot be empty for user %s.\")).sprintf(\n                            (this.get('email') || '')\n                          ).value();\n\n                  this.errorModel.set('confirmPassword', errmsg);\n                  return errmsg;\n                } else {\n                  this.errorModel.unset('confirmPassword');\n                }\n\n                if(!!this.get('newPassword') && !!this.get('confirmPassword') &&\n                    this.get('newPassword') != this.get('confirmPassword')) {\n\n                  errmsg =  S(gettext(\"Passwords do not match for user %s.\")).sprintf(\n                            (this.get('email') || '')\n                          ).value();\n\n                  this.errorModel.set('confirmPassword', errmsg);\n                  return errmsg;\n                } else {\n                  this.errorModel.unset('confirmPassword');\n                }\n\n              } else {\n                if ((_.isUndefined(this.get('newPassword')) || _.isNull(this.get('newPassword')) ||\n                      this.get('newPassword') == '') &&\n                      ((_.isUndefined(this.get('confirmPassword')) || _.isNull(this.get('confirmPassword')) ||\n                      this.get('confirmPassword') == ''))) {\n\n                   this.errorModel.unset('newPassword');\n                   if(this.get('newPassword') == ''){\n                    this.set({'newPassword': undefined})\n                   }\n\n                   this.errorModel.unset('confirmPassword');\n                   if(this.get('confirmPassword') == ''){\n                    this.set({'confirmPassword': undefined})\n                   }\n                } else if (!_.isUndefined(this.get('newPassword')) &&\n                    !_.isNull(this.get('newPassword')) &&\n                    !this.get('newPassword') == '' &&\n                    this.get('newPassword').length < 6) {\n\n                  errmsg =  S(gettext(\"Password must be at least 6 characters for user %s.\")).sprintf(\n                            (this.get('email') || '')\n                          ).value();\n\n                  this.errorModel.set('newPassword', errmsg);\n                  return errmsg;\n                } else if (_.isUndefined(this.get('confirmPassword')) ||\n                      _.isNull(this.get('confirmPassword')) ||\n                      this.get('confirmPassword') == '') {\n\n                  errmsg =  S(gettext(\"Confirm Password cannot be empty for user %s.\")).sprintf(\n                            (this.get('email') || '')\n                          ).value();\n\n                  this.errorModel.set('confirmPassword', errmsg);\n                  return errmsg;\n                } else if (!!this.get('newPassword') && !!this.get('confirmPassword') &&\n                          this.get('newPassword') != this.get('confirmPassword')) {\n\n                  errmsg =  S(gettext(\"Passwords do not match for user %s.\")).sprintf(\n                            (this.get('email') || '')\n                          ).value();\n\n                  this.errorModel.set('confirmPassword', errmsg);\n                  return errmsg;\n                } else {\n                  this.errorModel.unset('newPassword');\n                  this.errorModel.unset('confirmPassword');\n                }\n              }\n              return null;\n            }\n          }),\n          gridSchema = Backform.generateGridColumnsFromModel(\n              null, UserModel, 'edit'),\n          deleteUserCell = Backgrid.Extension.DeleteCell.extend({\n            deleteRow: function(e) {\n              self = this;\n              e.preventDefault();\n\n              if (self.model.get(\"id\") == userInfo['id']) {\n                alertify.alert(\n                  gettext('Cannot delete user.'),\n                  gettext('Cannot delete currently logged in user.'),\n                  function(){\n                    return true;\n                  }\n                );\n                return true;\n              }\n\n              // We will check if row is deletable or not\n              var canDeleteRow = (!_.isUndefined(this.column.get('canDeleteRow')) &&\n                                  _.isFunction(this.column.get('canDeleteRow')) ) ?\n                                   Backgrid.callByNeed(this.column.get('canDeleteRow'),\n                                    this.column, this.model) : true;\n              if (canDeleteRow) {\n                if(self.model.isNew()){\n                  self.model.destroy();\n                } else {\n                  alertify.confirm(\n                    'Delete user?',\n                    'Are you sure you wish to delete this user?',\n                    function(evt) {\n                      self.model.destroy({\n                        wait: true,\n                        success: function(res) {\n                          alertify.success(gettext('User deleted.'));\n                        },\n                        error: function(m, jqxhr) {\n                          alertify.error(gettext('Error during deleting user.'));\n                        }\n                      });\n                    },\n                    function(evt) {\n                      return true;\n                    }\n                  );\n                }\n              } else {\n                alertify.alert(\"This user cannot be deleted.\",\n                  function(){\n                    return true;\n                  }\n                );\n              }\n            }\n          });\n\n          gridSchema.columns.unshift({\n            name: \"pg-backform-delete\", label: \"\",\n            cell: deleteUserCell,\n            editable: false, cell_priority: -1,\n            canDeleteRow: true\n          });\n\n        // Users Management dialog code here\n        if(!alertify.UserManagement) {\n          alertify.dialog('UserManagement' ,function factory() {\n            return {\n              main: function(title) {\n                this.set('title', title);\n              },\n              build: function() {\n                alertify.pgDialogBuild.apply(this)\n              },\n              setup:function() {\n                return {\n                  buttons: [{\n                    text: '', key: 112, className: 'btn btn-default pull-left fa fa-lg fa-question',\n                    attrs:{\n                      name:'dialog_help', type:'button', label: gettext('Users'),\n                      url: url_for(\n                        'help.static', {\n                          'filename': 'pgadmin_user.html'\n                        })\n                    }\n                  },{\n                    text: gettext('Close'), key: 27, className: 'btn btn-danger fa fa-lg fa-times pg-alertify-button user_management_pg-alertify-button',\n                    attrs:{name:'close', type:'button'}\n                  }],\n                  // Set options for dialog\n                  options: {\n                    title: gettext('User Management'),\n                    //disable both padding and overflow control.\n                    padding : !1,\n                    overflow: !1,\n                    modal: false,\n                    resizable: true,\n                    maximizable: true,\n                    pinnable: false,\n                    closableByDimmer: false,\n                    closable: false\n                  }\n                };\n              },\n              hooks: {\n                // Triggered when the dialog is closed\n                onclose: function() {\n                  if (this.view) {\n                    // clear our backform model/view\n                    this.view.remove({data: true, internal: true, silent: true});\n                    this.$content.remove();\n                  }\n                }\n              },\n              prepare: function() {\n                var self = this,\n                  footerTpl = _.template([\n                    '<div class=\"pg-prop-footer\">',\n                      '<div class=\"pg-prop-status-bar\" style=\"visibility:hidden\">',\n                        '<div class=\"media error-in-footer bg-red-1 border-red-2 font-red-3 text-14\">',\n                          '<div class=\"media-body media-middle\">',\n                            '<div class=\"alert-icon error-icon\">',\n                              '<i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>',\n                            '</div>',\n                            '<div class=\"alert-text\">',\n                            '</div>',\n                          '</div>',\n                        '</div>',\n                      '</div>',\n                    '</div>'].join(\"\\n\")),\n                  $footer = $(footerTpl()),\n                  $statusBar = $footer.find('.pg-prop-status-bar'),\n                  UserRow = Backgrid.Row.extend({\n                    userInvalidColor: \"lightYellow\",\n\n                    userValidColor: \"#fff\",\n\n                    initialize: function() {\n                      Backgrid.Row.prototype.initialize.apply(this, arguments);\n                      this.listenTo(this.model, 'pgadmin:user:invalid', this.userInvalid);\n                      this.listenTo(this.model, 'pgadmin:user:valid', this.userValid);\n                    },\n                    userInvalid: function() {\n                      $(this.el).removeClass(\"new\");\n                      this.el.style.backgroundColor = this.userInvalidColor;\n                    },\n                    userValid: function() {\n                      this.el.style.backgroundColor = this.userValidColor;\n                    }\n                  }),\n                  UserCollection = Backbone.Collection.extend({\n                    model: UserModel,\n                    url: USERURL,\n                    initialize: function() {\n                      Backbone.Collection.prototype.initialize.apply(this, arguments);\n                      var self = this;\n                      self.changedUser = null;\n                      self.invalidUsers = {};\n\n                      self.on('add', self.onModelAdd);\n                      self.on('remove', self.onModelRemove);\n                      self.on('pgadmin-session:model:invalid', function(msg, m, c) {\n                        self.invalidUsers[m.cid] = msg;\n                        m.trigger('pgadmin:user:invalid', m);\n                        $statusBar.find('.alert-text').html(msg);\n                        $statusBar.css(\"visibility\", \"visible\");\n                      });\n                      self.on('pgadmin-session:model:valid', function(m, c) {\n                        delete self.invalidUsers[m.cid];\n                        m.trigger('pgadmin:user:valid', m);\n                        this.updateErrorMsg();\n                        this.saveUser(m);\n                      });\n                    },\n                    onModelAdd: function(m) {\n                      // Start tracking changes.\n                      m.startNewSession();\n                    },\n                    onModelRemove: function(m) {\n                      delete this.invalidUsers[m.cid];\n                      this.updateErrorMsg();\n                    },\n                    updateErrorMsg: function() {\n                      var self = this,\n                        msg = null;\n\n                      for (var key in self.invalidUsers) {\n                        msg = self.invalidUsers [key];\n                        if (msg) {\n                          break;\n                        }\n                      }\n\n                      if(msg){\n                        $statusBar.find('.alert-text').html(msg);\n                        $statusBar.css(\"visibility\", \"visible\");\n                      } else {\n                        $statusBar.find('.alert-text').empty();\n                        $statusBar.css(\"visibility\", \"hidden\");\n                      }\n                    },\n                    saveUser: function(m) {\n                      var d = m.toJSON(true);\n\n                      if(m.isNew() && (!m.get('email') || !m.get('role') ||\n                          !m.get('newPassword') || !m.get('confirmPassword') ||\n                          m.get('newPassword') != m.get('confirmPassword'))\n                      ) {\n                      // New user model is valid but partially filled so return without saving.\n                        return false;\n                      } else if (!m.isNew() && m.get('newPassword') != m.get('confirmPassword')) {\n                      // For old user password change is in progress and user model is valid but admin has not added\n                      // both the passwords so return without saving.\n                        return false;\n                      }\n\n                      if (m.sessChanged() && d && !_.isEmpty(d)) {\n                        m.stopSession();\n                        m.save({}, {\n                          attrs: d,\n                          wait: true,\n                          success: function(res) {\n                            // User created/updated on server now start new session for this user.\n                            m.set({'newPassword':undefined,\n                                   'confirmPassword':undefined});\n\n                            m.startNewSession();\n                            alertify.success(S(gettext(\"User '%s' saved.\")).sprintf(\n                              m.get('email')\n                            ).value());\n                          },\n                          error: function(res, jqxhr) {\n                            m.startNewSession();\n                            alertify.error(\n                              S(gettext(\"Error saving user: '%s'\")).sprintf(\n                                jqxhr.responseJSON.errormsg\n                              ).value()\n                            );\n                          }\n                        });\n                      }\n                    }\n                  }),\n                  userCollection = this.userCollection = new UserCollection(),\n                  header = [\n                    '<div class=\"subnode-header\">',\n                    '  <button class=\"btn-sm btn-default add fa fa-plus\" title=\"<%-add_title%>\" <%=canAdd ? \"\" : \"disabled=\\'disabled\\'\"%> ></button>',\n                    '  <div class=\"control-label search_users\"></div>',\n                    '</div>',].join(\"\\n\"),\n                  headerTpl = _.template(header),\n                  data = {\n                    canAdd: true,\n                    add_title: gettext('Add new user')\n                  },\n                  $gridBody = $(\"<div></div>\", {\n                    class: \"user_container\"\n                  });\n\n                $.ajax({\n                  url: ROLEURL,\n                  method: 'GET',\n                  async: false,\n                  success: function(res) {\n                    Roles = res\n                  },\n                  error: function(e) {\n                    setTimeout(function() {\n                      alertify.alert(gettext('Cannot load user roles.'));\n                    },100);\n                  }\n                });\n\n                var view = this.view = new Backgrid.Grid({\n                  row: UserRow,\n                  columns: gridSchema.columns,\n                  collection: userCollection,\n                  className: \"backgrid table-bordered\"\n                });\n\n                $gridBody.append(view.render().$el[0]);\n\n                this.$content = $(\"<div class='user_management object subnode'></div>\").append(\n                    headerTpl(data)).append($gridBody\n                    ).append($footer);\n\n                $(this.elements.body.childNodes[0]).addClass(\n                  'alertify_tools_dialog_backgrid_properties');\n\n                this.elements.content.appendChild(this.$content[0]);\n\n                // Render Search Filter\n                $('.search_users').append(\n                  userFilter(userCollection).render().el);\n\n                userCollection.fetch();\n\n                this.$content.find('button.add').first().click(function(e) {\n                  e.preventDefault();\n                  var canAddRow = true;\n\n                  if (canAddRow) {\n                      // There should be only one empty row.\n\n                      var isEmpty = false,\n                        unsavedModel = null;\n\n                      userCollection.each(function(model) {\n                        if(!isEmpty) {\n                          isEmpty = model.isNew();\n                          unsavedModel = model;\n                        }\n                      });\n                      if(isEmpty) {\n                        var idx = userCollection.indexOf(unsavedModel),\n                          row = view.body.rows[idx].$el;\n\n                        row.addClass(\"new\");\n                        $(row).pgMakeVisible('backform-tab');\n                        return false;\n                      }\n\n                      $(view.body.$el.find($(\"tr.new\"))).removeClass(\"new\")\n                      var m = new (UserModel) (null, {\n                        handler: userCollection,\n                        top: userCollection,\n                        collection: userCollection\n                      });\n                      userCollection.add(m);\n\n                      var idx = userCollection.indexOf(m),\n                          newRow = view.body.rows[idx].$el;\n\n                      newRow.addClass(\"new\");\n                      $(newRow).pgMakeVisible('backform-tab');\n                      return false;\n                  }\n                });\n              },\n              callback: function(e) {\n                if (e.button.element.name == \"dialog_help\") {\n                  e.cancel = true;\n                  pgBrowser.showHelp(e.button.element.name, e.button.element.getAttribute('url'),\n                    null, null, e.button.element.getAttribute('label'));\n                  return;\n                }\n                if (e.button.element.name == \"close\") {\n                  var self = this;\n                  if (!_.all(this.userCollection.pluck('id')) || !_.isEmpty(this.userCollection.invalidUsers)) {\n                    e.cancel = true;\n                    alertify.confirm(\n                      gettext('Discard unsaved changes?'),\n                      gettext('Are you sure you want to close the dialog? Any unsaved changes will be lost.'),\n                      function(e) {\n                        self.close();\n                        return true;\n                      },\n                      function(e) {\n                        // Do nothing.\n                        return true;\n                      }\n                    );\n                  }\n                }\n              }\n          };\n       });\n      }\n        alertify.UserManagement(true).resizeTo('680px','400px');\n     }\n\n    };\n    return pgBrowser.UserManagement;\n  });\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/user_management/static/js/user_management.js","define('misc.statistics', [\n  'sources/gettext', 'underscore', 'underscore.string', 'jquery',\n  'pgadmin.browser', 'backgrid',\n  'alertify', 'sources/size_prettify'\n], function(gettext, _, S, $, pgBrowser, Backgrid, Alertify, sizePrettify) {\n\n  if (pgBrowser.NodeStatistics)\n    return pgBrowser.NodeStatistics;\n\n  pgBrowser.NodeStatistics = pgBrowser.NodeStatistics || {};\n\n  if (pgBrowser.NodeStatistics.initialized) {\n    return pgBrowser.NodeStatistics;\n  }\n\n  var SizeFormatter = Backgrid.SizeFormatter = function () {};\n  _.extend(SizeFormatter.prototype, {\n      /**\n         Takes a raw value from a model and returns the human readable formatted\n         string for display.\n\n         @member Backgrid.SizeFormatter\n         @param {*} rawData\n         @param {Backbone.Model} model Used for more complicated formatting\n         @return {*}\n      */\n      fromRaw: function (rawData, model) {\n        return sizePrettify(rawData);\n      },\n      toRaw: function (formattedData, model) {\n        return formattedData;\n      }\n  });\n\n  var PGBooleanCell = Backgrid.Extension.SwitchCell.extend({\n      defaults: _.extend({}, Backgrid.Extension.SwitchCell.prototype.defaults)\n  }),\n  typeCellMapper = {\n    // boolean\n    16: PGBooleanCell,\n    // int8\n    20: Backgrid.IntegerCell,\n    // int2\n    21: Backgrid.IntegerCell,\n    // int4\n    23: Backgrid.IntegerCell,\n    // float4\n    700: Backgrid.NumberCell,\n    // float8\n    701: Backgrid.NumberCell,\n    // numeric\n    1700: Backgrid.NumberCell,\n    // abstime\n    702: Backgrid.DatetimeCell,\n    // reltime\n    703: Backgrid.DatetimeCell,\n    // date\n    1082: Backgrid.DatetimeCell.extend({\n      includeDate: true, includeTime: false, includeMilli: false\n    }),\n    // time\n    1083: Backgrid.DatetimeCell.extend({\n      includeDate: false, includeTime: true, includeMilli: true\n    }),\n    // timestamp\n    1114: Backgrid.DatetimeCell.extend({\n      includeDate: true, includeTime: true, includeMilli: true\n    }),\n    // timestamptz\n    1184: 'string'/* Backgrid.DatetimeCell.extend({\n      includeDate: true, includeTime: true, includeMilli: true\n    }) */,\n    1266: 'string'/* Backgrid.DatetimeCell.extend({\n      includeDate: false, includeTime: true, includeMilli: true\n    }) */\n  },\n  GRID_CLASSES = \"backgrid presentation table backgrid-striped table-bordered table-hover\",\n  wcDocker = window.wcDocker;\n\n  _.extend(\n    PGBooleanCell.prototype.defaults.options, {\n      onText: gettext('True'),\n      offText: gettext('False'),\n      onColor: 'success',\n      offColor: 'primary',\n      size: 'mini'\n    }\n  );\n\n  _.extend(pgBrowser.NodeStatistics, {\n    init: function() {\n      if (this.initialized) {\n        return;\n      }\n      this.initialized = true;\n      _.bindAll(\n        this,\n        'showStatistics', 'panelVisibilityChanged',\n        '__createMultiLineStatistics', '__createSingleLineStatistics');\n\n      _.extend(\n        this, {\n          initialized: true,\n          collection: new (Backbone.Collection)(null),\n          statistic_columns: [{\n            editable: false,\n            name: 'statistics',\n            label: gettext(\"Statistics\"),\n            cell: 'string',\n            headerCell: Backgrid.Extension.CustomHeaderCell,\n            cellHeaderClasses: 'width_percent_25'\n          },{\n            editable: false,\n            name: 'value',\n            label: gettext(\"Value\"),\n            cell: 'string'\n          }],\n          panel: pgBrowser.docker.findPanels('statistics'),\n          columns: null,\n          grid: null\n        });\n\n      var self = this;\n\n      // We will listen to the visibility change of the statistics panel\n      pgBrowser.Events.on(\n        'pgadmin-browser:panel-statistics:' +\n          wcDocker.EVENT.VISIBILITY_CHANGED,\n          this.panelVisibilityChanged\n      );\n\n      pgBrowser.Events.on(\n        'pgadmin:browser:node:updated', function() {\n          if (this.panel && this.panel.length) {\n            $(this.panel[0]).data('node-prop', '');\n            this.panelVisibilityChanged(this.panel[0]);\n          }\n        }, this\n      );\n\n      // Hmm.. Did we find the statistics panel, and is it visible (openned)?\n      // If that is the case - we need to listen the browser tree selection\n      // events.\n      if (this.panel.length == 0) {\n        pgBrowser.Events.on(\n          'pgadmin-browser:panel-statistics:' + wcDocker.EVENT.INIT,\n          function() {\n            self.panel = pgBrowser.docker.findPanels('statistics');\n            if (self.panel[0].isVisible() ||\n                self.panel.length != 1) {\n              pgBrowser.Events.on(\n                'pgadmin-browser:tree:selected', this.showStatistics\n              );\n            }\n          }.bind(this)\n          );\n      } else {\n        if (self.panel[0].isVisible() ||\n            self.panel.length != 1) {\n          pgBrowser.Events.on(\n            'pgadmin-browser:tree:selected', this.showStatistics\n          );\n        }\n      }\n      if (self.panel.length > 0 && self.panel[0].isVisible()) {\n        pgBrowser.Events.on(\n            'pgadmin-browser:tree:selected', this.showStatistics\n        );\n      }\n    },\n\n    // Fetch the actual data and update the collection\n    __updateCollection: function(url, node, item, node_type) {\n      var $container = this.panel[0].layout().scene().find('.pg-panel-content'),\n          $msgContainer = $container.find('.pg-panel-statistics-message'),\n          $gridContainer = $container.find('.pg-panel-statistics-container'),\n          collection = this.collection,\n          panel = this.panel,\n          self = this,\n          msg = '',\n          n_type = node_type;\n\n      if (node) {\n        msg = gettext(\"No statistics are available for the selected object.\");\n        /* We fetch the statistics only for those node who set the parameter\n         * showStatistics function.\n         */\n\n          // Avoid unnecessary reloads\n          var treeHierarchy = node.getTreeNodeHierarchy(item);\n          var cache_flag = {\n            node_type: node_type,\n            url: url\n          };\n          if (_.isEqual($(panel[0]).data('node-prop'), cache_flag)) {\n            return;\n          }\n          // Cache the current IDs for next time\n          $(panel[0]).data('node-prop', cache_flag);\n\n        if (node.hasStatistics) {\n          msg = '';\n          var timer;\n          // Set the url, fetch the data and update the collection\n          $.ajax({\n            url: url,\n            type:'GET',\n            beforeSend: function(jqXHR, settings) {\n              // Generate a timer for the request\n              timer = setTimeout(function(){\n                // notify user if request is taking longer than 1 second\n\n                $msgContainer.text(gettext(\"Retrieving data from the server...\"));\n                $msgContainer.removeClass('hidden');\n                if (self.grid) {\n                  self.grid.remove();\n                }\n              }, 1000);\n            },\n            success: function(res) {\n              // clear timer and reset message.\n              clearTimeout(timer);\n              $msgContainer.text('');\n              if (res.data) {\n                var data = res.data;\n                if (node.hasCollectiveStatistics || data['rows'].length > 1) {\n                  self.__createMultiLineStatistics.call(self, data, node.statsPrettifyFields);\n                } else {\n                  self.__createSingleLineStatistics.call(self, data, node.statsPrettifyFields);\n                }\n\n                if (self.grid) {\n                  delete self.grid;\n                  self.grid = null;\n                }\n\n                self.grid = new Backgrid.Grid({\n                  columns: self.columns,\n                  collection: self.collection,\n                  className: GRID_CLASSES\n                });\n                self.grid.render();\n                $gridContainer.empty();\n                $gridContainer.append(self.grid.$el);\n\n                if (!$msgContainer.hasClass('hidden')) {\n                  $msgContainer.addClass('hidden')\n                }\n                $gridContainer.removeClass('hidden');\n\n              } else if (res.info) {\n                if (!$gridContainer.hasClass('hidden')) {\n                  $gridContainer.addClass('hidden')\n                }\n                $msgContainer.text(res.info);\n                $msgContainer.removeClass('hidden');\n              }\n            },\n            error: function(xhr, error, message) {\n              var _label = treeHierarchy[n_type].label;\n              pgBrowser.Events.trigger(\n                'pgadmin:node:retrieval:error', 'statistics', xhr, error, message, item\n              );\n              if (\n                !Alertify.pgHandleItemError(xhr, error, message, {\n                  item: item, info: treeHierarchy\n                })\n              ) {\n                Alertify.pgNotifier(\n                  error, xhr,\n                  S(gettext(\"Error retrieving the information - %s\")).sprintf(\n                    message || _label\n                  ).value(),\n                  function() {\n                    console.log(arguments);\n                  }\n                );\n              }\n              // show failed message.\n              $msgContainer.text(gettext(\"Failed to retrieve data from the server.\"));\n            }\n          });\n        }\n      }\n      if (msg != '') {\n        // Hide the grid container and show the default message container\n        if (!$gridContainer.hasClass('hidden'))\n          $gridContainer.addClass('hidden');\n        $msgContainer.removeClass('hidden');\n\n        $msgContainer.text(msg);\n      }\n    },\n\n    showStatistics: function(item, data, node) {\n      var self = this;\n      if (!node) {\n        return;\n      }\n      /**\n       * We can't start fetching the statistics immediately, it is possible -\n       * the user is just using keyboards to select the node, and just\n       * traversing through.\n       *\n       * We will wait for some time before fetching the statistics for the\n       * selected node.\n       **/\n      if (node) {\n        if (self.timeout) {\n          clearTimeout(self.timeout);\n        }\n        self.timeout =  setTimeout(\n          function() {\n            self.__updateCollection.call(\n              self, node.generate_url(item, 'stats', data, true), node, item, data._type\n            );\n          }, 400);\n        }\n    },\n\n    __createMultiLineStatistics: function(data, prettifyFields) {\n      var rows = data['rows'],\n          columns = data['columns'];\n\n      this.columns = [];\n      for (var idx in columns) {\n        var rawColumn = columns[idx],\n        cell_type = typeCellMapper[rawColumn['type_code']] || 'string';\n\n        // Don't show PID comma separated\n        if(rawColumn['name'] == 'PID') {\n          cell_type = cell_type.extend({\n            orderSeparator: ''\n          });\n        }\n\n        var col = {\n            editable: false,\n            name: rawColumn['name'],\n            cell: cell_type\n        };\n        if (_.indexOf(prettifyFields, rawColumn['name']) != -1) {\n          col['formatter'] = SizeFormatter\n        }\n        this.columns.push(col);\n\n      }\n\n      this.collection.reset(rows);\n    },\n\n    __createSingleLineStatistics: function(data, prettifyFields) {\n      var row = data['rows'][0],\n          columns = data['columns'],\n          res = [];\n\n      this.columns = this.statistic_columns;\n      for (var idx in columns) {\n        name = (columns[idx])['name'];\n        res.push({\n          'statistics': name,\n          // Check if row is undefined?\n          'value': row && row[name] ? ((_.indexOf(prettifyFields, name) != -1) ? sizePrettify(row[name]) : row[name]) : null\n        });\n      }\n\n      this.collection.reset(res);\n    },\n\n    panelVisibilityChanged: function(panel) {\n      if (panel.isVisible()) {\n        var t = pgBrowser.tree,\n            i = t.selected(),\n            d = i && t.itemData(i),\n            n = i && d && pgBrowser.Nodes[d._type];\n\n        pgBrowser.NodeStatistics.showStatistics.apply(\n          pgBrowser.NodeStatistics, [i, d, n]\n        );\n\n        // We will start listening the tree selection event.\n        pgBrowser.Events.on(\n          'pgadmin-browser:tree:selected',\n          pgBrowser.NodeStatistics.showStatistics\n        );\n      } else {\n        // We don't need to listen the tree item selection event.\n        pgBrowser.Events.off(\n          'pgadmin-browser:tree:selected',\n          pgBrowser.NodeStatistics.showStatistics\n        );\n      }\n    }\n  });\n\n  return pgBrowser.NodeStatistics;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/misc/statistics/static/js/statistics.js","define([],\n  function () {\n    var sizePrettify = function (rawSize) {\n      var size = Math.abs(rawSize),\n          limit = 10 * 1024,\n          limit2 = limit - 1,\n          cnt = 0,\n          sizeUnits = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\n      if (size < limit)\n        return size + ' ' + sizeUnits[cnt]; // return in bytes format\n      else\n      {\n        do {\n          size = size / 1024;\n          cnt += 1;\n        } while (size > limit2);\n\n        return Math.round(size) + ' ' + sizeUnits[cnt];\n      }\n    };\n\n  return sizePrettify;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/size_prettify.js","define('misc.depends', [\n  'sources/gettext', 'underscore', 'underscore.string', 'jquery', 'pgadmin.browser',\n  'alertify', 'pgadmin.alertifyjs'\n], function(gettext, _, S, $, pgBrowser, Alertify) {\n\n  if (pgBrowser.ShowNodeDepends)\n    return pgBrowser.ShowNodeDepends;\n\n  var wcDocker = window.wcDocker;\n\n  pgBrowser.ShowNodeDepends = pgBrowser.ShowNodeDepends || {};\n\n  _.extend(pgBrowser.ShowNodeDepends, {\n    init: function() {\n      if (this.initialized) {\n        return;\n      }\n\n      this.initialized = true;\n      /* Parameter is used to set the proper label of the\n       * backgrid header cell.\n       */\n      var dependent = true,\n          dependentGrid = null,  // Refer to the backgrid object render under Dependents tab\n          dependenciesGrid = null; // Refer to the backgrid object render under Dependencies tab\n\n      _.bindAll(this, 'showDependents', 'dependentsPanelVisibilityChanged',\n         'showDependencies', 'dependenciesPanelVisibilityChanged', '__updateCollection'\n      );\n\n      // We will listened to the visibility change of the Dependencies and Dependents panel\n      pgBrowser.Events.on('pgadmin-browser:panel-dependencies:' + wcDocker.EVENT.VISIBILITY_CHANGED,\n                        this.dependenciesPanelVisibilityChanged);\n      pgBrowser.Events.on('pgadmin-browser:panel-dependents:' + wcDocker.EVENT.VISIBILITY_CHANGED,\n                        this.dependentsPanelVisibilityChanged);\n\n      // Defining Backbone Model for Dependencies and Dependents.\n      var Model = Backbone.Model.extend({\n        defaults: {\n          icon: 'icon-unknown',\n          type: undefined,\n          name: undefined,\n          /* field contains 'Database Name' for 'Tablespace and Role node',\n           * for other node it contains 'Restriction'.\n           */\n          field: undefined\n        },\n        // This function is used to fetch/set the icon for the type(Function, Role, Database, ....)\n        parse: function(res) {\n          var node = pgBrowser.Nodes[res.type];\n          res.icon = node ? (_.isFunction(node['node_image']) ?\n                  (node['node_image']).apply(node, [null, null]) :\n                  (node['node_image'] || ('icon-' + res.type))) :\n                  ('icon-' + res.type);\n          res.type = S.titleize(res.type.replace(/_/g, \" \"), true);\n          return res;\n        }\n      });\n\n      // Defining Backbone Collection for Dependents.\n      this.dependentCollection = new (Backbone.Collection.extend({\n        model: Model\n      }))(null);\n\n      // Defining Backbone Collection for Dependencies.\n      this.dependenciesCollection = new (Backbone.Collection.extend({\n        model: Model\n      }))(null);\n\n      var self = this;\n\n      /* Function is used to create and render backgrid with\n       * empty collection. We just want to add backgrid into the\n       * panel only once.\n       */\n      var appendGridToPanel = function(collection, panel, is_dependent) {\n        var $container = panel[0].layout().scene().find('.pg-panel-content'),\n            $gridContainer = $container.find('.pg-panel-depends-container'),\n            grid = new Backgrid.Grid({\n              columns: [\n                {\n                  name : 'type',\n                  label: 'Type',\n                  // Extend it to render the icon as per the type.\n                  cell: Backgrid.Cell.extend({\n                    render: function() {\n                      Backgrid.Cell.prototype.render.apply(this, arguments);\n                      this.$el.prepend($('<i>', {class: \"wcTabIcon \" + this.model.get('icon')}));\n                      return this;\n                    }\n                  }),\n                  editable: false\n                },\n                {\n                  name : 'name',\n                  label: 'Name',\n                  cell: 'string',\n                  editable: false\n                },\n                {\n                  name : 'field',\n                  label: '',  // label kept blank, it will change dynamically\n                  cell: 'string',\n                  editable: false\n                }\n              ],\n\n              collection: collection,\n              className: \"backgrid presentation table backgrid-striped table-bordered table-hover\",\n            });\n\n        // Condition is used to save grid object to change the label of the header.\n        if (is_dependent)\n          self.dependentGrid = grid;\n        else\n          self.dependenciesGrid = grid;\n\n        $gridContainer.append(grid.render().el);\n\n        return true;\n      };\n\n      // We will listened to the visibility change of the Dependencies and Dependents panel\n      pgBrowser.Events.on('pgadmin-browser:panel-dependencies:' + wcDocker.EVENT.VISIBILITY_CHANGED,\n                        this.dependenciesPanelVisibilityChanged);\n      pgBrowser.Events.on('pgadmin-browser:panel-dependents:' + wcDocker.EVENT.VISIBILITY_CHANGED,\n                        this.dependentsPanelVisibilityChanged);\n      pgBrowser.Events.on(\n        'pgadmin:browser:node:updated', function() {\n          if (this.dependenciesPanels && this.dependenciesPanels.length) {\n            $(this.dependenciesPanels[0]).data('node-prop', '');\n            this.dependenciesPanelVisibilityChanged(this.dependenciesPanels[0]);\n          }\n          if (this.dependentsPanels && this.dependentsPanels.length) {\n            $(this.dependentsPanels[0]).data('node-prop', '');\n            this.dependentsPanelVisibilityChanged(this.dependentsPanels[0]);\n          }\n        }, this\n      );\n\n      // We will render the grid objects in the panel after some time, because -\n      // it is possible, it is not yet available.\n      // Find the panels to render the grid.\n      var dependenciesPanels = this.dependenciesPanels = pgBrowser.docker.findPanels('dependencies');\n      var dependentsPanels = this.dependentsPanels = pgBrowser.docker.findPanels('dependents');\n\n      if (dependenciesPanels.length == 0) {\n        pgBrowser.Events.on(\n          'pgadmin-browser:panel-dependencies:' + wcDocker.EVENT.INIT,\n          function() {\n            this.dependenciesPanels = pgBrowser.docker.findPanels('dependencies');\n            appendGridToPanel(this.dependenciesCollection, this.dependenciesPanels, false);\n\n            // If Dependencies panel exists and is focused then we need to listen the browser tree selection events.\n            if ((dependenciesPanels[0].isVisible()) || dependenciesPanels.length != 1) {\n            pgBrowser.Events.on('pgadmin-browser:tree:selected', this.showDependencies);\n            }\n          }.bind(this)\n          );\n      } else {\n        appendGridToPanel(this.dependenciesCollection, this.dependenciesPanels, false);\n\n        // If Dependencies panel exists and is focused then we need to listen the browser tree selection events.\n        if ((dependenciesPanels[0].isVisible()) || dependenciesPanels.length != 1) {\n          pgBrowser.Events.on('pgadmin-browser:tree:selected', this.showDependencies);\n        }\n      }\n\n      if (dependentsPanels.length == 0) {\n        pgBrowser.Events.on(\n          'pgadmin-browser:panel-dependents:' + wcDocker.EVENT.INIT,\n          function() {\n            this.dependentsPanels = pgBrowser.docker.findPanels('dependents');\n            appendGridToPanel(this.dependentCollection, this.dependentsPanels, true);\n\n            // If Dependents panel exists and is focused then we need to listen the browser tree selection events.\n            if ((dependentsPanels[0].isVisible()) || dependentsPanels.length != 1) {\n              pgBrowser.Events.on('pgadmin-browser:tree:selected', this.showDependents);\n            }\n          }.bind(this)\n          );\n      } else {\n        appendGridToPanel(this.dependentCollection, this.dependentsPanels, true);\n\n        // If Dependents panel exists and is focused then we need to listen the browser tree selection events.\n        if ((dependentsPanels[0].isVisible()) || dependentsPanels.length != 1) {\n          pgBrowser.Events.on('pgadmin-browser:tree:selected', this.showDependents);\n        }\n      }\n    },\n\n    // Fetch the actual data and update the collection\n    __updateCollection: function(collection, panel, url, messages, node, item, type) {\n      var msg = messages[0],\n          $container = panel[0].layout().scene().find('.pg-panel-content'),\n          $msgContainer = $container.find('.pg-panel-depends-message'),\n          $gridContainer = $container.find('.pg-panel-depends-container'),\n          treeHierarchy = node.getTreeNodeHierarchy(item),\n          n_value = -1,\n          n_type = type;\n\n      // Avoid unnecessary reloads\n      if (_.isEqual($(panel[0]).data('node-prop'), treeHierarchy)) {\n        return;\n      }\n\n      // Cache the current IDs for next time\n      $(panel[0]).data('node-prop', treeHierarchy);\n\n      // Hide the grid container and show the default message container\n      if (!$gridContainer.hasClass('hidden'))\n        $gridContainer.addClass('hidden');\n      $msgContainer.removeClass('hidden');\n\n      if (node) {\n        msg = messages[1];\n        /* We fetch the Dependencies and Dependents tab only for\n         * those node who set the parameter hasDepends to true.\n         */\n        if (node.hasDepends) {\n          /* Set the message because ajax request may take time to\n           * fetch the information from the server.\n           */\n          msg = messages[2];\n          $msgContainer.text(msg);\n\n          /* Updating the label for the 'field' type of the backbone model.\n           * Label should be \"Database\" if the node type is tablespace or role\n           * and dependent tab is selected. For other nodes and dependencies tab\n           * it should be 'Restriction'.\n           */\n          if (this.dependent && (node.type == 'tablespace' || node.type == 'role'))\n            this.dependentGrid.columns.models[2].set({'label': 'Database'});\n          else {\n            this.dependenciesGrid.columns.models[2].set({'label': 'Restriction'});\n            this.dependentGrid.columns.models[2].set({'label': 'Restriction'});\n          }\n\n          // Hide message container and show grid container.\n          $msgContainer.addClass('hidden');\n          $gridContainer.removeClass('hidden');\n\n          var timer = setTimeout(function(){\n            // notify user if request is taking longer than 1 second\n\n            $msgContainer.text(gettext(\"Retrieving data from the server...\"));\n            $msgContainer.removeClass('hidden');\n            if ($gridContainer) {\n              $gridContainer.addClass('hidden');\n            }\n          }, 1000);\n\n          // Set the url, fetch the data and update the collection\n          collection.url = url;\n          collection.fetch({\n            reset: true,\n            success: function() {\n              clearTimeout(timer);\n              $gridContainer.removeClass('hidden');\n              if (!$msgContainer.hasClass('hidden')) {\n                $msgContainer.addClass('hidden');\n              }\n            },\n            error: function(coll, xhr, error, message) {\n              var _label = treeHierarchy[n_type].label;\n              pgBrowser.Events.trigger(\n                'pgadmin:node:retrieval:error', 'depends', xhr, error, message\n              );\n              if (\n                !Alertify.pgHandleItemError(xhr, error, message, {\n                  item: item, info: treeHierarchy\n                })\n              ) {\n                Alertify.pgNotifier(\n                  error, xhr,\n                  S(\n                    gettext(\"Error retrieving the information - %s\")\n                  ).sprintf(message || _label).value(),\n                  function() {\n                    console.log(arguments);\n                  }\n                );\n              }\n              // show failed message.\n              $msgContainer.text(gettext(\"Failed to retrieve data from the server.\"));\n            }\n          });\n        }\n      }\n      if (msg != '') {\n        $msgContainer.text(msg);\n      }\n    },\n    showDependents: function(item, data, node) {\n      /**\n       * We can't start fetching the Dependents immediately, it is possible the user\n       * is just using the keyboard to select the node, and just traversing\n       * through. We will wait for some time before fetching the Dependents\n       **/\n      var self = this;\n      if (!node) {\n        return;\n      }\n      self.dependent = true;\n      if (self.timeout) {\n        clearTimeout(self.timeout);\n      }\n      self.timeout =  setTimeout(\n        self.__updateCollection(\n          self.dependentCollection,\n          self.dependentsPanels,\n          node.generate_url(item, 'dependent', data, true),\n          ['No object selected.', 'No dependent information is available for the current object.',\n            'Fetching dependent information from the server...'],\n          node,\n          item,\n          data._type\n        ), 400\n      );\n    },\n    dependentsPanelVisibilityChanged: function(panel) {\n      if (panel.isVisible()) {\n        var t = pgBrowser.tree,\n            i = t.selected(),\n            d = i && t.itemData(i),\n            n = i && d && pgBrowser.Nodes[d._type];\n\n        pgBrowser.ShowNodeDepends.showDependents.apply(pgBrowser.ShowNodeDepends, [i, d, n]);\n\n        // We will start listening the tree selection event.\n        pgBrowser.Events.on('pgadmin-browser:tree:selected', pgBrowser.ShowNodeDepends.showDependents);\n      } else {\n\n        // We don't need to listen the tree item selection event.\n        pgBrowser.Events.off('pgadmin-browser:tree:selected', pgBrowser.ShowNodeDepends.showDependents);\n      }\n    },\n    showDependencies: function(item, data, node) {\n      /**\n       * We can't start fetching the Dependencies immediately, it is possible the user\n       * is just using the keyboard to select the node, and just traversing\n       * through. We will wait for some time before fetching the Dependencies\n       **/\n      var self = this;\n      if (!node) {\n        return;\n      }\n      self.dependent = false;\n      if (self.timeout) {\n        clearTimeout(self.timeout);\n      }\n      self.timeout =  setTimeout(\n        self.__updateCollection(\n          self.dependenciesCollection,\n          self.dependenciesPanels,\n          node.generate_url(item, 'dependency', data, true),\n          ['Please select an object in the tree view.', 'No dependency information is available for the current object.',\n            'Fetching dependency information from the server...'],\n          node,\n          item,\n          data._type\n        ), 400\n      );\n    },\n    dependenciesPanelVisibilityChanged: function(panel) {\n      if (panel.isVisible()) {\n        var t = pgBrowser.tree,\n            i = t.selected(),\n            d = i && t.itemData(i),\n            n = i && d && pgBrowser.Nodes[d._type];\n\n        pgBrowser.ShowNodeDepends.showDependencies.apply(pgBrowser.ShowNodeDepends, [i, d, n]);\n\n        // We will start listening the tree selection event.\n        pgBrowser.Events.on('pgadmin-browser:tree:selected', pgBrowser.ShowNodeDepends.showDependencies);\n      } else {\n        // We don't need to listen the tree item selection event.\n        pgBrowser.Events.off('pgadmin-browser:tree:selected', pgBrowser.ShowNodeDepends.showDependencies);\n      }\n    }\n  });\n\n  return pgBrowser.ShowNodeDepends;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/misc/depends/static/js/depends.js","define('misc.sql', [\n  'sources/gettext', 'underscore', 'underscore.string', 'jquery', 'pgadmin.browser',\n  'alertify', 'pgadmin.alertifyjs'\n], function(gettext, _, S, $, pgBrowser, Alertify) {\n\n  pgBrowser.ShowNodeSQL = pgBrowser.ShowNodeSQL || {};\n\n  if (pgBrowser.ShowNodeSQL.initialized) {\n    return pgBrowser.ShowNodeSQL;\n  }\n  var wcDocker = window.wcDocker;\n\n  _.extend(pgBrowser.ShowNodeSQL, {\n    init: function() {\n      if (this.initialized) {\n        return;\n      }\n      this.initialized = true;\n      _.bindAll(this, 'showSQL', 'sqlPanelVisibilityChanged');\n\n      var sqlPanels;\n      this.sqlPanels = sqlPanels = pgBrowser.docker.findPanels('sql');\n\n      // We will listend to the visibility change of the SQL panel\n      pgBrowser.Events.on(\n        'pgadmin-browser:panel-sql:' + wcDocker.EVENT.VISIBILITY_CHANGED,\n        this.sqlPanelVisibilityChanged\n      );\n\n      pgBrowser.Events.on(\n        'pgadmin:browser:node:updated', function() {\n          if (this.sqlPanels && this.sqlPanels.length) {\n            $(this.sqlPanels[0]).data('node-prop', '');\n            this.sqlPanelVisibilityChanged(this.sqlPanels[0]);\n          }\n        }, this\n      );\n\n      // Hmm.. Did we find the SQL panel, and is it visible (opened)?\n      // If that is the case - we need to listen the browser tree selection\n      // events.\n      if (sqlPanels.length == 0) {\n        pgBrowser.Events.on(\n          'pgadmin-browser:panel-sql:' + wcDocker.EVENT.INIT,\n          function() {\n            if ((sqlPanels[0].isVisible()) || sqlPanels.length != 1) {\n              pgBrowser.Events.on(\n                'pgadmin-browser:tree:selected', this.showSQL\n              );\n            }\n          }.bind(this)\n          );\n      }\n      else {\n        if ((sqlPanels[0].isVisible()) || sqlPanels.length != 1) {\n          pgBrowser.Events.on('pgadmin-browser:tree:selected', this.showSQL);\n        }\n      }\n    },\n    showSQL: function(item, data, node) {\n      /**\n       * We can't start fetching the SQL immediately, it is possible - the user\n       * is just using keyboards to select the node, and just traversing\n       * through. We will wait for some time before fetching the Reversed\n       * Engineering SQL.\n       **/\n      this.timeout && clearTimeout(this.timeout);\n\n      var that = this;\n      this.timeout =  setTimeout(\n        function() {\n          var sql = '';\n          if (node) {\n            sql = '-- ' + gettext(\"No SQL could be generated for the selected object.\");\n            var self = this,\n                n_type = data._type,\n                n_value = -1,\n                treeHierarchy = node.getTreeNodeHierarchy(item);\n\n            // Avoid unnecessary reloads\n            if (_.isEqual($(that.sqlPanels[0]).data('node-prop'), treeHierarchy)) {\n              return;\n            }\n            // Cache the current IDs for next time\n            $(that.sqlPanels[0]).data('node-prop', treeHierarchy);\n\n            if (node.hasSQL) {\n\n              sql = '';\n              var url = node.generate_url(item, 'sql', data, true),\n                  timer;\n\n              $.ajax({\n                url: url,\n                type:'GET',\n                beforeSend: function(jqXHR, settings) {\n                  // Generate a timer for the request\n                  timer = setTimeout(function(){\n                  // notify user if request is taking longer than 1 second\n\n                  pgAdmin.Browser.editor.setValue(\n                    gettext(\"Retrieving data from the server...\")\n                  );\n                  }, 1000);\n                },\n                success: function(res) {\n                  if (pgAdmin.Browser.editor.getValue() != res) {\n                    pgAdmin.Browser.editor.setValue(res);\n                  }\n                  clearTimeout(timer);\n                },\n                error: function(xhr, error, message) {\n                  var _label = treeHierarchy[n_type].label;\n                  pgBrowser.Events.trigger(\n                    'pgadmin:node:retrieval:error', 'sql', xhr, error, message, item\n                  );\n                  if (\n                    !Alertify.pgHandleItemError(xhr, error, message, {\n                      item: item, info: treeHierarchy\n                    })\n                  ) {\n                    Alertify.pgNotifier(\n                      error, xhr,\n                      S(gettext(\"Error retrieving the information - %s\")).sprintf(\n                        message || _label\n                      ).value(),\n                      function() {\n                        console.log(arguments);\n                      }\n                    );\n                  }\n                }\n              });\n            }\n          }\n\n          if (sql != '') {\n            pgAdmin.Browser.editor.setValue(sql);\n          }\n        }, 400);\n    },\n    sqlPanelVisibilityChanged: function(panel) {\n      if (panel.isVisible()) {\n        var t = pgBrowser.tree,\n            i = t.selected(),\n            d = i && t.itemData(i),\n            n = i && d && pgBrowser.Nodes[d._type];\n\n        pgBrowser.ShowNodeSQL.showSQL.apply(pgBrowser.ShowNodeSQL, [i, d, n]);\n\n        // We will start listening the tree selection event.\n        pgBrowser.Events.on('pgadmin-browser:tree:selected', pgBrowser.ShowNodeSQL.showSQL);\n      } else {\n        // We don't need to listen the tree item selection event.\n        pgBrowser.Events.off('pgadmin-browser:tree:selected', pgBrowser.ShowNodeSQL.showSQL);\n      }\n    }\n  });\n\n  return pgBrowser.ShowNodeSQL;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/misc/sql/static/js/sql.js","define('misc.bgprocess', [\n  'sources/pgadmin', 'sources/gettext', 'sources/url_for', 'underscore',\n  'underscore.string', 'jquery', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.messages'\n], function(\n  pgAdmin, gettext, url_for, _, S, $, pgBrowser, alertify, pgMessages\n) {\n\n  pgBrowser.BackgroundProcessObsorver = pgBrowser.BackgroundProcessObsorver || {};\n\n  if (pgBrowser.BackgroundProcessObsorver.initialized) {\n    return pgBrowser.BackgroundProcessObsorver;\n  }\n\n  var BGProcess = function(info, notify) {\n    var self = this;\n    setTimeout(\n      function() {\n        self.initialize.apply(self, [info, notify]);\n      }, 1\n    );\n  };\n\n  _.extend(\n    BGProcess.prototype, {\n      initialize: function(info, notify) {\n        _.extend(this, {\n          details: false,\n          notify: (_.isUndefined(notify) || notify),\n          curr_status: null,\n          state: 0, // 0: NOT Started, 1: Started, 2: Finished\n          completed: false,\n\n          id: info['id'],\n          desc: null,\n          detailed_desc: null,\n          stime: null,\n          exit_code: null,\n          acknowledge: info['acknowledge'],\n          execution_time: null,\n          out: -1,\n          err: -1,\n          lot_more: false,\n\n          notifier: null,\n          container: null,\n          panel: null,\n          logs: $('<ol></ol>', {class: 'pg-bg-process-logs'})\n        });\n\n        if (this.notify) {\n          pgBrowser.Events && pgBrowser.Events.on(\n            'pgadmin-bgprocess:started:' + this.id,\n            function(process) {\n              if (!process.notifier)\n                process.show.apply(process);\n            }\n          );\n          pgBrowser.Events && pgBrowser.Events.on(\n            'pgadmin-bgprocess:finished:' + this.id,\n            function(process) {\n              if (!process.notifier)\n                process.show.apply(process);\n            }\n          )\n        }\n        var self = this;\n\n        setTimeout(\n          function() {\n            self.update.apply(self, [info]);\n          }, 1\n        );\n      },\n\n      bgprocess_url: function(type) {\n        switch (type) {\n          case 'status':\n            if (this.details && this.out != -1 && this.err != -1) {\n              return url_for(\n                'bgprocess.detailed_status', {\n                  'pid': this.id,\n                  'out': this.out,\n                  'err': this.err\n                }\n              );\n            }\n            return url_for('bgprocess.status', {'pid': this.id});\n          case 'acknowledge':\n            return url_for('bgprocess.acknowledge', {'pid': this.id});\n          default:\n            return url_for('bgprocess.list');\n        }\n      },\n\n      update: function(data) {\n        var self = this,\n            out = [],\n            err = [],\n            idx = 0;\n\n        if ('stime' in data)\n          self.stime = new Date(data.stime);\n\n        if ('execution_time' in data)\n          self.execution_time = parseFloat(data.execution_time);\n\n        if ('desc' in data)\n          self.desc = data.desc;\n\n        if ('details' in data)\n          self.detailed_desc = data.details;\n\n        if ('exit_code' in data)\n          self.exit_code = data.exit_code;\n\n        if ('out' in data) {\n          self.out = data.out && data.out.pos;\n\n          if (data.out && data.out.lines) {\n            out = data.out.lines;\n          }\n        }\n\n        if ('err' in data) {\n          self.err = data.err && data.err.pos;\n\n          if (data.err && data.err.lines) {\n            err = data.err.lines;\n          }\n        }\n        self.completed = self.completed || (\n          'err' in data && 'out' in data && data.err.done && data.out.done\n        ) || (\n          !self.details && !_.isNull(self.exit_code)\n        );\n\n        var io = 0,\n          ie = 0,\n          res = [],\n          escapeEl = document.createElement('textarea'),\n          escapeHTML = function(html) {\n            escapeEl.textContent = html;\n            return escapeEl.innerHTML;\n          };\n\n        while (io < out.length && ie < err.length) {\n          if (pgAdmin.natural_sort(out[io][0], err[ie][0]) <= 0){\n            res.push('<li class=\"pg-bg-res-out\">' + escapeHTML(out[io++][1]) + '</li>');\n          } else {\n            res.push('<li class=\"pg-bg-res-err\">' + escapeHTML(err[ie++][1]) + '</li>');\n          }\n        }\n\n        while (io < out.length) {\n          res.push('<li class=\"pg-bg-res-out\">' + escapeHTML(out[io++][1]) + '</li>');\n        }\n\n        while (ie < err.length) {\n          res.push('<li class=\"pg-bg-res-err\">' + escapeHTML(err[ie++][1]) + '</li>');\n        }\n        if (res.length) {\n          self.logs.append(res.join(''));\n        }\n\n        if (self.stime) {\n          self.curr_status = gettext('Started');\n\n          if (self.execution_time >= 2) {\n            self.curr_status = gettext['Running...'];\n          }\n\n          if (!_.isNull(self.exit_code)) {\n            if (self.exit_code == 0) {\n              self.curr_status = gettext('Successfully completed.');\n            } else {\n              self.curr_status = S(\n                gettext(\"Failed (exit code: %s).\")\n              ).sprintf(String(self.exit_code)).value();\n            }\n          }\n\n          if (self.state == 0 && self.stime) {\n            self.state = 1;\n            pgBrowser.Events && pgBrowser.Events.trigger(\n              'pgadmin-bgprocess:started:' + self.id, self, self\n            );\n          }\n\n          if (self.state == 1 && !_.isNull(self.exit_code)) {\n            self.state = 2;\n            pgBrowser.Events && pgBrowser.Events.trigger(\n              'pgadmin-bgprocess:finished:' + self.id, self, self\n            );\n          }\n\n          setTimeout(function() {self.show.apply(self)}, 10);\n        }\n\n        if (!self.completed) {\n          setTimeout(\n            function() {\n              self.status.apply(self);\n            }, 1000\n          );\n        }\n      },\n\n      status: function() {\n        var self = this;\n\n        $.ajax({\n          typs: 'GET',\n          timeout: 30000,\n          url: self.bgprocess_url('status'),\n          cache: false,\n          async: true,\n          contentType: \"application/json\",\n          success: function(res) {\n            setTimeout(function() { self.update(res); }, 10);\n          },\n          error: function(res) {\n            // Try after some time only if job id present\n            if (res.status != 410)\n              setTimeout(function() { self.update(res); }, 10000);\n          }\n        });\n      },\n\n      show: function() {\n        var self = this;\n\n        if (self.notify && !self.details) {\n          if (!self.notifier) {\n            var header = $('<div></div>', {\n                  class: \"h5 pg-bg-notify-header\"\n                }).append($('<span></span>').text(self.desc)),\n                content = $('<div class=\"pg-bg-bgprocess row\"></div>').append(\n                  header\n                ).append(\n                  $('<div></div>', {class: 'pg-bg-notify-body h6' }).append(\n                    $('<div></div>', {class: 'pg-bg-start col-xs-12' }).append(\n                      $('<div></div>').text(self.stime.toString())\n                    ).append(\n                      $('<div class=\"pg-bg-etime\"></div>')\n                    )\n                  )\n                ),\n                for_details = $('<div></div>', {\n                  class: \"col-xs-12 text-center pg-bg-click h6\"\n                }).append(\n                  $('<span></span>').text(gettext('Click here for details.'))\n                ).appendTo(content),\n                status = $('<div></div>', {\n                  class: \"pg-bg-status col-xs-12 h5 \" + ((self.exit_code === 0) ?\n                      'bg-success': (self.exit_code == 1) ?\n                      'bg-failed' : '')\n                }).appendTo(content),\n                close_me = $(\n                  '<div class=\"bg-close\"><i class=\"fa fa-close\"></i></div>'\n                ).appendTo(header);\n\n            self.container = content;\n            self.notifier = alertify.notify(\n              content.get(0), 'bg-bgprocess', 0, null\n            );\n\n            for_details.on('click', function(ev) {\n              ev = ev || window.event;\n              ev.cancelBubble = true;\n              ev.stopPropagation();\n\n              this.notifier.dismiss();\n              this.notifier = null;\n              this.completed = false;\n\n              this.show_detailed_view.apply(this);\n            }.bind(self));\n\n            close_me.on('click', function(ev) {\n              this.notifier.dismiss();\n              this.notifier = null;\n              this.acknowledge_server.apply(this);\n            }.bind(this));\n\n            // Do not close the notifier, when clicked on the container, which\n            // is a default behaviour.\n            content.on('click', function(ev) {\n              ev = ev || window.event;\n              ev.cancelBubble = true;\n              ev.stopPropagation();\n\n              return;\n            });\n          }\n          // TODO:: Formatted execution time\n          self.container.find('.pg-bg-etime').empty().append(\n            $('<span></span>').text(\n              String(self.execution_time)\n            )\n          ).append(\n            $('<span></span>').text(' ' + gettext('seconds'))\n          );\n          self.container.find('.pg-bg-status').empty().append(\n            self.curr_status\n          );\n        } else {\n          self.show_detailed_view.apply(self)\n        }\n      },\n\n      show_detailed_view: function() {\n        var self = this,\n            panel = this.panel,\n            is_new = false;\n\n        if (!self.panel) {\n          is_new = true;\n          panel = this.panel =\n              pgBrowser.BackgroundProcessObsorver.create_panel();\n\n          panel.title('Process Watcher - ' + _.escape(self.desc));\n          panel.focus();\n        }\n\n        var container = panel.$container,\n            status_class = (\n              (self.exit_code === 0) ?\n                'bg-bgprocess-success': (self.exit_code == 1) ?\n                  'bg-bgprocess-failed' : ''\n            ),\n            $logs = container.find('.bg-process-watcher'),\n            $header = container.find('.bg-process-details'),\n            $footer = container.find('.bg-process-footer');\n\n        if (is_new) {\n          // set logs\n          $logs.html(self.logs);\n\n          // set bgprocess detailed description\n          $header.find('.bg-detailed-desc').html(self.detailed_desc);\n        }\n\n        // set bgprocess start time\n        $header.find('.bg-process-stats .bgprocess-start-time').html(\n          self.stime\n        );\n\n        // set status\n        $footer.find('.bg-process-status p').removeClass().addClass(\n          status_class\n        ).html(self.curr_status);\n\n        // set bgprocess execution time\n        $footer.find('.bg-process-exec-time p').empty().append(\n          $('<span></span>').text(\n            String(self.execution_time)\n          )\n        ).append(\n          $('<span></span>').text(' ' + gettext('seconds'))\n        );\n\n        if (is_new) {\n          self.details = true;\n          self.err = 0;\n          self.out = 0;\n          setTimeout(\n            function() {\n              self.status.apply(self);\n            }, 1000\n          );\n\n          var resize_log_container = function($logs, $header, $footer) {\n            var h = $header.outerHeight() + $footer.outerHeight();\n            $logs.css('padding-bottom', h);\n          }.bind(panel, $logs, $header, $footer);\n\n          panel.on(wcDocker.EVENT.RESIZED, resize_log_container);\n          panel.on(wcDocker.EVENT.ATTACHED, resize_log_container);\n          panel.on(wcDocker.EVENT.DETACHED, resize_log_container);\n\n          resize_log_container();\n\n          panel.on(wcDocker.EVENT.CLOSED, function(process) {\n            process.panel = null;\n\n            process.details = false;\n            if (process.exit_code != null) {\n              process.acknowledge_server.apply(process);\n            }\n          }.bind(panel, this));\n        }\n      },\n\n      acknowledge_server: function() {\n        var self = this;\n        $.ajax({\n          type: 'PUT',\n          timeout: 30000,\n          url: self.bgprocess_url('acknowledge'),\n          cache: false,\n          async: true,\n          contentType: \"application/json\",\n          success: function(res) {\n            return;\n          },\n          error: function(res) {\n          }\n        });\n      }\n    });\n\n  _.extend(\n    pgBrowser.BackgroundProcessObsorver, {\n      bgprocesses: {},\n      init: function() {\n        var self = this;\n\n        if (self.initialized) {\n          return;\n        }\n        self.initialized = true;\n\n        setTimeout(\n          function() {\n            self.update_process_list.apply(self);\n          }, 1000\n        );\n\n        pgBrowser.Events.on(\n          'pgadmin-bgprocess:created',\n          function() {\n            setTimeout(\n              function() {\n                pgBrowser.BackgroundProcessObsorver.update_process_list(true);\n              }, 1000\n            );\n          }\n        )\n      },\n\n      update_process_list: function(recheck) {\n        var observer = this;\n\n        $.ajax({\n          typs: 'GET',\n          timeout: 30000,\n          url: url_for('bgprocess.list'),\n          cache: false,\n          async: true,\n          contentType: \"application/json\",\n          success: function(res) {\n            var cnt = 0;\n            if (!res || !_.isArray(res)) {\n              return;\n            }\n            for (var idx in res) {\n              var process = res[idx];\n              if ('id' in process) {\n                if (!(process.id in observer.bgprocesses)) {\n                  observer.bgprocesses[process.id] = new BGProcess(process);\n                }\n              }\n            }\n            if (recheck && res.length == 0) {\n              // Recheck after some more time\n              setTimeout(\n                function() {\n                  observer.update_process_list(false);\n                }, 3000\n              );\n            }\n          },\n          error: function(res) {\n            // FIXME:: What to do now?\n          }\n        });\n      },\n\n      create_panel: function() {\n        this.register_panel();\n\n        return pgBrowser.docker.addPanel(\n          'bg_process_watcher',\n          wcDocker.DOCK.FLOAT,\n          null, {\n            w: (screen.width < 700 ?\n                screen.width * 0.95 : screen.width * 0.5),\n                h: (screen.height < 500 ?\n                    screen.height * 0.95 : screen.height * 0.5),\n                    x: (screen.width < 700 ? '2%' : '25%'),\n                    y: (screen.height < 500 ? '2%' : '25%')\n          });\n      },\n\n      register_panel: function() {\n        var w = pgBrowser.docker,\n          panels = w.findPanels('bg_process_watcher');\n\n          if (panels && panels.length >= 1)\n            return;\n\n          var p = new pgBrowser.Panel({\n                name: 'bg_process_watcher',\n                showTitle: true,\n                isCloseable: true,\n                isPrivate: true,\n                content: '<div class=\"bg-process-details col-xs-12\">'+\n                  '<p class=\"bg-detailed-desc\"></p>'+\n                  '<div class=\"bg-process-stats\">'+\n                  '<span><b>' + gettext('Start time') + ': </b>'+\n                  '<span class=\"bgprocess-start-time\"></span>'+\n                  '</span></div>'+\n                  '</div>'+\n                  '<div class=\"bg-process-watcher col-xs-12\">'+\n                  '</div>'+\n                  '<div class=\"bg-process-footer col-xs-12\">'+\n                  '<div class=\"bg-process-status col-xs-6\">'+\n                  '<span><b>' + gettext('Status') + ':</b></span><p></p>'+\n                  '</div>'+\n                  '<div class=\"bg-process-exec-time col-xs-6\">'+\n                  '<div class=\"exec-div pull-right\">'+\n                  '<span><b>' + gettext('Execution time') + ':</b></span><p></p>'+\n                  '</div>'+\n                  '</div>'+\n                  '</div>',\n                onCreate: function(myPanel, $container) {\n                  $container.addClass('pg-no-overflow');\n                }\n              });\n          p.load(pgBrowser.docker);\n      }\n    });\n\n  return pgBrowser.BackgroundProcessObsorver;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/misc/bgprocess/static/js/bgprocess.js","define('pgadmin.node.server_group', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'sources/pgadmin',\n  'backbone', 'pgadmin.browser', 'pgadmin.browser.node'\n], function(gettext, url_for, $, _, pgAdmin, Backbone) {\n\n  if (!pgAdmin.Browser.Nodes['server_group']) {\n    pgAdmin.Browser.Nodes['server_group'] = pgAdmin.Browser.Node.extend({\n      parent_type: null,\n      type: 'server_group',\n      dialogHelp: url_for('help.static', {'filename': 'server_group_dialog.html'}),\n      label: gettext('Server Group'),\n      width: '350px',\n      height: '250px',\n      is_collection: true,\n      Init: function() {\n        /* Avoid multiple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgAdmin.Browser.add_menus([{\n          name: 'create_server_group', node: 'server_group', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 1, label: gettext('Server Group...'),\n          data: {'action': 'create'}, icon: 'wcTabIcon icon-server_group'\n        }]);\n      },\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          id: undefined,\n          name: null\n        },\n        schema: [\n          {\n            id: 'id', label: gettext('ID'), type: 'int', group: null,\n            mode: ['properties']\n          },{\n            id: 'name', label: gettext('Name'), type: 'text', group: null,\n            mode: ['properties', 'edit', 'create']\n          }\n        ],\n        validate: function(attrs, options) {\n           var err = {},\n              errmsg = null;\n          this.errorModel.clear();\n\n          if (!this.isNew() && 'id' in this.changed) {\n            errmsg = gettext('The ID cannot be changed.');\n            this.errorModel.set('id', errmsg);\n            return errmsg;\n          }\n          if (_.isUndefined(this.get('name')) ||\n            _.isNull(this.get('name')) ||\n            String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            errmsg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', errmsg);\n            return errmsg;\n          }\n          return null;\n        }\n      }),\n      canDrop: function(itemData, item, data) {\n        if(itemData.can_delete) {\n          return true;\n        }\n        return false;\n      },\n      canDelete: function(i) {\n        var s = pgAdmin.Browser.tree.siblings(i, true);\n\n        /* This is the only server group - we can't remove it*/\n        if (!s || s.length == 0) {\n          return false;\n        }\n        return true;\n      }\n    });\n  }\n\n  return pgAdmin.Browser.Nodes['server_group'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/static/js/server_group.js","define('pgadmin.node.database', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser.utils', 'pgadmin.alertifyjs',\n  'pgadmin.browser.collection', 'pgadmin.browser.server.privilege',\n  'pgadmin.browser.server.variable'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, Alertify) {\n\n  if (!pgBrowser.Nodes['coll-database']) {\n    var databases = pgBrowser.Nodes['coll-database'] =\n      pgBrowser.Collection.extend({\n        node: 'database',\n        label: gettext('Databases'),\n        type: 'coll-database',\n        columns: ['name', 'datowner', 'comments'],\n        hasStatistics: true,\n        statsPrettifyFields: ['Size', 'Size of temporary files']\n      });\n  };\n\n  if (!pgBrowser.Nodes['database']) {\n    pgBrowser.Nodes['database'] = pgBrowser.Node.extend({\n      parent_type: 'server',\n      type: 'database',\n      sqlAlterHelp: 'sql-alterdatabase.html',\n      sqlCreateHelp: 'sql-createdatabase.html',\n      dialogHelp: url_for('help.static', {'filename': 'database_dialog.html'}),\n      hasSQL: true,\n      hasDepends: true,\n      hasStatistics: true,\n      statsPrettifyFields: ['Size', 'Size of temporary files'],\n      canDrop: function(node) {\n        return node.canDrop;\n      },\n      label: gettext('Database'),\n      node_image: function() {\n        return 'pg-icon-database';\n      },\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_database_on_server', node: 'server', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Database...'),\n          icon: 'wcTabIcon pg-icon-database', data: {action: 'create'},\n          enable: 'can_create_database'\n        },{\n          name: 'create_database_on_coll', node: 'coll-database', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Database...'),\n          icon: 'wcTabIcon pg-icon-database', data: {action: 'create'},\n          enable: 'can_create_database'\n        },{\n          name: 'create_database', node: 'database', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Database...'),\n          icon: 'wcTabIcon pg-icon-database', data: {action: 'create'},\n          enable: 'can_create_database'\n        },{\n          name: 'connect_database', node: 'database', module: this,\n          applies: ['object', 'context'], callback: 'connect_database',\n          category: 'connect', priority: 4, label: gettext('Connect Database...'),\n          icon: 'fa fa-link', enable : 'is_not_connected'\n        },{\n          name: 'disconnect_database', node: 'database', module: this,\n          applies: ['object', 'context'], callback: 'disconnect_database',\n          category: 'drop', priority: 5, label: gettext('Disconnect Database...'),\n          icon: 'fa fa-chain-broken', enable : 'is_connected'\n        }]);\n\n        _.bindAll(this, 'connection_lost');\n        pgBrowser.Events.on(\n          'pgadmin:database:connection:lost', this.connection_lost\n        );\n      },\n      can_create_database: function(node, item) {\n        var treeData = this.getTreeNodeHierarchy(item),\n            server = treeData['server'];\n\n        return server.connected && server.user.can_create_db;\n      },\n      is_not_connected: function(node) {\n        return (node && node.connected != true && node.allowConn == true);\n      },\n      is_connected: function(node) {\n        return (node && node.connected == true && node.canDisconn == true);\n      },\n      is_conn_allow: function(node) {\n        return (node && node.allowConn == true)\n      },\n      connection_lost: function(i, resp, server_connected) {\n        if (pgBrowser.tree) {\n          var t = pgBrowser.tree,\n              info = i && this.getTreeNodeHierarchy(i),\n              s = null,\n              d = i && t.itemData(i),\n              self = this,\n              _i = i;\n\n          while (d && d._type != 'database') {\n            i = t.parent(i);\n            d = i && t.itemData(i);\n          }\n\n          if (i && d) {\n            if (!d.allowConn) return false;\n            if (_.isUndefined(d.is_connecting) || !d.is_connecting) {\n              d.is_connecting = true;\n\n              var disconnect = function(_i, _d) {\n                    if (_d._id == this._id) {\n                      d.is_connecting = false;\n                      pgBrowser.Events.off(\n                        'pgadmin:database:connect:cancelled', disconnect\n                      );\n                      _i = _i && t.parent(_i);\n                      _d = _i && t.itemData(_i);\n                      if (_i && _d) {\n                        pgBrowser.Events.trigger(\n                          'pgadmin:server:disconnect',\n                          {item: _i, data: _d}, false\n                        );\n                      }\n                    }\n                  };\n\n              pgBrowser.Events.on(\n                'pgadmin:database:connect:cancelled', disconnect\n              );\n              if (server_connected) {\n                connect(self, d, t, i, true);\n                return;\n              }\n              Alertify.confirm(\n                gettext('Connection lost'),\n                gettext('Would you like to reconnect to the database?'),\n                function() {\n                  connect(self, d, t, i, true);\n                },\n                function() {\n                  d.is_connecting = false;\n                  t.unload(i);\n                  t.setInode(i);\n                  t.addIcon(i, {icon: 'icon-database-not-connected'});\n                  pgBrowser.Events.trigger(\n                    'pgadmin:database:connect:cancelled', i, d, self\n                  );\n                });\n            }\n          }\n        }\n      },\n      callbacks: {\n        /* Connect the database */\n        connect_database: function(args){\n          var input = args || {};\n          obj = this,\n          t = pgBrowser.tree,\n          i = input.item || t.selected(),\n          d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d || d.label == \"template0\")\n            return false;\n\n          connect_to_database(obj, d, t, i, true);\n          return false;\n        },\n        /* Disconnect the database */\n        disconnect_database: function(args) {\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          Alertify.confirm(\n            gettext('Disconnect the database'),\n            S(gettext('Are you sure you want to disconnect the database - %s?')).sprintf(d.label).value(),\n            function(evt) {\n              var data = d;\n              $.ajax({\n                url: obj.generate_url(i, 'connect', d, true),\n                type:'DELETE',\n                success: function(res) {\n                  if (res.success == 1) {\n                    var prv_i = t.parent(i);\n                    Alertify.success(res.info);\n                    t.removeIcon(i);\n                    data.connected = false;\n                    data.icon = 'icon-database-not-connected';\n                    t.addIcon(i, {icon: data.icon});\n                    t.unload(i);\n                    t.setInode(i);\n                    setTimeout(function() {\n                        t.select(prv_i);\n                    }, 10);\n\n                  }\n                  else {\n                    try {\n                      Alertify.error(res.errormsg);\n                    } catch (e) {}\n                    t.unload(i);\n                  }\n                },\n                error: function(xhr, status, error) {\n                  try {\n                    var err = $.parseJSON(xhr.responseText);\n                    if (err.success == 0) {\n                      Alertify.error(err.errormsg);\n                    }\n                  } catch (e) {}\n                  t.unload(i);\n                }\n              });\n          },\n          function(evt) {\n              return true;\n          });\n\n          return false;\n        },\n\n        /* Connect the database (if not connected), before opening this node */\n        beforeopen: function(item, data) {\n          if(!data || data._type != 'database' || data.label == \"template0\") {\n            return false;\n          }\n\n          pgBrowser.tree.addIcon(item, {icon: data.icon});\n          if (!data.connected && data.allowConn) {\n            connect_to_database(this, data, pgBrowser.tree, item, true);\n            return false;\n          }\n          return true;\n        },\n\n        selected: function(item, data) {\n          if(!data || data._type != 'database') {\n            return false;\n          }\n\n          pgBrowser.tree.addIcon(item, {icon: data.icon});\n          if (!data.connected && data.allowConn) {\n            connect_to_database(this, data, pgBrowser.tree, item, false);\n            return false;\n          }\n\n          return pgBrowser.Node.callbacks.selected.apply(this, arguments);\n        },\n\n        refresh: function(cmd, i) {\n          var self = this,\n              t = pgBrowser.tree,\n              item = i || t.selected(),\n              d = t.itemData(item);\n\n          if (!d.allowConn) return;\n          pgBrowser.Node.callbacks.refresh.apply(this, arguments);\n        }\n      },\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          owner: undefined,\n          comment: undefined,\n          encoding: 'UTF8',\n          template: undefined,\n          tablespace: undefined,\n          collation: undefined,\n          char_type: undefined,\n          datconnlimit: -1,\n          datallowconn: undefined,\n          variables: [],\n          privileges: [],\n          securities: [],\n          datacl: [],\n          deftblacl: [],\n          deffuncacl: [],\n          defseqacl: [],\n          is_template: false,\n          deftypeacl: []\n        },\n\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            this.set({'datowner': userInfo.name}, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n\n        schema: [{\n          id: 'name', label: gettext('Database'), cell: 'string',\n          editable: false, type: 'text'\n        },{\n          id: 'did', label: gettext('OID'), cell: 'string', mode: ['properties'],\n          editable: false, type: 'text'\n        },{\n          id: 'datowner', label: gettext('Owner'),\n          editable: false, type: 'text', node: 'role',\n          control: Backform.NodeListByNameControl, select2: { allowClear: false }\n        },{\n          id: 'acl', label: gettext('Privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'tblacl', label: gettext('Default TABLE privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'seqacl', label: gettext('Default SEQUENCE privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'funcacl', label: gettext('Default FUNCTION privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'typeacl', label: gettext('Default TYPE privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true, min_version: 90200\n        },{\n          id: 'comments', label: gettext('Comment'),\n          editable: false, type: 'multiline'\n        },{\n          id: 'encoding', label: gettext('Encoding'),\n          editable: false, type: 'text', group: gettext('Definition'),\n          disabled: function(m) { return !m.isNew(); }, url: 'get_encodings',\n          control: 'node-ajax-options', cache_level: 'server'\n        },{\n          id: 'template', label: gettext('Template'),\n          editable: false, type: 'text', group: gettext('Definition'),\n          disabled: function(m) { return !m.isNew(); },\n          control: 'node-list-by-name', url: 'get_databases', cache_level: 'server',\n          select2: { allowClear: false }, mode: ['create'],\n          transform: function(data, cell) {\n            var res = [],\n                control = cell || this,\n                label = control.model.get('name');\n\n            if (!control.model.isNew()) {\n              res.push({label: label, value: label});\n            }\n            else {\n              if (data && _.isArray(data)) {\n                _.each(data, function(d) {\n                  res.push({label: d.label, value: d.label,\n                            image: 'pg-icon-database'});\n                })\n              }\n            }\n            return res;\n          }\n        },{\n          id: 'spcname', label: gettext('Tablespace'),\n          editable: false, type: 'text', group: gettext('Definition'),\n          control: 'node-list-by-name', node: 'tablespace',\n          select2: { allowClear: false },\n          filter: function(m) {\n            if (m.label == \"pg_global\") return false;\n            else return true;\n          }\n        },{\n          id: 'datcollate', label: gettext('Collation'),\n          editable: false, type: 'text', group: gettext('Definition'),\n          disabled: function(m) { return !m.isNew(); }, url: 'get_ctypes',\n          control: 'node-ajax-options', cache_level: 'server'\n        },{\n          id: 'datctype', label: gettext('Character type'),\n          editable: false, type: 'text', group: gettext('Definition'),\n          disabled: function(m) { return !m.isNew(); }, url: 'get_ctypes',\n          control: 'node-ajax-options', cache_level: 'server'\n        },{\n          id: 'datconnlimit', label: gettext('Connection limit'),\n          editable: false, type: 'int', group: gettext('Definition'), min: -1\n        },{\n          id: 'is_template', label: gettext('Template?'),\n          editable: false, type: 'switch', group: gettext('Definition'),\n          disabled: true,  mode: ['properties', 'edit'],\n          options: {\n            'onText': gettext('Yes'), 'offText': gettext('No'),\n            'onColor': 'success', 'offColor': 'primary',\n            'size': 'small'\n          }\n        },{\n          id: 'datallowconn', label: gettext('Allow connections?'),\n          editable: false, type: 'switch', group: gettext('Definition'),\n          mode: ['properties'], disabled: true,\n          options: {\n            'onText': 'Yes', 'offText': 'No',\n            'onColor': 'success', 'offColor': 'primary',\n            'size': 'small'\n          }\n        },{\n          id: 'datacl', label: gettext('Privileges'), type: 'collection',\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n            privileges: ['C', 'T', 'c']\n          }), uniqueCol : ['grantee', 'grantor'], editable: false,\n          group: gettext('Security'), mode: ['edit', 'create'],\n          canAdd: true, canDelete: true, control: 'unique-col-collection',\n        },{\n          id: 'variables', label: gettext('Parameters'), type: 'collection',\n          model: pgBrowser.Node.VariableModel.extend({keys:['name', 'role']}), editable: false,\n          group: gettext('Parameters'), mode: ['edit', 'create'],\n          canAdd: true, canEdit: false, canDelete: true, hasRole: true,\n          control: Backform.VariableCollectionControl, node: 'role'\n        },{\n          id: 'seclabels', label: gettext('Security Labels'),\n          model: pgBrowser.SecLabelModel,\n          editable: false, type: 'collection', canEdit: false,\n          group: gettext('Security'), canDelete: true,\n          mode: ['edit', 'create'], canAdd: true,\n          control: 'unique-col-collection', uniqueCol : ['provider'],\n          min_version: 90200\n        },{\n          type: 'nested', control: 'tab', group: gettext('Default Privileges'),\n          mode: ['edit'],\n          schema:[{\n              id: 'deftblacl', model: pgBrowser.Node.PrivilegeRoleModel.extend(\n              {privileges: ['a', 'r', 'w', 'd', 'D', 'x', 't']}), label: gettext('Default Privileges: Tables'),\n              editable: false, type: 'collection', group: gettext('Tables'),\n              mode: ['edit', 'create'], control: 'unique-col-collection',\n              canAdd: true, canDelete: true, uniqueCol : ['grantee', 'grantor']\n            },{\n              id: 'defseqacl', model: pgBrowser.Node.PrivilegeRoleModel.extend(\n              {privileges: ['r', 'w', 'U']}), label: gettext('Default Privileges: Sequences'),\n              editable: false, type: 'collection', group: gettext('Sequences'),\n              mode: ['edit', 'create'], control: 'unique-col-collection',\n              canAdd: true, canDelete: true, uniqueCol : ['grantee', 'grantor']\n            },{\n              id: 'deffuncacl', model: pgBrowser.Node.PrivilegeRoleModel.extend(\n              {privileges: ['X']}), label: gettext('Default Privileges: Functions'),\n              editable: false, type: 'collection', group: gettext('Functions'),\n              mode: ['edit', 'create'], control: 'unique-col-collection',\n              canAdd: true, canDelete: true, uniqueCol : ['grantee', 'grantor']\n            },{\n              id: 'deftypeacl', model: pgBrowser.Node.PrivilegeRoleModel.extend(\n              {privileges: ['U']}),  label: gettext('Default Privileges: Types'),\n              editable: false, type: 'collection', group: 'deftypesacl_group',\n              mode: ['edit', 'create'], control: 'unique-col-collection',\n              canAdd: true, canDelete: true, uniqueCol : ['grantee', 'grantor'],\n              min_version: 90200\n            },{\n              id: 'deftypesacl_group', type: 'group', label: gettext('Types'),\n              mode: ['edit', 'create'], min_version: 90200\n            }\n          ]\n        }\n        ],\n        validate: function(keys) {\n          var name = this.get('name');\n          if (_.isUndefined(name) || _.isNull(name) ||\n            String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('name');\n          }\n          return null;\n        }\n      })\n    });\n\n    pgBrowser.SecurityGroupSchema = {\n      id: 'security', label: gettext('Security'), type: 'group',\n      // Show/Hide security group for nodes under the catalog\n      visible: function(args) {\n        if (args && 'node_info' in args) {\n          // If node_info is not present in current object then it might in its\n          // parent in case if we used sub node control\n          var node_info = args.node_info || args.handler.node_info;\n          return 'catalog' in node_info ? false : true;\n        }\n        return true;\n      }\n    };\n\n    function connect_to_database(obj, data, tree, item, interactive) {\n        connect(obj, data, tree, item)\n    }\n\n    function connect(obj, data, tree, item, _wasConnected) {\n      var wasConnected = _wasConnected || data.connected,\n          onFailure = function(\n            xhr, status, error, _model, _data, _tree, _item, _status\n          ) {\n            if (!_status) {\n              tree.setInode(_item);\n              tree.addIcon(_item, {icon: 'icon-database-not-connected'});\n            }\n\n            Alertify.pgNotifier('error', xhr, error, function(msg) {\n              setTimeout(function() {\n                Alertify.dlgServerPass(\n                  gettext('Connect to database'),\n                  msg, _model, _data, _tree, _item, _status,\n                  onSuccess, onFailure, onCancel\n                ).resizeTo();\n              }, 100);\n            });\n          },\n          onSuccess = function(\n            res, model, data, tree, item, connected\n          ) {\n            data.is_connecting = false;\n            if (!connected) {\n              tree.deselect(item);\n              tree.setInode(item);\n            }\n\n            if (res && res.data) {\n              if(typeof res.data.connected == 'boolean') {\n                data.connected = res.data.connected;\n              }\n              if (typeof res.data.icon == 'string') {\n                tree.removeIcon(item);\n                data.icon = res.data.icon;\n                tree.addIcon(item, {icon: data.icon});\n              }\n\n              Alertify.success(res.info);\n              obj.trigger('connected', obj, item, data);\n              pgBrowser.Events.trigger(\n                'pgadmin:database:connected', item, data\n              );\n\n              if (!connected) {\n                setTimeout(function() {\n                  tree.select(item);\n                  tree.open(item);\n                }, 10);\n              }\n            }\n          },\n          onCancel = function(_tree, _item, _data, _status) {\n            _data.is_connecting = false;\n            var server = _tree.parent(_item);\n            _tree.unload(_item);\n            _tree.setInode(_item);\n            _tree.removeIcon(_item);\n            _tree.addIcon(_item, {icon: 'icon-database-not-connected'});\n            obj.trigger('connect:cancelled', obj, _item, _data);\n            pgBrowser.Events.trigger(\n              'pgadmin:database:connect:cancelled', _item, _data, obj\n            );\n            _tree.select(server);\n          };\n\n      $.post(\n        obj.generate_url(item, \"connect\", data, true)\n      ).done(function(res) {\n        if (res.success == 1) {\n          return onSuccess(res, obj, data, tree, item, wasConnected);\n        }\n      }).fail(function(xhr, status, error) {\n        return onFailure(\n          xhr, status, error, obj, data, tree, item, wasConnected\n        );\n      });\n    }\n  }\n\n  return pgBrowser.Nodes['coll-database'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/static/js/database.js","define('pgadmin.node.role', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.backform', 'select2', 'pgadmin.browser.collection',\n  'pgadmin.browser.node.ui', 'pgadmin.browser.server.variable'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify, Backform) {\n\n  if (!pgBrowser.Nodes['coll-role']) {\n    var role = pgAdmin.Browser.Nodes['coll-role'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'role',\n        type: 'coll-role',\n        columns: [\n          'rolname', 'rolvaliduntil', 'rolconnlimit', 'rolcanlogin',\n          'rolsuper', 'rolcreaterole', 'rolcreatedb', 'rolcatupdate',\n          'rolinherit', 'rolreplication'\n        ]\n      });\n  };\n\n  var SecurityModel = pgAdmin.Browser.SecurityModel =\n        pgAdmin.Browser.SecurityModel || pgAdmin.Browser.Node.Model.extend({\n    defaults: {\n      provider: null,\n      label: null\n    },\n    schema: [{\n      id: 'provider', label: gettext('Provider'),\n      type: 'text', disabled: false,\n      cellHeaderClasses:'width_percent_50'\n    },{\n      id: 'label', label: gettext('Security Label'),\n      type: 'text', disabled: false,\n    }],\n    validate: function() {\n      var err = {},\n          errmsg = null,\n          data = this.toJSON();\n\n      if (_.isUndefined(data.provider) ||\n        _.isNull(data.provider) ||\n        String(data.provider).replace(/^\\s+|\\s+$/g, '') == '') {\n        var msg = gettext('Please specify the value for all the security providers.');\n\n        this.errorModel.set('provider', msg);\n        return msg;\n      } else {\n        this.errorModel.unset('provider');\n      }\n\n      if (_.isUndefined(data.label) ||\n        _.isNull(data.label) ||\n        String(data.label).replace(/^\\s+|\\s+$/g, '') == '') {\n        var msg = gettext('Please specify the value for all the security providers.') ;\n\n        this.errorModel.set('label', msg);\n        return msg;\n      } else {\n        this.errorModel.unset('label');\n      }\n\n      return null;\n    }\n  });\n\n  var switchOptions = {\n    'onText': 'Yes', 'offText': 'No',\n    'size': 'mini'\n  };\n\n  var RoleCustomSwitchControl = Backform.SwitchControl.extend({\n    template: _.template([\n      '<label class=\"control-label pg-el-sm-9 pg-el-xs-12\"><%=label%></label>',\n      '<div class=\"pgadmin-controls pg-el-sm-3 pg-el-xs-12\">',\n      '  <div class=\"checkbox\" style=\"float:right\">',\n      '    <label>',\n      '      <input type=\"checkbox\" class=\"<%=extraClasses.join(\\' \\')%>\" name=\"<%=name%>\" <%=value ? \"checked=\\'checked\\'\" : \"\"%> <%=disabled ? \"disabled\" : \"\"%> <%=required ? \"required\" : \"\"%> />',\n      '    </label>',\n      '  </div>',\n      '  <% if (helpMessage && helpMessage.length) { %>',\n      '    <span class=\"<%=Backform.helpMessageClassName%>\"><%=helpMessage%></span>',\n      '  <% } %>',\n      '</div>',\n    ].join(\"\\n\"))\n  });\n\n  var RoleMembersControl = Backform.Control.extend({\n    defaults: _.defaults(\n                {extraClasses: ['col-xs-12 col-sm-12 col-md-12']},\n                Backform.NodeListByNameControl.prototype.defaults\n                ),\n    initialize: function() {\n      Backform.NodeListByNameControl.prototype.initialize.apply(this, arguments);\n    },\n    formatter: {\n      fromRaw: function (rawData, model) {\n        var res = _.isObject(rawData) ? rawData : JSON.parse(rawData);\n\n        return _.pluck(res, 'role');\n      },\n      toRaw: function (formattedData, model) {\n        return formattedData;\n      }\n    },\n    template: _.template([\n      '<label class=\"<%=Backform.controlLabelClassName%>\"><%=label%></label>',\n      '<div class=\"<%=Backform.controlsClassName%>\">',\n      '  <select multiple=\"multiple\" style=\"width:100%;\" class=\"pgadmin-controls <%=extraClasses.join(\\' \\')%>\" name=\"<%=name%>\" value=\"<%-JSON.stringify(value)%>\" <%=disabled ? \"disabled\" : \"\"%> <%=required ? \"required\" : \"\"%>>',\n      '    <% for (var i=0; i < options.length; i++) { %>',\n      '      <% var option = options[i]; %>',\n      '      <option value=<%-option.value%> data-icon=<%-option.image%> <%=value != null && _.indexOf(value, option.value) != -1 ? \"selected\" : \"\"%> <%=option.disabled ? \"disabled=\\'disabled\\'\" : \"\"%>><%-option.label%></option>',\n      '    <% } %>',\n      '  </select>',\n      '  <% if (helpMessage && helpMessage.length) { %>',\n      '    <span class=\"<%=Backform.helpMessageClassName%>\"><%=helpMessage%></span>',\n      '  <% } %>',\n      '</div>',\n      ].join(\"\\n\")),\n    selectionTemplate: _.template([\n      '<span>',\n      '  <span class=\"wcTabIcon <%= optimage %>\"></span>',\n      '  <span><%= opttext %><span>',\n      '  <% if (checkbox) { %>',\n      '  <input type=\"checkbox\" <%=disabled ? \"disabled=\\'disabled\\'\" : \"\"%>/>',\n      '  <% } %>',\n      '</span>'\n    ].join(\"\\n\")),\n    events: {\"change select\": \"onChange\"},\n    getValueFromDOM: function() {\n      var res = [];\n\n      this.$el.find(\"select\").find(':selected').each(function() {\n        res.push($(this).attr('value'));\n      });\n\n      return res;\n    },\n    render: function() {\n      var field = _.defaults(this.field.toJSON(), this.defaults),\n          attributes = this.model.toJSON(),\n          attrArr = field.name.split('.'),\n          name = attrArr.shift(),\n          path = attrArr.join('.'),\n          rawValue = this.keyPathAccessor(attributes[name], path),\n          data = _.extend(field, {\n            rawValue: rawValue,\n            value: this.formatter.fromRaw(rawValue, this.model),\n            attributes: attributes,\n            formatter: this.formatter\n          }),\n          evalF = function(f, d, m) {\n            return (_.isFunction(f) ? !!f.apply(d, [m]) : !!f);\n          },\n          evalASFunc = function(f, d, m) {\n             return (_.isFunction(f) ? f.apply(d, [m]) : f);\n          };\n\n      // Evaluate the disabled, visible, and required option\n      _.extend(data, {\n        disabled: evalF(data.disabled, data, this.model),\n        visible:  evalF(data.visible, data, this.model),\n        required: evalF(data.required, data, this.model),\n        helpMessage: evalASFunc(data.helpMessage, data, this.model)\n      });\n      // Evaluation the options\n      if (_.isFunction(data.options)) {\n        try {\n          data.options = data.options.apply(this)\n        } catch(e) {\n          // Do nothing\n          data.options = []\n          this.model.trigger('pgadmin-view:transform:error', m, self.field, e);\n        }\n      }\n\n      // Clean up first\n      this.$el.removeClass(Backform.hiddenClassName);\n\n      if (!data.visible)\n        this.$el.addClass(Backform.hiddenClassName);\n\n      this.$el.html(this.template(data)).addClass(field.name);\n      this.updateInvalid();\n\n      var self = this,\n          collection = this.model.get(this.field.get('name')),\n          formatState = function(opt) {\n            if (!opt.id) {\n              return opt.text;\n            }\n\n            var optimage = $(opt.element).data('icon');\n\n            if(!optimage){\n              return opt.text;\n            } else {\n              var d = _.extend(\n                 {}, data, {\n                   'opttext': _.escape(opt.text),\n                   'optimage': optimage,\n                   'checkbox': false\n                 });\n              return $(self.selectionTemplate(d));\n            }\n          },\n          formatSelection = function (opt) {\n\n            if (!opt.id) {\n              return opt.text;\n            }\n\n            var optimage = $(opt.element).data('icon'),\n                grantUpdate = function(ev) {\n\n                  _.each(collection.where({role: opt.id}), function(m) {\n                    m.set('admin', $(ev.target).is(\":checked\"));\n                  });\n\n                  return false;\n                };\n\n            if(!optimage){\n              return opt.text;\n            } else {\n              var d = _.extend(\n                 {}, data, {\n                   'opttext': _.escape(opt.text),\n                   'optimage': optimage,\n                   'checkbox': true\n                 }),\n                 j = $(self.selectionTemplate(d));\n\n              // Update the checkbox lazy\n              setTimeout(\n                function() {\n                  _.each(collection.where({role: opt.id}), function(m) {\n                    j.find('input').prop('checked', m.get('admin'));\n                  });\n                }, 200);\n\n              (j.find('input')).on('change', grantUpdate);\n\n              return j;\n            }\n          };\n\n      this.$el.find('select').select2({\n        templateResult: formatState,\n        templateSelection: formatSelection,\n        multiple: true,\n        tags: true,\n        allowClear: data.disabled ? false : true,\n        placeholder: data.disabled ? \"\" : gettext(\"Select members\"),\n        width: 'style'\n      }).on(\"change\", function(e) {\n        $(e.target).find(':selected').each(function() {\n        });\n      });\n\n      return this;\n    },\n    onChange: function(e) {\n      var model = this.model,\n          $el = $(e.target),\n          attrArr = this.field.get(\"name\").split('.'),\n          name = attrArr.shift(),\n          path = attrArr.join('.'),\n          vals = this.getValueFromDOM(),\n          collection = model.get(name),\n          removed = [];\n\n      this.stopListening(this.model, \"change:\" + name, this.render);\n\n      /*\n       * Iterate through all the values, and find out how many are already\n       * present in the collection.\n       */\n      collection.each(function(m) {\n        var role = m.get('role'),\n            idx = _.indexOf(vals, role);\n\n        if (idx > -1) {\n          vals.splice(idx, 1);\n        } else {\n          removed.push(role);\n        }\n      });\n\n      /*\n       * Adding new values\n       */\n      _.each(vals, function(v) {\n        collection.add({role: v});\n      });\n\n      /*\n       * Removing unwanted!\n       */\n      _.each(removed, function(v) {\n        collection.remove(collection.where({role: v}));\n      });\n\n      this.listenTo(this.model, \"change:\" + name, this.render);\n    }\n  });\n\n  if (!pgBrowser.Nodes['role']) {\n    var role = pgAdmin.Browser.Nodes['role'] = pgAdmin.Browser.Node.extend({\n      parent_type: 'server',\n      type: 'role',\n      sqlAlterHelp: 'sql-alterrole.html',\n      sqlCreateHelp: 'sql-createrole.html',\n      dialogHelp: url_for('help.static', {'filename': 'role_dialog.html'}),\n      label: gettext('Login/Group Role'),\n      hasSQL: true,\n      canDrop: function(node, item) {\n        var treeData = this.getTreeNodeHierarchy(item),\n            server = treeData['server'];\n        /*\n        To Drop a role:\n          1) If Role we are deleting is superuser then User must be superuser\n          2) And for non-superuser roles User must have Create Role permission\n        */\n\n        // Role you are trying to drop is Superuser ?\n        if(node.is_superuser) {\n            return server.connected && server.user.is_superuser;\n        }\n        // For non super users\n        return server.connected && server.user.can_create_role;\n      },\n      hasDepends: true,\n      node_label: function(r) {\n        return r.label;\n      },\n      node_image: function(r) {\n        if (r == null || r == undefined)\n            return 'icon-role';\n        return (r.can_login ? 'icon-role' : 'icon-group');\n      },\n      title: function(d) {\n        if (!d) {\n          return this.label;\n        }\n        if (d.can_login) {\n          return gettext('Login Role') + ' - ' + d.label;\n        }\n        return gettext('Group Role') + ' - ' + d.label;\n      },\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_role_on_server', node: 'server', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Login/Group Role...'),\n          icon: 'wcTabIcon icon-role', data: {action: 'create'},\n          enable: 'can_create_role'\n        },{\n          name: 'create_role_on_roles', node: 'coll-role', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Login/Group Role...'),\n          icon: 'wcTabIcon icon-role', data: {action: 'create'},\n          enable: 'can_create_role'\n        },{\n          name: 'create_role', node: 'role', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Login/Group Role...'),\n          icon: 'wcTabIcon icon-role', data: {action: 'create'},\n          enable: 'can_create_role'\n        }]);\n      },\n      can_create_role: function(node, item) {\n        var treeData = this.getTreeNodeHierarchy(item),\n            server = treeData['server'];\n\n        return server.connected && server.user.can_create_role;\n      },\n      model: pgAdmin.Browser.Node.Model.extend({\n        idAttribute: 'oid',\n        defaults: {\n          oid: null,\n          rolname: undefined,\n          rolcanlogin: false,\n          rolpassword: null,\n          rolconnlimit: -1,\n          rolsuper: false,\n          rolcreaterole: false,\n          rolcreatedb: false,\n          rolinherit: true,\n          rolcatupdate: false,\n          rolreplication: false,\n          rolmembership: [],\n          rolvaliduntil: null,\n          seclabels: [],\n          variables: []\n        },\n        schema: [{\n          id: 'rolname', label: gettext('Name'), type: 'text',\n          disabled: 'readonly'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string', mode: ['properties'],\n          editable: false, type: 'text', visible: true, disabled: true\n        },{\n          id: 'rolpassword', label: gettext('Password'), type: 'password',\n          group: gettext('Definition'), mode: ['edit', 'create'],\n          control: 'input', deps: ['rolcanlogin'], retype: true,\n          cell: 'string', disabled: function(m) {\n            if (!m.isNew()) {\n              var user = this.node_info.server.user;\n\n              return (!(user.is_superuser || user.can_create_role) &&\n                  user.id != m.get('oid'));\n            }\n            return false;\n          }\n        },{\n          id: 'rolvaliduntil', disabled: 'readonly', type: 'text',\n          group: gettext('Definition'), label: gettext('Account expires'),\n          mode: ['properties', 'edit', 'create'], control: 'datetimepicker',\n          deps: ['rolcanlogin'], options: {format: 'YYYY-MM-DD HH:mm:ss Z'}\n        },{\n          id: 'rolconnlimit',  type: 'int', group: gettext('Definition'),\n          label: gettext('Connection limit'), cell: 'integer', min : -1,\n          mode: ['properties', 'edit', 'create'], disabled: 'readonly'\n        },{\n          id: 'rolcanlogin', label: gettext('Can login?'), type: 'switch',\n          group: gettext('Privileges'), options: switchOptions,\n          disabled: 'readonly', control: RoleCustomSwitchControl\n        },{\n          id: 'rolsuper', label: gettext('Superuser'), type: 'switch',\n          group: gettext('Privileges'), options: switchOptions,\n          control: RoleCustomSwitchControl.extend({\n            onChange: function() {\n              Backform.SwitchControl.prototype.onChange.apply(this, arguments);\n\n              this.model.set('rolcatupdate', this.model.get('rolsuper'));\n              this.model.set('rolcreaterole', this.model.get('rolsuper'));\n              this.model.set('rolcreatedb', this.model.get('rolsuper'));\n            }\n          }),\n          disabled: 'readonly'\n        },{\n          id: 'rolcreaterole', label: gettext('Create roles?'),\n          group: gettext('Privileges'), type: 'switch',\n          options: switchOptions, disabled: 'readonly',\n          control: RoleCustomSwitchControl\n        },{\n          id: 'description', label: gettext('Comments'), type: 'multiline',\n          group: null, mode: ['properties', 'edit', 'create'],\n          options: switchOptions, disabled: 'readonly'\n        },{\n          id: 'rolcreatedb', label: gettext('Create databases?'),\n          group: gettext('Privileges'), type: 'switch',\n          options: switchOptions, disabled: 'readonly',\n          control: RoleCustomSwitchControl\n        },{\n          id: 'rolcatupdate', label: gettext('Update catalog?'),\n          type: 'switch', max_version: 90400, options: switchOptions,\n          control: RoleCustomSwitchControl,\n          group: gettext('Privileges'), disabled: function(m) {\n            return (m.get('read_only') || (!m.get('rolsuper')));\n          }\n        },{\n          id: 'rolinherit', group: gettext('Privileges'),\n          label: gettext('Inherit rights from the parent roles?'),\n          type: 'switch', options: switchOptions, disabled: 'readonly',\n          control: RoleCustomSwitchControl\n        },{\n          id: 'rolreplication', group: gettext('Privileges'),\n          label: gettext('Can initiate streaming replication and backups?'),\n          type: 'switch', min_version: 90100, options: switchOptions,\n          disabled: 'readonly', control: RoleCustomSwitchControl\n        },{\n          id: 'rolmembership', label: gettext('Roles'),\n          group: gettext('Membership'), type: 'collection',\n          cell: 'string', disabled: 'readonly',\n          mode: ['properties', 'edit', 'create'],\n          control: RoleMembersControl, model: pgBrowser.Node.Model.extend({\n            keys: ['role'],\n            idAttribute: 'role',\n            defaults: {\n              role: undefined,\n              admin: false\n            },\n            validate: function() {\n              return null;\n            }\n          }),\n          filter: function(d) {\n            return this.model.isNew() || (this.model.get('rolname') != d.label);\n          },\n          helpMessage: function(m) {\n            if (m.has('read_only') && m.get('read_only') == false) {\n              return gettext('Select the checkbox for roles to include WITH ADMIN OPTION.');\n            } else {\n              return gettext('Roles shown with a check mark have the WITH ADMIN OPTION set.');\n            }\n          }\n        },{\n          id: 'variables', label: gettext('Parameters'), type: 'collection',\n          group: gettext('Parameters'), hasDatabase: true, url: 'variables',\n          model: pgBrowser.Node.VariableModel.extend({keys:['name', 'database']}),\n          control: 'variable-collection',\n          mode: [ 'edit', 'create'], canAdd: true, canDelete: true,\n          url: \"variables\", disabled: 'readonly'\n        },{\n          id: 'seclabels', label: gettext('Security Labels'),\n          model: SecurityModel, editable: false, type: 'collection',\n          group: gettext('Security'), mode: ['edit', 'create'],\n          min_version: 90200, disabled: 'readonly', canAdd: true,\n          canEdit: false, canDelete: true, control: 'unique-col-collection'\n        }],\n        readonly: function(m) {\n          if (!m.has('read_only')) {\n            var user = this.node_info.server.user;\n\n            m.set('read_only', !(user.is_superuser || user.can_create_role));\n          }\n\n          return m.get('read_only');\n        },\n        validate: function()\n        {\n          var err = {},\n              errmsg,\n              seclabels = this.get('seclabels');\n\n          if (_.isUndefined(this.get('rolname')) || String(this.get('rolname')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['name'] = gettext('Name cannot be empty.');\n            errmsg = errmsg || err['name'];\n          }\n\n          if (seclabels) {\n            var secLabelsErr;\n            for (var i = 0; i < seclabels.models.length && !secLabelsErr; i++) {\n              secLabelsErr = (seclabels.models[i]).validate.apply(seclabels.models[i]);\n              if (secLabelsErr) {\n                err['seclabels'] = secLabelsErr;\n                errmsg = errmsg || secLabelsErr;\n              }\n            }\n          }\n\n          this.errorModel.clear().set(err);\n\n          if (_.size(err)) {\n            this.trigger('on-status', {msg: errmsg});\n            return errmsg;\n          }\n\n          return null;\n        }\n      })\n    })\n  }\n\n  return pgBrowser.Nodes['role'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/roles/static/js/role.js","define('pgadmin.node.cast', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'underscore.string', 'sources/pgadmin',\n  'pgadmin.browser', 'pgadmin.alertifyjs', 'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n    // Extend the collection class for cast\n    if (!pgBrowser.Nodes['coll-cast']) {\n      var casts = pgAdmin.Browser.Nodes['coll-cast'] =\n        pgAdmin.Browser.Collection.extend({\n          node: 'cast',\n          label: gettext('Casts'),\n          type: 'coll-cast',\n          columns: ['name', 'description']\n        });\n    };\n\n    // Extend the node class for cast\n    if (!pgBrowser.Nodes['cast']) {\n      pgAdmin.Browser.Nodes['cast'] = pgAdmin.Browser.Node.extend({\n        parent_type: 'database',\n        type: 'cast',\n        sqlAlterHelp: 'sql-altercast.html',\n        sqlCreateHelp: 'sql-createcast.html',\n        dialogHelp: url_for('help.static', {'filename': 'cast_dialog.html'}),\n        canDrop: true,\n        canDropCascade: true,\n        label: gettext('Cast'),\n        hasSQL: true,\n        hasDepends: true,\n        Init: function() {\n\n          // Avoid multiple registration of menus\n          if (this.initialized)\n            return;\n\n          this.initialized = true;\n\n          // Add context menus for cast\n          pgBrowser.add_menus([{\n            name: 'create_cast_on_database', node: 'database', module: this,\n            applies: ['object', 'context'], callback: 'show_obj_properties',\n            category: 'create', priority: 4, label: gettext('Cast...'),\n            icon: 'wcTabIcon icon-cast', data: {action: 'create'},\n            enable: pgBrowser.Nodes['database'].is_conn_allow\n          },{\n            name: 'create_cast_on_coll', node: 'coll-cast', module: this,\n            applies: ['object', 'context'], callback: 'show_obj_properties',\n            category: 'create', priority: 4, label: gettext('Cast...'),\n            icon: 'wcTabIcon icon-cast', data: {action: 'create'}\n          },{\n            name: 'create_cast', node: 'cast', module: this,\n            applies: ['object', 'context'], callback: 'show_obj_properties',\n            category: 'create', priority: 4, label: gettext('Cast...'),\n            icon: 'wcTabIcon icon-cast', data: {action: 'create'}\n          }]);\n\n        },\n\n        // Define the backform model for cast node\n        model: pgAdmin.Browser.Node.Model.extend({\n          defaults: {\n            name: undefined,            // Name of the cast\n            encoding: 'UTF8',\n            srctyp: undefined,          // Source type\n            trgtyp: undefined,          // Target type\n            proname: undefined,         // Function\n            castcontext: undefined,     // Context (IMPLICIT/EXPLICIT/ASSIGNMENT)\n            syscast: undefined,         // Is this cast is system object? Yes/No\n            description: undefined      // Comment on the cast\n          },\n\n          // Define the schema for cast\n          schema: [{\n            id: 'name', label: gettext('Name'), cell: 'string',\n            editable: false, type: 'text', disabled: true, cellHeaderClasses: 'width_percent_50'\n          },{\n            id: 'oid', label: gettext('OID'), cell: 'string',\n            editable: false, type: 'text', disabled: true, mode: ['properties'],\n          },{\n            id: 'srctyp', label: gettext('Source type'), url: 'get_type',\n            type: 'text', group: gettext('Definition'), disabled: function(m) {\n            return !m.isNew()\n            }, mode: ['create'],\n\n            transform: function(rows) {\n              _.each(rows, function(r) {\n                r['image'] = 'icon-cast';\n              });\n              return rows;\n            },\n\n            /*\n             * Control is extended to create cast name from source type and destination type\n             * once their values are changed\n             */\n             control: Backform.NodeAjaxOptionsControl.extend({\n\n               onChange: function() {\n                 Backform.NodeAjaxOptionsControl.prototype.onChange.apply(\n                    this, arguments\n                    );\n\n                 /*\n                  * On source type change, check if both source type and\n                  * target type are set, if yes then fetch values from both\n                  * controls and generate cast name\n                  */\n                 var srctype = this.model.get('srctyp');\n                 var trgtype = this.model.get('trgtyp');\n                 if(srctype != undefined && srctype != '' &&\n                    trgtype != undefined && trgtype != '')\n                   this.model.set(\"name\", srctype+\"->\"+trgtype);\n                 else\n                   this.model.unset(\"name\");\n               }\n            })\n          },\n\n          /*\n           * Text control for viewing source type in properties and\n           * edit mode only\n           */\n          {\n            id: 'srctyp', label: gettext('Source type'), type: 'text',\n            group: gettext('Definition'), disabled: true, mode:['properties','edit']\n          },{\n            id: 'trgtyp', label: gettext('Target type'), url: 'get_type',\n            type: 'text', group: gettext('Definition'), disabled: function(m) {\n              return !m.isNew()\n              }, mode: ['create'],\n            transform: function(rows) {\n              _.each(rows, function(r) {\n                r['image'] = 'icon-cast';\n              });\n              return rows;\n            },\n\n            /*\n             * Control is extended to create cast name from source type and destination type\n             * once their values are changed\n             */\n             control: Backform.NodeAjaxOptionsControl.extend({\n\n             onChange: function() {\n               Backform.NodeAjaxOptionsControl.prototype.onChange.apply(\n                 this, arguments\n                 );\n\n                 /*\n                  * on target type change, check if both source type and\n                  * target type are set, if yes then fetch values from both\n                  * controls and generate cast name\n                  */\n               var srcType = this.model.get('srctyp');\n               var trgtype = this.model.get('trgtyp');\n               if(srcType != undefined && srcType != '' &&\n                  trgtype != undefined && trgtype != '')\n                 this.model.set(\"name\", srcType+\"->\"+trgtype);\n               else\n                 this.model.unset(\"name\");\n             }\n             })\n          },\n          /*\n           * Text control for viewing target type in properties and\n           * edit mode only\n           */\n          {\n            id: 'trgtyp', label: gettext('Target type'), type: 'text',\n            group: gettext('Definition'), disabled: true, mode:['properties','edit']\n          },\n\n          /*\n           * Proname field is dependent on source type and target type.\n           * On source and target type changed event,\n           * associated functions will be fetch using ajax call\n           */\n          {\n            id: 'proname', label: gettext('Function'), deps:['srctyp', 'trgtyp'],\n            type: 'text', disabled: function(m) { return !m.isNew(); },\n            group: gettext('Definition'), mode: ['create'],\n            control: 'node-ajax-options',\n            options: function(control) {\n              var srcTyp = control.model.get('srctyp');\n              var trgtyp = control.model.get('trgtyp');\n              var res = [];\n\n              if(srcTyp != undefined && srcTyp != '' &&\n                 trgtyp != undefined && trgtyp != '')\n              {\n                 var node = control.field.get('schema_node'),\n                 _url = node.generate_url.apply(\n                 node, [\n                   null, 'get_functions', control.field.get('node_data'), false,\n                   control.field.get('node_info')\n                 ]);\n                 $.ajax({\n                 type: 'POST',\n                 timeout: 30000,\n                 url: _url,\n                 cache: false,\n                 async: false,\n                 data: {\"srctyp\" : srcTyp, \"trgtyp\" : trgtyp},\n\n                 // On success return function list from server\n                 success: function(result) {\n                   res = result.data;\n                   return res;\n                 },\n\n                 // On failure show error appropriate error message to user\n                 error: function(xhr, status, error) {\n                   try {\n                     var err = $.parseJSON(xhr.responseText);\n                     if (err.success == 0) {\n                       alertify.error(err.errormsg);\n                     }\n                   } catch (e) {}\n                 }\n                });\n              }\n            return res;\n          }\n        },\n        /*\n         * Text type control for viewing function name in properties and\n         * edit mode only\n         */\n        {\n          id: 'proname', label: gettext('Function'), type: 'text',\n          group: gettext('Definition'), disabled: true, mode:['properties','edit']\n        },{\n          id: 'castcontext', label: gettext('Context'),\n          options:{'onText':'IMPLICIT','offText':'EXPLICIT'},\n          editable: false, type: 'string', group: gettext('Definition'),\n          mode:['create'],\n          control: Backform.SwitchControl.extend({\n            getValueFromDOM: function() {\n              return this.$input.prop('checked') ? 'IMPLICIT' : 'EXPLICIT';\n            }\n          })\n        },\n        /*\n         * Text control for viewing context in properties and\n         * edit mode\n         */\n        {\n          id: 'castcontext', label: gettext('Context'), disabled: true,\n          options:[{\n            label: 'IMPLICIT', value: 'IMPLICIT'\n          },{\n            label: 'EXPLICIT', value: 'EXPLICIT'\n          },{\n            label: 'ASSIGNMENT', value: 'ASSIGNMENT'\n          }], editable: false, type: 'select2', group: gettext('Definition'),\n          mode:['properties', 'edit']\n        },{\n          id: 'syscast', label: gettext('System cast?'),\n          cell: 'switch', type: 'switch', mode: ['properties'], disabled: true,\n          options: {\n            'onText': 'Yes', 'offText': 'No',\n            'onColor': 'success', 'offColor': 'primary',\n            'size': 'small'\n          }\n        },{\n          id: 'description', label: gettext('Comment'),type: 'text',\n          type: 'multiline', cellHeaderClasses: 'width_percent_50'\n        }\n        ],\n\n        /*\n         * Triggers control specific error messages for source type and\n         * target type if any one of them is not selected while creating\n         * new cast\n         */\n        validate: function(keys){\n\n          var srctype = this.get('srctyp');\n          var trgtype = this.get('trgtyp');\n\n          // validate source type control\n          if (_.isUndefined(srctype) || _.isNull(srctype) || String(srctype).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Source type must be selected.');\n            this.errorModel.set('srctyp', msg);\n            return msg;\n          }\n          else\n          {\n            this.errorModel.unset('srctyp');\n          }\n\n          // validate target type control\n          if (_.isUndefined(trgtype) || _.isNull(trgtype) || String(trgtype).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Target type must be selected.');\n            this.errorModel.set('trgtyp', msg);\n            return msg;\n          }\n          else\n          {\n            this.errorModel.unset('trgtyp');\n          }\n          this.trigger('on-status-clear');\n          return null;\n        }\n      })\n  });\n\n  }\n    return pgBrowser.Nodes['coll-cast'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/casts/static/js/cast.js","define('pgadmin.node.tablespace', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'pgadmin.alertifyjs',\n  'pgadmin.browser.collection', 'pgadmin.browser.node.ui',\n  'pgadmin.browser.server.privilege'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-tablespace']) {\n    var databases = pgBrowser.Nodes['coll-tablespace'] =\n      pgBrowser.Collection.extend({\n        node: 'tablespace',\n        label: gettext('Tablespaces'),\n        type: 'coll-tablespace',\n        columns: ['name', 'spcuser', 'description'],\n        hasStatistics: true,\n        statsPrettifyFields: ['Size']\n      });\n  };\n\n  if (!pgBrowser.Nodes['tablespace']) {\n    pgBrowser.Nodes['tablespace'] = pgBrowser.Node.extend({\n      parent_type: 'server',\n      type: 'tablespace',\n      sqlAlterHelp: 'sql-altertablespace.html',\n      sqlCreateHelp: 'sql-createtablespace.html',\n      dialogHelp: url_for('help.static', {'filename': 'tablespace_dialog.html'}),\n      label: gettext('Tablespace'),\n      hasSQL:  true,\n      canDrop: true,\n      hasDepends: true,\n      hasStatistics: true,\n      statsPrettifyFields: ['Size'],\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_tablespace_on_server', node: 'server', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Tablespace...'),\n          icon: 'wcTabIcon icon-tablespace', data: {action: 'create'},\n          enable: 'can_create_tablespace'\n        },{\n          name: 'create_tablespace_on_coll', node: 'coll-tablespace', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Tablespace...'),\n          icon: 'wcTabIcon icon-tablespace', data: {action: 'create'},\n          enable: 'can_create_tablespace'\n        },{\n          name: 'create_tablespace', node: 'tablespace', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Tablespace...'),\n          icon: 'wcTabIcon icon-tablespace', data: {action: 'create'},\n          enable: 'can_create_tablespace'\n        },{\n          name: 'move_tablespace', node: 'tablespace', module: this,\n          applies: ['object', 'context'], callback: 'move_objects',\n          category: 'move_tablespace', priority: 5,\n          label: gettext('Move objects to...'),\n          icon: 'fa fa-exchange', data: {action: 'create'},\n          enable: 'can_move_objects'\n        }\n        ]);\n      },\n      can_create_tablespace: function(node, item) {\n        var treeData = this.getTreeNodeHierarchy(item),\n            server = treeData['server'];\n\n        return server.connected && server.user.is_superuser;\n      },\n      can_move_objects: function(node, item) {\n        var treeData = this.getTreeNodeHierarchy(item),\n            server = treeData['server'];\n        // Only supported PG9.4 and above version\n        return server.connected &&\n                server.user.is_superuser &&\n                server.version >= 90400;\n      },\n      callbacks: {\n        /* Move objects from one tablespace to another */\n        move_objects: function(args){\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined,\n            node = d && pgBrowser.Nodes[d._type],\n            url = obj.generate_url(i, 'move_objects', d, true),\n            msql_url = obj.generate_url(i, 'move_objects_sql', d, true);\n\n          if (!d)\n            return false;\n\n          // Object model\n          var objModel = Backbone.Model.extend({\n              idAttribute: 'id',\n              defaults: {\n                new_tblspc: undefined,\n                obj_type: 'all',\n                user: undefined\n              },\n              schema: [{\n                  id: 'tblspc', label: gettext('New tablespace'),\n                  type: 'text', disabled: false, control: 'node-list-by-name',\n                  node: 'tablespace', select2: {allowClear: false},\n                  filter: function(o) {\n                    return o && (o.label != d.label);\n                  }\n              },{\n                  id: 'obj_type', label: gettext('Object type'),\n                  type: 'text', disabled: false, control: 'select2',\n                  select2: { allowClear: false, width: \"100%\" },\n                  options: [\n                    {label: \"All\", value: 'all'},\n                    {label: \"Tables\", value: 'tables'},\n                    {label: \"Indexes\", value: 'indexes'},\n                    {label: \"Materialized views\", value: 'materialized_views'},\n                  ]\n              },{\n                  id: 'user', label: gettext('Object owner'),\n                  type: 'text', disabled: false, control: 'node-list-by-name',\n                  node: 'role', select2: {allowClear: false}\n              },{\n                  id: 'sqltab', label: gettext('SQL'), group: gettext('SQL'),\n                  type: 'text', disabled: false, control: Backform.SqlTabControl.extend({\n                    initialize: function() {\n                      // Initialize parent class\n                      Backform.SqlTabControl.prototype.initialize.apply(this, arguments);\n                    },\n                    onTabChange: function(obj) {\n                      // Fetch the information only if the SQL tab is visible at the moment.\n                      if (this.dialog && obj.shown == this.tabIndex) {\n                            var self = this,\n                            args = self.model.toJSON();\n                            // Add existing tablespace\n                            args.old_tblspc = d.label;\n\n                            // Fetches modified SQL\n                            $.ajax({\n                              url: msql_url,\n                              type: 'GET',\n                              cache: false,\n                              data: args,\n                              dataType: \"json\",\n                              contentType: \"application/json\"\n                            }).done(function(res) {\n                              self.sqlCtrl.clearHistory();\n                              self.sqlCtrl.setValue(res.data);\n                              self.sqlCtrl.refresh();\n                            }).fail(function() {\n                              self.model.trigger('pgadmin-view:msql:error');\n                            }).always(function() {\n                              self.model.trigger('pgadmin-view:msql:fetched');\n                            });\n                      }\n                    }\n                  })\n              }],\n              validate: function() {\n                  return null;\n              }\n          });\n\n          if(!alertify.move_objects_dlg) {\n            alertify.dialog('move_objects_dlg' ,function factory() {\n              return {\n                main: function() {\n                 var title = gettext('Move objects to another tablespace ');\n                 this.set('title', title);\n                },\n                build: function() {\n                  alertify.pgDialogBuild.apply(this);\n                },\n                setup:function() {\n                  return {\n                     buttons: [{\n                       text: '', key: 112, className: 'btn btn-default pull-left fa fa-lg fa-question',\n                       attrs:{name:'dialog_help', type:'button', label: gettext('Users'),\n                       url: url_for('help.static', {'filename': 'move_objects.html'})}\n                       },{\n                       text: gettext('OK'), key: 13, className: 'btn btn-primary fa fa-lg fa-save pg-alertify-button'\n                       },{\n                       text: gettext('Cancel'), key: 27, className: 'btn btn-danger fa fa-lg fa-times pg-alertify-button'\n                     }],\n                     // Set options for dialog\n                     options: {\n                       //disable both padding and overflow control.\n                       padding : !1,\n                       overflow: !1,\n                       modal: false,\n                       resizable: true,\n                       maximizable: true,\n                       pinnable: false,\n                       closableByDimmer: false\n                     }\n                   };\n                },\n                hooks: {\n                  // Triggered when the dialog is closed\n                  onclose: function() {\n                    if (this.view) {\n                      // clear our backform model/view\n                      this.view.remove({data: true, internal: true, silent: true});\n                    }\n                  }\n                },\n                prepare: function() {\n                  var self = this,\n                    $container = $(\"<div class='move_objects'></div>\");\n                  //Disbale Okay button\n                  this.__internal.buttons[1].element.disabled = true;\n                  // Find current/selected node\n                  var t = pgBrowser.tree,\n                    i = t.selected(),\n                    d = i && i.length == 1 ? t.itemData(i) : undefined,\n                    node = d && pgBrowser.Nodes[d._type];\n\n                  if (!d)\n                    return;\n                  // Create treeInfo\n                  var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n                  // Instance of backbone model\n                  var newModel = new objModel({}, {node_info: treeInfo}),\n                      fields = Backform.generateViewSchema(\n                        treeInfo, newModel, 'create', node,\n                        treeInfo.server, true\n                      );\n\n                  var view = this.view = new Backform.Dialog({\n                    el: $container, model: newModel, schema: fields\n                  });\n                  // Add our class to alertify\n                  $(this.elements.body.childNodes[0]).addClass(\n                    'alertify_tools_dialog_properties obj_properties'\n                  );\n                  // Render dialog\n                  view.render();\n\n                  this.elements.content.appendChild($container.get(0));\n\n                  // Listen to model & if filename is provided then enable Backup button\n                  this.view.model.on('change', function() {\n                    if (!_.isUndefined(this.get('tblspc')) && this.get('tblspc') !== '') {\n                      this.errorModel.clear();\n                      self.__internal.buttons[1].element.disabled = false;\n                    } else {\n                      self.__internal.buttons[1].element.disabled = true;\n                      this.errorModel.set('tblspc', gettext('Please select tablespace'))\n                    }\n                  });\n                },\n                // Callback functions when click on the buttons of the Alertify dialogs\n                callback: function(e) {\n                  if (e.button.element.name == \"dialog_help\") {\n                    e.cancel = true;\n                    pgBrowser.showHelp(e.button.element.name, e.button.element.getAttribute('url'),\n                      null, null, e.button.element.getAttribute('label'));\n                    return;\n                  }\n                  if (e.button.text === gettext('OK')) {\n                    var self = this,\n                        args =  this.view.model.toJSON();\n                        args.old_tblspc = d.label;\n                    e.cancel = true;\n                    alertify.confirm(\n                      gettext('Move objects...'),\n                      gettext(\n                        'Are you sure you wish to move the objects from %(old_tablespace)s to %(new_tablespace)s?',\n                        {old_tablespace: args.old_tblspc, new_tablespace: args.tblspc}\n                      ),\n                      function() {\n                        $.ajax({\n                          url: url,\n                          method:'PUT',\n                          data:{'data': JSON.stringify(args) },\n                          success: function(res) {\n                            if (res.success) {\n                              alertify.success(res.info);\n                              self.close();\n                            } else {\n                              alertify.error(res.errormsg);\n                            }\n                          },\n                          error: function(xhr, status, error) {\n                            try {\n                              var err = $.parseJSON(xhr.responseText);\n                              if (err.success == 0) {\n                                alertify.error(err.errormsg);\n                              }\n                            } catch (e) {}\n                          }\n                        });\n                      },\n                      function() {\n                        // Do nothing as user cancel the operation\n                      }\n                    );\n                  }\n                }\n              }\n            });\n          }\n          alertify.move_objects_dlg(true).resizeTo('40%','50%');;\n        }\n      },\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          owner: undefined,\n          comment: undefined,\n          spclocation: undefined,\n          spcoptions: [],\n          spcacl: [],\n          seclabels:[]\n        },\n\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            this.set({'spcuser': userInfo.name}, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text', disabled: true, mode: ['properties']\n        },{\n          id: 'spclocation', label: gettext('Location'), cell: 'string',\n          group: gettext('Definition'), type: 'text', mode: ['properties', 'edit','create'],\n          disabled: function(m) {\n            // To disabled it in edit mode,\n            // We'll check if model is new if yes then disabled it\n            return !m.isNew();\n          }\n        },{\n          id: 'spcuser', label: gettext('Owner'), cell: 'string',\n          type: 'text', control: 'node-list-by-name', node: 'role',\n          select2: {allowClear: false}\n        },{\n          id: 'acl', label: gettext('Privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline'\n        },{\n          id: 'spcoptions', label: gettext('Parameters'), type: 'collection',\n          group: gettext(\"Parameters\"), control: 'variable-collection',\n          model: pgBrowser.Node.VariableModel,\n          mode: ['edit', 'create'], canAdd: true, canEdit: false,\n          canDelete: true\n         },{\n          id: 'spcacl', label: gettext('Privileges'), type: 'collection',\n          group: gettext('Security'), control: 'unique-col-collection',\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({privileges: ['C']}),\n          mode: ['edit', 'create'], canAdd: true, canDelete: true,\n          uniqueCol : ['grantee'],\n          columns: ['grantee', 'grantor', 'privileges']\n         },{\n          id: 'seclabels', label: gettext('Security Labels'),\n          model: pgBrowser.SecLabelModel, editable: false, type: 'collection',\n          group: gettext('Security'), mode: ['edit', 'create'],\n          min_version: 90200, canAdd: true,\n          canEdit: false, canDelete: true, control: 'unique-col-collection'\n        }\n        ],\n        validate: function() {\n          var err = {},\n            errmsg = null,\n            changedAttrs = this.sessAttrs,\n            msg = undefined;\n          if (_.isUndefined(this.get('name'))\n              || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n          } else if (_.isUndefined(this.get('spclocation'))\n              || String(this.get('spclocation')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Location cannot be empty.');\n            this.errorModel.set('spclocation', msg);\n          } else {\n            this.errorModel.unset('name');\n            this.errorModel.unset('spclocation');\n          }\n          return null;\n        }\n      })\n  });\n\n  }\n\n  return pgBrowser.Nodes['coll-tablespace'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/tablespaces/static/js/tablespace.js","define('pgadmin.node.resource_group', [\n  'sources/gettext', 'sources/url_for', 'underscore', 'pgadmin.browser',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, _, pgBrowser) {\n\n  // Extend the browser's collection class for resource group collection\n  if (!pgBrowser.Nodes['coll-resource_group']) {\n    pgBrowser.Nodes['coll-resource_group'] =\n      pgBrowser.Collection.extend({\n        node: 'resource_group',\n        label: gettext('Resource Groups'),\n        type: 'coll-resource_group',\n        columns: ['name', 'cpu_rate_limit', 'dirty_rate_limit']\n    });\n  }\n\n  // Extend the browser's node class for resource group node\n  if (!pgBrowser.Nodes['resource_group']) {\n    pgBrowser.Nodes['resource_group'] = pgBrowser.Node.extend({\n      parent_type: 'server',\n      type: 'resource_group',\n      dialogHelp: url_for('help.static', {'ilename': 'resource_group_dialog.html'}),\n      label: gettext('Resource Group'),\n      hasSQL:  true,\n      canDrop: true,\n      Init: function() {\n\n        // Avoid multiple registration of menus\n        if (this.initialized) {\n          return;\n        }\n\n        this.initialized = true;\n\n        // Creating menu for the resource group node\n        pgBrowser.add_menus([{\n          name: 'create_resourcegroup_on_server', node: 'server', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Resource Group...'),\n          icon: 'wcTabIcon icon-resource_group', data: {action: 'create'},\n          /* Function is used to check the server type and version.\n           * Resource Group only supported in PPAS 9.4 and above.\n           */\n          enable: function(node, item) {\n            var treeData = this.getTreeNodeHierarchy(item),\n                server = treeData['server'];\n            return server.connected && node.server_type === 'ppas' &&\n                   node.version >= 90400;\n          }\n        },{\n          name: 'create_resource_group_on_coll', node: 'coll-resource_group', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Resource Group...'),\n          icon: 'wcTabIcon icon-resource_group', data: {action: 'create'}\n        },{\n          name: 'create_resource_group', node: 'resource_group', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Resource Group...'),\n          icon: 'wcTabIcon icon-resource_group', data: {action: 'create'}\n        }\n        ]);\n      },\n\n      // Defining model for resource group node\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          cpu_rate_limit: 0.0,\n          dirty_rate_limit: 0.0\n        },\n\n        // Defining schema for the resource group node\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text',\n        },{\n          id: 'cpu_rate_limit', label: gettext('CPU rate limit (%%)'), cell: 'string',\n          type: 'numeric', min:0, max:16777216\n        },{\n          id: 'dirty_rate_limit', label: gettext('Dirty rate limit (KB)'), cell: 'string',\n          type: 'numeric', min:0, max:16777216\n        }],\n\n        /* validate function is used to validate the input given by\n         * the user. In case of error, message will be displayed on\n         * the GUI for the respective control.\n         */\n        validate: function(keys) {\n          var msg, cpu_rate_limit, dirty_rate_limit, name,\n              name = this.get('name');\n          if (_.isUndefined(name) || _.isNull(name) ||\n              String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('name');\n          }\n\n          var cpu_rate_limit = this.get('cpu_rate_limit');\n          if (_.isUndefined(cpu_rate_limit) || _.isNull(cpu_rate_limit) ||\n              String(cpu_rate_limit).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('CPU rate limit cannot be empty.');\n            this.errorModel.set('cpu_rate_limit', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('cpu_rate_limit');\n          }\n\n          var dirty_rate_limit = this.get('dirty_rate_limit');\n          if (_.isUndefined(dirty_rate_limit) || _.isNull(dirty_rate_limit) ||\n            String(dirty_rate_limit).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Dirty rate limit cannot be empty.');\n            this.errorModel.set('dirty_rate_limit', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('dirty_rate_limit');\n          }\n          return null;\n        }\n      })\n    });\n  }\n\n  return pgBrowser.Nodes['coll-resource_group'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/resource_groups/static/js/resource_group.js","define('pgadmin.node.event_trigger', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Extend the browser's collection class for event trigger collection\n  if (!pgBrowser.Nodes['coll-event_trigger']) {\n    var databases = pgAdmin.Browser.Nodes['coll-event_trigger'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'event_trigger',\n        label: gettext('Event Trigger'),\n        type: 'coll-event_trigger',\n        columns: ['name', 'eventowner', 'comment']\n      });\n  };\n\n  // Extend the browser's node class for event triggers node\n  if (!pgBrowser.Nodes['event_trigger']) {\n    pgAdmin.Browser.Nodes['event_trigger'] = pgAdmin.Browser.Node.extend({\n      parent_type: 'database',\n      type: 'event_trigger',\n      sqlAlterHelp: 'sql-altereventtrigger.html',\n      sqlCreateHelp: 'sql-createeventtrigger.html',\n      dialogHelp: url_for('help.static', {'filename': 'event_trigger_dialog.html'}),\n      label: gettext('Event Trigger'),\n      hasSQL:  true,\n      hasDepends: true,\n      canDrop: true,\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_event_trigger_on_coll', node: 'coll-event_trigger', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Event Trigger...'),\n          icon: 'wcTabIcon icon-event_trigger', data: {action: 'create'}\n        },{\n          name: 'create_event_trigger', node: 'event_trigger', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Event Trigger...'),\n          icon: 'wcTabIcon icon-event_trigger', data: {action: 'create'}\n        },{\n          name: 'create_event_trigger', node: 'database', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Event Trigger...'),\n          icon: 'wcTabIcon icon-event_trigger', data: {action: 'create'},\n          enable: pgBrowser.Nodes['database'].is_conn_allow\n        }\n        ]);\n      },\n      // Define the model for event trigger node\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          oid: undefined,\n          name: undefined,\n          eventowner: undefined,\n          comment: undefined,\n          enabled: \"O\",\n          eventfuncoid: undefined,\n          eventfunname: undefined,\n          eventname: \"DDL_COMMAND_START\",\n          when: undefined,\n          xmin: undefined,\n          source: undefined,\n          language: undefined\n        },\n\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n\n            this.set({'eventowner': userInfo.name}, {silent: true});\n          }\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n\n        // Define the schema for the event trigger node\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text', mode: ['properties']\n        },{\n          id: 'eventowner', label: gettext('Owner'), cell: 'string',\n          type: 'text', mode: ['properties', 'edit','create'], node: 'role',\n          control: Backform.NodeListByNameControl\n        },{\n          id: 'comment', label: gettext('Comment'), type: 'multiline'\n        },{\n          id: 'enabled', label: gettext('Enabled status'),\n          type:\"radio\", group: gettext(\"Definition\"), mode: ['properties', 'edit','create'],\n          options: [\n            {label: \"Enable\", value: \"O\"},\n            {label: \"Disable\", value: \"D\"},\n            {label: \"Replica\", value: \"R\"},\n            {label: \"Always\", value: \"A\"}\n          ]\n        },{\n          id: 'eventfunname', label: gettext('Trigger function'),\n          type: 'text', control: 'node-ajax-options', group: gettext(\"Definition\"),\n          url:'fopts', cache_node: 'trigger_function'\n        },{\n          id: 'eventname', label: gettext('Events'),\n          type:\"radio\", group: gettext(\"Definition\"), cell: 'string',\n          options: [\n            {label: \"DDL COMMAND START\", value: \"DDL_COMMAND_START\"},\n            {label: \"DDL COMMAND END\", value: \"DDL_COMMAND_END\"},\n            {label: \"SQL DROP\", value: \"SQL_DROP\"}\n          ]\n        },{\n          id: 'when', label: gettext('When'), type: 'multiline', group: gettext(\"Definition\"),\n        },{\n          id: 'seclabels', label: gettext('Security Labels'),\n          model: pgBrowser.SecLabelModel, editable: false, type: 'collection',\n          group: gettext('Security'), mode: ['edit', 'create'],\n          min_version: 90200, canAdd: true,\n          canEdit: false, canDelete: true, control: 'unique-col-collection'\n         }\n        ],\n        // event trigger model data validation.\n        validate: function() {\n          var msg = undefined;\n          // Clear any existing error msg.\n          this.errorModel.clear();\n\n          if (_.isUndefined(this.get('name'))\n              || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Event trigger name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n\n          if (_.isUndefined(this.get('eventowner'))\n              || String(this.get('eventowner')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Event trigger owner cannot be empty.');\n            this.errorModel.set('eventowner', msg);\n            return msg;\n          }\n\n          if (_.isUndefined(this.get('enabled'))) {\n            msg = gettext('Event trigger enabled status cannot be empty.');\n            this.errorModel.set('enabled', msg);\n            return msg;\n          }\n\n          if (_.isUndefined(this.get('eventfunname'))\n              || String(this.get('eventfunname')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Event trigger function cannot be empty.');\n            this.errorModel.set('eventfunname', msg);\n            return msg;\n          }\n\n          if (_.isUndefined(this.get('eventname'))) {\n            msg = gettext('Event trigger event cannot be empty.');\n            this.errorModel.set('eventname', msg);\n            return msg;\n          }\n\n          return null;\n        }\n      })\n  });\n\n  }\n\n  return pgBrowser.Nodes['coll-event_trigger'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/event_triggers/static/js/event_trigger.js","define('pgadmin.node.extension', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser) {\n\n  /*\n   * Create and Add an Extension Collection into nodes\n   * Params:\n   *   label - Label for Node\n   *   type - Type of Node\n   *   columns - List of columns to show under under properties.\n   */\n  if (!pgBrowser.Nodes['coll-extension']) {\n    var extensions = pgAdmin.Browser.Nodes['coll-extension'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'extension',\n        label: gettext('Extension'),\n        type: 'coll-extension',\n        columns: ['name', 'owner', 'comment']\n      });\n  };\n\n  /*\n   * Create and Add an Extension Node into nodes\n   * Params:\n   *   parent_type - Name of parent Node\n   *   type - Type of Node\n   *   hasSQL - True if we need to show SQL query Tab control, otherwise False\n   *   canDrop - True to show \"Drop Extension\" link under Context menu,\n   *    otherwise False\n   *   canDropCascade - True to show \"Drop Cascade\" link under Context menu,\n   *    otherwise False\n   *   columns - List of columns to show under under properties tab.\n   *   label - Label for Node\n   */\n  if (!pgBrowser.Nodes['extension']) {\n    pgAdmin.Browser.Nodes['extension'] =\n    pgAdmin.Browser.Node.extend({\n      parent_type: 'database',\n      type: 'extension',\n      sqlAlterHelp: 'sql-alterextension.html',\n      sqlCreateHelp: 'sql-createextension.html',\n      dialogHelp: url_for('help.static', {'filename': 'extension_dialog.html'}),\n      hasSQL: true,\n      hasDepends: true,\n      canDrop: true,\n      canDropCascade: true,\n      label: gettext('Extension'),\n\n      Init: function() {\n        if(this.initialized)\n          return;\n\n        this.initialized = true;\n\n        /*\n         * Add \"create extension\" menu item into context and object menu\n         * for the following nodes:\n         * coll-extension, extension and database.\n         */\n        pgBrowser.add_menus([{\n          name: 'create_extension_on_coll', node: 'coll-extension', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Extension...'),\n          icon: 'wcTabIcon icon-extension', data: {action: 'create'}\n        },{\n          name: 'create_extension', node: 'extension', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Extension...'),\n          icon: 'wcTabIcon icon-extension', data: {action: 'create'}\n        },{\n          name: 'create_extension', node: 'database', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Extension...'),\n          icon: 'wcTabIcon icon-extension', data: {action: 'create'},\n          enable: pgBrowser.Nodes['database'].is_conn_allow\n        }\n        ]);\n      },\n\n      /*\n       * Define model for the Node and specify the properties\n       * of the model in schema.\n       */\n      model: pgAdmin.Browser.Node.Model.extend({\n        schema: [\n          {\n            id: 'name', label: gettext('Name'), first_empty: true,\n            type: 'text', mode: ['properties', 'create', 'edit'],\n            visible: true, url:'avails', disabled: function(m) {\n              return !m.isNew();\n            },\n            transform: function(data, cell) {\n              var res = [],\n                  control = cell || this,\n                  label = control.model.get('name');\n\n              if (!control.model.isNew()) {\n                res.push({label: label, value: label});\n              }\n              else {\n                if (data && _.isArray(data)) {\n                  _.each(data, function(d) {\n                    if (d.installed_version === null)\n\n                      /*\n                       * d contains json data and sets into\n                       * select's option control\n                       *\n                       * We need to stringify data because formatter will\n                       * convert Array Object as [Object] string\n                       */\n                      res.push({label: d.name, value: JSON.stringify(d)});\n                  })\n                }\n              }\n              return res;\n            },\n\n            /*\n             * extends NodeAjaxOptionsControl to override the properties\n             * getValueFromDOM which takes stringified data from option of\n             * select control and parse it. And `onChange` takes the stringified\n             * data from select's option, thus convert it to json format and set the\n             * data into Model which is used to enable/disable the schema field.\n             */\n            control: Backform.NodeAjaxOptionsControl.extend({\n              getValueFromDOM: function() {\n                var data = this.formatter.toRaw(\n                  _.unescape(this.$el.find(\"select\").val()), this.model);\n                /*\n                 * return null if data is empty to prevent it from\n                 * throwing parsing error. Adds check as name can be empty\n                 */\n                if (data === '') {\n                  return null;\n                }\n                else if (typeof(data) === 'string') {\n                  data=JSON.parse(data);\n                }\n                return data.name;\n              },\n\n              /*\n               * When name is changed, extract value from its select option and\n               * set attributes values into the model\n               */\n              onChange: function() {\n                Backform.NodeAjaxOptionsControl.prototype.onChange.apply(this, arguments);\n                var selectedValue = this.$el.find(\"select\").val();\n                if (selectedValue.trim() != \"\") {\n                  var d = this.formatter.toRaw(selectedValue, this.model);\n                  if(typeof(d) === 'string')\n                    d=JSON.parse(d);\n                  var changes = {\n                    'version' : '',\n                    'relocatable': (\n                        (!_.isNull(d.relocatable[0]) && !_.isUndefined(d.relocatable[0])) ?\n                        d.relocatable[0]: '')\n                    };\n                  this.model.set(changes);\n                }\n                else {\n                  var changes = {'version': '', 'relocatable': true, 'schema': ''};\n                  this.model.set(changes);\n                }\n              },\n            })\n          },\n          {\n            id: 'eid', label: gettext('OID'), cell: 'string',\n            type: 'text', disabled: true, mode: ['properties']\n          },\n          {\n            id: 'owner', label: gettext('Owner'), control: 'node-list-by-name',\n            mode: ['properties'], node: 'role', cell: 'string',\n            cache_level: 'server'\n          },\n          {\n            id: 'schema', label: gettext('Schema'), type: 'text',\n            control: 'node-list-by-name', group: gettext('Definition'),\n            mode: ['properties', 'create', 'edit'], deps: ['relocatable'],\n            node: 'schema', first_empty: true,\n            disabled: function(m) {\n              /*\n               * enable or disable schema field if model's relocatable\n               * attribute is True or False\n               */\n              return (m.has('relocatable') ? !m.get('relocatable') : false);\n            }\n          },\n          {\n            id: 'relocatable', label: gettext('Relocatable?'), cell: 'switch',\n            group: gettext('Definition'), type: 'switch', mode: ['properties'],\n            options: {\n              'onText': 'Yes', 'offText': 'No',\n              'onColor': 'success', 'offColor': 'primary',\n              'size': 'small'\n            }\n          },\n          {\n            id: 'version', label: gettext('Version'), cell: 'string',\n            mode: ['properties', 'create', 'edit'], group: gettext('Definition'),\n            control: 'node-ajax-options', url:'avails', first_empty: true,\n\n            // Transform the data into version for the selected extension.\n            transform: function(data, cell) {\n              var res = [],\n                  control = cell || this,\n                  extension = control.model.get('name');\n\n              _.each(data, function(dt) {\n                if(dt.name == extension) {\n                  if(dt.version && _.isArray(dt.version)) {\n                    _.each(dt.version, function(v) {\n                      res.push({ label: v, value: v });\n                    });\n                  }\n                }\n              });\n              return res;\n            }\n          },\n          {\n            id: 'comment', label: gettext('Comment'), cell: 'string',\n            type: 'multiline', disabled: true\n          }\n        ],\n        validate: function() {\n\n          /*\n          * Triggers error messages for name\n          * if it is empty/undefined/null\n          */\n          var err = {},\n            errmsg,\n            name = this.get('name');\n          if (_.isUndefined(name) || _.isNull(name) ||\n            String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['name'] = gettext('Name cannot be empty.');\n            errmsg = errmsg || err['name'];\n            this.errorModel.set('name', errmsg);\n            return errmsg;\n          }\n          else {\n            this.errorModel.unset('name');\n          }\n          return null;\n        }\n      })\n    })\n  };\n\n  return pgBrowser.Nodes['coll-extension'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/extensions/static/js/extension.js","define('pgadmin.node.language', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection', 'pgadmin.browser.server.privilege'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Extend the browser's collection class for languages collection\n  if (!pgBrowser.Nodes['coll-language']) {\n    var languages = pgBrowser.Nodes['coll-language'] =\n      pgBrowser.Collection.extend({\n        node: 'language',\n        label: gettext('Languages'),\n        type: 'coll-language',\n        columns: ['name', 'lanowner', 'description']\n      });\n  };\n\n  // Extend the browser's node class for language node\n  if (!pgBrowser.Nodes['language']) {\n    pgBrowser.Nodes['language'] = pgBrowser.Node.extend({\n      parent_type: 'database',\n      type: 'language',\n      sqlAlterHelp: 'sql-alterlanguage.html',\n      sqlCreateHelp: 'sql-createlanguage.html',\n      dialogHelp: url_for('help.static', {'filename': 'language_dialog.html'}),\n      label: gettext('Language'),\n      hasSQL:  true,\n      canDrop: true,\n      canDropCascade: true,\n      hasDepends: true,\n      Init: function() {\n\n        // Avoid multiple registration of menus\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n\n        // Add context menus for language\n        pgBrowser.add_menus([{\n          name: 'create_language_on_database', node: 'database', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Language...'),\n          icon: 'wcTabIcon icon-language', data: {action: 'create'},\n          enable: pgBrowser.Nodes['database'].is_conn_allow\n        },{\n          name: 'create_language_on_coll', node: 'coll-language', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Language...'),\n          icon: 'wcTabIcon icon-language', data: {action: 'create'}\n        },{\n          name: 'create_language', node: 'language', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Language...'),\n          icon: 'wcTabIcon icon-language', data: {action: 'create'}\n        }]);\n      },\n\n      // Define the model for language node\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          lanowner: undefined,\n          comment: undefined,\n          lanacl: [],\n          seclabels:[],\n          trusted: true,\n          lanproc: undefined,\n          laninl: undefined,\n          lanval: undefined,\n          is_template: false,\n          template_list: []\n        },\n\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n\n            this.set({'lanowner': userInfo.name}, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n\n        // Define the schema for the language node\n        schema: [{\n          id: 'name', label: gettext('Name'), type: 'text',\n          control: 'node-ajax-options', mode: ['properties', 'create', 'edit'],\n          url:'get_templates', select2: { allowClear: false, tags: true, multiple: false },\n          transform: function(data, cell) {\n            var res = [],\n                control = cell || this,\n                label = control.model.get('name');\n\n            if (!control.model.isNew()) {\n              res.push({label: label, value: label});\n            }\n            else {\n              var tmp_list = [];\n              if (data && _.isArray(data)) {\n                _.each(data, function(d) {\n                  res.push({label: d.tmplname, value: d.tmplname});\n                  tmp_list.push(d.tmplname);\n                })\n              }\n              this.model.set({'template_list': tmp_list});\n            }\n\n            return res;\n          }\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string', mode: ['properties'],\n          type: 'text', disabled: true\n        },{\n          id: 'lanowner', label: gettext('Owner'), type: 'text',\n          control: Backform.NodeListByNameControl, node: 'role',\n          mode: ['edit', 'properties', 'create'], select2: { allowClear: false }\n        },{\n          id: 'acl', label: gettext('Privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline'\n        },{\n          id: 'trusted', label: gettext('Trusted?'), type: 'switch',\n          options: {\n            'onText': 'Yes', 'offText': 'No',\n            'onColor': 'success', 'offColor': 'primary',\n            'size': 'small'\n          },\n          group: gettext('Definition'), mode: ['edit', 'properties', 'create'], deps: ['name'],\n          disabled: function(m) {\n            if (m.isNew()) {\n              if (m.get('template_list').indexOf(m.get('name')) == -1) {\n                m.set({'is_template': false});\n                return false;\n              }\n              else\n                m.set({'is_template': true});\n            }\n            return true;\n          }\n        },{\n          id: 'lanproc', label: gettext('Handler Function'), type: 'text', control: 'node-ajax-options',\n          group: gettext('Definition'), mode: ['edit', 'properties', 'create'], url:'get_functions',\n          deps: ['name'], first_empty: false,\n          /* This function is used to populate the handler function\n           * for the selected language node. It will check if the property\n           * type is 'handler' then push the data into the result array.\n           */\n          transform: function(data) {\n            var res = [];\n            if (data && _.isArray(data)) {\n              _.each(data, function(d) {\n                if (d.prop_type == 'handler') {\n                  res.push({label: d.label, value: d.label});\n                }\n              })\n            }\n            return res;\n          }, disabled: function(m) {\n            if (m.isNew()) {\n              if (m.get('template_list').indexOf(m.get('name')) == -1)\n                return false;\n            }\n            return true;\n          }\n        },{\n          id: 'laninl', label: gettext('Inline Function'), type: 'text', control: 'node-ajax-options',\n          group: gettext('Definition'), mode: ['edit', 'properties', 'create'], url:'get_functions',\n          deps: ['name'], first_empty: false,\n          /* This function is used to populate the inline function\n           * for the selected language node. It will check if the property\n           * type is 'inline' then push the data into the result array.\n           */\n          transform: function(data) {\n            var res = [];\n            if (data && _.isArray(data)) {\n              _.each(data, function(d) {\n                if (d.prop_type == 'inline') {\n                  res.push({label: d.label, value: d.label});\n                }\n              })\n            }\n            return res;\n          }, disabled: function(m) {\n            if (m.isNew()) {\n              if (m.get('template_list').indexOf(m.get('name')) == -1)\n                return false;\n            }\n            return true;\n          }\n        },{\n          id: 'lanval', label: gettext('Validator Function'), type: 'text', control: 'node-ajax-options',\n          group: gettext('Definition'), mode: ['edit', 'properties', 'create'], url:'get_functions',\n          deps: ['name'],\n          /* This function is used to populate the validator function\n           * for the selected language node. It will check if the property\n           * type is 'validator' then push the data into the result array.\n           */\n          transform: function(data) {\n            var res = [];\n            if (data && _.isArray(data)) {\n                _.each(data, function(d) {\n                  if (d.prop_type == 'validator') {\n                    res.push({label: d.label, value: d.label});\n                  }\n                })\n            }\n            return res;\n          }, disabled: function(m) {\n            if (m.isNew()) {\n              if (m.get('template_list').indexOf(m.get('name')) == -1)\n                return false;\n            }\n            return true;\n          }\n        }, {\n          id: 'lanacl', label: gettext('Privileges'), type: 'collection',\n          group: 'security', control: 'unique-col-collection', mode: ['edit', 'create'],\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n            privileges: ['U']\n          }), canAdd: true, canDelete: true, uniqueCol : ['grantee']\n         },{\n          id: 'seclabels', label: gettext('Security Labels'), mode: ['edit', 'create'],\n          model: pgBrowser.SecLabelModel, editable: false,\n          type: 'collection', group: 'security', min_version: 90200,\n          canAdd: true, canEdit: false, canDelete: true,\n          control: 'unique-col-collection'\n        }\n        ],\n        /* validate function is used to validate the input given by\n         * the user. In case of error, message will be displayed on\n         * the GUI for the respective control.\n         */\n        validate: function() {\n          var name = this.get('name');\n\n          if (_.isUndefined(name) || _.isNull(name) ||\n            String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('name');\n          }\n\n          // If predefined template is selected then no need to validate it.\n          if (!this.get('is_template')) {\n            var handler_func = this.get('lanproc');\n            if (_.isUndefined(handler_func) || _.isNull(handler_func) ||\n              String(handler_func).replace(/^\\s+|\\s+$/g, '') == '') {\n              var msg = gettext('Handler Function cannot be empty');\n              this.errorModel.set('lanproc', msg);\n              return msg;\n            } else {\n              this.errorModel.unset('lanproc');\n            }\n          }\n\n          return null;\n        }\n      })\n    })\n  }\n  return pgBrowser.Nodes['coll-language'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/languages/static/js/language.js","define('pgadmin.node.foreign_data_wrapper', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection', 'pgadmin.browser.server.privilege'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n    // Extend the browser's node model class to create a Options model\n    var OptionsModel = pgBrowser.Node.Model.extend({\n        idAttribute: 'fdwoption',\n        defaults: {\n          fdwoption: undefined,\n          fdwvalue: undefined\n        },\n        // Defining schema for the Options model\n        schema: [{\n          id: 'fdwoption', label: gettext('Option'), type:'text',\n          cellHeaderClasses:'width_percent_50', editable: true\n        },{\n          id: 'fdwvalue', label: gettext('Value'), type: 'text',\n          cellHeaderClasses:'width_percent_50', group:null, editable: true\n        }],\n        /* validate function is used to validate the input given by\n         * the user. In case of error, message will be displayed on\n         * the browser for the respective control.\n         */\n        validate: function() {\n          // Validation for the option name\n          if (_.isUndefined(this.get('fdwoption')) ||\n            _.isNull(this.get('fdwoption')) ||\n            String(this.get('fdwoption')).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = 'Please enter an option name';\n            this.errorModel.set('fdwoption', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('fdwoption');\n          }\n          return null;\n        }\n    });\n\n  // Extend the browser's collection class for foreign data wrapper collection\n  if (!pgBrowser.Nodes['coll-foreign_data_wrapper']) {\n    var foreign_data_wrappers = pgBrowser.Nodes['coll-foreign_data_wrapper'] =\n      pgBrowser.Collection.extend({\n        node: 'foreign_data_wrapper',\n        label: gettext('Foreign Data Wrappers'),\n        type: 'coll-foreign_data_wrapper',\n        columns: ['name','fdwowner','description']\n      });\n  };\n\n  // Extend the browser's node class for foreign data wrapper node\n  if (!pgBrowser.Nodes['foreign_data_wrapper']) {\n    pgBrowser.Nodes['foreign_data_wrapper'] = pgBrowser.Node.extend({\n      parent_type: 'database',\n      type: 'foreign_data_wrapper',\n      sqlAlterHelp: 'sql-alterforeigndatawrapper.html',\n      sqlCreateHelp: 'sql-createforeigndatawrapper.html',\n      dialogHelp: url_for('help.static', {'filename': 'foreign_data_wrapper_dialog.html'}),\n      label: gettext('Foreign Data Wrapper'),\n      hasSQL:  true,\n      hasDepends: true,\n      canDrop: true,\n      canDropCascade: true,\n      Init: function() {\n\n        // Avoid multiple registration of menus\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        /* Create foreign data wrapper context menu at database,\n         * foreign data wrapper collections and foreign data wrapper node\n         */\n        pgBrowser.add_menus([{\n          name: 'create_foreign_data_wrapper_on_coll', node: 'coll-foreign_data_wrapper', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Foreign Data Wrapper...'),\n          icon: 'wcTabIcon icon-foreign_data_wrapper', data: {action: 'create'}\n        },{\n          name: 'create_foreign_data_wrapper', node: 'foreign_data_wrapper', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Foreign Data Wrapper...'),\n          icon: 'wcTabIcon icon-foreign_data_wrapper', data: {action: 'create'}\n        },{\n          name: 'create_foreign_data_wrapper', node: 'database', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Foreign Data Wrapper...'),\n          icon: 'wcTabIcon icon-foreign_data_wrapper', data: {action: 'create'},\n          enable: pgBrowser.Nodes['database'].is_conn_allow\n        }\n        ]);\n      },\n\n      // Defining model for foreign data wrapper node\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          fdwowner: undefined,\n          comment: undefined,\n          fdwvalue: undefined,\n          fdwhan: undefined,\n          fdwoption: undefined,\n          fdwacl: []\n        },\n\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n\n            this.set({'fdwowner': userInfo.name}, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n\n        // Defining schema for the foreign data wrapper node\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', disabled: function(m) {\n\n            // name field will be disabled only if edit mode and server version is below 9.2\n            if (this.mode == 'edit' && this.node_info.server.version < 90200) {\n              return true;\n            }\n            else\n              return false;\n          }\n        },{\n          id: 'fdwoid', label: gettext('OID'), cell: 'string',\n          type: 'text', disabled: true, mode: ['properties']\n        },{\n          id: 'fdwowner', label: gettext('Owner'), type: 'text',\n          control: Backform.NodeListByNameControl, node: 'role',\n          mode: ['edit', 'create', 'properties'], select2: { allowClear: false }\n        },{\n          id: 'fdwhan', label: gettext('Handler'), type: 'text', control: 'node-ajax-options',\n          group: gettext('Definition'), mode: ['edit', 'create', 'properties'], url:'get_handlers'\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline'\n        },{\n          id: 'fdwoptions', label: 'Options', type: 'collection', group: gettext('Options'),\n          model: OptionsModel, control: 'unique-col-collection', mode: ['edit', 'create'],\n          canAdd: true, canDelete: true, uniqueCol : ['fdwoption'],\n          columns: ['fdwoption','fdwvalue']\n        },{\n          id: 'fdwvalue', label: gettext('Validator'), type: 'text', control: 'node-ajax-options',\n          group: gettext('Definition'), mode: ['edit', 'create', 'properties'], url:'get_validators'\n        },{\n          id: 'security', label: gettext('Security'), type: 'group'\n        },{\n            id: 'fdwacl', label: 'Privileges', type: 'collection',\n            group: 'security', mode: ['edit', 'create'], canAdd: true,\n            canDelete: true, uniqueCol : ['grantee'],\n            model: pgBrowser.Node.PrivilegeRoleModel.extend({\n              privileges: ['U']\n            }), control: 'unique-col-collection'\n         },{\n          id: 'acl', label: gettext('Privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n         }],\n         /* validate function is used to validate the input given by\n          * the user. In case of error, message will be displayed on\n          * the browser for the respective control.\n          */\n         validate: function() {\n           var name = this.get('name');\n\n           if (_.isUndefined(name) || _.isNull(name) ||\n               String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n                 var msg = gettext('Name cannot be empty.');\n                 this.errorModel.set('name', msg);\n                 return msg;\n               } else {\n                 this.errorModel.unset('name');\n               }\n               return null;\n         }\n      })\n    });\n  }\n\n  return pgBrowser.Nodes['foreign_data_wrapper'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/foreign_data_wrappers/static/js/foreign_data_wrapper.js","define('pgadmin.node.foreign_server', [\n  'sources/gettext', 'jquery', 'underscore', 'underscore.string', 'sources/pgadmin',\n  'pgadmin.browser', 'alertify', 'pgadmin.browser.collection',\n  'pgadmin.browser.server.privilege'\n], function(gettext, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Extend the browser's node model class to create a Options model\n  var OptionsModel = pgAdmin.Browser.Node.Model.extend({\n        idAttribute: 'fsrvoption',\n        defaults: {\n          fsrvoption: undefined,\n          fsrvvalue: undefined\n        },\n\n        // Defining schema for the Options model\n        schema: [\n          {id: 'fsrvoption', label:'Options', type:'text', cellHeaderClasses:'width_percent_50', group: null, editable: true},\n          {id: 'fsrvvalue', label:'Value', type: 'text', cellHeaderClasses:'width_percent_50', group:null, editable: true},\n        ],\n\n        /* validate function is used to validate the input given by\n         * the user. In case of error, message will be displayed on\n         * the browser for the respective control.\n         */\n        validate: function() {\n          // Validation for the option name\n          if (_.isUndefined(this.get('fsrvoption')) ||\n            _.isNull(this.get('fsrvoption')) ||\n            String(this.get('fsrvoption')).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = 'Please enter an option name';\n            this.errorModel.set('fsrvoption', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('fsrvoption');\n          }\n          return null;\n        }\n    });\n\n  // Extend the browser's collection class for foreign server collection\n  if (!pgBrowser.Nodes['coll-foreign_server']) {\n    var foreign_data_wrappers = pgAdmin.Browser.Nodes['coll-foreign_server'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'foreign_server',\n        label: gettext('Foreign Servers'),\n        type: 'coll-foreign_server',\n        columns: ['name','fsrvowner','description']\n      });\n  };\n\n  // Extend the browser's node class for foreign server node\n  if (!pgBrowser.Nodes['foreign_server']) {\n    pgAdmin.Browser.Nodes['foreign_server'] = pgAdmin.Browser.Node.extend({\n      parent_type: 'foreign_data_wrapper',\n      type: 'foreign_server',\n      sqlAlterHelp: 'sql-alterforeignserver.html',\n      sqlCreateHelp: 'sql-createforeignserver.html',\n      label: gettext('Foreign Server'),\n      hasSQL:  true,\n      hasDepends: true,\n      canDrop: true,\n      canDropCascade: true,\n      Init: function() {\n\n        // Avoid multiple registration of menus\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        /* Create foreign server context menu at database,\n         * foreign server collections and foreign server node\n         */\n        pgBrowser.add_menus([{\n          name: 'create_foreign_server_on_coll', node: 'coll-foreign_server', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Foreign Server...'),\n          icon: 'wcTabIcon icon-foreign_server', data: {action: 'create'}\n        },{\n          name: 'create_foreign_server', node: 'foreign_server', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Foreign Server...'),\n          icon: 'wcTabIcon icon-foreign_server', data: {action: 'create'}\n        },{\n          name: 'create_foreign_server', node: 'foreign_data_wrapper', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Foreign Server...'),\n          icon: 'wcTabIcon icon-foreign_server', data: {action: 'create'}\n        }\n        ]);\n      },\n\n      // Defining model for foreign server node\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          fsrvtype: undefined,\n          fsrvversion: undefined,\n          fsrvvalue: undefined,\n          fsrvoptions: [],\n          fsrvowner: undefined,\n          description: undefined,\n          fsrvacl: []\n        },\n\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n\n            this.set({'fsrvowner': userInfo.name}, {silent: true});\n          }\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n\n        // Defining schema for the foreign server node\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', disabled: function(m) {\n            if (this.mode == 'edit' && this.node_info.server.version < 90200) {\n              return true;\n            }\n            else\n              return false;\n          }\n        },{\n          id: 'fsrvid', label: gettext('OID'), cell: 'string',\n          type: 'text', disabled: true, mode: ['properties']\n        },{\n          id: 'fsrvowner', label: gettext('Owner'), type: 'text',\n          control: Backform.NodeListByNameControl, node: 'role',\n          mode: ['edit', 'create', 'properties'], select2: { allowClear: false }\n        },{\n          id: 'fsrvtype', label: gettext('Type'), cell: 'string',\n          group: gettext('Definition'), type: 'text', mode: ['edit','create','properties'], disabled: function(m) {\n            return !m.isNew();\n          }\n        },{\n          id: 'fsrvversion', label: gettext('Version'), cell: 'string',\n          group: gettext('Definition'), type: 'text'\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline'\n        },{\n          id: 'fsrvoptions', label: 'Options', type: 'collection', group: gettext(\"Options\"),\n          model: OptionsModel, control: 'unique-col-collection', mode: ['edit', 'create'],\n          canAdd: true, canDelete: true, uniqueCol : ['fsrvoption'],\n          columns: ['fsrvoption','fsrvvalue']\n         }, pgBrowser.SecurityGroupSchema, {\n            id: 'fsrvacl', label: 'Privileges', type: 'collection', group: 'security',\n            model: pgAdmin.Browser.Node.PrivilegeRoleModel.extend({privileges: ['U']}), control: 'unique-col-collection',\n            mode: ['edit', 'create'], canAdd: true, canDelete: true, uniqueCol : ['grantee']\n         },{\n          id: 'acl', label: gettext('Privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n         }\n        ],\n\n        /* validate function is used to validate the input given by\n         * the user. In case of error, message will be displayed on\n         * the browser for the respective control.\n         */\n        validate: function() {\n          var name = this.get('name');\n\n          if (_.isUndefined(name) || _.isNull(name) ||\n            String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('name');\n          }\n          return null;\n        }\n      })\n  });\n\n  }\n\n  return pgBrowser.Nodes['coll-foreign_server'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/foreign_data_wrappers/foreign_servers/static/js/foreign_server.js","define('pgadmin.node.user_mapping', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'underscore.string', 'sources/pgadmin',\n  'pgadmin.browser', 'alertify', 'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n    // Extend the browser's node model class to create a Options model\n    var OptionsModel = pgAdmin.Browser.Node.Model.extend({\n       idAttribute: 'umoption',\n        defaults: {\n          umoption: undefined,\n          umvalue: undefined\n        },\n\n        // Defining schema for the Options model\n        schema: [{\n          id: 'umoption', label: gettext('Options'), type:'text',\n          cellHeaderClasses:'width_percent_50', group: null, editable: true\n        }, {\n          id: 'umvalue', label: gettext('Value'), type: 'text',\n          cellHeaderClasses:'width_percent_50', group:null, editable: true\n        }],\n\n        /* validate function is used to validate the input given by\n         * the user. In case of error, message will be displayed on\n         * the browser for the respective control.\n         */\n        validate: function() {\n          // Validation for the option value\n          if (_.isUndefined(this.get('umoption')) ||\n            _.isNull(this.get('umoption')) ||\n            String(this.get('umoption')).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = 'Please enter an option name';\n            this.errorModel.set('umoption', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('umoption');\n          }\n          return null;\n        }\n    });\n\n  // Extend the browser's collection class for user mapping collection\n  if (!pgBrowser.Nodes['coll-user_mapping']) {\n    var foreign_data_wrappers = pgAdmin.Browser.Nodes['coll-user_mapping'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'user_mapping',\n        label: gettext('User Mappings'),\n        type: 'coll-user_mapping',\n        columns: ['name']\n      });\n  };\n\n  // Extend the browser's node class for user mapping node\n  if (!pgBrowser.Nodes['user_mapping']) {\n    pgAdmin.Browser.Nodes['user_mapping'] = pgAdmin.Browser.Node.extend({\n      parent_type: 'foreign_server',\n      type: 'user_mapping',\n      sqlAlterHelp: 'sql-alterusermapping.html',\n      sqlCreateHelp: 'sql-createusermapping.html',\n      dialogHelp: url_for('help.static', {'filename': 'user_mapping_dialog.html'}),\n      label: gettext('User Mapping'),\n      hasSQL:  true,\n      hasDepends: true,\n      canDrop: true,\n      canDropCascade: true,\n      Init: function() {\n\n        // Avoid multiple registration of menus\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        /* Create foreign server context menu at database,\n         * user mapping collections and user mapping node\n         */\n        pgBrowser.add_menus([{\n          name: 'create_user_mapping_on_coll', node: 'coll-user_mapping', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('User Mapping...'),\n          icon: 'wcTabIcon icon-user_mapping', data: {action: 'create'}\n        },{\n          name: 'create_user_mapping', node: 'user_mapping', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('User Mapping...'),\n          icon: 'wcTabIcon icon-user_mapping', data: {action: 'create'}\n        },{\n          name: 'create_user_mapping', node: 'foreign_server', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('User Mapping...'),\n          icon: 'wcTabIcon icon-user_mapping', data: {action: 'create'}\n        }\n        ]);\n      },\n\n      // Defining model for user mapping node\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          um_options: []\n        },\n\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n\n            this.set({'name': userInfo.name}, {silent: true});\n          }\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n\n        // Defining schema for the user mapping node\n        schema: [{\n          id: 'name', label: gettext('User'), type: 'text',\n          control: Backform.NodeListByNameControl, node: 'role',\n          mode: ['edit', 'create', 'properties'], select2: { allowClear: false },\n          disabled: function(m) { return !m.isNew(); },\n          transform: function(data) {\n            var self = this,\n              node = self.field.get('schema_node');\n            var res =\n            Backform.NodeListByNameControl.prototype.defaults.transform.apply(\n              this, arguments\n            );\n            res.unshift({label: 'CURRENT_USER', value: 'CURRENT_USER', image: 'icon-' + node.type},\n                        {label: 'PUBLIC', value: 'PUBLIC', image: 'icon-' + node.type});\n            return res;\n         }\n        },{\n          id: 'um_oid', label: gettext('OID'), cell: 'string',\n          type: 'text', disabled: true, mode: ['properties'],\n        },{\n          id: 'umoptions', label: 'Options', type: 'collection', group: gettext(\"Options\"),\n          model: OptionsModel, control: 'unique-col-collection', mode: ['create', 'edit'],\n          canAdd: true, canDelete: true, uniqueCol : ['umoption']\n        }\n        ],\n\n        /* validate function is used to validate the input given by\n         * the user. In case of error, message will be displayed on\n         * the browser for the respective control.\n         */\n        validate: function() {\n          var name = this.get('name');\n\n          if (_.isUndefined(name) || _.isNull(name) ||\n            String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('name');\n          }\n          return null;\n        }\n      })\n  });\n\n  }\n\n  return pgBrowser.Nodes['coll-user_mapping'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/foreign_data_wrappers/foreign_servers/user_mapping/static/js/user_mapping.js","define('pgadmin.node.schema', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'backform', 'alertify',\n  'pgadmin.browser.collection', 'pgadmin.browser.server.privilege'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, Backform, alertify) {\n\n  // VacuumSettings Collection to display all settings parameters as Grid\n  var VacuumCollectionControl = Backform.VacuumCollectionControl =\n    Backform.Control.extend({\n\n    grid_columns:undefined,\n\n    initialize: function() {\n      Backform.Control.prototype.initialize.apply(this, arguments);\n      var self = this,\n          m = this.model,\n          url = self.field.get('url');\n\n      if (url && m.isNew()) {\n        var node = self.field.get('node'),\n            node_data = self.field.get('node_data'),\n            node_info = self.field.get('node_info'),\n            full_url = node.generate_url.apply(\n              node, [\n                null, url, node_data, false, node_info\n              ]),\n            data;\n        m.trigger('pgadmin-view:fetching', m, self.field);\n\n        // fetch default values for autovacuum fields\n        $.ajax({\n          async: false,\n          url: full_url,\n          success: function (res) {\n            data = res;\n          },\n          error: function() {\n            m.trigger('pgadmin-view:fetch:error', m, self.field);\n          }\n        });\n        m.trigger('pgadmin-view:fetched', m, self.field);\n\n        // Add fetched models into collection\n        if (data && _.isArray(data)) {\n          m.get(self.field.get('name')).reset(data, {silent: true});\n        }\n      }\n    },\n\n    render: function() {\n      var self = this,\n          m = this.model,\n          attributes = self.field.attributes;\n\n      // remove grid\n      if(self.grid) {\n        self.grid.remove();\n        delete self.grid;\n        self.grid = undefined;\n      }\n\n      self.$el.empty();\n\n      var gridHeader = _.template([\n          '<div class=\"subnode-header\">',\n          '  <label class=\"control-label col-sm-4\"><%-label%></label>',\n          '</div>'].join(\"\\n\")),\n          gridBody = $('<div class=\"pgadmin-control-group backgrid form-group col-xs-12 object subnode\"></div>').append(\n              gridHeader(attributes)\n              );\n\n      // Initialize a new Grid instance\n      var grid = self.grid = new Backgrid.Grid({\n        columns: self.grid_columns,\n        collection: self.model.get(self.field.get('name')),\n        className: \"backgrid table-bordered\"\n      });\n\n      // render grid\n      self.$el.append($(gridBody).append(grid.render().$el));\n\n      return self;\n    }\n  });\n\n  // We will use this function in VacuumSettings Control\n  // to convert data type on the fly\n  var cellFunction = Backform.cellFunction = function(model) {\n    var self = this,\n        m = model,\n        vartype = model.get('column_type');\n\n    switch(vartype) {\n      case \"integer\":\n        return Backgrid.IntegerCell;\n      break;\n      case \"number\":\n        return Backgrid.NumberCell;\n      break;\n      case \"string\":\n        return Backgrid.StringCell;\n      break;\n      default:\n        return Backgrid.Cell;\n      break;\n    }\n  };\n\n  // Define Security Model with fields and validation for VacuumSettings Control\n  var VacuumTableModel =  Backform.VacuumTableModel = pgBrowser.Node.Model.extend({\n    defaults: {\n      name: undefined,\n      setting: undefined,\n      label:undefined,\n      value: undefined,\n      column_type: undefined\n    },\n\n    toJSON: function(){\n      var d = pgBrowser.Node.Model.prototype.toJSON.apply(this);\n      delete d.label;\n      delete d.setting;\n      delete d.column_type;\n      return d;\n    }\n  });\n\n   // Extend the browser's collection class for VacuumSettingsModel\n  var VacuumSettingsSchema = Backform.VacuumSettingsSchema = [{\n    id: 'autovacuum_custom', label: gettext('Custom auto-vacuum?'),\n    group: gettext('Table'), mode: ['edit', 'create'],\n    type: 'switch',\n    disabled: function(m) {\n      // If table is partitioned table then disabled it.\n      if (m.top && m.top.get('is_partitioned')) {\n        // We also need to unset rest of all\n        setTimeout(function() {\n          m.set('autovacuum_custom', false);\n        }, 10);\n\n        return true;\n      }\n\n      if(!m.top.inSchema.apply(this, [m])) {\n        return false;\n      }\n      return true;\n    }\n  },{\n    id: 'autovacuum_enabled', label: gettext('Enabled?'),\n    group: gettext('Table'), mode: ['edit', 'create'],\n    type: 'switch',\n    deps: ['autovacuum_custom'],\n    disabled: function(m) {\n      if(!m.top.inSchema.apply(this, [m]) &&\n        m.get('autovacuum_custom') == true) {\n        return false;\n      }\n\n      // We also need to unset rest of all\n      setTimeout(function() {\n        m.set('autovacuum_enabled', false);\n      }, 10);\n      return true;\n    }\n  },{\n    id: 'vacuum_table', label: gettext('Vacuum Table'),\n    model: Backform.VacuumTableModel, editable: false, type: 'collection',\n    canEdit: true, group: gettext('Table'),\n    mode: ['edit', 'create'], url: 'get_table_vacuum',\n    control: Backform.VacuumCollectionControl.extend({\n      grid_columns :[\n        {\n          name: 'label', label: gettext('Label'),\n          headerCell: Backgrid.Extension.CustomHeaderCell,\n          cell: 'string', editable: false, cellHeaderClasses:'width_percent_40'\n        },\n        {\n          name: 'value', label: gettext('Value'),\n          cellHeaderClasses:'width_percent_30',\n          cellFunction: Backform.cellFunction, editable: function(m) {\n            return m.handler.get('autovacuum_enabled');\n          }, headerCell: Backgrid.Extension.CustomHeaderCell\n        },\n        {\n          name: 'setting', label: gettext('Default value'),\n          cellHeaderClasses:'width_percent_30',\n          headerCell: Backgrid.Extension.CustomHeaderCell,\n          cellFunction: Backform.cellFunction, editable: false\n        }\n      ]\n    }),\n    deps: ['autovacuum_enabled']\n  },{\n    id: 'toast_autovacuum', label: gettext('Custom auto-vacuum?'),\n    group: gettext('Toast Table'), mode: ['edit', 'create'],\n    type: 'switch',\n    disabled: function(m) {\n      // We need to check additional condition to toggle enable/disable\n      // for table auto-vacuum\n      if(!m.top.inSchema.apply(this, [m]) && m.isNew()) {\n        return false;\n      } else if(!m.top.inSchema.apply(this, [m]) &&\n          (m.get('toast_autovacuum_enabled') === true ||\n          m.top.get('hastoasttable') === true)) {\n        return false;\n      }\n      return true;\n    }\n  },{\n    id: 'toast_autovacuum_enabled', label: gettext('Enabled?'),\n    group: gettext('Toast Table'), mode: ['edit', 'create'],\n    type: 'switch',\n    deps:['toast_autovacuum'],\n    disabled: function(m) {\n      // If in schema & in create mode then enable it\n      if(!m.top.inSchema.apply(this, [m]) &&\n          m.get('toast_autovacuum') === true) {\n        return false;\n      }\n\n      if (m.isNew() || m.get('hastoasttable')) {\n        // we also need to unset rest of all\n        setTimeout(function() {\n          m.set('toast_autovacuum_enabled', false);\n        }, 10);\n      }\n    return true;\n    }\n  },{\n    id: 'vacuum_toast', label: gettext('Vacuum Toast Table'),\n    model: Backform.VacuumTableModel, type: 'collection', editable: function(m) {\n      return m.isNew();\n    },\n    canEdit: true, group: gettext('Toast Table'),\n    mode: ['properties', 'edit', 'create'], url: 'get_toast_table_vacuum',\n    control: Backform.VacuumCollectionControl.extend({\n      grid_columns :[\n        {\n          name: 'label', label: gettext('Label'),\n          headerCell: Backgrid.Extension.CustomHeaderCell,\n          cell: 'string', editable: false, cellHeaderClasses:'width_percent_40'\n        },\n        {\n          name: 'value', label: gettext('Value'),\n          cellHeaderClasses:'width_percent_30',\n          headerCell: Backgrid.Extension.CustomHeaderCell,\n          cellFunction: Backform.cellFunction, editable: function(m) {\n            return m.handler.get('toast_autovacuum_enabled');\n          }\n        },\n        {\n          name: 'setting', label: gettext('Default value'),\n          cellHeaderClasses:'width_percent_30',\n          headerCell: Backgrid.Extension.CustomHeaderCell,\n          cellFunction: Backform.cellFunction, editable: false\n        }\n      ]\n    }),\n    deps: ['toast_autovacuum_enabled']\n  }];\n\n  // Extend the browser's collection class for schema collection\n  if (!pgBrowser.Nodes['coll-schema']) {\n    var databases = pgBrowser.Nodes['coll-schema'] =\n      pgBrowser.Collection.extend({\n        node: 'schema',\n        label: gettext('Schemas'),\n        type: 'coll-schema',\n        columns: ['name', 'namespaceowner', 'description']\n      });\n  };\n  // Extend the browser's node class for schema node\n  if (!pgBrowser.Nodes['schema']) {\n    pgBrowser.Nodes['schema'] = pgBrowser.Node.extend({\n      parent_type: 'database',\n      type: 'schema',\n      sqlAlterHelp: 'sql-alterschema.html',\n      sqlCreateHelp: 'sql-createschema.html',\n      dialogHelp: url_for('help.static', {'filename': 'schema_dialog.html'}),\n      label: gettext('Schema'),\n      hasSQL:  true,\n      canDrop: true,\n      canDropCascade: true,\n      hasDepends: true,\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_schema_on_coll', node: 'coll-schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Schema...'),\n          icon: 'wcTabIcon icon-schema', data: {action: 'create'}\n        },{\n          name: 'create_schema', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Schema...'),\n          icon: 'wcTabIcon icon-schema', data: {action: 'create'}\n        },{\n          name: 'create_schema', node: 'database', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Schema...'),\n          icon: 'wcTabIcon icon-schema', data: {action: 'create'},\n          enable: 'can_create_schema'\n        }\n        ]);\n      },\n      can_create_schema: function(node, item) {\n        return pgBrowser.Nodes['database'].is_conn_allow.call(this, node);\n      },\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          namespaceowner: undefined,\n          description: undefined,\n          is_system_obj: undefined,\n        },\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n\n            this.set({'namespaceowner': userInfo.name}, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text', disabled: true, mode: ['properties']\n        },{\n          id: 'namespaceowner', label: gettext('Owner'), cell: 'string',\n          type: 'text', control: 'node-list-by-name', node: 'role',\n          select2: { allowClear: false }\n        },{\n          id: 'is_sys_object', label: gettext('System schema?'),\n          cell: 'switch', type: 'switch', mode: ['properties'], disabled: true\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline'\n        },{\n          id: 'acl', label: gettext('Privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'tblacl', label: gettext('Default TABLE privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'seqacl', label: gettext('Default SEQUENCE privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'funcacl', label: gettext('Default FUNCTION privileges'),\n          group: gettext('Security'), type: 'text', mode: ['properties'], disabled: true\n        },{\n          id: 'typeacl', label: gettext('Default TYPE privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true, min_version: 90200,\n          visible: function() {\n            return this.version_compatible;\n          }\n        },{\n          id: 'nspacl', label: gettext('Privileges'),\n          model: pgBrowser.Node.PrivilegeRoleModel.extend(\n          {privileges: ['C', 'U']}), uniqueCol : ['grantee', 'grantor'],\n          editable: false, type: 'collection', group: gettext('Security'),\n          mode: ['edit', 'create'],\n          canAdd: true, canDelete: true, control: 'unique-col-collection',\n        },{\n          id: 'seclabels', label: gettext('Security Labels'),\n          model: pgBrowser.SecLabelModel, editable: false, type: 'collection',\n          group: gettext('Security'), mode: ['edit', 'create'],\n          min_version: 90200, canAdd: true,\n          canEdit: false, canDelete: true, control: 'unique-col-collection'\n        },{\n          type: 'nested', control: 'tab', group: gettext('Default Privileges'),\n          mode: ['create','edit'],\n          schema:[{\n              id: 'deftblacl', model: pgBrowser.Node.PrivilegeRoleModel.extend(\n              {privileges: ['a', 'r', 'w', 'd', 'D', 'x', 't']}),\n              label: gettext('Default Privileges: Tables'),\n              editable: false, type: 'collection', group: gettext('Tables'),\n              mode: ['edit', 'create'], control: 'unique-col-collection',\n              canAdd: true, canDelete: true, uniqueCol : ['grantee', 'grantor']\n            },{\n              id: 'defseqacl', model: pgBrowser.Node.PrivilegeRoleModel.extend(\n              {privileges: ['r', 'w', 'U']}),\n              label: gettext('Default Privileges: Sequences'),\n              editable: false, type: 'collection', group: gettext('Sequences'),\n              mode: ['edit', 'create'], control: 'unique-col-collection',\n              canAdd: true, canDelete: true, uniqueCol : ['grantee', 'grantor']\n            },{\n              id: 'deffuncacl', model: pgBrowser.Node.PrivilegeRoleModel.extend(\n              {privileges: ['X']}),\n              label: gettext('Default Privileges: Functions'),\n              editable: false, type: 'collection', group: gettext('Functions'),\n              mode: ['edit', 'create'], control: 'unique-col-collection',\n              canAdd: true, canDelete: true, uniqueCol : ['grantee', 'grantor']\n            },{\n              id: 'deftypeacl', model: pgBrowser.Node.PrivilegeRoleModel.extend(\n              {privileges: ['U']}),\n              label: gettext('Default Privileges: Types'),\n              editable: false, type: 'collection', group: gettext('Types'),\n              mode: ['edit', 'create'], control: 'unique-col-collection',\n              canAdd: true, canDelete: true, uniqueCol : ['grantee', 'grantor'],\n              min_version: 90200\n            }]\n         }\n        ],\n        validate: function() {\n          var err = {},\n              errmsg = null;\n          // Validation of mandatory fields\n          this.errorModel.clear();\n          if (_.isUndefined(this.get('name')) ||\n            _.isNull(this.get('name')) ||\n            String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n                errmsg = gettext('Name cannot be empty.');\n                this.errorModel.set('name', errmsg);\n                return errmsg;\n          } else if (_.isUndefined(this.get('namespaceowner')) ||\n            _.isNull(this.get('namespaceowner')) ||\n            String(this.get('namespaceowner')).replace(/^\\s+|\\s+$/g, '') == '') {\n                errmsg = gettext('Owner cannot be empty.');\n                this.errorModel.set('namespaceowner', errmsg);\n                return errmsg;\n          }\n          return null;\n        }\n      }),\n      // This function will checks whether we can allow user to\n      // drop object or not based on location within schema & catalog\n      canChildDrop: function(itemData, item) {\n        var t = pgBrowser.tree, i = item, d = itemData;\n        // To iterate over tree to check parent node\n        while (i) {\n          // If it is schema then allow user to create collation\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n            //Check if we are not child of catalog\n          var prev_i = t.hasParent(i) ? t.parent(i) : null,\n            prev_d = prev_i ? t.itemData(prev_i) : null;\n            if(prev_d && prev_d._type == 'catalog') {\n              return false;\n            }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // by default we do not want to allow create menu\n        return true;\n      }\n    });\n\n    pgBrowser.tableChildTreeNodeHierarchy = function(i) {\n      var idx = 0,\n          res = {},\n          t = pgBrowser.tree;\n\n      do {\n        var d = t.itemData(i);\n        if (\n          d._type in pgBrowser.Nodes && pgBrowser.Nodes[d._type].hasId\n        ) {\n          if (d._type === 'partition' || d._type === 'table') {\n            if (!('table' in res)) {\n              res['table'] = _.extend({}, d, {'priority': idx});\n              idx -= 1;\n            }\n          } else {\n            res[d._type] = _.extend({}, d, {'priority': idx});\n            idx -= 1;\n          }\n        }\n        i = t.hasParent(i) ? t.parent(i) : null;\n      } while (i);\n\n      return res;\n    };\n  }\n\n  // Switch Cell with Deps (specifically for table children)\n  var TableChildSwitchCell =\n    Backgrid.Extension.TableChildSwitchCell = Backgrid.Extension.SwitchCell.extend({\n      initialize: function() {\n        Backgrid.Extension.SwitchCell.prototype.initialize.apply(this, arguments);\n        Backgrid.Extension.DependentCell.prototype.initialize.apply(this, arguments);\n      },\n      dependentChanged: function () {\n        var model = this.model,\n          column = this.column,\n          editable = this.column.get(\"editable\"),\n          input = this.$el.find('input[type=checkbox]').first(),\n          self_name = column.get('name'),\n          is_editable;\n\n        is_editable = _.isFunction(editable) ? !!editable.apply(column, [model]) : !!editable;\n        if (is_editable) {\n           this.$el.addClass(\"editable\");\n           input.bootstrapSwitch('disabled',false);\n         } else {\n           this.$el.removeClass(\"editable\");\n           input.bootstrapSwitch('disabled',true);\n           // Set self value into model to false\n           setTimeout(function() { model.set(self_name, false); }, 10);\n         }\n\n        this.delegateEvents();\n        return this;\n      },\n      remove: Backgrid.Extension.DependentCell.prototype.remove\n  });\n\n  return pgBrowser.Nodes['schema'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/static/js/schema.js","define('pgadmin.node.catalog', [\n  'sources/gettext', 'jquery', 'underscore', 'underscore.string', 'sources/pgadmin',\n  'pgadmin.browser', 'backform', 'alertify', 'pgadmin.browser.collection'\n], function(gettext, $, _, S, pgAdmin, pgBrowser, Backform, alertify) {\n\n  // Extend the browser's collection class for catalog collection\n  if (!pgBrowser.Nodes['coll-catalog']) {\n    var databases = pgBrowser.Nodes['coll-catalog'] =\n      pgBrowser.Collection.extend({\n        node: 'catalog',\n        label: gettext('Catalogs'),\n        type: 'coll-catalog',\n        columns: ['name', 'namespaceowner', 'description']\n      });\n  };\n  // Extend the browser's node class for catalog node\n  if (!pgBrowser.Nodes['catalog']) {\n    pgBrowser.Nodes['catalog'] = pgBrowser.Node.extend({\n      parent_type: 'database',\n      type: 'catalog',\n      label: gettext('Catalog'),\n      hasSQL:  true,\n      hasDepends: true,\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n      },\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          namespaceowner: undefined,\n          nspacl: undefined,\n          description: undefined,\n          securitylabel: []\n        },\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n\n            this.set({'namespaceowner': userInfo.name}, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', disabled: true\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string', mode: ['properties'],\n          type: 'text', disabled: true\n        },{\n          id: 'namespaceowner', label: gettext('Owner'), cell: 'string',\n          type: 'text', disabled: true\n        },{\n          id: 'acl', label: gettext('Privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline'\n       },{\n          id: 'seclabels', label: gettext('Security Labels'),\n          model: pgBrowser.SecLabelModel, editable: false, type: 'collection',\n          group: gettext('Security'), mode: ['edit', 'create'],\n          min_version: 90200, canAdd: true,\n          canEdit: false, canDelete: true, control: 'unique-col-collection'\n         }\n        ],\n        validate: function() {\n          return null;\n        }\n      })\n  });\n\n  }\n\n  return pgBrowser.Nodes['catalog'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/static/js/catalog.js","define('pgadmin.node.catalog_object', [\n  'sources/gettext', 'jquery', 'underscore', 'underscore.string', 'sources/pgadmin',\n  'pgadmin.browser', 'alertify', 'pgadmin.browser.collection'\n], function(gettext, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-catalog_object']) {\n    var databases = pgAdmin.Browser.Nodes['coll-catalog_object'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'catalog_object',\n        label: gettext('Catalog Objects'),\n        type: 'coll-catalog_object',\n        columns: ['name', 'owner', 'description']\n      });\n  };\n\n  if (!pgBrowser.Nodes['catalog_object']) {\n    pgAdmin.Browser.Nodes['catalog_object'] = pgAdmin.Browser.Node.extend({\n      parent_type: 'catalog',\n      type: 'catalog_object',\n      label: gettext('Catalog Object'),\n      hasSQL:  false,\n      hasScriptTypes: [],\n      hasDepends: true,\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n      },\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          namespaceowner: undefined,\n          nspacl: undefined,\n          description: undefined,\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', disabled: true\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text', disabled: true\n        },{\n          id: 'owner', label: gettext('Owner'), cell: 'string',\n          type: 'text', disabled: true\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline' ,  disabled: true\n        }\n        ]\n      })\n  });\n\n  }\n\n  return pgBrowser.Nodes['catalog_object'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/catalog_objects/static/js/catalog_object.js","define('pgadmin.node.collation', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-collation']) {\n    var databases = pgAdmin.Browser.Nodes['coll-collation'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'collation',\n        label: gettext('Collations'),\n        type: 'coll-collation',\n        columns: ['name', 'owner', 'description']\n      });\n  };\n\n  if (!pgBrowser.Nodes['collation']) {\n    pgAdmin.Browser.Nodes['collation'] = pgBrowser.Node.extend({\n      type: 'collation',\n      sqlAlterHelp: 'sql-altercollation.html',\n      sqlCreateHelp: 'sql-createcollation.html',\n      dialogHelp: url_for('help.static', {'filename': 'collation_dialog.html'}),\n      label: gettext('Collation'),\n      collection_type: 'coll-collation',\n      hasSQL: true,\n      hasDepends: true,\n      parent_type: ['schema', 'catalog'],\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_collation_on_coll', node: 'coll-collation', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Collation...'),\n          icon: 'wcTabIcon icon-collation', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_collation', node: 'collation', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Collation...'),\n          icon: 'wcTabIcon icon-collation', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_collation', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Collation...'),\n          icon: 'wcTabIcon icon-collation', data: {action: 'create', check: false},\n          enable: 'canCreate'\n        }\n        ]);\n\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          owner: undefined,\n          lc_type: undefined,\n          lc_collate: undefined,\n          description: undefined\n        },\n\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            var schemaInfo = args.node_info.schema;\n\n            this.set({'owner': userInfo.name}, {silent: true});\n            this.set({'schema': schemaInfo._label}, {silent: true});\n          }\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchema'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'owner', label: gettext('Owner'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchema', control: 'node-list-by-name',\n          node: 'role'\n        },{\n          id: 'schema', label: gettext('Schema'), cell: 'string',\n          type: 'text', mode: ['create', 'edit'], node: 'schema',\n          disabled: 'inSchema', filter: function(d) {\n            // If schema name start with pg_* then we need to exclude them\n            if(d && d.label.match(/^pg_/))\n            {\n              return false;\n            }\n            return true;\n          }, control: 'node-list-by-name',\n          cache_node: 'database', cached_level: 'database'\n        },{\n          id: 'copy_collation', label: gettext('Copy collation'), cell: 'string',\n          control: 'node-ajax-options',\n          type: 'text', mode: ['create', 'edit'], group: gettext('Definition'),\n          url: 'get_collations', disabled: 'inSchemaWithModelCheck',\n          deps: ['locale', 'lc_collate', 'lc_type']\n        },{\n          id: 'locale', label: gettext('Locale'), cell: 'string',\n          type: 'text', mode: ['create', 'edit'], group: gettext('Definition'),\n          disabled: 'inSchemaWithModelCheck',\n          deps: ['lc_collate', 'lc_type', 'copy_collation']\n        },{\n          id: 'lc_collate', label: gettext('LC_COLLATE'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'], group: gettext('Definition'),\n          deps: ['locale', 'copy_collation'], disabled: 'inSchemaWithModelCheck'\n        },{\n          id: 'lc_type', label: gettext('LC_TYPE'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'], group: gettext('Definition'),\n          disabled: 'inSchemaWithModelCheck',\n          deps: ['locale', 'copy_collation']\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchema'\n        }\n        ],\n        validate: function() {\n          var err = {},\n          msg = undefined,\n          changedAttrs = this.changed,\n          locale_flag = false,\n          lc_type_flag = false,\n          lc_coll_flag = false,\n          copy_coll_flag = false,\n          msg = undefined,\n          data = this.toJSON();\n\n          this.errorModel.clear();\n\n          if (_.has(changedAttrs,data.name) && _.isUndefined(this.get('name'))\n              || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n          }\n          if (_.has(changedAttrs,data.locale) && (_.isUndefined(this.get('locale'))\n              || String(this.get('locale')).replace(/^\\s+|\\s+$/g, '') == '')) {\n            locale_flag = true;\n          }\n          if (_.has(changedAttrs,data.lc_collate) && (_.isUndefined(this.get('lc_collate'))\n              || String(this.get('lc_collate')).replace(/^\\s+|\\s+$/g, '') == '')) {\n            lc_coll_flag = true;\n          }\n          if (_.has(changedAttrs,data.lc_type) && (_.isUndefined(this.get('lc_type'))\n              || String(this.get('lc_type')).replace(/^\\s+|\\s+$/g, '') == '')) {\n            lc_type_flag = true;\n          }\n          if (_.has(changedAttrs,data.copy_collation) && (_.isUndefined(this.get('copy_collation'))\n              || String(this.get('copy_collation')).replace(/^\\s+|\\s+$/g, '') == '')) {\n            copy_coll_flag = true;\n          }\n          if (locale_flag && (lc_coll_flag || lc_coll_flag) && copy_coll_flag) {\n            msg = gettext('Definition incomplete, Please provide Locale OR Copy collation OR LC_TYPE/LC_COLLATE!');\n            err['locale'] = msg\n          }\n          return null;\n        },\n        // We will disable everything if we are under catalog node\n        inSchema: function() {\n          if(this.node_info &&  'catalog' in this.node_info)\n          {\n            return true;\n          }\n          return false;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchemaWithModelCheck: function(m) {\n          if(this.node_info &&  'schema' in this.node_info)\n          {\n            // Enable copy_collation only if locale & lc_* is not provided\n            if (m.isNew() && this.name == \"copy_collation\")\n            {\n              if(m.get('locale'))\n                return true;\n              if(m.get('lc_collate') || m.get('lc_type'))\n                return true\n              return false;\n            }\n\n            // Enable lc_* only if copy_collation & locale is not provided\n            if (m.isNew() && (this.name == 'lc_collate' || this.name == 'lc_type'))\n            {\n              if(m.get('locale'))\n                return true;\n              if(m.get('copy_collation'))\n                return true\n              return false;\n            }\n\n            // Enable localy only if lc_* & copy_collation is not provided\n            if (m.isNew() && this.name == 'locale')\n            {\n              if(m.get('lc_collate') || m.get('lc_type'))\n                return true;\n              if(m.get('copy_collation'))\n                return true\n              return false;\n            }\n\n            // We will disbale control if it's in 'edit' mode\n            if (m.isNew()) {\n              return false;\n            } else {\n              return true;\n            }\n\n          }\n          return true;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n          //If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData;\n          // To iterate over tree to check parent node\n          while (i) {\n            // If it is schema then allow user to create collation\n            if (_.indexOf(['schema'], d._type) > -1)\n              return true;\n\n            if ('coll-collation' == d._type) {\n              //Check if we are not child of catalog\n              var prev_i = t.hasParent(i) ? t.parent(i) : null,\n                prev_d = prev_i ? t.itemData(prev_i) : null;\n              if( prev_d._type == 'catalog') {\n                return false;\n              } else {\n                return true;\n              }\n            }\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // by default we do not want to allow create menu\n          return true;\n      }\n  });\n\n  }\n\n  return pgBrowser.Nodes['collation'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/collations/static/js/collation.js","// Domain Module: Collection and Node.\ndefine('pgadmin.node.domain', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'underscore.string', 'sources/pgadmin',\n  'pgadmin.browser', 'alertify', 'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Define Domain Collection Node\n  if (!pgBrowser.Nodes['coll-domain']) {\n    var domains = pgBrowser.Nodes['coll-domain'] =\n      pgBrowser.Collection.extend({\n        node: 'domain',\n        label: gettext('Domains'),\n        type: 'coll-domain',\n        columns: ['name', 'owner', 'description']\n      });\n  };\n\n  // Constraint Model\n  var ConstraintModel = pgBrowser.Node.Model.extend({\n    idAttribute: 'conoid',\n    initialize: function(attrs, args) {\n      if (!_.size(attrs) === 0) {\n        this.convalidated_default = this.get('convalidated')\n      }\n      pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n    },\n    defaults: {\n      conoid: undefined,\n      conname: undefined,\n      consrc: undefined,\n      convalidated: true\n    },\n    convalidated_default: true,\n    schema: [{\n      id: 'conoid', type: 'text', cell: 'string', visible: false\n    },{\n      id: 'conname', label: gettext('Name'), type: 'text', cell: 'string',\n      cellHeaderClasses: 'width_percent_40',\n      editable: function(m) {\n        if (_.isUndefined(m.isNew)) { return true; }\n        if (!m.isNew()) {\n          var server = this.get('node_info').server;\n          if (server.version < 90200) { return false;\n          }\n        }\n        return true;\n      }\n    },{\n      id: 'consrc', label: gettext('Check'), type: 'multiline',\n      cell: Backgrid.Extension.TextareaCell, group: gettext('Definition'),\n      cellHeaderClasses: 'width_percent_60', editable: function(m) {\n        return _.isUndefined(m.isNew) ? true : m.isNew();\n      }\n    },{\n      id: 'convalidated', label: gettext('Validate?'), type: 'switch', cell:\n      'boolean', group: gettext('Definition'),\n      editable: function(m) {\n        var server = this.get('node_info').server;\n        if (server.version < 90200) { return false;\n        }\n        if (_.isUndefined(m.isNew)) { return true; }\n        if (!m.isNew()) {\n          if(m.get('convalidated') && m.convalidated_default) {\n            return false;\n          }\n          return true;\n        }\n        return true;\n      }\n    }],\n    toJSON: Backbone.Model.prototype.toJSON,\n    validate: function() {\n      return null;\n    }\n  });\n\n  // Domain Node\n  if (!pgBrowser.Nodes['domain']) {\n    pgBrowser.Nodes['domain'] = pgBrowser.Node.extend({\n      type: 'domain',\n      sqlAlterHelp: 'sql-alterdomain.html',\n      sqlCreateHelp: 'sql-createdomain.html',\n      dialogHelp: url_for('help.static', {'filename': 'domain_dialog.html'}),\n      label: gettext('Domain'),\n      collection_type: 'coll-domain',\n      hasSQL: true,\n      hasDepends: true,\n      parent_type: ['schema', 'catalog'],\n      Init: function() {\n        // Avoid mulitple registration of menus\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_domain_on_coll', node: 'coll-domain', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Domain...'),\n          icon: 'wcTabIcon icon-domain', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_domain', node: 'domain', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Domain...'),\n          icon: 'wcTabIcon icon-domain', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_domain', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Domain...'),\n          icon: 'wcTabIcon icon-domain', data: {action: 'create', check: false},\n          enable: 'canCreate'\n        }\n        ]);\n\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      // Domain Node Model\n      model: pgBrowser.Node.Model.extend({\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n          if (isNew) {\n            // Set Selected Schema\n            var schema = args.node_info.schema.label\n            this.set({'basensp': schema}, {silent: true});\n\n            // Set Current User\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            this.set({'owner': userInfo.name}, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          owner: undefined,\n          basensp: undefined,\n          description: undefined,\n          basetype: undefined,\n          typlen: undefined,\n          precision: undefined,\n          typdefault: undefined,\n          typnotnull: undefined,\n          sysdomain: undefined,\n          collname: undefined,\n          constraints: [],\n          seclabels: []\n        },\n        type_options: undefined,\n        // Domain Schema\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit']\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'owner', label: gettext('Owner'), cell: 'string', control: Backform.NodeListByNameControl,\n          node: 'role',  type: 'text', mode: ['edit', 'create', 'properties']\n        },{\n          id: 'basensp', label: gettext('Schema'), cell: 'node-list-by-name',\n           control: 'node-list-by-name', cache_level: 'database', type: 'text',\n           node: 'schema', mode: ['create', 'edit']\n        },{\n          id: 'sysdomain', label: gettext('System domain?'), cell: 'boolean',\n          type: 'switch', mode: ['properties'],\n          options: {\n            'onText': 'Yes', 'offText': 'No',\n            'onColor': 'success', 'offColor': 'primary',\n            'size': 'small'\n          }\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline'\n        },{\n          id: 'basetype', label: gettext('Base type'), cell: 'string',\n          control: 'node-ajax-options', type: 'text', url: 'get_types',\n          mode:['properties', 'create', 'edit'], group: gettext('Definition'),\n          cache_level: 'database', cache_node: 'schema', disabled: function(m) {\n            return !m.isNew();\n          }, first_empty: true, transform: function(d) {\n            this.model.type_options =  d;\n            return d;\n          }\n        },{\n          id: 'typlen', label: gettext('Length'), cell: 'string',\n          type: 'text', group: gettext('Definition'), deps: ['basetype'],\n          disabled: function(m) {\n            // We will store type from selected from combobox\n            if (!m.isNew()) {\n              return true;\n            }\n            var of_type = m.get('basetype');\n            if(m.type_options) {\n              // iterating over all the types\n              _.each(m.type_options, function(o) {\n                // if type from selected from combobox matches in options\n                if ( of_type == o.value ) {\n                    // if length is allowed for selected type\n                    if(o.length)\n                    {\n                      // set the values in model\n                      m.set('is_tlength', true, {silent: true});\n                      m.set('min_val', o.min_val, {silent: true});\n                      m.set('max_val', o.max_val, {silent: true});\n                    }\n                }\n              });\n            }\n            return !m.get('is_tlength');\n          }\n        },{\n          id: 'precision', label: gettext('Precision'), cell: 'string',\n          type: 'text', group: gettext('Definition'), deps: ['basetype'],\n          disabled: function(m) {\n            // We will store type from selected from combobox\n            if (!m.isNew()) {\n              return true;\n            }\n            var of_type = m.get('basetype');\n            if(m.type_options) {\n              // iterating over all the types\n              _.each(m.type_options, function(o) {\n                // if type from selected from combobox matches in options\n                if ( of_type == o.value ) {\n                    // if precession is allowed for selected type\n                    if(o.precision)\n                    {\n                      // set the values in model\n                      m.set('is_precision', true, {silent: true});\n                      m.set('min_val', o.min_val, {silent: true});\n                      m.set('max_val', o.max_val, {silent: true});\n                    }\n                }\n              });\n            }\n            return !m.get('is_precision');\n          }\n        },{\n          id: 'typdefault', label: gettext('Default'), cell: 'string',\n          type: 'text', group: gettext('Definition'),\n          placeholder: \"Enter an expression or a value.\"\n        },{\n          id: 'typnotnull', label: gettext('Not Null?'), cell: 'boolean',\n          type: 'switch', group: gettext('Definition'),\n          options: {\n            'onText': 'Yes', 'offText': 'No',\n            'onColor': 'success', 'offColor': 'primary',\n            'size': 'small'\n          }\n        },{\n          id: 'collname', label: gettext('Collation'), cell: 'string',\n          control: 'node-ajax-options', type: 'text', url: 'get_collations',\n          group: gettext('Definition'), cache_level: 'database',\n          cache_node: 'schema', disabled: function(m) {\n            return !m.isNew();\n          }\n        },{\n          id: 'constraints', label: gettext('Constraints'), cell: 'string',\n          type: 'collection', group: gettext('Constraints'), mode: ['edit', 'create'],\n          model: ConstraintModel, canAdd: true, canDelete: true,\n          canEdit: false, columns: ['conname','consrc', 'convalidated']\n        },\n        pgBrowser.SecurityGroupSchema,\n        {\n          id: 'seclabels', label: gettext('Security Labels'),\n          model: pgBrowser.SecLabelModel, type: 'collection',\n          group: 'security', mode: ['edit', 'create'],\n          min_version: 90100, canAdd: true,\n          canEdit: false, canDelete: true,\n          control: 'unique-col-collection', uniqueCol : ['provider']\n        }],\n        validate: function() { // Client Side Validation\n          var err = {},\n              errmsg,\n              seclabels = this.get('seclabels');\n\n          if (_.isUndefined(this.get('name')) || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['name'] = gettext('Name cannot be empty.');\n            errmsg = errmsg || err['name'];\n          }\n\n          if (_.isUndefined(this.get('basetype')) || String(this.get('basetype')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['basetype'] = gettext('Base Type cannot be empty.');\n            errmsg = errmsg || err['basetype'];\n          }\n\n          this.errorModel.clear().set(err);\n\n          return null;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n        //If check is false then , we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n        // To iterate over tree to check parent node\n        while (i) {\n          // If it is schema then allow user to create domain\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-domain' == d._type) {\n            //Check if we are not child of catalog\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n            if( prev_d._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // by default we do not want to allow create menu\n        return true;\n      },\n      isDisabled: function(m){\n          if (!m.isNew()) {\n            var server = this.node_info.server;\n            if (server.version < 90200)\n            {\n              return false;\n            }\n          }\n          return true;\n        }\n  });\n\n  }\n\n  return pgBrowser.Nodes['domain'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/domains/static/js/domain.js","// Domain Constraint Module: Collection and Node\ndefine('pgadmin.node.domain_constraints', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Define Domain Constraint Collection Node\n  if (!pgBrowser.Nodes['coll-domain_constraints']) {\n    var domain_constraints = pgAdmin.Browser.Nodes['coll-domain_constraints'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'domain_constraints',\n        label: gettext('Domain Constraints'),\n        type: 'coll-domain_constraints',\n        columns: ['name', 'description']\n      });\n  };\n\n  // Domain Constraint Node\n  if (!pgBrowser.Nodes['domain_constraints']) {\n    pgAdmin.Browser.Nodes['domain_constraints'] = pgBrowser.Node.extend({\n      type: 'domain_constraints',\n      sqlAlterHelp: 'sql-alterdomain.html',\n      sqlCreateHelp: 'sql-alterdomain.html',\n      dialogHelp: url_for('help.static', {'filename': 'domain_constraint_dialog.html'}),\n      label: gettext('Domain Constraints'),\n      collection_type: 'coll-domain_constraints',\n      hasSQL: true,\n      hasDepends: true,\n      parent_type: ['domain'],\n      Init: function() {\n        // Avoid mulitple registration of menus\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_domain_on_coll', node: 'coll-domain_constraints', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 5, label: gettext('Domain Constraint...'),\n          icon: 'wcTabIcon icon-domain_constraints', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_domain_constraints', node: 'domain_constraints', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 5, label: gettext('Domain Constraint...'),\n          icon: 'wcTabIcon icon-domain_constraints', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_domain_constraints', node: 'domain', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 5, label: gettext('Domain Constraint...'),\n          icon: 'wcTabIcon icon-domain_constraints', data: {action: 'create', check: false},\n          enable: 'canCreate'\n        }\n        ]);\n\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          description: undefined,\n          consrc: undefined,\n          connoinherit: undefined,\n          convalidated: true\n        },\n        // Domain Constraint Schema\n        schema: [{\n          id: 'name', label: gettext('Name'), type:'text', cell:'string',\n          disabled: 'isDisabled'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'description', label: gettext('Comment'), type: 'multiline', cell:\n          'string', mode: ['properties', 'create', 'edit'], min_version: 90500,\n        },{\n          id: 'consrc', label: gettext('Check'), type: 'multiline', cel:\n          'string', group: gettext('Definition'), mode: ['properties',\n          'create', 'edit'], disabled: function(m) { return !m.isNew(); }\n        },{\n          id: 'connoinherit', label: gettext('No inherit'), type:\n          'switch', cell: 'boolean', group: gettext('Definition'), mode:\n          ['properties', 'create', 'edit'], disabled: 'isDisabled',\n          visible: false\n        },{\n          id: 'convalidated', label: gettext(\"Validate?\"), type: 'switch', cell:\n          'boolean', group: gettext('Definition'), min_version: 90200,\n          disabled: function(m) {\n          if (!m.isNew()) {\n            var server = this.node_info.server;\n            if (server.version < 90200) { return true;\n            }\n            else if(m.get('convalidated')) {\n                return true;\n            }\n            return false;\n          }\n          return false;\n          },\n          mode: ['properties', 'create', 'edit']\n        }],\n        // Client Side Validation\n        validate: function() {\n          var err = {},\n              errmsg;\n\n          if (_.isUndefined(this.get('name')) || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['name'] = gettext('Name cannot be empty.');\n            errmsg = errmsg || err['name'];\n          }\n\n          if (_.isUndefined(this.get('consrc')) || String(this.get('consrc')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['consrc'] = gettext('Check cannot be empty.');\n            errmsg = errmsg || err['consrc'];\n          }\n\n          this.errorModel.clear().set(err);\n\n          if (_.size(err)) {\n            this.trigger('on-status', {msg: errmsg});\n            return errmsg;\n          }\n\n          return null;\n\n        },\n        isDisabled: function(m){\n          if (!m.isNew()) {\n            var server = this.node_info.server;\n            if (server.version < 90200)\n            {\n              return true;\n            }\n          }\n          return false;\n        }\n      }),\n    });\n  }\n\n  return pgBrowser.Nodes['domain'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/domains/domain_constraints/static/js/domain_constraints.js","/* Create and Register Foreign Table Collection and Node. */\ndefine('pgadmin.node.foreign_table', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-foreign_table']) {\n    var foreigntable = pgBrowser.Nodes['coll-foreign_table'] =\n      pgBrowser.Collection.extend({\n        node: 'foreign_table',\n        label: gettext('Foreign Tables'),\n        type: 'coll-foreign_table',\n        columns: ['name', 'owner', 'description']\n      });\n  };\n\n  // Integer Cell for Columns Length and Precision\n  var IntegerDepCell = Backgrid.IntegerCell.extend({\n      initialize: function() {\n        Backgrid.NumberCell.prototype.initialize.apply(this, arguments);\n        Backgrid.Extension.DependentCell.prototype.initialize.apply(this, arguments);\n      },\n      dependentChanged: function () {\n        this.$el.empty();\n        var model = this.model;\n        var column = this.column;\n        var editable = this.column.get(\"editable\");\n        var is_editable = _.isFunction(editable) ? !!editable.apply(column, [model]) : !!editable;\n\n        if (is_editable){ this.$el.addClass(\"editable\"); }\n        else { this.$el.removeClass(\"editable\"); }\n\n        this.delegateEvents();\n        return this;\n      },\n      remove: Backgrid.Extension.DependentCell.prototype.remove\n    });\n\n\n  // Options Model\n  var ColumnOptionsModel = pgBrowser.Node.Model.extend({\n    idAttribute: 'option',\n    defaults: {\n      option: undefined,\n      value: undefined\n    },\n    schema: [\n      {id: 'option', label:'Option', type:'text', editable: true, cellHeaderClasses: 'width_percent_30'},\n      {\n        id: 'value', label:'Value', type: 'text', editable: true, cellHeaderClasses: 'width_percent_50'\n      }\n    ],\n    validate: function() {\n      if (_.isUndefined(this.get('value')) ||\n          _.isNull(this.get('value')) ||\n          String(this.get('value')).replace(/^\\s+|\\s+$/g, '') == '') {\n        var msg = 'Please enter a value.';\n\n        this.errorModel.set('value', msg);\n\n        return msg;\n      } else {\n        this.errorModel.unset('value');\n      }\n\n      return null;\n    }\n  });\n\n  // Columns Model\n  var ColumnsModel = pgBrowser.Node.Model.extend({\n    idAttribute: 'attnum',\n    defaults: {\n      attname: undefined,\n      datatype: undefined,\n      typlen: undefined,\n      precision: undefined,\n      typdefault: undefined,\n      attnotnull: undefined,\n      collname: undefined,\n      attnum: undefined,\n      inheritedfrom: undefined,\n      inheritedid: undefined,\n      attstattarget: undefined,\n      coloptions: []\n    },\n    type_options: undefined,\n    schema: [{\n        id: 'attname', label: gettext('Name'), cell: 'string', type: 'text',\n        editable: 'is_editable_column', cellHeaderClasses: 'width_percent_40'\n      },{\n        id: 'datatype', label: gettext('Data Type'), cell: 'node-ajax-options',\n        control: 'node-ajax-options', type: 'text', url: 'get_types',\n        editable: 'is_editable_column', cellHeaderClasses: 'width_percent_0',\n        group: gettext('Definition'),\n        transform: function(d, self){\n            self.model.type_options = d;\n            return d;\n          }\n      },{\n        id: 'typlen', label: gettext('Length'),\n        cell: 'string', group: gettext('Definition'),\n        type: 'int', deps: ['datatype'],\n        disabled: function(m) {\n          var val = m.get('typlen');\n          // We will store type from selected from combobox\n          if(!(_.isUndefined(m.get('inheritedid'))\n            || _.isNull(m.get('inheritedid'))\n            || _.isUndefined(m.get('inheritedfrom'))\n            || _.isNull(m.get('inheritedfrom')))) {\n\n            if (!_.isUndefined(val)) {\n              setTimeout(function() {\n                m.set('typlen', undefined);\n              }, 10);\n            }\n            return true;\n          }\n\n          var of_type = m.get('datatype'),\n              has_length = false;\n          if(m.type_options) {\n            m.set('is_tlength', false, {silent: true});\n\n            // iterating over all the types\n            _.each(m.type_options, function(o) {\n              // if type from selected from combobox matches in options\n              if ( of_type == o.value ) {\n                // if length is allowed for selected type\n                if(o.length)\n                {\n                  // set the values in model\n                  has_length = true;\n                  m.set('is_tlength', true, {silent: true});\n                  m.set('min_val', o.min_val, {silent: true});\n                  m.set('max_val', o.max_val, {silent: true});\n                }\n              }\n            });\n\n            if (!has_length && !_.isUndefined(val)) {\n              setTimeout(function() {\n                m.set('typlen', undefined);\n              }, 10);\n            }\n\n            return !(m.get('is_tlength'));\n          }\n          if (!has_length && !_.isUndefined(val)) {\n              setTimeout(function() {\n                m.set('typlen', undefined);\n              }, 10);\n            }\n          return true;\n        },\n        cellHeaderClasses: 'width_percent_10'\n      },{\n        id: 'precision', label: gettext('Precision'),\n        type: 'int', deps: ['datatype'],\n        cell: 'string', group: gettext('Definition'),\n        disabled: function(m) {\n          var val = m.get('precision');\n          if(!(_.isUndefined(m.get('inheritedid'))\n            || _.isNull(m.get('inheritedid'))\n            || _.isUndefined(m.get('inheritedfrom'))\n            || _.isNull(m.get('inheritedfrom')))) {\n\n            if (!_.isUndefined(val)) {\n              setTimeout(function() {\n                m.set('precision', undefined);\n              }, 10);\n            }\n            return true;\n          }\n\n          var of_type = m.get('datatype'),\n              has_precision = false;\n\n          if(m.type_options) {\n             m.set('is_precision', false, {silent: true});\n            // iterating over all the types\n            _.each(m.type_options, function(o) {\n              // if type from selected from combobox matches in options\n              if ( of_type == o.value ) {\n                // if precession is allowed for selected type\n                if(o.precision)\n                {\n                  has_precision = true;\n                  // set the values in model\n                  m.set('is_precision', true, {silent: true});\n                  m.set('min_val', o.min_val, {silent: true});\n                  m.set('max_val', o.max_val, {silent: true});\n                }\n              }\n            });\n            if (!has_precision && !_.isUndefined(val)) {\n              setTimeout(function() {\n                m.set('precision', undefined);\n              }, 10);\n            }\n            return !(m.get('is_precision'));\n          }\n          if (!has_precision && !_.isUndefined(val)) {\n            setTimeout(function() {\n              m.set('precision', undefined);\n            }, 10);\n          }\n          return true;\n      }, cellHeaderClasses: 'width_percent_10'\n      },{\n        id: 'typdefault', label: gettext('Default'), type: 'text',\n        cell: 'string', min_version: 90300, group: gettext('Definition'),\n        placeholder: \"Enter an expression or a value.\",\n        cellHeaderClasses: 'width_percent_10',\n        editable: function(m) {\n          if(!(_.isUndefined(m.get('inheritedid'))\n            || _.isNull(m.get('inheritedid'))\n            || _.isUndefined(m.get('inheritedfrom'))\n            || _.isNull(m.get('inheritedfrom')))) { return false; }\n          if (this.get('node_info').server.version < 90300){\n            return false;\n          }\n          return true;\n        }\n      },{\n        id: 'attnotnull', label: gettext('Not Null'),\n        cell: 'boolean',type: 'switch', editable: 'is_editable_column',\n        cellHeaderClasses: 'width_percent_10', group: gettext('Definition')\n      },{\n        id: 'attstattarget', label: gettext('Statistics'), min_version: 90200,\n        cell: 'integer', type: 'int', group: gettext('Definition'),\n        editable: function(m) {\n         if (_.isUndefined(m.isNew) || m.isNew()) { return false; }\n         if (this.get('node_info').server.version < 90200){\n            return false;\n         }\n         return (_.isUndefined(m.get('inheritedid')) || _.isNull(m.get('inheritedid'))\n          || _.isUndefined(m.get('inheritedfrom')) || _.isNull(m.get('inheritedfrom'))) ? true : false\n        }, cellHeaderClasses: 'width_percent_10'\n      },{\n        id: 'collname', label: gettext('Collation'), cell: 'node-ajax-options',\n        control: 'node-ajax-options', type: 'text', url: 'get_collations',\n        min_version: 90300, editable: function(m) {\n          if (!(_.isUndefined(m.isNew)) && !m.isNew()) { return false; }\n          return (_.isUndefined(m.get('inheritedid')) || _.isNull(m.get('inheritedid'))\n           || _.isUndefined(m.get('inheritedfrom')) || _.isNull(m.get('inheritedfrom'))) ? true : false\n        },\n        cellHeaderClasses: 'width_percent_20', group: gettext('Definition')\n      },{\n        id: 'attnum', cell: 'string',type: 'text', visible: false\n      },{\n        id: 'inheritedfrom', label: gettext('Inherited From'), cell: 'string',\n        type: 'text', visible: false, mode: ['properties', 'edit'],\n        cellHeaderClasses: 'width_percent_10'\n      },{\n          id: 'coloptions', label: gettext('Options'), cell: 'string',\n          type: 'collection', group: gettext('Options'), mode: ['edit', 'create'],\n          model: ColumnOptionsModel, canAdd: true, canDelete: true, canEdit: false,\n          control: Backform.UniqueColCollectionControl, uniqueCol : ['option'],\n          min_version: 90200\n      }],\n    validate: function() {\n      var errmsg = null;\n\n      if (_.isUndefined(this.get('attname')) || String(this.get('attname')).replace(/^\\s+|\\s+$/g, '') == '') {\n        errmsg = gettext('Column Name cannot be empty!');\n        this.errorModel.set('attname', errmsg);\n      } else {\n        this.errorModel.unset('attname');\n      }\n\n      if (_.isUndefined(this.get('datatype')) || String(this.get('datatype'))\n      .replace(/^\\s+|\\s+$/g, '') == '') {\n        errmsg = gettext('Column Datatype cannot be empty!');\n        this.errorModel.set('datatype', errmsg);\n      } else {\n        this.errorModel.unset('datatype');\n      }\n\n      return errmsg;\n    },\n    is_editable_column: function(m) {\n      return (_.isUndefined(m.get('inheritedid')) || _.isNull(m.get('inheritedid'))\n       || _.isUndefined(m.get('inheritedfrom')) || _.isNull(m.get('inheritedfrom'))) ? true : false\n    },\n    toJSON: Backbone.Model.prototype.toJSON\n  });\n\n\n  /* NodeAjaxOptionsMultipleControl is for multiple selection of Combobox.\n  *  This control is used to select Multiple Parent Tables to be inherited.\n  *  It also populates/vacates Columns on selection/deselection of the option (i.e. table name).\n  *  To populates the column, it calls the server and fetch the columns data\n  *  for the selected table.\n  */\n  var NodeAjaxOptionsMultipleControl = Backform.NodeAjaxOptionsControl.extend({\n    onChange: function(e) {\n      var model = this.model,\n          $el = $(e.target),\n          attrArr = this.field.get(\"name\").split('.'),\n          name = attrArr.shift(),\n          path = attrArr.join('.'),\n          value = this.getValueFromDOM(),\n          changes = {},\n          columns = model.get('columns'),\n          inherits = model.get(name);\n\n      if (this.model.errorModel instanceof Backbone.Model) {\n        if (_.isEmpty(path)) {\n          this.model.errorModel.unset(name);\n        } else {\n          var nestedError = this.model.errorModel.get(name);\n          if (nestedError) {\n            this.keyPathSetter(nestedError, path, null);\n            this.model.errorModel.set(name, nestedError);\n          }\n        }\n      }\n\n      var self = this;\n\n      if (typeof(inherits)  == \"string\"){ inherits = JSON.parse(inherits); }\n\n      // Remove Columns if inherit option is deselected from the combobox\n      if(_.size(value) < _.size(inherits)) {\n        var dif =  _.difference(inherits, value);\n        var rmv_columns = columns.where({inheritedid: parseInt(dif[0])});\n        columns.remove(rmv_columns);\n      }\n      else\n      {\n        _.each(value, function(i) {\n          // Fetch Columns from server\n          var fnd_columns = columns.where({inheritedid: parseInt(i)});\n          if (fnd_columns && fnd_columns.length <= 0) {\n            var inhted_columns = self.fetchColumns(i);\n            columns.add(inhted_columns);\n          }\n        });\n      }\n\n      changes[name] = _.isEmpty(path) ? value : _.clone(model.get(name)) || {};\n      this.stopListening(this.model, \"change:\" + name, this.render);\n      model.set(changes);\n      this.listenTo(this.model, \"change:\" + name, this.render);\n    },\n    fetchColumns: function(table_id){\n      var self = this,\n          url = 'get_columns',\n          m = self.model.top || self.model;\n\n      if (url) {\n        var node = this.field.get('schema_node'),\n            node_info = this.field.get('node_info'),\n            full_url = node.generate_url.apply(\n              node, [\n                null, url, this.field.get('node_data'),\n                this.field.get('url_with_id') || false, node_info\n              ]),\n            cache_level = this.field.get('cache_level') || node.type,\n            cache_node = this.field.get('cache_node');\n\n        cache_node = (cache_node && pgBrowser.Nodes['cache_node']) || node;\n\n        m.trigger('pgadmin:view:fetching', m, self.field);\n        var data = {attrelid: table_id}\n\n        // Fetching Columns data for the selected table.\n        $.ajax({\n          async: false,\n          url: full_url,\n          data: data,\n          success: function(res) {\n            /*\n             * We will cache this data for short period of time for avoiding\n             * same calls.\n             */\n            data = cache_node.cache(url, node_info, cache_level, res.data);\n\n          },\n          error: function() {\n            m.trigger('pgadmin:view:fetch:error', m, self.field);\n          }\n        });\n        m.trigger('pgadmin:view:fetched', m, self.field);\n\n        // To fetch only options from cache, we do not need time from 'at'\n        // attribute but only options.\n        //\n        // It is feasible that the data may not have been fetched.\n        data = (data && data.data) || [];\n        return data;\n      }\n    },\n  });\n\n\n  // Constraints Model\n  var ConstraintModel = pgBrowser.Node.Model.extend({\n    idAttribute: 'conoid',\n    initialize: function(attrs, args) {\n      var isNew = (_.size(attrs) === 0);\n      if (!isNew) {\n        this.convalidated_default = this.get('convalidated')\n      }\n      pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n    },\n    defaults: {\n      conoid: undefined,\n      conname: undefined,\n      consrc: undefined,\n      connoinherit: undefined,\n      convalidated: true,\n      conislocal: undefined\n    },\n    convalidated_default: true,\n    schema: [{\n      id: 'conoid', type: 'text', cell: 'string', visible: false\n    },{\n      id: 'conname', label: gettext('Name'), type: 'text', cell: 'string',\n      editable: 'is_editable', cellHeaderClasses: 'width_percent_30'\n    },{\n      id: 'consrc', label: gettext('Check'), type: 'multiline',\n      editable: 'is_editable', cell: Backgrid.Extension.TextareaCell,\n      cellHeaderClasses: 'width_percent_30'\n    },{\n      id: 'connoinherit', label: gettext('No Inherit'), type: 'switch',\n      cell: 'boolean', editable: 'is_editable',\n      cellHeaderClasses: 'width_percent_20'\n    },{\n      id: 'convalidated', label: gettext('Validate?'), type: 'switch',\n      cell: 'boolean', cellHeaderClasses: 'width_percent_20',\n      editable: function(m) {\n        var server = this.get('node_info').server;\n        if (_.isUndefined(m.isNew)) { return true; }\n        if (!m.isNew()) {\n          if(m.get('convalidated') && m.convalidated_default) {\n            return false;\n          }\n          return true;\n        }\n        return true;\n      }\n     }\n    ],\n    validate: function() {\n      var err = {},\n      errmsg;\n\n      if (_.isUndefined(this.get('conname')) || String(this.get('conname')).replace(/^\\s+|\\s+$/g, '') == '') {\n        err['conname'] = gettext('Constraint Name cannot be empty!');\n        errmsg = errmsg || err['conname'];\n      }\n\n      if (_.isUndefined(this.get('consrc')) || String(this.get('consrc'))\n      .replace(/^\\s+|\\s+$/g, '') == '') {\n        err['consrc'] = gettext('Constraint Check cannot be empty!');\n        errmsg = errmsg || err['consrc'];\n      }\n\n      this.errorModel.clear().set(err);\n\n      return errmsg;\n    },\n    is_editable: function(m) {\n        return _.isUndefined(m.isNew) ? true : m.isNew();\n    },\n    toJSON: Backbone.Model.prototype.toJSON\n  });\n\n\n  // Options Model\n  var OptionsModel = pgBrowser.Node.Model.extend({\n    defaults: {\n      option: undefined,\n      value: undefined\n    },\n    schema: [{\n      id: 'option', label: gettext('Option'), cell: 'string', type: 'text',\n      editable: true, cellHeaderClasses:'width_percent_50'\n    },{\n      id: 'value', label: gettext('Value'), cell: 'string',type: 'text',\n      editable: true, cellHeaderClasses:'width_percent_50'\n    }\n    ],\n    validate: function() {\n      // TODO: Add validation here\n    },\n    toJSON: Backbone.Model.prototype.toJSON\n  });\n\n\n  if (!pgBrowser.Nodes['foreign_table']) {\n    pgBrowser.Nodes['foreign_table'] = pgBrowser.Node.extend({\n      type: 'foreign_table',\n      sqlAlterHelp: 'sql-alterforeigntable.html',\n      sqlCreateHelp: 'sql-createforeigntable.html',\n      dialogHelp: url_for('help.static', {'filename': 'foreign_table_dialog.html'}),\n      label: gettext('Foreign Table'),\n      collection_type: 'coll-foreign_table',\n      hasSQL: true,\n      hasDepends: true,\n      hasScriptTypes: ['create', 'select', 'insert', 'update', 'delete'],\n      parent_type: ['schema'],\n      Init: function() {\n        /* Avoid multiple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_foreign_table_on_coll', node: 'coll-foreign_table', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Foreign Table...'),\n          icon: 'wcTabIcon icon-foreign_table', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_foreign_table', node: 'foreign_table', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Foreign Table...'),\n          icon: 'wcTabIcon icon-foreign_table', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_foreign_table', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Foreign Table...'),\n          icon: 'wcTabIcon icon-foreign_table', data: {action: 'create', check: false},\n          enable: 'canCreate'\n        }\n        ]);\n\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      model: pgBrowser.Node.Model.extend({\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n          if (isNew) {\n            var schema = args.node_info.schema._label,\n                userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n\n            // Set Selected Schema and Current User\n            this.set({\n              'basensp': schema, 'owner': userInfo.name\n            }, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          owner: undefined,\n          basensp: undefined,\n          description: undefined,\n          ftsrvname: undefined,\n          strftoptions: undefined,\n          inherits: [],\n          columns: [],\n          constraints: [],\n          ftoptions: [],\n          relacl: [],\n          stracl: [],\n          seclabels: []\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit']\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'owner', label: gettext('Owner'), cell: 'string',\n          control: Backform.NodeListByNameControl,\n          node: 'role',  type: 'text', select2: { allowClear: false }\n        },{\n          id: 'basensp', label: gettext('Schema'), cell: 'node-list-by-name',\n           control: 'node-list-by-name', cache_level: 'database', type: 'text',\n           node: 'schema', mode:['create', 'edit']\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline'\n        },{\n          id: 'ftsrvname', label: gettext('Foreign server'), cell: 'string', control: 'node-ajax-options',\n          type: 'text', group: gettext('Definition'), url: 'get_foreign_servers', disabled: function(m) { return !m.isNew(); }\n        },{\n          id: 'inherits', label: gettext('Inherits'), group: gettext('Definition'),\n          type: 'array', min_version: 90500, control: NodeAjaxOptionsMultipleControl,\n          url: 'get_tables', select2: {multiple: true},\n          'cache_level': 'database',\n          transform: function(d, self){\n            if (this.field.get('mode') == 'edit') {\n              var oid = this.model.get('oid');\n              var s = _.findWhere(d, {'id': oid});\n              if (s) {\n                d = _.reject(d, s);\n              }\n            }\n            return d;\n          }\n        },{\n          id: 'columns', label: gettext('Columns'), cell: 'string',\n          type: 'collection', group: gettext('Columns'), mode: ['edit', 'create'],\n          model: ColumnsModel, canAdd: true, canDelete: true, canEdit: true,\n          columns: ['attname', 'datatype', 'inheritedfrom'],\n          canDeleteRow: function(m) {\n            return (_.isUndefined(m.get('inheritedid')) || _.isNull(m.get('inheritedid'))\n              || _.isUndefined(m.get('inheritedfrom')) || _.isNull(m.get('inheritedfrom'))) ? true : false\n          },\n          canEditRow: function(m) {\n            return (_.isUndefined(m.get('inheritedid')) || _.isNull(m.get('inheritedid'))\n              || _.isUndefined(m.get('inheritedfrom')) || _.isNull(m.get('inheritedfrom'))) ? true : false\n          }\n        },\n        {\n          id: 'constraints', label: gettext('Constraints'), cell: 'string',\n          type: 'collection', group: gettext('Constraints'), mode: ['edit', 'create'],\n          model: ConstraintModel, canAdd: true, canDelete: true, columns: ['conname','consrc', 'connoinherit', 'convalidated'],\n          canEdit: function(o) {\n            if (o instanceof Backbone.Model) {\n              if (o instanceof ConstraintModel) {\n                return o.isNew();\n              }\n            }\n            return true;\n          }, min_version: 90500, canDeleteRow: function(m) {\n            return (m.get('conislocal') == true || _.isUndefined(m.get('conislocal'))) ? true : false\n          }\n        },{\n          id: 'strftoptions', label: gettext('Options'), cell: 'string',\n          type: 'text', group: gettext('Definition'), mode: ['properties']\n        },{\n          id: 'ftoptions', label: gettext('Options'), cell: 'string',\n          type: 'collection', group: gettext('Options'), mode: ['edit', 'create'],\n          model: OptionsModel, canAdd: true, canDelete: true, canEdit: false,\n          control: 'unique-col-collection', uniqueCol : ['option']\n        },{\n          id: 'relacl', label: gettext('Privileges'), cell: 'string',\n          type: 'text', group: gettext('Security'),\n          mode: ['properties'], min_version: 90200\n        }, pgBrowser.SecurityGroupSchema, {\n          id: 'acl', label: gettext('Privileges'), model: pgAdmin\n          .Browser.Node.PrivilegeRoleModel.extend(\n          {privileges: ['a','r','w','x']}), uniqueCol : ['grantee', 'grantor'],\n          editable: false, type: 'collection', group: 'security',\n          mode: ['edit', 'create'],\n          canAdd: true, canDelete: true, control: 'unique-col-collection',\n          min_version: 90200\n        },{\n          id: 'seclabels', label: gettext('Security Labels'),\n          model: pgBrowser.SecLabelModel, type: 'collection',\n          group: 'security', mode: ['edit', 'create'],\n          min_version: 90100, canAdd: true,\n          canEdit: false, canDelete: true,\n          control: 'unique-col-collection', uniqueCol : ['provider']\n        }\n        ],\n        validate: function()\n        {\n          var err = {},\n              errmsg,\n              seclabels = this.get('seclabels');\n\n          if (_.isUndefined(this.get('name')) || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['name'] = gettext('Name cannot be empty.');\n            errmsg = errmsg || err['name'];\n          }\n\n          if (_.isUndefined(this.get('basensp')) || String(this.get('basensp'))\n          .replace(/^\\s+|\\s+$/g, '') == '') {\n            err['basensp'] = gettext('Schema cannot be empty.');\n            errmsg = errmsg || err['basensp'];\n          }\n\n          if (_.isUndefined(this.get('ftsrvname')) || String(this.get('ftsrvname')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['ftsrvname'] = gettext('Foreign server cannot be empty.');\n            errmsg = errmsg || err['ftsrvname'];\n          }\n\n          this.errorModel.clear().set(err);\n\n          return null;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n        //If check is false then , we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n        // To iterate over tree to check parent node\n        while (i) {\n          // If it is schema then allow user to create foreign table\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-foreign_table' == d._type) {\n            //Check if we are not child of catalog\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n            if( prev_d._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // by default we do not want to allow create menu\n        return true;\n      }\n  });\n\n  }\n\n  return pgBrowser.Nodes['foreign_table'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/foreign_tables/static/js/foreign_table.js","define('pgadmin.node.fts_configuration', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Model for tokens control\n  var TokenModel = pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          token: undefined,\n          dictname: undefined\n        },\n        keys: ['token'],\n        // Define the schema for the token/dictionary list\n        schema: [{\n          id: 'token', label:'Token', type:'text', group: null,\n          cellHeaderClasses:'width_percent_50',\n          editable: false, cell: 'string', url: 'tokens'\n        },{\n          id: 'dictname', label: 'Dictionaries', type: 'text', group:null,\n          cellHeaderClasses:'width_percent_50', editable: true,\n          cell:Backgrid.Extension.MultiSelectAjaxCell, url: 'dictionaries'\n        }],\n        // Validation for token and dictionary list\n        validate: function() {\n            // Clear any existing errors.\n          var msg;\n          this.errorModel.clear();\n          var token = this.get('token');\n          var dictionary = this.get('dictname');\n\n          if (_.isNull(token) ||\n              _.isUndefined(token) ||\n              String(token).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Token cannot be empty!');\n            this.errorModel.set('token',msg);\n            return msg;\n          }\n\n          if (_.isNull(dictionary) ||\n              _.isUndefined(dictionary) ||\n              String(dictionary).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Dictionary name cannot be empty!');\n            this.errorModel.set('dictname',msg);\n            return msg;\n          }\n          return null;\n        }\n  });\n\n// Customized control for token control\n  var TokenControl =  Backform.TokenControl =\n    Backform.UniqueColCollectionControl.extend({\n\n    initialize: function(opts) {\n      Backform.UniqueColCollectionControl.prototype.initialize.apply(\n        this, arguments\n      );\n\n      var that;\n      var self = that = this,\n          node = 'fts_configuration',\n          headerSchema = [{\n            id: 'token', label:'', type:'text', url: 'tokens',\n            node:'fts_configuration', canAdd: true, 'url_with_id': true,\n\n            // Defining control for tokens dropdown control in header\n            control: Backform.NodeAjaxOptionsControl.extend({\n              formatter: Backform.NodeAjaxOptionsControl.prototype.formatter,\n              initialize: function() {\n                Backform.NodeAjaxOptionsControl.prototype.initialize.apply(\n                  this,\n                  arguments\n                 );\n                var self = this,\n                  url = self.field.get('url') || self.defaults.url,\n                  m = self.model.top || self.model;\n\n                /* Fetch the tokens/dict list from 'that' node.\n                 * Here 'that' refers to unique collection control where\n                 * 'self' refers to nodeAjaxOptions control for dictionary\n                 */\n                var cfgid = that.model.get('oid');\n                if (url) {\n                  var node = this.field.get('schema_node'),\n                    node_info = this.field.get('node_info'),\n                    full_url = node.generate_url.apply(\n                      node, [\n                        null, url, this.field.get('node_data'),\n                        this.field.get('url_with_id') || false,\n                        node_info\n                      ]),\n                    cache_level = this.field.get('cache_level') || node.type,\n                    cache_node = this.field.get('cache_node');\n\n                  cache_node = (cache_node &&\n                                    pgAdmin.Browser.Nodes['cache_node'])\n                               || node;\n\n                  /*\n                   * We needs to check, if we have already cached data\n                   * for this url. If yes - use it, and do not bother about\n                   * fetching it again.\n                   */\n                  var data = cache_node.cache(url, node_info, cache_level);\n\n                  // Fetch token/dictionary list\n                  if (this.field.get('version_compatible') &&\n                    (_.isUndefined(data) || _.isNull(data))) {\n                    m.trigger('pgadmin:view:fetching', m, self.field);\n                    $.ajax({\n                      async: false,\n                      url: full_url,\n                      success: function(res) {\n                      /*\n                       * We will cache this data for short period of time for\n                       * avoiding same calls.\n                       */\n                        data = cache_node.cache(url,\n                                 node_info,\n                                 cache_level,\n                                 res.data\n                               );\n                      },\n                      error: function() {\n                        m.trigger('pgadmin:view:fetch:error', m, self.field);\n                      }\n                    });\n                    m.trigger('pgadmin:view:fetched', m, self.field);\n                  }\n\n                  // It is feasible that the data may not have been fetched.\n                  data = (data && data.data) || [];\n\n                  /*\n                   * Transform the data\n                   */\n                  var transform = (this.field.get('transform')\n                                || self.defaults.transform);\n                  if (transform && _.isFunction(transform)) {\n                    self.field.set('options', transform.bind(self, data));\n                  } else {\n                    self.field.set('options', data);\n                  }\n                }\n              }\n            }),\n            // Select2 control for adding new tokens\n            select2: {\n              allowClear: true, width: 'style',\n              placeholder: gettext('Select token')\n            },\n            first_empty: true,\n            disabled: function(m) {\n              return _.isUndefined(self.model.get('oid'));\n            }\n          }],\n          headerDefaults = {token: null},\n          // Grid columns backgrid\n          gridCols = ['token', 'dictname'];\n\n      // Creating model for header control which is used to add new tokens\n      self.headerData = new (Backbone.Model.extend({\n        defaults: headerDefaults,\n        schema: headerSchema\n      }))({});\n\n      // Creating view from header schema in tokens control\n      var headerGroups = Backform.generateViewSchema(\n          self.field.get('node_info'), self.headerData, 'create',\n          self.field.get('schema_node'), self.field.get('node_data')\n          ),\n          fields = [];\n\n      _.each(headerGroups, function(o) {\n        fields = fields.concat(o.fields);\n      });\n      self.headerFields = new Backform.Fields(fields);\n\n      // creating grid using grid columns\n      self.gridSchema = Backform.generateGridColumnsFromModel(\n          self.field.get('node_info'), self.field.get('model'),\n          'edit', gridCols, self.field.get('schema_node')\n      );\n\n      // Providing behaviour control functions to header and grid control\n      self.controls = [];\n      self.listenTo(self.headerData, \"change\", self.headerDataChanged);\n      self.listenTo(self.headerData, \"select2\", self.headerDataChanged);\n      self.listenTo(self.collection, \"add\", self.onAddorRemoveTokens);\n      self.listenTo(self.collection, \"remove\", self.onAddorRemoveTokens);\n    },\n\n    // Template for creating header view\n    generateHeader: function(data) {\n      var header = [\n        '<div class=\"subnode-header-form\">',\n        ' <div class=\"container-fluid\">',\n        '  <div class=\"row\">',\n        '   <div class=\"col-xs-3\">',\n        '    <label class=\"control-label\"><%-token_label%></label>',\n        '   </div>',\n        '   <div class=\"col-xs-6\" header=\"token\"></div>',\n        '   <div class=\"col-xs-2\">',\n        '     <button class=\"btn-sm btn-default add fa fa-plus\" <%=canAdd ? \"\" : \"disabled=\\'disabled\\'\"%> ></button>',\n        '   </div>',\n        '  </div>',\n        ' </div>',\n        '</div>',].join(\"\\n\")\n\n      _.extend(data, {\n        token_label: gettext('Tokens')\n      });\n\n      var self = this,\n          headerTmpl = _.template(header),\n          $header = $(headerTmpl(data)),\n          controls = this.controls;\n\n      self.headerFields.each(function(field) {\n        var control = new (field.get(\"control\"))({\n          field: field,\n          model: self.headerData\n        });\n\n        $header.find('div[header=\"' + field.get('name') + '\"]').append(\n          control.render().$el\n        );\n\n        control.$el.find('.control-label').remove();\n        controls.push(control);\n      });\n\n      // We should not show add button in properties mode\n      if (data.mode == 'properties') {\n        $header.find(\"button.add\").remove();\n      }\n\n      // Disable add button in token control in create mode\n      if(data.mode == 'create') {\n        $header.find(\"button.add\").attr('disabled', true);\n      }\n\n      self.$header = $header;\n      return $header;\n    },\n\n    // Providing event handler for add button in header\n    events: _.extend(\n              {}, Backform.UniqueColCollectionControl.prototype.events,\n              {'click button.add': 'addTokens'}\n            ),\n\n    // Show token/dictionary grid\n    showGridControl: function(data) {\n\n      var self = this,\n          titleTmpl = _.template(\"<div class='subnode-header'></div>\"),\n          $gridBody = $(\"<div></div>\", {\n            class:'pgadmin-control-group backgrid form-group col-xs-12 object subnode'\n          }).append(\n               titleTmpl({label: data.label})\n          );\n\n      $gridBody.append(self.generateHeader(data));\n\n      var gridColumns = _.clone(this.gridSchema.columns);\n\n      // Insert Delete Cell into Grid\n      if (data.disabled == false && data.canDelete) {\n          gridColumns.unshift({\n            name: \"pg-backform-delete\", label: \"\",\n            cell: Backgrid.Extension.DeleteCell,\n            editable: false, cell_priority: -1\n          });\n      }\n\n      if (self.grid) {\n        self.grid.remove();\n        self.grid.null;\n      }\n      // Initialize a new Grid instance\n      var grid = self.grid = new Backgrid.Grid({\n        columns: gridColumns,\n        collection: self.collection,\n        className: \"backgrid table-bordered\"\n      });\n      self.$grid = grid.render().$el;\n\n      $gridBody.append(self.$grid);\n\n      // Find selected dictionaries in grid and show it all together\n      setTimeout(function() {\n        self.headerData.set({\n          'token': self.$header.find(\n            'div[header=\"token\"] select'\n            ).val()\n            }, {silent:true}\n          );\n      }, 10);\n\n      // Render node grid\n      return $gridBody;\n    },\n\n    // When user change the header control to add a new token\n    headerDataChanged: function() {\n      var self = this, val,\n          data = this.headerData.toJSON(),\n          inSelected = (_.isEmpty(data) || _.isUndefined(data)),\n          checkVars = ['token'];\n\n      if (!self.$header) {\n        return;\n      }\n\n      self.$header.find('button.add').prop('disabled', inSelected);\n    },\n\n    // Get called when user click on add button header\n    addTokens: function(ev) {\n      ev.preventDefault();\n      var self = this,\n          token = self.headerData.get('token');\n\n      if (!token || token == '') {\n        return false;\n      }\n\n      var coll = self.model.get(self.field.get('name')),\n          m = new (self.field.get('model'))(\n                self.headerData.toJSON(), {\n                  silent: true, top: self.model.top,\n                  collection: coll, handler: coll\n                }),\n          checkVars = ['token'],\n          idx = -1;\n\n      // Find if token exists in grid\n      self.collection.each(function(m) {\n        _.each(checkVars, function(v) {\n          var val = m.get(v);\n          if(val == token) {\n            idx = coll.indexOf(m);\n          }\n        });\n      });\n\n\n\n      // remove 'm' if duplicate value found.\n      if (idx == -1) {\n        coll.add(m);\n        idx = coll.indexOf(m);\n      }\n      self.$grid.find('.new').removeClass('new');\n      var newRow = self.grid.body.rows[idx].$el;\n      newRow.addClass(\"new\");\n      //$(newRow).pgMakeVisible('table-bordered');\n      $(newRow).pgMakeVisible('backform-tab');\n\n\n      return false;\n    },\n\n    // When user delete token/dictionary entry from grid\n    onAddorRemoveTokens: function() {\n      var self = this;\n\n      /*\n       * Wait for collection to be updated before checking for the button to\n       * be enabled, or not.\n       */\n      setTimeout(function() {\n          self.collection.trigger('pgadmin:tokens:updated', self.collection);\n        self.headerDataChanged();\n      }, 10);\n    },\n\n    // When control is about to destroy\n    remove: function() {\n      /*\n       * Stop listening the events registered by this control.\n       */\n      this.stopListening(this.headerData, \"change\", this.headerDataChanged);\n      this.listenTo(this.headerData, \"select2\", this.headerDataChanged);\n      this.listenTo(this.collection, \"remove\", this.onAddorRemoveTokens);\n\n      // Remove header controls.\n      _.each(this.controls, function(control) {\n        control.remove();\n      });\n      TokenControl.__super__.remove.apply(this, arguments);\n\n      // Remove the header model\n      delete (this.headerData);\n\n    }\n  });\n\n\n  // Extend the collection class for FTS Configuration\n  if (!pgBrowser.Nodes['coll-fts_configuration']) {\n    var fts_configurations = pgAdmin.Browser.Nodes['coll-fts_configuration'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'fts_configuration',\n        label: gettext('FTS Configurations'),\n        type: 'coll-fts_configuration',\n        columns: ['name', 'description']\n      });\n  };\n\n  // Extend the node class for FTS Configuration\n  if (!pgBrowser.Nodes['fts_configuration']) {\n    pgAdmin.Browser.Nodes['fts_configuration'] = pgAdmin.Browser.Node.extend({\n      parent_type: ['schema', 'catalog'],\n      type: 'fts_configuration',\n      sqlAlterHelp: 'sql-altertsconfig.html',\n      sqlCreateHelp: 'sql-createtsconfig.html',\n      dialogHelp: url_for('help.static', {'filename': 'fts_configuration_dialog.html'}),\n      canDrop: true,\n      canDropCascade: true,\n      label: gettext('FTS Configuration'),\n      hasSQL: true,\n      hasDepends: true,\n      Init: function() {\n\n        // Avoid multiple registration of menus\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        // Add context menus for FTS Configuration\n        pgBrowser.add_menus([{\n          name: 'create_fts_configuration_on_schema', node: 'schema',\n          module: this, category: 'create', priority: 4,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          label: gettext('FTS Configuration...'),\n          icon: 'wcTabIcon icon-fts_configuration', data: {action: 'create'},\n          enable: 'canCreate'\n          },{\n          name: 'create_fts_configuration_on_coll', module: this, priority: 4,\n          node: 'coll-fts_configuration', applies: ['object', 'context'],\n          callback: 'show_obj_properties', category: 'create',\n          label: gettext('FTS Configuration...'), data: {action: 'create'},\n          icon: 'wcTabIcon icon-fts_configuration', enable: 'canCreate'\n          },{\n          name: 'create_fts_configuration', node: 'fts_configuration',\n          module: this, applies: ['object', 'context'],\n          callback: 'show_obj_properties', category: 'create', priority: 4,\n          label: gettext('FTS Configuration...'), data: {action: 'create'},\n          icon: 'wcTabIcon icon-fts_configuration', enable: 'canCreate'\n          }]);\n      },\n\n      // Defining model for FTS Configuration node\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,        // FTS Configuration name\n          owner: undefined,       // FTS Configuration owner\n          description: undefined, // Comment on FTS Configuration\n          schema: undefined,      // Schema name FTS Configuration belongs to\n          prsname: undefined,    // FTS parser list for FTS Configuration node\n          copy_config: undefined, // FTS configuration list to copy from\n          tokens: undefined      // token/dictionary pair list for node\n        },\n        initialize: function(attrs, opts) {\n          var isNew = (_.size(attrs) === 0);\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(this, arguments);\n\n          if (isNew) {\n            var user = pgBrowser.serverInfo[opts.node_info.server._id].user;\n            this.set({\n              'owner': user.name,\n              'schema': opts.node_info.schema._id\n            }, {silent: true});\n          }\n        },\n        // Defining schema for FTS Configuration\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', cellHeaderClasses: 'width_percent_50'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          editable: false, type: 'text', disabled: true, mode:['properties']\n        },{\n          id: 'owner', label: gettext('Owner'), cell: 'string',\n          type: 'text', mode: ['properties', 'edit','create'], node: 'role',\n          control: Backform.NodeListByNameControl, select2: { allowClear: false }\n        },{\n          id: 'schema', label: gettext('Schema'), cell: 'string',\n          type: 'text', mode: ['create','edit'], node: 'schema',\n          control: 'node-list-by-id', cache_node: 'database',\n          cache_level: 'database'\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', cellHeaderClasses: 'width_percent_50'\n        },{\n          id: 'prsname', label: gettext('Parser'),type: 'text',\n          url: 'parsers', first_empty: true,\n          group: gettext('Definition'), control: 'node-ajax-options',\n          deps: ['copy_config'],\n          //disable parser when user select copy_config manually and vica-versa\n          disabled: function(m) {\n            var copy_config = m.get('copy_config');\n            return m.isNew() &&\n                    (_.isNull(copy_config) ||\n                    _.isUndefined(copy_config) ||\n                    copy_config === '') ? false : true;\n          }\n        },{\n          id: 'copy_config', label: gettext('Copy Config'),type: 'text',\n          mode: ['create'], group: gettext('Definition'),\n          control: 'node-ajax-options', url: 'copyConfig', deps: ['prsname'],\n\n          //disable copy_config when user select parser manually and vica-versa\n          disabled: function(m) {\n            var parser = m.get('prsname');\n            return m.isNew() &&\n                    (_.isNull(parser) ||\n                    _.isUndefined(parser) ||\n                    parser === '') ? false : true;\n          }\n        },{\n          id: 'tokens', label: gettext('Tokens'), type: 'collection',\n          group: gettext('Tokens'), control: TokenControl,\n          model: TokenModel, columns: ['token', 'dictionary'],\n          uniqueCol : ['token'], mode: ['create','edit'],\n          canAdd: true, canEdit: false, canDelete: true\n         }],\n\n        /*\n         * Triggers control specific error messages for name,\n         * copy_config/parser and schema, if any one of them is not specified\n         * while creating new fts configuration\n         */\n        validate: function(keys){\n          var msg;\n          var name = this.get('name');\n          var parser = this.get('prsname');\n          var copy_config_or_parser = !(parser === '' ||\n                                        _.isUndefined(parser) ||\n                                        _.isNull(parser)) ?\n                                        this.get('prsname') : this.get('copy_config');\n          var schema = this.get('schema');\n\n          // Clear the existing error model\n          this.errorModel.clear();\n          this.trigger('on-status-clear');\n\n          // Validate the name\n          if (_.isUndefined(name) ||\n              _.isNull(name) ||\n              String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Name must be specified!');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n\n          // Validate parser or copy_config\n          else if (_.isUndefined(copy_config_or_parser) ||\n                   _.isNull(copy_config_or_parser) ||\n                   String(copy_config_or_parser).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Select parser or configuration to copy!');\n            this.errorModel.set('parser', msg);\n            return msg;\n          }\n\n          // Validate schema\n          else if (_.isUndefined(schema) ||\n                   _.isNull(schema) ||\n                   String(schema).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Schema must be selected!');\n            this.errorModel.set('schema', msg);\n            return msg;\n          }\n\n          return null;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n        //If check is false then , we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n        // To iterate over tree to check parent node\n        while (i) {\n          // If it is schema then allow user to create fts configuration\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-fts_configuration' == d._type) {\n            //Check if we are not child of catalog\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n            if( prev_d._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // by default we do not want to allow create menu\n        return true;\n      }\n    });\n  }\n\nreturn pgBrowser.Nodes['coll-fts_configuration'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/fts_configurations/static/js/fts_configuration.js","define('pgadmin.node.fts_dictionary', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Extend the browser's node model class to create a option/value pair\n  var OptionLabelModel = pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          options: undefined,\n          value: undefined\n        },\n        // Define the schema for the Options\n        schema: [\n          {\n            id: 'option', label: gettext('Option'), type:'text', group: null,\n            cellHeaderClasses: 'width_percent_50', editable: true\n          },{\n            id: 'value', label: gettext('Value'), type: 'text', group:null,\n            cellHeaderClasses: 'width_percent_50', editable: true\n            },\n        ],\n        validate: function() {\n            // Clear any existing errors.\n            this.errorModel.clear()\n\n            if (_.isUndefined(this.get('option')) ||\n                String(this.get('option')).replace(/^\\s+|\\s+$/g, '') == '') {\n                var msg = gettext('Option cannot be empty!');\n                this.errorModel.set('option',msg);\n                return msg;\n            }\n            if (_.isUndefined(this.get('value')) ||\n                String(this.get('value')).replace(/^\\s+|\\s+$/g, '') == '') {\n                var msg = gettext('Value cannot be empty!');\n                this.errorModel.set('value',msg);\n                return msg;\n            }\n            return null;\n        }\n    });\n\n  // Extend the collection class for FTS Dictionary\n  if (!pgBrowser.Nodes['coll-fts_dictionary']) {\n    var fts_dictionaries = pgAdmin.Browser.Nodes['coll-fts_dictionary'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'fts_dictionary',\n        label: gettext('FTS Dictionaries'),\n        type: 'coll-fts_dictionary',\n        columns: ['name', 'description']\n      });\n  };\n\n  // Extend the node class for FTS Dictionary\n  if (!pgBrowser.Nodes['fts_dictionary']) {\n    pgAdmin.Browser.Nodes['fts_dictionary'] = pgAdmin.Browser.Node.extend({\n      parent_type: ['schema', 'catalog'],\n      type: 'fts_dictionary',\n      sqlAlterHelp: 'sql-altertsdictionary.html',\n      sqlCreateHelp: 'sql-createtsdictionary.html',\n      dialogHelp: url_for('help.static', {'filename': 'fts_dictionary_dialog.html'}),\n      canDrop: true,\n      canDropCascade: true,\n      label: gettext('FTS Dictionary'),\n      hasSQL: true,\n      hasDepends: true,\n      Init: function() {\n\n        // Avoid multiple registration of menus\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        // Add context menus for FTS Dictionary\n        pgBrowser.add_menus([{\n          name: 'create_fts_dictionary_on_schema', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('FTS Dictionary...'),\n          icon: 'wcTabIcon icon-fts_dictionary', data: {action: 'create'},\n          enable: 'canCreate'\n          },{\n          name: 'create_fts_dictionary_on_coll', node: 'coll-fts_dictionary',\n          module: this, applies: ['object', 'context'],  priority: 4,\n          callback: 'show_obj_properties', category: 'create',\n          label: gettext('FTS Dictionary...'), data: {action: 'create'},\n          icon: 'wcTabIcon icon-fts_dictionary', enable: 'canCreate'\n          },{\n          name: 'create_fts_dictionary', node: 'fts_dictionary', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('FTS Dictionary...'),\n          icon: 'wcTabIcon icon-fts_dictionary', data: {action: 'create'},\n          enable: 'canCreate'\n          }]);\n      },\n\n      // Defining backform model for FTS Dictionary node\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,        // FTS Dictionary name\n          owner: undefined,       // FTS Dictionary owner\n          description: undefined, // Comment on FTS Dictionary\n          schema: undefined,      // Schema name FTS dictionary belongs to\n          template: undefined,    // Template list for FTS dictionary node\n          options: undefined      // option/value pair list for FTS Dictionary\n        },\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(this, arguments);\n\n          if (isNew) {\n            var user = pgBrowser.serverInfo[args.node_info.server._id].user;\n            this.set({\n              'owner': user.name,\n              'schema': args.node_info.schema._id\n            }, {silent: true});\n          }\n        },\n        // Defining schema for fts dictionary\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', cellHeaderClasses: 'width_percent_50'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          editable: false, type: 'text', disabled: true, mode:['properties']\n        },{\n          id: 'owner', label: gettext('Owner'), cell: 'string',\n          type: 'text', mode: ['properties', 'edit','create'], node: 'role',\n          control: Backform.NodeListByNameControl\n        },{\n          id: 'schema', label: gettext('Schema'), cell: 'string',\n          type: 'text', mode: ['create','edit'], node: 'schema',\n          cache_node: 'database', control: 'node-list-by-id'\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', cellHeaderClasses: 'width_percent_50'\n        },{\n          id: 'template', label: gettext('Template'),type: 'text',\n          disabled: function(m) { return !m.isNew(); }, url: 'fetch_templates',\n          group: gettext('Definition'), control: 'node-ajax-options',\n          cache_node: 'fts_template',\n        },{\n          id: 'options', label: gettext('Option'), type: 'collection',\n          group: gettext('Options'), control: 'unique-col-collection',\n          model: OptionLabelModel, columns: ['option', 'value'],\n          uniqueCol : ['option'], mode: ['edit', 'create'],\n          canAdd: true, canEdit: false,canDelete: true\n         }],\n\n        /*\n         * Triggers control specific error messages for dictionary name,\n         * template and schema, if any one of them is not specified\n         * while creating new fts dictionary\n         */\n        validate: function(keys){\n          var name = this.get('name');\n          var template = this.get('template');;\n          var schema = this.get('schema');\n\n          // Validate FTS Dictionary name\n          if (_.isUndefined(name) || _.isNull(name) || String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Name must be specified!');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n\n          // Validate template name\n          else if (_.isUndefined(template) || _.isNull(template) || String(template).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Template must be selected!');\n            this.errorModel.set('template', msg);\n            return msg;\n          }\n\n          // Validate schema\n          else if (_.isUndefined(schema) || _.isNull(schema) || String(schema).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Schema must be selected!');\n            this.errorModel.set('schema', msg);\n            return msg;\n          }\n          else this.errorModel.clear();\n\n          this.trigger('on-status-clear');\n          return null;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n        //If check is false then , we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n        // To iterate over tree to check parent node\n        while (i) {\n          // If it is schema then allow user to create fts dictionary\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-fts_dictionary' == d._type) {\n            //Check if we are not child of catalog\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n            if( prev_d._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // by default we do not want to allow create menu\n        return true;\n      }\n    });\n  }\n\nreturn pgBrowser.Nodes['fts_dictionary'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/fts_dictionaries/static/js/fts_dictionary.js","define('pgadmin.node.fts_parser', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Extend the collection class for fts parser\n  if (!pgBrowser.Nodes['coll-fts_parser']) {\n    var fts_parsers = pgAdmin.Browser.Nodes['coll-fts_parser'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'fts_parser',\n        label: gettext('FTS Parsers'),\n        type: 'coll-fts_parser',\n        columns: ['name', 'description']\n      });\n  };\n\n  // Extend the node class for fts parser\n  if (!pgBrowser.Nodes['fts_parser']) {\n    pgAdmin.Browser.Nodes['fts_parser'] = pgAdmin.Browser.Node.extend({\n      parent_type: ['schema', 'catalog'],\n      type: 'fts_parser',\n      sqlAlterHelp: 'sql-altertsparser.html',\n      sqlCreateHelp: 'sql-createtsparser.html',\n      dialogHelp: url_for('help.static', {'filename': 'fts_parser_dialog.html'}),\n      canDrop: true,\n      canDropCascade: true,\n      label: gettext('FTS Parser'),\n      hasSQL: true,\n      hasDepends: true,\n      Init: function() {\n\n        // Avoid multiple registration of menus\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        // Add context menus for fts parser\n        pgBrowser.add_menus([{\n          name: 'create_fts_parser_on_schema', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('FTS Parser...'),\n          icon: 'wcTabIcon icon-fts_parser', data: {action: 'create'},\n          enable: 'canCreate'\n          },{\n          name: 'create_fts_parser_on_coll', node: 'coll-fts_parser',\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('FTS Parser...'),\n          icon: 'wcTabIcon icon-fts_parser', data: {action: 'create'},\n          module: this, enable: 'canCreate'\n          },{\n          name: 'create_fts_parser', node: 'fts_parser', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('FTS Parser...'),\n          icon: 'wcTabIcon icon-fts_parser', data: {action: 'create'},\n          enable: 'canCreate'\n          }]);\n\n      },\n\n      // Defining backform model for fts parser node\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,          // Fts parser name\n          description: undefined,   // Comment on parser\n          schema: undefined,        // Schema name to which parser belongs\n          prsstart: undefined,      // Start function for fts parser\n          prstoken: undefined,       // Token function for fts parser\n          prsend: undefined,        // End function for fts parser\n          prslextype: undefined,    // Lextype function for fts parser\n          prsheadline: undefined    // Headline function for fts parse\n        },\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(\n            this, arguments\n          );\n          if (isNew) {\n            this.set('schema', args.node_info.schema._id);\n          }\n        },\n        // Defining schema for fts parser\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', cellHeaderClasses: 'width_percent_50'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          editable: false, type: 'text', disabled: true, mode:['properties']\n        },{\n          id: 'schema', label: gettext('Schema'), cell: 'string',\n          type: 'text', mode: ['create','edit'], node: 'schema',\n          control: 'node-list-by-id', cache_node: 'database',\n          cache_level: 'database'\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', cellHeaderClasses: 'width_percent_50'\n        },{\n          id: 'prsstart', label: gettext('Start function'),\n          type: 'text', disabled: function(m) { return !m.isNew(); },\n          control: 'node-ajax-options', url: 'start_functions',\n          group: gettext('Definition'), cache_level: 'database',\n          cache_node: 'schema'\n        },{\n          id: 'prstoken', label: gettext('Get next token function'),\n          type: 'text', disabled: function(m) { return !m.isNew(); },\n          control: 'node-ajax-options', url: 'token_functions',\n          group: gettext('Definition'), cache_level: 'database',\n          cache_node: 'schema'\n        },{\n          id: 'prsend', label: gettext('End function'),\n          type: 'text', disabled: function(m) { return !m.isNew(); },\n          control: 'node-ajax-options', url: 'end_functions',\n          group: gettext('Definition'), cache_level: 'database',\n          cache_node: 'schema'\n        },{\n          id: 'prslextype', label: gettext('Lextypes function'),\n          type: 'text', disabled: function(m) { return !m.isNew(); },\n          control: 'node-ajax-options', url: 'lextype_functions',\n          group: gettext('Definition'), cache_level: 'database',\n          cache_node: 'schema'\n        },{\n          id: 'prsheadline', label: gettext('Headline function'),\n          type: 'text', disabled: function(m) { return !m.isNew(); },\n          control: 'node-ajax-options', url: 'headline_functions',\n          group: gettext('Definition'), cache_level: 'database',\n          cache_node: 'schema'\n        }],\n\n        /*\n         * Triggers control specific error messages for parser name,\n         * start, token, end, lextype functions and schema, if any one of them is not specified\n         * while creating new fts parser\n         */\n        validate: function(keys){\n          var name = this.get('name');\n          var start = this.get('prsstart');\n          var token = this.get('prstoken');\n          var end = this.get('prsend');\n          var lextype = this.get('prslextype');\n          var schema = this.get('schema');\n\n          // Validate fts parser name\n          if (_.isUndefined(name) ||\n                _.isNull(name) ||\n                String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Name must be specified.');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n\n          // Validate start function control\n          else if (_.isUndefined(start) ||\n                    _.isNull(start) ||\n                    String(start).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Start function must be selected.');\n            this.errorModel.set('prsstart', msg);\n            return msg;\n          }\n\n          // Validate gettoken function control\n          else if (_.isUndefined(token) ||\n                    _.isNull(token) ||\n                    String(token).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Get next token function must be selected.');\n            this.errorModel.set('prstoken', msg);\n            return msg;\n          }\n\n          // Validate end function control\n          else if (_.isUndefined(end) ||\n                    _.isNull(end) ||\n                    String(end).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('End function must be selected.');\n            this.errorModel.set('prsend', msg);\n            return msg;\n          }\n\n          // Validate lextype function control\n          else if (_.isUndefined(lextype) ||\n                    _.isNull(lextype) ||\n                    String(lextype).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Lextype function must be selected.');\n            this.errorModel.set('prslextype', msg);\n            return msg;\n          }\n\n          // Validate schema for fts parser\n          else if (_.isUndefined(schema) ||\n                    _.isNull(schema) ||\n                    String(schema).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Schema must be selected.');\n            this.errorModel.set('schema', msg);\n            return msg;\n          }\n          else this.errorModel.clear();\n\n          this.trigger('on-status-clear');\n          return null;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n        //If check is false then , we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n        // To iterate over tree to check parent node\n        while (i) {\n          // If it is schema then allow user to create fts parser\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-fts_parser' == d._type) {\n            //Check if we are not child of catalog\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n            if( prev_d._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // by default we do not want to allow create menu\n        return true;\n      }\n    });\n  }\n\nreturn pgBrowser.Nodes['coll-fts_parser'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/fts_parser/static/js/fts_parser.js","define('pgadmin.node.fts_template', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Extend the collection class for fts template\n  if (!pgBrowser.Nodes['coll-fts_template']) {\n    var fts_templates = pgAdmin.Browser.Nodes['coll-fts_template'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'fts_template',\n        label: gettext('FTS Templates'),\n        type: 'coll-fts_template',\n        columns: ['name', 'description']\n      });\n  };\n\n  // Extend the node class for fts template\n  if (!pgBrowser.Nodes['fts_template']) {\n    pgAdmin.Browser.Nodes['fts_template'] = pgAdmin.Browser.Node.extend({\n      parent_type: ['schema', 'catalog'],\n      type: 'fts_template',\n      sqlAlterHelp: 'sql-altertstemplate.html',\n      sqlCreateHelp: 'sql-createtstemplate.html',\n      dialogHelp: url_for('help.static', {'filename': 'fts_template_dialog.html'}),\n      canDrop: true,\n      canDropCascade: true,\n      label: gettext('FTS Template'),\n      hasSQL: true,\n      hasDepends: true,\n      Init: function() {\n\n        // Avoid multiple registration of menus\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        // Add context menus for fts template\n        pgBrowser.add_menus([{\n          name: 'create_fts_template_on_schema', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('FTS Template...'),\n          icon: 'wcTabIcon icon-fts_template', data: {action: 'create'},\n          enable: 'canCreate'\n          },{\n          name: 'create_fts_template_on_coll', node: 'coll-fts_template', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('FTS Template...'),\n          icon: 'wcTabIcon icon-fts_template', data: {action: 'create'},\n          enable: 'canCreate'\n          },{\n          name: 'create_fts_template', node: 'fts_template', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('FTS Template...'),\n          icon: 'wcTabIcon icon-fts_template', data: {action: 'create'},\n          enable: 'canCreate'\n          }]);\n\n      },\n\n      // Defining backform model for fts template node\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,      // Fts template name\n          description: undefined,   // Comment on template\n          schema: undefined,        // Schema name to which template belongs\n          tmplinit: undefined,      // Init function for fts template\n          tmpllexize: undefined     // Lexize function for fts template\n        },\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(this, arguments);\n          if (isNew) {\n            this.set('schema', args.node_info.schema._id);\n          }\n        },\n        // Defining schema for fts template\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', cellHeaderClasses: 'width_percent_50'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          editable: false, type: 'text', disabled: true, mode:['properties']\n        },{\n          id: 'schema', label: gettext('Schema'), cell: 'string',\n          type: 'text', mode: ['create','edit'], node: 'schema',\n          control: 'node-list-by-id', cache_node: 'database',\n          cache_level: 'database'\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', cellHeaderClasses: 'width_percent_50'\n        },{\n          id: 'tmplinit', label: gettext('Init function'),\n          group: gettext('Definition'), type: 'text', disabled: function(m) {\n            return !m.isNew();\n          }, control: 'node-ajax-options', url: 'get_init',\n          cache_level: 'database', cache_node: 'schema'\n        },{\n          id: 'tmpllexize', label: gettext('Lexize function'), group: gettext('Definition'),\n          type: 'text', disabled: function(m) { return !m.isNew(); },\n          control: 'node-ajax-options', url: 'get_lexize', cache_level: 'database',\n          cache_node: 'schema'\n        }],\n\n        /*\n         * Triggers control specific error messages for template name,\n         * lexize function and schema, if any one of them is not specified\n         * while creating new fts template\n         */\n        validate: function(keys){\n          var name = this.get('name');\n          var lexize = this.get('tmpllexize');\n          var schema = this.get('schema');\n\n          // Validate fts template name\n          if (_.isUndefined(name) || _.isNull(name) || String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Name must be specified.');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n\n          // Validate lexize function control\n          else if (_.isUndefined(lexize) || _.isNull(lexize) || String(lexize).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Lexize function must be selected.');\n            this.errorModel.set('tmpllexize', msg);\n            return msg;\n          }\n\n          // Validate schema for fts template\n          else if (_.isUndefined(schema) || _.isNull(schema) || String(schema).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Schema must be selected.');\n            this.errorModel.set('schema', msg);\n            return msg;\n          }\n          else this.errorModel.clear();\n\n          this.trigger('on-status-clear');\n          return null;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n        //If check is false then , we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n        // To iterate over tree to check parent node\n        while (i) {\n          // If it is schema then allow user to create fts fts_template\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-fts_template' == d._type) {\n            //Check if we are not child of catalog\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n            if( prev_d._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // by default we do not want to allow create menu\n        return true;\n      }\n    });\n  }\n\nreturn pgBrowser.Nodes['fts_template'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/fts_templates/static/js/fts_template.js","/* Create and Register Procedure Collection and Node. */\ndefine('pgadmin.node.procedure', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.node.function', 'pgadmin.browser.collection',\n  'pgadmin.browser.server.privilege'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify, Function) {\n\n  if (!pgBrowser.Nodes['coll-procedure']) {\n    var procedures = pgAdmin.Browser.Nodes['coll-procedure'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'procedure',\n        label: gettext('Procedures'),\n        type: 'coll-procedure',\n        columns: ['name', 'funcowner', 'description'],\n        hasStatistics: true\n      });\n  };\n\n  var pgSchemaNode = pgBrowser.Nodes['schema'];\n\n  // Inherit Functions Node\n  if (!pgBrowser.Nodes['procedure']) {\n    pgAdmin.Browser.Nodes['procedure'] = pgBrowser.Node.extend({\n      type: 'procedure',\n      sqlAlterHelp: 'sql-alterprocedure.html',\n      sqlCreateHelp: 'sql-createprocedure.html',\n      dialogHelp: url_for('help.static', {'filename': 'procedure_dialog.html'}),\n      label: gettext('Procedure'),\n      collection_type: 'coll-procedure',\n      hasSQL: true,\n      hasDepends: true,\n      hasStatistics: true,\n      hasScriptTypes: ['create', 'exec'],\n      parent_type: ['schema', 'catalog'],\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.proc_initialized)\n            return;\n\n        this.proc_initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_procedure_on_coll', node: 'coll-procedure', module:\n          this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Procedure...'),\n          icon: 'wcTabIcon icon-procedure', data: {action: 'create', check:\n          false}, enable: 'canCreateProc'\n        },{\n          name: 'create_procedure', node: 'procedure', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Procedure...'),\n          icon: 'wcTabIcon icon-procedure', data: {action: 'create', check:\n          true}, enable: 'canCreateProc'\n        },{\n          name: 'create_procedure', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Procedure...'),\n          icon: 'wcTabIcon icon-procedure', data: {action: 'create', check:\n          true}, enable: 'canCreateProc'\n        }\n        ]);\n      },\n      canDrop: pgSchemaNode.canChildDrop,\n      canDropCascade: false,\n      canCreateProc: function(itemData, item, data) {\n        var node_hierarchy = this.getTreeNodeHierarchy.apply(this, [item]);\n\n        // Do not provide Create option in catalog\n        if ('catalog' in node_hierarchy)\n          return false;\n\n        // Procedures supported only in PPAS\n        if ('server' in node_hierarchy && node_hierarchy['server'].server_type == \"ppas\")\n          return true;\n\n        return false;\n      },\n      model: Function.model.extend({\n        defaults: _.extend({},\n          Function.model.prototype.defaults,\n          {\n            lanname: 'edbspl'\n          }\n        ),\n        canVarAdd: function(m){\n          var server = this.node_info.server;\n            if (server.version < 90500) {\n              return false;\n           }\n           else {\n             return true;\n           }\n        },\n        isVisible: function(m){\n          if (this.name == 'sysfunc') { return false; }\n          else if (this.name == 'sysproc') { return true; }\n          return false;\n        },\n        isDisabled: function(m) {\n          if(this.node_info &&  'catalog' in this.node_info) {\n            return true;\n          }\n          name = this.name;\n          switch(name){\n            case 'provolatility':\n            case 'proisstrict':\n            case 'prosecdef':\n            case 'procost':\n            case 'proleakproof':\n            case 'variables':\n               var server = this.node_info.server;\n               if (server.version < 90500) {\n                 return true;\n               }\n               else {\n                 return false;\n               }\n               break;\n            case 'prorows':\n              var server = this.node_info.server;\n              if(server.version >= 90500 && m.get('proretset') == true) {\n                return false;\n              }\n              else {\n                return true;\n              }\n              break;\n            case 'funcowner':\n            case 'lanname':\n            case 'proargs':\n              return true;\n            default:\n              return false;\n              break;\n          }\n          return false;\n       },\n       validate: function()\n        {\n          var err = {},\n              errmsg,\n              seclabels = this.get('seclabels');\n\n          if (_.isUndefined(this.get('name')) || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['name'] = gettext('Name cannot be empty.');\n            errmsg = errmsg || err['name'];\n          }\n\n          if (_.isUndefined(this.get('pronamespace')) || String(this.get('pronamespace')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['pronamespace'] = gettext('Schema cannot be empty.');\n            errmsg = errmsg || err['pronamespace'];\n          }\n\n          if (_.isUndefined(this.get('lanname')) || String(this.get('lanname')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['lanname'] = gettext('Language cannot be empty.');\n            errmsg = errmsg || err['lanname'];\n          }\n\n          if (_.isUndefined(this.get('prosrc')) || String(this.get('prosrc')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['prosrc'] = gettext('Code cannot be empty.');\n            errmsg = errmsg || err['prosrc'];\n          }\n\n\n          if (seclabels) {\n            var secLabelsErr;\n            for (var i = 0; i < seclabels.models.length && !secLabelsErr; i++) {\n              secLabelsErr = (seclabels.models[i]).validate.apply(seclabels.models[i]);\n              if (secLabelsErr) {\n                err['seclabels'] = secLabelsErr;\n                errmsg = errmsg || secLabelsErr;\n              }\n            }\n          }\n\n          this.errorModel.clear().set(err);\n\n          return null;\n        },\n      })\n  });\n\n  }\n\n  return pgBrowser.Nodes['procedure'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/functions/static/js/procedure.js","/* Create and Register Procedure Collection and Node. */\ndefine('pgadmin.node.edbproc', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.node.edbfunc', 'pgadmin.browser.collection',\n  'pgadmin.browser.server.privilege'\n], function(\n  gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify, EdbFunction\n) {\n\n  if (!pgBrowser.Nodes['coll-edbproc']) {\n    pgAdmin.Browser.Nodes['coll-edbproc'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'edbproc',\n        label: gettext('Procedures'),\n        type: 'coll-edbproc',\n        columns: ['name', 'funcowner', 'description'],\n        hasStatistics: true\n      });\n  };\n\n  // Inherit Functions Node\n  if (!pgBrowser.Nodes['edbproc']) {\n    pgAdmin.Browser.Nodes['edbproc'] = pgBrowser.Node.extend({\n      type: 'edbproc',\n      dialogHelp: url_for('help.static', {'filename': 'edbproc_dialog.html'}),\n      label: gettext('Procedure'),\n      collection_type: 'coll-edbproc',\n      hasDepends: true,\n      canEdit: false,\n      hasSQL: true,\n      hasScriptTypes: [],\n      parent_type: ['package'],\n      Init: function() {\n        /* Avoid multiple registration of menus */\n        if (this.proc_initialized)\n            return;\n\n        this.proc_initialized = true;\n\n      },\n      canDrop: false,\n      canDropCascade: false,\n      model: EdbFunction.model.extend({\n        defaults: _.extend({},\n          EdbFunction.model.prototype.defaults,\n          {\n            lanname: 'edbspl'\n          }\n        ),\n        isVisible: function(m){\n          if (this.name == 'sysfunc') { return false; }\n          else if (this.name == 'sysproc') { return true; }\n          return false;\n        },\n        validate: function()\n        {\n          return null;\n        }\n      }\n      )\n  });\n\n  }\n\n  return pgBrowser.Nodes['edbproc'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/packages/edbfuncs/static/js/edbproc.js","/* Create and Register Function Collection and Node. */\ndefine('pgadmin.node.edbvar', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection', 'pgadmin.browser.server.privilege'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-edbvar']) {\n    pgBrowser.Nodes['coll-edbvar'] =\n      pgBrowser.Collection.extend({\n        node: 'edbvar',\n        label: gettext('Variables'),\n        type: 'coll-edbvar',\n        columns: ['name', 'funcowner', 'description']\n      });\n  };\n\n  if (!pgBrowser.Nodes['edbvar']) {\n    pgBrowser.Nodes['edbvar'] = pgBrowser.Node.extend({\n      type: 'edbvar',\n      dialogHelp: url_for('help.static', {'filename': 'edbvar_dialog.html'}),\n      label: gettext('Function'),\n      collection_type: 'coll-edbvar',\n      canEdit: false,\n      hasSQL: true,\n      hasScriptTypes: [],\n      parent_type: ['package'],\n      Init: function(args) {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n      },\n      canDrop: false,\n      canDropCascade: false,\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          datatype: undefined,\n          visibility: 'Unknown'\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties'],\n          disabled: true\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'datatype', label: gettext('Data type'), cell: 'string',\n          type: 'text', disabled: true\n        },{\n          id: 'visibility', label: gettext('Visibility'), cell: 'string',\n          type: 'text', mode: ['properties'],\n          disabled: true\n        }],\n        validate: function()\n        {\n          return null;\n        }\n      })\n  });\n\n  }\n\n  return pgBrowser.Nodes['edbvar'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/packages/edbvars/static/js/edbvar.js","/* Create and Register Function Collection and Node. */\ndefine('pgadmin.node.trigger_function', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection', 'pgadmin.browser.server.privilege'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-trigger_function']) {\n    var trigger_functions = pgBrowser.Nodes['coll-trigger_function'] =\n      pgBrowser.Collection.extend({\n        node: 'trigger_function',\n        label: gettext('Trigger functions'),\n        type: 'coll-trigger_function',\n        columns: ['name', 'funcowner', 'description'],\n        hasStatistics: true\n      });\n  };\n\n  if (!pgBrowser.Nodes['trigger_function']) {\n    pgBrowser.Nodes['trigger_function'] = pgBrowser.Node.extend({\n      type: 'trigger_function',\n      sqlAlterHelp: 'plpgsql-trigger.html',\n      sqlCreateHelp: 'plpgsql-trigger.html',\n      dialogHelp: url_for('help.static', {'filename': 'trigger_function_dialog.html'}),\n      label: gettext('Trigger function'),\n      collection_type: 'coll-trigger_function',\n      hasSQL: true,\n      hasDepends: true,\n      hasStatistics: true,\n      parent_type: ['schema', 'catalog'],\n      Init: function(args) {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_trigger_function_on_coll', node: 'coll-trigger_function', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Trigger function...'),\n          icon: 'wcTabIcon icon-trigger_function', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_trigger_function', node: 'trigger_function', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Trigger function...'),\n          icon: 'wcTabIcon icon-trigger_function', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_trigger_function', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Trigger function...'),\n          icon: 'wcTabIcon icon-trigger_function', data: {action: 'create', check: false},\n          enable: 'canCreate'\n        }\n        ]);\n\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      model: pgBrowser.Node.Model.extend({\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n          if (isNew) {\n            // Set Selected Schema\n            var schema_id = args.node_info.schema._id\n            this.set({'pronamespace': schema_id}, {silent: true});\n\n            // Set Current User\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            this.set({'funcowner': userInfo.name}, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          xmin: undefined,\n          funcowner: undefined,\n          pronamespace: undefined,\n          description: undefined,\n          pronargs: undefined, /* Argument Count */\n          proargs: undefined, /* Arguments */\n          proargtypenames: undefined, /* Argument Signature */\n          prorettypename: 'trigger', /* Return Type */\n          lanname: 'plpgsql', /* Language Name in which function is being written */\n          provolatile: undefined, /* Volatility */\n          proretset: undefined, /* Return Set */\n          proisstrict: undefined,\n          prosecdef: undefined, /* Security of definer */\n          proiswindow: undefined, /* Window Function ? */\n          procost: undefined, /* Estimated execution Cost */\n          prorows: undefined, /* Estimated number of rows */\n          proleakproof: undefined,\n          args: [],\n          prosrc: undefined,\n          prosrc_c: undefined,\n          probin: '$libdir/',\n          options: [],\n          variables: [],\n          proacl: undefined,\n          seclabels: [],\n          acl: [],\n          sysfunc: undefined,\n          sysproc: undefined\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: 'isDisabled'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'funcowner', label: gettext('Owner'), cell: 'string',\n          control: Backform.NodeListByNameControl, node: 'role',  type:\n          'text', disabled: 'isDisabled'\n        },{\n          id: 'pronamespace', label: gettext('Schema'), cell: 'string',\n          control: 'node-list-by-id', type: 'text', cache_level: 'database',\n          node: 'schema', disabled: 'isDisabled', mode: ['create', 'edit']\n        },{\n          id: 'sysfunc', label: gettext('System function?'),\n           cell:'boolean', type: 'switch',\n           mode: ['properties'], visible: 'isVisible'\n        },{\n          id: 'sysproc', label: gettext('System procedure?'),\n           cell:'boolean', type: 'switch',\n           mode: ['properties'], visible: 'isVisible'\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', disabled: 'isDisabled'\n        },{\n          id: 'pronargs', label: gettext('Argument count'), cell: 'string',\n          type: 'text', group: gettext('Definition'), mode: ['properties']\n        },{\n          id: 'proargs', label: gettext('Arguments'), cell: 'string',\n          type: 'text', group: gettext('Definition'), mode: ['properties', 'edit'],\n          disabled: 'isDisabled'\n        },{\n          id: 'proargtypenames', label: gettext('Signature arguments'), cell:\n          'string', type: 'text', group: gettext('Definition'), mode: ['properties'],\n          disabled: 'isDisabled'\n        },{\n          id: 'prorettypename', label: gettext('Return type'), cell: 'string',\n          control: 'select2', type: 'text', group: gettext('Definition'),\n          disabled: 'isDisabled', first_empty: true,\n          select2: { width: \"100%\", allowClear: false },\n          mode: ['create'], visible: 'isVisible', options: [\n            {label: 'trigger', value: 'trigger'},\n            {label: 'event_trigger', value: 'event_trigger'}\n          ]\n        },{\n          id: 'prorettypename', label: gettext('Return type'), cell: 'string',\n          type: 'text', group: gettext('Definition'),\n          mode: ['properties', 'edit'], disabled: 'isDisabled', visible: 'isVisible'\n        },  {\n          id: 'lanname', label: gettext('Language'), cell: 'string',\n          control: 'node-ajax-options', type: 'text', group: gettext('Definition'),\n          url: 'get_languages', disabled: 'isDisabled', transform: function(d, self) {\n             return _.reject(d, function(o){ return o.label == 'sql' || o.label == 'edbspl'; });\n          }, select2: { allowClear: false }\n        },{\n          id: 'prosrc', label: gettext('Code'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          group: gettext('Definition'), deps: ['lanname'],\n          control: Backform.SqlFieldControl,\n          extraClasses:['custom_height_css_class'],\n          visible: function(m) {\n            if (m.get('lanname') == 'c') {\n              return false;\n            }\n            return true;\n          }, disabled: 'isDisabled'\n        },{\n          id: 'probin', label: gettext('Object file'), cell: 'string',\n          type: 'text', group: gettext('Definition'), deps: ['lanname'], visible:\n          function(m) {\n            if (m.get('lanname') == 'c') { return true; }\n            return false;\n          }, disabled: 'isDisabled'\n        },{\n          id: 'prosrc_c', label: gettext('Link symbol'), cell: 'string',\n          type: 'text', group: gettext('Definition'),  deps: ['lanname'], visible:\n          function(m) {\n            if (m.get('lanname') == 'c') { return true; }\n            return false;\n          }, disabled: 'isDisabled'\n        },{\n          id: 'provolatile', label: gettext('Volatility'), cell: 'string',\n          control: 'node-ajax-options', type: 'text', group: gettext('Options'),\n          options:[\n            {'label': 'VOLATILE', 'value': 'v'},\n            {'label': 'STABLE', 'value': 's'},\n            {'label': 'IMMUTABLE', 'value': 'i'},\n          ], disabled: 'isDisabled', select2: { allowClear: false }\n        },{\n          id: 'proretset', label: gettext('Returns a set?'), type: 'switch',\n          group: gettext('Options'), disabled: 'isDisabled',\n          visible: 'isVisible'\n        },{\n          id: 'proisstrict', label: gettext('Strict?'), type: 'switch',\n          disabled: 'isDisabled', group: gettext('Options'),\n          options: {\n            'onText': 'Yes', 'offText': 'No',\n            'onColor': 'success', 'offColor': 'primary',\n            'size': 'small'\n           }\n        },{\n          id: 'prosecdef', label: gettext('Security of definer?'),\n           group: gettext('Options'), cell:'boolean', type: 'switch',\n           disabled: 'isDisabled'\n        },{\n          id: 'proiswindow', label: gettext('Window?'),\n           group: gettext('Options'), cell:'boolean', type: 'switch',\n            disabled: 'isDisabled', visible: 'isVisible'\n        },{\n          id: 'procost', label: gettext('Estimated cost'), type: 'text',\n          group: gettext('Options'), disabled: 'isDisabled'\n        },{\n          id: 'prorows', label: gettext('Estimated rows'), type: 'text',\n          group: gettext('Options'),\n          disabled: 'isDisabled',\n          deps: ['proretset'], visible: 'isVisible'\n        },{\n          id: 'proleakproof', label: gettext('Leak proof?'),\n          group: gettext('Options'), cell:'boolean', type: 'switch', min_version: 90200,\n          disabled: 'isDisabled'\n        }, pgBrowser.SecurityGroupSchema, {\n          id: 'proacl', label: gettext('Privileges'), mode: ['properties'],\n           group: gettext('Security'), type: 'text'\n        },{\n          id: 'variables', label: gettext('Parameters'), type: 'collection',\n          group: gettext('Parameters'), control: 'variable-collection',\n          model: pgBrowser.Node.VariableModel,\n          mode: ['edit', 'create'], canAdd: 'canVarAdd', canEdit: false,\n          canDelete: true, disabled: 'isDisabled'\n         },{\n          id: 'acl', label: gettext('Privileges'), editable: false,\n          type: 'collection', group: 'security', mode: ['edit', 'create'],\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n            privileges: ['X']\n          }), uniqueCol : ['grantee', 'grantor'], disabled: 'isDisabled',\n          canAdd: true, canDelete: true, control: 'unique-col-collection'\n        },{\n          id: 'seclabels', label: gettext('Security Labels'), canEdit: true,\n          model: pgBrowser.SecLabelModel, type: 'collection',\n          min_version: 90100, group: 'security', mode: ['edit', 'create'],\n           canDelete: true, control: 'unique-col-collection', canAdd: true,\n          uniqueCol : ['provider'], disabled: 'isDisabled'\n        }],\n        validate: function(keys)\n        {\n          var err = {},\n              errmsg,\n              seclabels = this.get('seclabels');\n\n          // Nothing to validate\n          if(keys && keys.length == 0) {\n            this.errorModel.clear();\n            return null;\n          }\n\n          if (_.isUndefined(this.get('name')) || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['name'] = gettext('Name cannot be empty.');\n            errmsg = errmsg || err['name'];\n          }\n\n          if (_.isUndefined(this.get('funcowner')) || String(this.get('funcowner')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['funcowner'] = gettext('Owner cannot be empty.');\n            errmsg = errmsg || err['funcowner'];\n          }\n\n          if (_.isUndefined(this.get('pronamespace')) || String(this.get('pronamespace')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['pronamespace'] = gettext('Schema cannot be empty.');\n            errmsg = errmsg || err['pronamespace'];\n          }\n\n          if (_.isUndefined(this.get('prorettypename')) || String(this.get('prorettypename')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['prorettypename'] = gettext('Return type cannot be empty.');\n            errmsg = errmsg || err['prorettypename'];\n          }\n\n          if (_.isUndefined(this.get('lanname')) || String(this.get('lanname')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['lanname'] = gettext('Language cannot be empty.');\n            errmsg = errmsg || err['lanname'];\n          }\n\n          if (String(this.get('lanname')) == 'c') {\n            if (_.isUndefined(this.get('probin')) || String(this.get('probin'))\n              .replace(/^\\s+|\\s+$/g, '') == '') {\n              err['probin'] = gettext('Object File cannot be empty.');\n              errmsg = errmsg || err['probin'];\n            }\n\n            if (_.isUndefined(this.get('prosrc_c')) || String(this.get('prosrc_c')).replace(/^\\s+|\\s+$/g, '') == '') {\n              err['prosrc_c'] = gettext('Link Symbol cannot be empty.');\n              errmsg = errmsg || err['prosrc_c'];\n            }\n          }\n          else {\n            if (_.isUndefined(this.get('prosrc')) || String(this.get('prosrc')).replace(/^\\s+|\\s+$/g, '') == '') {\n              err['prosrc'] = gettext('Code cannot be empty.');\n              errmsg = errmsg || err['prosrc'];\n            }\n          }\n\n          if (seclabels) {\n            var secLabelsErr;\n            for (var i = 0; i < seclabels.models.length && !secLabelsErr; i++) {\n              secLabelsErr = (seclabels.models[i]).validate.apply(seclabels.models[i]);\n              if (secLabelsErr) {\n                err['seclabels'] = secLabelsErr;\n                errmsg = errmsg || secLabelsErr;\n              }\n            }\n          }\n\n          this.errorModel.clear().set(err);\n\n          if (_.size(err)) {\n            this.trigger('on-status', {msg: errmsg});\n            return errmsg;\n          }\n\n          return null;\n        },\n        isVisible: function(m){\n          if (this.name == 'sysproc') { return false; }\n          return true;\n        },\n        isDisabled: function(m){\n          if(this.node_info &&  'catalog' in this.node_info) {\n            return true;\n          }\n          name = this.name;\n          switch(name){\n            case 'proargs':\n            case 'proargtypenames':\n            case 'prorettypename':\n            case 'proretset':\n            case 'proiswindow':\n              return !m.isNew();\n              break;\n            case 'prorows':\n              if(m.get('proretset') == true) {\n                return false;\n              }\n              else {\n                return true;\n              }\n              break;\n            default:\n              return false;\n              break;\n          }\n          return false;\n        },\n        canVarAdd: function(m) {\n          if(this.node_info &&  'catalog' in this.node_info) {\n            return false;\n          }\n         return true;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n        //If check is false then , we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n        // To iterate over tree to check parent node\n        while (i) {\n          // If it is schema then allow user to create Function\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-trigger_function' == d._type) {\n            //Check if we are not child of catalog\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n            if( prev_d._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // by default we do not want to allow create menu\n        return true;\n      }\n  });\n\n  }\n\n  return pgBrowser.Nodes['trigger_function'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/functions/static/js/trigger_function.js","define('pgadmin.node.package', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Extend the browser's collection class for package collection\n  if (!pgBrowser.Nodes['coll-package']) {\n    var databases = pgBrowser.Nodes['coll-package'] =\n      pgBrowser.Collection.extend({\n        node: 'package',\n        label: gettext('Packages'),\n        type: 'coll-package',\n        columns: ['name' ,'owner', 'description']\n      });\n  };\n\n  // Extend the browser's node class for package node\n  if (!pgBrowser.Nodes['package']) {\n    pgBrowser.Nodes['package'] = pgBrowser.Node.extend({\n      type: 'package',\n      dialogHelp: url_for('help.static', {'filename': 'package_dialog.html'}),\n      label: gettext('Package'),\n      collection_type: 'coll-package',\n      hasSQL: true,\n      hasDepends: true,\n      parent_type: ['schema', 'catalog'],\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_package_on_coll', node: 'coll-package', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Package...'),\n          icon: 'wcTabIcon icon-package', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_package', node: 'package', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Package...'),\n          icon: 'wcTabIcon icon-package', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_package', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Package...'),\n          icon: 'wcTabIcon icon-package', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        }\n        ]);\n\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      canCreate: function(itemData, item, data) {\n          //If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var treeData = this.getTreeNodeHierarchy(item),\n                server = treeData['server'];\n\n          if (server && server.server_type === 'pg')\n            return false;\n\n          // If it is catalog then don't allow user to create package\n          if (treeData['catalog'] != undefined)\n            return false;\n\n          // by default we want to allow create menu\n          return true;\n      },\n      // Define the model for package node.\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          owner: undefined,\n          is_sys_object: undefined,\n          description: undefined,\n          pkgheadsrc: undefined,\n          pkgbodysrc: undefined,\n          acl: undefined,\n          pkgacl: []\n        },\n        initialize: function(attrs, args) {\n          if (_.size(attrs) === 0) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            var schemaInfo = args.node_info.schema;\n\n            this.set({\n              'owner': userInfo.name, 'schema': schemaInfo._label\n            }, {silent: true});\n          }\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n        // Define the schema for package node.\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: function(m) {\n            return !m.isNew();\n          }\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text', mode: ['properties']\n        },{\n          id: 'owner', label: gettext('Owner'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: true, editable: false, visible: function(m) {\n            return !m.isNew();\n          }\n        },{\n          id: 'schema', label: gettext('Schema'), type: 'text', node: 'schema',\n          control: 'node-list-by-name',\n          disabled: function(m) { return !m.isNew(); }, filter: function(d) {\n            // If schema name start with pg_* then we need to exclude them\n            if(d && d.label.match(/^pg_/))\n            {\n              return false;\n            }\n            return true;\n          }, cache_node: 'database', cache_level: 'database'\n        },{\n          id: 'is_sys_object', label: gettext('System package?'),\n           cell:'boolean', type: 'switch',mode: ['properties']\n        },{\n          id: 'description', label: gettext('Comment'), type: 'multiline',\n          mode: ['properties', 'create', 'edit']\n        },{\n          id: 'pkgheadsrc', label: gettext('Header'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'], group: gettext('Code'),\n          control: Backform.SqlFieldControl\n        },{\n          id: 'pkgbodysrc', label: gettext('Body'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'], group: gettext('Code'),\n          control: Backform.SqlFieldControl\n        },{\n          id: 'acl', label: gettext('Privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties',]\n        },{\n          id: 'pkgacl', label: gettext('Privileges'), type: 'collection',\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n            privileges: ['X']\n          }), uniqueCol : ['grantee', 'grantor'], editable: false,\n          group: gettext('Security'), mode: ['edit', 'create'],\n          canAdd: true, canDelete: true, control: 'unique-col-collection',\n        }],\n        /* validate function is used to validate the input given by\n         * the user. In case of error, message will be displayed on\n         * the GUI for the respective control.\n         */\n        validate: function() {\n          var msg = undefined;\n          // Clear any existing error msg.\n          this.errorModel.clear();\n\n          if (_.isUndefined(this.get('name'))\n              || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n\n          if (_.isUndefined(this.get('pkgheadsrc'))\n              || String(this.get('pkgheadsrc')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Header cannot be empty.');\n            this.errorModel.set('pkgheadsrc', msg);\n            return msg;\n          }\n\n          return null;\n        }\n      })\n    });\n  }\n\n  return pgBrowser.Nodes['package'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/packages/static/js/package.js","define('pgadmin.node.sequence', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Extend the browser's collection class for sequence collection\n  if (!pgBrowser.Nodes['coll-sequence']) {\n    var databases = pgBrowser.Nodes['coll-sequence'] =\n      pgBrowser.Collection.extend({\n        node: 'sequence',\n        label: gettext('Sequences'),\n        type: 'coll-sequence',\n        columns: ['name', 'seqowner', 'comment'],\n        hasStatistics: true\n      });\n  };\n\n  // Extend the browser's node class for sequence node\n  if (!pgBrowser.Nodes['sequence']) {\n    pgBrowser.Nodes['sequence'] = pgBrowser.Node.extend({\n      type: 'sequence',\n      sqlAlterHelp: 'sql-altersequence.html',\n      sqlCreateHelp: 'sql-createsequence.html',\n      dialogHelp: url_for('help.static', {'filename': 'sequence_dialog.html'}),\n      label: gettext('Sequence'),\n      collection_type: 'coll-sequence',\n      hasSQL: true,\n      hasDepends: true,\n      hasStatistics: true,\n      parent_type: ['schema', 'catalog'],\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_sequence_on_coll', node: 'coll-sequence', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Sequence...'),\n          icon: 'wcTabIcon icon-sequence', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_sequence', node: 'sequence', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Sequence...'),\n          icon: 'wcTabIcon icon-sequence', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_sequence', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Sequence...'),\n          icon: 'wcTabIcon icon-sequence', data: {action: 'create', check: false},\n          enable: 'canCreate'\n        }\n        ]);\n\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      canCreate: function(itemData, item, data) {\n          //If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData;\n          // To iterate over tree to check parent node\n          while (i) {\n            // If it is schema then allow user to create collation\n            if (_.indexOf(['schema'], d._type) > -1)\n              return true;\n\n            if ('coll-sequence' == d._type) {\n              //Check if we are not child of catalog\n              var prev_i = t.hasParent(i) ? t.parent(i) : null,\n                prev_d = prev_i ? t.itemData(prev_i) : null;\n              if( prev_d._type == 'catalog') {\n                return false;\n              } else {\n                return true;\n              }\n            }\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // by default we want to allow create menu\n          return true;\n      },\n      // Define the model for sequence node.\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          seqowner: undefined,\n          schema: undefined,\n          comment: undefined,\n          increment: undefined,\n          start: undefined,\n          current_value: undefined,\n          minimum: undefined,\n          maximum: undefined,\n          cache: undefined,\n          cycled: undefined,\n          relacl: [],\n          securities: []\n        },\n\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            var schemaInfo = args.node_info.schema;\n\n            this.set({'seqowner': userInfo.name}, {silent: true});\n            this.set({'schema': schemaInfo._label}, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n\n        // Define the schema for sequence node.\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit']\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text', mode: ['properties']\n        },{\n          id: 'seqowner', label: gettext('Owner'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'], node: 'role',\n          control: Backform.NodeListByNameControl\n        },{\n          id: 'schema', label: gettext('Schema'), cell: 'string',\n          control: 'node-list-by-name', node: 'schema',\n          type: 'text', mode: ['create', 'edit'], filter: function(d) {\n            // If schema name start with pg_* then we need to exclude them\n            if(d && d.label.match(/^pg_/))\n            {\n              return false;\n            }\n            return true;\n          }, cache_node: 'database', cache_level: 'database'\n        },{\n          id: 'comment', label: gettext('Comment'), type: 'multiline',\n          mode: ['properties', 'create', 'edit']\n        },{\n          id: 'current_value', label: gettext('Current value'), type: 'int',\n          mode: ['properties', 'edit'], group: gettext('Definition')\n        },{\n          id: 'increment', label: gettext('Increment'), type: 'int',\n          mode: ['properties', 'create', 'edit'], group: gettext('Definition'),\n          min: 1\n        },{\n          id: 'start', label: gettext('Start'), type: 'int',\n          mode: ['properties', 'create'], group: gettext('Definition'),\n          disabled: function(m) {\n            return !m.isNew();\n          }\n        },{\n          id: 'minimum', label: gettext('Minimum'), type: 'int',\n          mode: ['properties', 'create', 'edit'], group: gettext('Definition')\n        },{\n          id: 'maximum', label: gettext('Maximum'), type: 'int',\n          mode: ['properties', 'create', 'edit'], group: gettext('Definition')\n        },{\n          id: 'cache', label: gettext('Cache'), type: 'int',\n          mode: ['properties', 'create', 'edit'], group: gettext('Definition'),\n          min: 1\n        },{\n          id: 'cycled', label: gettext('Cycled'), type: 'switch',\n          mode: ['properties', 'create', 'edit'], group: gettext('Definition'),\n          options: {\n            'onText': 'Yes', 'offText': 'No',\n            'onColor': 'success', 'offColor': 'primary',\n            'size': 'small'\n          }\n        }, pgBrowser.SecurityGroupSchema,{\n          id: 'acl', label: gettext('Privileges'), type: 'text',\n          group: gettext('Security'), mode: ['properties'], disabled: true\n        },{\n          id: 'relacl', label: gettext('Privileges'), group: 'security',\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n            privileges: ['r', 'w', 'U']\n          }), uniqueCol : ['grantee', 'grantor'], mode: ['edit', 'create'],\n          editable: false, type: 'collection', canAdd: true, canDelete: true,\n          control: 'unique-col-collection',\n        },{\n          id: 'securities', label: gettext('Securitiy Labels'), canAdd: true,\n          model: pgBrowser.SecLabelModel, editable: false,\n          type: 'collection', canEdit: false, group: 'security',\n          mode: ['edit', 'create'], canDelete: true,\n          control: 'unique-col-collection',\n          min_version: 90200, uniqueCol : ['provider']\n        }],\n        /* validate function is used to validate the input given by\n         * the user. In case of error, message will be displayed on\n         * the GUI for the respective control.\n         */\n        validate: function() {\n          var msg = undefined,\n              minimum = this.get('minimum'),\n              maximum = this.get('maximum'),\n              start = this.get('start');\n\n          if (_.isUndefined(this.get('name'))\n              || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('name');\n          }\n\n          if (_.isUndefined(this.get('seqowner'))\n              || String(this.get('seqowner')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Owner cannot be empty.');\n            this.errorModel.set('seqowner', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('seqowner');\n          }\n\n          if (_.isUndefined(this.get('schema'))\n              || String(this.get('schema')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Schema cannot be empty.');\n            this.errorModel.set('schema', msg);\n            return msg;\n          } else {\n            this.errorModel.unset('schema');\n          }\n\n          if (!this.isNew()) {\n            if (_.isUndefined(this.get('current_value'))\n              || String(this.get('current_value')).replace(/^\\s+|\\s+$/g, '') == '') {\n              msg = gettext('Current value cannot be empty.');\n              this.errorModel.set('current_value', msg);\n              return msg;\n            } else {\n              this.errorModel.unset('current_value');\n            }\n\n            if (_.isUndefined(this.get('increment'))\n              || String(this.get('increment')).replace(/^\\s+|\\s+$/g, '') == '') {\n              msg = gettext('Increment value cannot be empty.');\n              this.errorModel.set('increment', msg);\n              return msg;\n            } else {\n              this.errorModel.unset('increment');\n            }\n\n            if (_.isUndefined(this.get('minimum'))\n              || String(this.get('minimum')).replace(/^\\s+|\\s+$/g, '') == '') {\n              msg = gettext('Minimum value cannot be empty.');\n              this.errorModel.set('minimum', msg);\n              return msg;\n            } else {\n              this.errorModel.unset('minimum');\n            }\n\n            if (_.isUndefined(this.get('maximum'))\n              || String(this.get('maximum')).replace(/^\\s+|\\s+$/g, '') == '') {\n              msg = gettext('Maximum value cannot be empty.');\n              this.errorModel.set('maximum', msg);\n              return msg;\n            } else {\n              this.errorModel.unset('maximum');\n            }\n\n            if (_.isUndefined(this.get('cache'))\n              || String(this.get('cache')).replace(/^\\s+|\\s+$/g, '') == '') {\n              msg = gettext('Cache value cannot be empty.');\n              this.errorModel.set('cache', msg);\n              return msg;\n            } else {\n              this.errorModel.unset('cache');\n            }\n          }\n          var min_lt = gettext('Minimum value must be less than maximum value.'),\n              start_lt = gettext('Start value cannot be less than minimum value.'),\n              start_gt = gettext('Start value cannot be greater than maximum value.');\n\n          if ((minimum == 0 && maximum == 0) ||\n              (parseInt(minimum, 10) >= parseInt(maximum, 10))) {\n            this.errorModel.set('minimum', min_lt);\n            return min_lt;\n          } else {\n            this.errorModel.unset('minimum');\n          }\n\n          if (start && minimum && parseInt(start) < parseInt(minimum)) {\n            this.errorModel.set('start', start_lt);\n            return start_lt;\n          } else {\n            this.errorModel.unset('start');\n          }\n\n          if (start && maximum && parseInt(start) > parseInt(maximum)) {\n            this.errorModel.set('start', start_gt);\n            return start_gt;\n          } else {\n            this.errorModel.unset('start');\n          }\n          return null;\n        }\n      })\n    });\n  }\n\n  return pgBrowser.Nodes['sequence'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/sequences/static/js/sequence.js","define('pgadmin.node.synonym', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'pgadmin.alertifyjs',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-synonym']) {\n    var databases = pgAdmin.Browser.Nodes['coll-synonym'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'synonym',\n        label: gettext('Synonyms'),\n        type: 'coll-synonym',\n        columns: ['name', 'owner','is_public_synonym']\n      });\n  };\n\n  if (!pgBrowser.Nodes['synonym']) {\n    pgAdmin.Browser.Nodes['synonym'] = pgBrowser.Node.extend({\n      type: 'synonym',\n      dialogHelp: url_for('help.static', {'filename': 'synonym_dialog.html'}),\n      label: gettext('Synonym'),\n      collection_type: 'coll-synonym',\n      hasSQL: true,\n      hasDepends: true,\n      parent_type: ['schema', 'catalog'],\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_synonym_on_coll', node: 'coll-synonym', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Synonym...'),\n          icon: 'wcTabIcon icon-synonym', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_synonym', node: 'synonym', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Synonym...'),\n          icon: 'wcTabIcon icon-synonym', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_synonym', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Synonym...'),\n          icon: 'wcTabIcon icon-synonym', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        }\n        ]);\n\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      model: pgAdmin.Browser.Node.Model.extend({\n        isNew: function() {\n          return !this.fetchFromServer;\n        },\n        idAttribute: 'name',\n        // Default values!\n        initialize: function(attrs, args) {\n          var isNew = (_.size(attrs) === 0);\n\n          if (isNew) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            var schemaInfo = args.node_info.schema;\n            this.set({\n                'owner': userInfo.name,\n                'synobjschema': schemaInfo._label,\n                'schema': schemaInfo._label,\n                'targettype': 'r'\n            }, {silent: true});\n          } else {\n            this.fetchFromServer = true;\n          }\n          pgAdmin.Browser.Node.Model.prototype.initialize.apply(this, arguments);\n\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchemaWithModelCheck'\n        },{\n          id: 'owner', label: gettext('Owner'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: true , control: 'node-list-by-name',\n          node: 'role', visible: false\n        },{\n          id: 'schema', label: gettext('Schema'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: function(m) { return !m.isNew(); }, node: 'schema',\n          control: 'node-list-by-name', cache_node: 'database',\n          cache_level: 'database'\n        },{\n          id: 'targettype', label: gettext('Target type'), cell: 'string',\n          disabled: 'inSchema', group: gettext('Definition'),\n          select2: { width: \"50%\", allowClear: false },\n          options: function(obj) {\n              return [\n                {label: gettext(\"Function\"), value: \"f\"},\n                {label: gettext(\"Package\"), value: \"P\"},\n                {label: gettext(\"Procedure\"), value: \"p\"},\n                {label: gettext(\"Public Synonym\"), value: \"s\"},\n                {label: gettext(\"Sequence\"), value: \"S\"},\n                {label: gettext(\"Table\"), value: \"r\"},\n                {label: gettext(\"View\"), value: \"v\"}\n              ]\n           },\n          control: 'select2'\n        },{\n          id: 'synobjschema', label: gettext('Target schema'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          group: gettext('Definition'), deps: ['targettype'],\n          select2: { allowClear: false }, control: 'node-list-by-name',\n          node: 'schema', filter: function(d) {\n            // Exclude PPAS catalogs\n            var exclude_catalogs = ['pg_catalog', 'sys', 'dbo',\n                            'pgagent', 'information_schema',\n                            'dbms_job_procedure'];\n            return d && _.indexOf(exclude_catalogs, d.label) == -1;\n          },\n          disabled: function(m) {\n            // If tagetType is synonym then disable it\n            if(!m.inSchema.apply(this, [m])) {\n              var is_synonym = (m.get('targettype') == 's');\n              if(is_synonym) {\n                  m.set('synobjschema', 'public', {silent: true});\n                return true;\n              } else {\n                return false;\n              }\n            }\n            return true;\n          }\n        },{\n          id: 'synobjname', label: gettext('Target object'), cell: 'string',\n          type: 'text', disabled: 'inSchema', group: gettext('Definition'),\n          deps: ['targettype', 'synobjschema'],\n            control: 'node-ajax-options',\n            options: function(control) {\n              var trgTyp = control.model.get('targettype');\n              var trgSchema = control.model.get('synobjschema');\n              var res = [];\n\n              var node = control.field.get('schema_node'),\n              _url = node.generate_url.apply(\n                node, [\n                null, 'get_target_objects', control.field.get('node_data'), false,\n                control.field.get('node_info') ]);\n              $.ajax({\n                  type: 'GET',\n                  timeout: 30000,\n                  url: _url,\n                  cache: false,\n                  async: false,\n                  data: {\"trgTyp\" : trgTyp, \"trgSchema\" : trgSchema},\n\n                  // On success return function list from server\n                  success: function(result) {\n                    res = result.data;\n                    return res;\n                  },\n\n                  // On failure show error appropriate error message to user\n                  error: function(xhr, status, error) {\n                    try {\n                      var err = $.parseJSON(xhr.responseText);\n                      if (err.success == 0) {\n                        alertify.error(err.errormsg);\n                      }\n                    } catch (e) {}\n                  }\n              });\n            return res;\n          }\n        },{\n          id: 'is_public_synonym', label: gettext('Public synonym?'),\n          disabled: true, type: 'switch', mode: ['properties'], cell: 'switch',\n          options: { onText: 'Yes', offText: 'No', onColor: 'success',\n                    offColor: 'primary', size: 'mini'}\n        }\n        ],\n        validate: function() {\n          var err = {},\n          msg = undefined;\n          this.errorModel.clear();\n\n          if (_.isUndefined(this.get('name'))\n              || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n          } else if (_.isUndefined(this.get('synobjschema'))\n              || String(this.get('synobjschema')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Target schema cannot be empty.');\n            this.errorModel.set('synobjschema', msg);\n          } else if (_.isUndefined(this.get('synobjname'))\n              || String(this.get('synobjname')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Target object cannot be empty.');\n            this.errorModel.set('synobjname', msg);\n          }\n          return null;\n        },\n        // We will disable everything if we are under catalog node\n        inSchema: function() {\n          if(this.node_info &&  'catalog' in this.node_info)\n          {\n            return true;\n          }\n          return false;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchemaWithModelCheck: function(m) {\n          if(this.node_info &&  'schema' in this.node_info)\n          {\n            // We will disbale control if it's in 'edit' mode\n            if (m.isNew()) {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          return true;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n          //If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var treeData = this.getTreeNodeHierarchy(item),\n                server = treeData['server'];\n\n          if (server && server.server_type === 'pg')\n            return false;\n\n          // If it is catalog then don't allow user to create synonyms\n          if (treeData['catalog'] != undefined)\n            return false;\n\n          // by default we do not want to allow create menu\n          return true;\n      }\n  });\n\n  }\n\n  return pgBrowser.Nodes['synonym'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/synonyms/static/js/synonym.js","define('pgadmin.node.type', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify', 'backgrid',\n  'pgadmin.backgrid', 'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify, Backgrid) {\n\n  if (!pgBrowser.Nodes['coll-type']) {\n    var databases = pgBrowser.Nodes['coll-type'] =\n      pgBrowser.Collection.extend({\n        node: 'type',\n        label: gettext('Types'),\n        type: 'coll-type',\n        columns: ['name', 'typeowner', 'description']\n      });\n  };\n\n  // Integer Cell for Columns Length and Precision\n  var IntegerDepCell = Backgrid.IntegerCell.extend({\n      initialize: function() {\n        Backgrid.NumberCell.prototype.initialize.apply(this, arguments);\n        Backgrid.Extension.DependentCell.prototype.initialize.apply(this, arguments);\n      },\n      dependentChanged: function () {\n        this.$el.empty();\n        var model = this.model;\n        var column = this.column;\n        var editable = this.column.get(\"editable\");\n\n        var is_editable = _.isFunction(editable) ? !!editable.apply(column, [model]) : !!editable;\n        if (is_editable){ this.$el.addClass(\"editable\"); }\n        else { this.$el.removeClass(\"editable\"); }\n\n        this.delegateEvents();\n        return this;\n      },\n      remove: Backgrid.Extension.DependentCell.prototype.remove\n    });\n\n  // Node-Ajax-Cell with Deps\n  var NodeAjaxOptionsDepsCell = Backgrid.Extension.NodeAjaxOptionsCell.extend({\n      initialize: function() {\n        Backgrid.Extension.NodeAjaxOptionsCell.prototype.initialize.apply(this, arguments);\n        Backgrid.Extension.DependentCell.prototype.initialize.apply(this, arguments);\n      },\n      dependentChanged: function () {\n        var model = this.model,\n          column = this.column,\n          editable = this.column.get(\"editable\"),\n          input = this.$el.find('select').first();\n\n        var is_editable = _.isFunction(editable) ? !!editable.apply(column, [model]) : !!editable;\n        if (is_editable) {\n           this.$el.addClass(\"editable\");\n           input.prop('disabled', false);\n         } else {\n           this.$el.removeClass(\"editable\");\n           input.prop('disabled', true);\n         }\n\n        this.delegateEvents();\n        return this;\n      },\n      remove: Backgrid.Extension.DependentCell.prototype.remove\n    });\n\n  // Composite type model declaration\n  var CompositeModel = Backform.CompositeModel = pgBrowser.Node.Model.extend({\n    idAttribute: 'attnum',\n    defaults: {\n      attnum: undefined,\n      member_name: undefined,\n      type: undefined,\n      tlength: undefined,\n      is_tlength: false,\n      precision: undefined,\n      is_precision: false,\n      collation: undefined,\n      min_val: undefined,\n      max_val: undefined,\n    },\n    type_options: undefined,\n    subtypes: undefined,\n    schema: [{\n      id: 'member_name', label: gettext('Member Name'),\n      type: 'text',  disabled: false, editable: true\n    },{\n      id: 'type', label: gettext('Type'), control: 'node-ajax-options',\n      type: 'text', url: 'get_types', disabled: false, node: 'type',\n      cell: 'node-ajax-options', select2: {allowClear: false},\n      editable: true,\n      transform: function(d, control){\n        control.model.type_options =  d;\n        return d;\n      }\n    },{\n      // Note: There are ambiguities in the PG catalogs and docs between\n      // precision and scale. In the UI, we try to follow the docs as\n      // closely as possible, therefore we use Length/Precision and Scale\n      id: 'tlength', label: gettext('Length/precision'), deps: ['type'], type: 'text',\n      disabled: false, cell: IntegerDepCell,\n      editable: function(m) {\n        // We will store type from selected from combobox\n        var of_type = m.get('type');\n        if(m.type_options) {\n          // iterating over all the types\n          _.each(m.type_options, function(o) {\n            // if type from selected from combobox matches in options\n            if ( of_type == o.value ) {\n                // if length is allowed for selected type\n                if(o.length)\n                {\n                  // set the values in model\n                  m.set('is_tlength', true, {silent: true});\n                  m.set('min_val', o.min_val, {silent: true});\n                  m.set('max_val', o.max_val, {silent: true});\n                } else {\n                  // set the values in model\n                  m.set('is_tlength', false, {silent: true});\n                }\n            }\n          });\n        }\n        return m.get('is_tlength');\n      }\n    },{\n      // Note: There are ambiguities in the PG catalogs and docs between\n      // precision and scale. In the UI, we try to follow the docs as\n      // closely as possible, therefore we use Length/Precision and Scale\n      id: 'precision', label: gettext('Scale'), deps: ['type'],\n      type: 'text', disabled: false, cell: IntegerDepCell,\n      editable: function(m) {\n        // We will store type from selected from combobox\n        var of_type = m.get('type');\n        if(m.type_options) {\n          // iterating over all the types\n          _.each(m.type_options, function(o) {\n            // if type from selected from combobox matches in options\n            if ( of_type == o.value ) {\n                // if precession is allowed for selected type\n                if(o.precision)\n                {\n                  // set the values in model\n                  m.set('is_precision', true, {silent: true});\n                  m.set('min_val', o.min_val, {silent: true});\n                  m.set('max_val', o.max_val, {silent: true});\n                } else {\n                  // set the values in model\n                  m.set('is_precision', false, {silent: true});\n                }\n            }\n          });\n        }\n        return m.get('is_precision');\n      }\n    },{\n      id: 'collation', label: gettext('Collation'),\n      cell: NodeAjaxOptionsDepsCell, deps: ['type'],\n      select2: {allowClear: false},\n      control: 'node-ajax-options', editable: function(m) {\n         var of_type = m.get('type'),\n           flag = false;\n         if(m.type_options) {\n          _.each(m.type_options, function(o) {\n            if ( of_type == o.value ) {\n                if(o.is_collatable)\n                {\n                  flag = true;\n                }\n            }\n          });\n         }\n\n         if (flag) {\n           setTimeout(function(){\n             m.set('collspcname', \"\", {silent: true});\n           }, 10);\n         }\n         return flag;\n      },\n      type: 'text', disabled: false, url: 'get_collations', node: 'type'\n    }],\n    validate: function() {\n      var err = {},\n          errmsg = null,\n          changedAttrs = this.sessAttrs;\n      // Clearing previous errors first.\n      this.errorModel.clear();\n      // Validation for member name\n      if ( _.isUndefined(this.get('member_name')) ||\n        _.isNull(this.get('member_name')) ||\n        String(this.get('member_name')).replace(/^\\s+|\\s+$/g, '') == '') {\n          errmsg = gettext('Please specify the value for member name.');\n          this.errorModel.set('member_name', errmsg)\n          return errmsg;\n      }\n      else if ( _.isUndefined(this.get('type')) ||\n        _.isNull(this.get('type')) ||\n        String(this.get('type')).replace(/^\\s+|\\s+$/g, '') == '') {\n          errmsg = gettext('Please specify the type.');\n          this.errorModel.set('type', errmsg)\n          return errmsg;\n      }\n      // Validation for Length/precision field (see comments above if confused about the naming!)\n      else if (this.get('is_tlength')\n        && !_.isUndefined(this.get('tlength'))) {\n        if (this.get('tlength') < this.get('min_val'))\n          errmsg = gettext('Length/precision should not be less than %(value)s', {value: this.get('min_val')});\n        if (this.get('tlength') > this.get('max_val') )\n          errmsg = gettext('Length/precision should not be greater than %(value)s', {value: this.get('max_val')});\n        // If we have any error set then throw it to user\n        if(errmsg) {\n          this.errorModel.set('tlength', errmsg)\n          return errmsg;\n        }\n      }\n      // Validation for scale field (see comments above if confused about the naming!)\n      else if (this.get('is_precision')\n        && !_.isUndefined(this.get('precision'))) {\n        if (this.get('precision') < this.get('min_val'))\n          errmsg = gettext('Scale should not be less than  %(value)s', {value: this.get('min_val')});\n        if (this.get('precision') > this.get('max_val'))\n          errmsg = gettext('Scale should not be greater than  %(value)s', {value: this.get('max_val')});\n        // If we have any error set then throw it to user\n        if(errmsg) {\n          this.errorModel.set('precision', errmsg)\n          return errmsg;\n        }\n      }\n      return null;\n    }\n  });\n\n  var EnumModel = Backform.EnumModel = pgBrowser.Node.Model.extend({\n    defaults: {\n      label: undefined,\n    },\n    schema: [{\n      id: 'label', label: gettext('Label'),type: 'text', disabled: false,\n      cellHeaderClasses: 'width_percent_99', editable: function(m) {\n        return _.isUndefined(m.get('label'));\n      }\n    }],\n    validate: function() {\n      return null;\n    }\n  });\n\n  if (!pgBrowser.Nodes['type']) {\n    pgBrowser.Nodes['type'] = pgBrowser.Node.extend({\n      type: 'type',\n      sqlAlterHelp: 'sql-altertype.html',\n      sqlCreateHelp: 'sql-createtype.html',\n      dialogHelp: url_for('help.static', {'filename': 'type_dialog.html'}),\n      label: gettext('Type'),\n      collection_type: 'coll-type',\n      hasSQL: true,\n      hasDepends: true,\n      parent_type: ['schema', 'catalog'],\n      Init: function() {\n        /* Avoid multiple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_type_on_coll', node: 'coll-type', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Type...'),\n          icon: 'wcTabIcon icon-type', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_type', node: 'type', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Type...'),\n          icon: 'wcTabIcon icon-type', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_type', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Type...'),\n          icon: 'wcTabIcon icon-type', data: {action: 'create', check: false},\n          enable: 'canCreate'\n        }\n        ]);\n\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      ext_funcs: undefined,\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          is_sys_type: false,\n          typtype: undefined\n       },\n\n        // Default values!\n        initialize: function(attrs, args) {\n          if (_.size(attrs) === 0) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user,\n                schemaInfo = args.node_info.schema;\n\n            this.set({\n              'typeowner': userInfo.name, 'schema': schemaInfo._label\n            }, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: 'schemaCheck'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties'], disabled: true\n        },{\n          id: 'typeowner', label: gettext('Owner'), cell: 'string',\n          control: 'node-list-by-name',\n          type: 'text', mode: ['properties', 'create', 'edit'], node: 'role',\n          disabled: 'inSchema', select2: {allowClear: false}\n        },{\n          id: 'schema', label: gettext('Schema'), cell: 'string',\n          type: 'text', mode: ['create', 'edit'], node: 'schema',\n          disabled: 'schemaCheck', filter: function(d) {\n            // If schema name start with pg_* then we need to exclude them\n            if(d && d.label.match(/^pg_/))\n            {\n              return false;\n            }\n            return true;\n          }, cache_node: 'database', cache_level: 'database',\n          control: 'node-list-by-name', select2: {allowClear: false}\n        },{\n          id: 'typtype', label: gettext('Type'),\n          mode: ['create','edit'], disabled: 'inSchemaWithModelCheck',\n          group: gettext('Definition'),\n          select2: { width: \"50%\", allowClear: false },\n          options: function(obj) {\n              return [\n                {label: \"Composite\", value: \"c\"},\n                {label: \"Enumeration\", value: \"e\"},\n                {label: \"External\", value: \"b\"},\n                {label: \"Range\", value: \"r\"},\n                {label: \"Shell\", value: \"p\"}\n              ]\n           },\n          disabled: 'inSchemaWithModelCheck',\n          // If create mode then by default open composite type\n          control: Backform.Select2Control.extend({\n            render: function(){\n              // Initialize parent's render method\n              Backform.Select2Control.prototype.render.apply(this, arguments);\n              if(this.model.isNew()) {\n                this.model.set({'typtype': 'c'});\n              }\n              return this;\n            }\n          })\n        },{\n          id: 'composite', label: gettext('Composite Type'),\n          model: CompositeModel, editable: true, type: 'collection',\n          group: gettext('Definition'), mode: ['edit', 'create'],\n          control: 'unique-col-collection', uniqueCol : ['member_name'],\n          canAdd: true, canEdit: false, canDelete: true, disabled: 'inSchema',\n          deps: ['typtype'],\n          visible: function(m) {\n           return m.get('typtype') === 'c';\n          }\n        },{\n          id: 'enum', label: gettext('Enumeration Type'),\n          model: EnumModel, editable: true, type: 'collection',\n          group: gettext('Definition'), mode: ['edit', 'create'],\n          canAdd: true, canEdit: false, canDelete: function(m) {\n              // We will disable it if it's in 'edit' mode\n              if (m.isNew()) {\n                  return true;\n              } else {\n                  return false;\n            }\n          },\n          disabled: 'inSchema', deps: ['typtype'],\n          control: 'unique-col-collection', uniqueCol : ['label'],\n          visible: function(m) {\n           return m.get('typtype') === 'e';\n          }\n        },{\n          // We will disable range type control in edit mode\n          type: 'nested', control: 'plain-fieldset', group: gettext('Definition'),\n          mode: ['edit', 'create'],\n          visible: function(m) {\n            return m.get('typtype') === 'r';\n          }, deps: ['typtype'], label: '',\n          schema:[{\n            id: 'typname', label: gettext('Subtype'), cell: 'string',\n            control: 'node-ajax-options',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" },\n            url: 'get_stypes', type: 'text', mode: ['properties', 'create', 'edit'],\n            group: gettext('Range Type'), disabled: 'inSchemaWithModelCheck',\n            transform: function(d, self){\n              self.model.subtypes =  d;\n              return d;\n            }\n          },{\n              id: 'opcname', label: gettext('Subtype operator class'), cell: 'string',\n              mode: ['properties', 'create', 'edit'], group: gettext('Range Type'),\n              disabled: 'inSchemaWithModelCheck', deps: ['typname'],\n              control: 'select', options: function() {\n                var l_typname = this.model.get('typname'),\n                  self = this,\n                  result = [];\n                if(!_.isUndefined(l_typname) && l_typname != '')\n                {\n                  var node = this.field.get('schema_node'),\n                  _url = node.generate_url.apply(\n                    node, [\n                            null, 'get_subopclass', this.field.get('node_data'), false,\n                            this.field.get('node_info')\n                    ]);\n                  $.ajax({\n                    async: false,\n                    url: _url,\n                    cache: false,\n                    data: {'typname' : l_typname},\n                    success: function(res) {\n                      result = res.data;\n                    },\n                    error: function() {\n                      self.model.trigger('pgadmin:view:fetch:error', self.model, self.field);\n                    }\n                    });\n                  //\n                }\n                return result;\n              }\n            },{\n              id: 'collname', label: gettext('Collation'), cell: 'string',\n              type: 'text', mode: ['properties', 'create', 'edit'],\n              group: gettext('Range Type'),\n              deps: ['typname'], control: 'node-ajax-options', url: 'get_collations',\n              select2: { allowClear: true, placeholder: \"\", width: \"100%\" },\n              disabled: function(m) {\n                if(this.node_info &&  'catalog' in this.node_info)\n                {\n                  return true;\n                }\n\n                // Disbale in edit mode\n                if (!m.isNew()) {\n                  return true;\n                }\n\n                // To check if collation is allowed?\n                var of_subtype = m.get('typname'),\n                  is_collate = undefined;\n                if(!_.isUndefined(of_subtype)) {\n                  // iterating over all the types\n                  _.each(m.subtypes, function(s) {\n                    // if subtype from selected from combobox matches\n                    if ( of_subtype === s.label ) {\n                        // if collation is allowed for selected subtype\n                        // then enable it else disable it\n                        is_collate = s.is_collate;\n                    }\n                  });\n                }\n                // If is_collate is true then do not disable\n                return is_collate ? false : true;\n              }\n            },{\n              id: 'rngcanonical', label: gettext('Canonical function'), cell: 'string',\n              type: 'text', mode: ['properties', 'create', 'edit'],\n              group: gettext('Range Type'),\n              disabled: 'inSchemaWithModelCheck', deps: ['name', 'typname'],\n              control: 'select', options: function() {\n                var name = this.model.get('name'),\n                 self = this,\n                 result = [];\n\n                if(!_.isUndefined(name) && name != '')\n                {\n                  var node = this.field.get('schema_node'),\n                  _url = node.generate_url.apply(\n                    node, [\n                            null, 'get_canonical', this.field.get('node_data'), false,\n                            this.field.get('node_info')\n                    ]);\n                  $.ajax({\n                    async: false,\n                    url: _url,\n                    cache: false,\n                    data: {\"name\" : name},\n                    success: function(res) {\n                      result = res.data;\n                    },\n                    error: function() {\n                      self.model.trigger('pgadmin:view:fetch:error',\n                      self.model, self.field);\n                    }\n                    });\n                }\n              return result;\n            }\n            },{\n              id: 'rngsubdiff', label: gettext('Subtype diff function'), cell: 'string',\n              type: 'text', mode: ['properties', 'create', 'edit'],\n              group: gettext('Range Type'),\n              disabled: 'inSchemaWithModelCheck', deps: ['opcname'],\n              control: 'select', options: function() {\n                var l_typname = this.model.get('typname'),\n                  l_opcname = this.model.get('opcname'),\n                  self = this,\n                  result = [];\n\n                if(!_.isUndefined(l_typname) && l_typname != '' &&\n                !_.isUndefined(l_opcname) && l_opcname != '') {\n                  var node = this.field.get('schema_node'),\n                  _url = node.generate_url.apply(\n                    node, [\n                            null, 'get_stypediff',\n                            this.field.get('node_data'), false,\n                            this.field.get('node_info')\n                    ]);\n                  $.ajax({\n                    async: false,\n                    url: _url,\n                    cache: false,\n                    data: {'typname' : l_typname, 'opcname': l_opcname},\n                    success: function(res) {\n                      result = res.data;\n                    },\n                    error: function() {\n                      self.model.trigger('pgadmin:view:fetch:error',\n                      self.model, self.field);\n                    }\n                    });\n                }\n              return result;\n            }\n          }]\n        },{\n          type: 'nested', control: 'tab', group: gettext('Definition'),\n          label: gettext('External Type'), deps: ['typtype'],\n          mode: ['create', 'edit'],\n          visible: function(m) {\n            return m.get('typtype') === 'b';\n          },\n          schema:[{\n            id: 'typinput', label: gettext('Input function'),\n            cell: 'string',type: 'text',\n            mode: ['properties', 'create', 'edit'], group: gettext('Required'),\n            disabled: 'inSchemaWithModelCheck',\n            control: 'node-ajax-options', url: 'get_external_functions',\n            transform: 'external_func_combo',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" }\n          },{\n            id: 'typoutput', label: gettext('Output function'),\n            cell: 'string',\n            type: 'text', mode: ['properties', 'create', 'edit'],\n            group: gettext('Required'),\n            disabled: 'inSchemaWithModelCheck'\n            ,control: 'node-ajax-options', url: 'get_external_functions',\n            transform: 'external_func_combo',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" }\n          },{\n            id: 'typreceive', label: gettext('Receive function'),\n            cell: 'string', type: 'text', group: gettext('Optional-1'),\n            mode: ['properties', 'create', 'edit'],\n            disabled: 'inSchemaWithModelCheck'\n            ,control: 'node-ajax-options', url: 'get_external_functions',\n            transform: 'external_func_combo',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" }\n          },{\n            id: 'typsend', label: gettext('Send function'),\n            cell: 'string', group: gettext('Optional-1'),\n            type: 'text', mode: ['properties', 'create', 'edit'],\n            disabled: 'inSchemaWithModelCheck'\n            ,control: 'node-ajax-options', url: 'get_external_functions',\n            transform: 'external_func_combo',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" }\n          },{\n            id: 'typmodin', label: gettext('Typmod in function'),\n            cell: 'string', type: 'text',\n            mode: ['properties', 'create', 'edit'], group: gettext('Optional-1'),\n            disabled: 'inSchemaWithModelCheck',\n            control: 'node-ajax-options', url: 'get_external_functions',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" },\n            transform: function(d) {\n              var result = [{label :\"\", value : \"\"}];\n              _.each(d, function(item) {\n              // if type from selected from combobox matches in options\n              if ( item.cbtype === 'typmodin' || item.cbtype === 'all') {\n                result.push(item);\n              }\n             });\n             return result;\n            }\n          },{\n            id: 'typmodout', label: gettext('Typmod out function'),\n            cell: 'string', group: gettext('Optional-1'),\n            type: 'text', mode: ['properties', 'create', 'edit'],\n            disabled: 'inSchemaWithModelCheck',\n            control: 'node-ajax-options', url: 'get_external_functions',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" },\n            transform: function(d) {\n              var result = [{label :\"\", value : \"\"}];\n              _.each(d, function(item) {\n              // if type from selected from combobox matches in options\n              if ( item.cbtype === 'typmodout' || item.cbtype === 'all') {\n                result.push(item);\n              }\n             });\n             return result;\n            }\n          },{\n            id: 'typlen', label: gettext('Internal length'),\n            cell: 'integer', group: gettext('Optional-1'),\n            type: 'int', mode: ['properties', 'create', 'edit'],\n            disabled: 'inSchemaWithModelCheck'\n          },{\n            id: 'variable', label: gettext('Variable?'), cell: 'switch',\n            group: gettext('Optional-1'), type: 'switch',\n            mode: ['create','edit'],\n            disabled: 'inSchemaWithModelCheck'\n          },{\n            id: 'typdefault', label: gettext('Default?'),\n            cell: 'string', group: gettext('Optional-1'),\n            type: 'text', mode: ['properties', 'create','edit'],\n            disabled: 'inSchemaWithModelCheck'\n          },{\n            id: 'typanalyze', label: gettext('Analyze function'),\n            cell: 'string', group: gettext('Optional-1'),\n            type: 'text', mode: ['properties', 'create','edit'],\n            disabled: 'inSchemaWithModelCheck'\n            ,control: 'node-ajax-options', url: 'get_external_functions',\n            transform: 'external_func_combo',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" }\n          },{\n            id: 'typcategory', label: gettext('Category type'),\n            cell: 'string', group: gettext('Optional-1'),\n            type: 'text', mode: ['properties', 'create','edit'],\n            disabled: 'inSchemaWithModelCheck', control: 'select2',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" },\n            options: [\n              {label :\"\", value : \"\"},\n              {label :\"Array types\", value : \"A\"},\n              {label :\"Boolean types\", value : \"B\"},\n              {label :\"Composite types\", value : \"C\"},\n              {label :\"Date/time types\", value : \"D\"},\n              {label :\"Enum types\", value : \"E\"},\n              {label :\"Geometric types\", value : \"G\"},\n              {label :\"Network address types\", value : \"I\"},\n              {label :\"Numeric types\", value : \"N\"},\n              {label :\"Pseudo-types\", value : \"P\"},\n              {label :\"String types\", value : \"S\"},\n              {label :\"Timespan types\", value : \"T\"},\n              {label :\"User-defined types\", value : \"U\"},\n              {label :\"Bit-string types\", value : \"V\"},\n              {label :\"unknown type\", value : \"X\"}\n            ]\n          },{\n            id: 'typispreferred', label: gettext('Preferred?'), cell: 'switch',\n            type: 'switch', mode: ['properties', 'create','edit'],\n            disabled: 'inSchemaWithModelCheck',\n            group: gettext('Optional-1')\n          },{\n            id: 'element', label: gettext('Element type'), cell: 'string',\n            control: 'node-ajax-options', group: gettext('Optional-2'),\n            type: 'text', mode: ['properties', 'create', 'edit'],\n            disabled: 'inSchemaWithModelCheck', url: 'get_types'\n          },{\n            id: 'typdelim', label: gettext('Delimiter'), cell: 'string',\n            type: 'text', mode: ['properties', 'create', 'edit'],\n            group: gettext('Optional-2'), disabled: 'inSchemaWithModelCheck'\n          },{\n            id: 'typalign', label: gettext('Alignment type'),\n            cell: 'string', group: gettext('Optional-2'),\n            type: 'text', mode: ['properties', 'create', 'edit'],\n            disabled: 'inSchemaWithModelCheck', control: 'select2',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" },\n            options: [\n              {label :\"\", value : \"\"},\n              {label: \"char\", value: \"c\"},\n              {label: \"int2\", value: \"s\"},\n              {label: \"int4\", value: \"i\"},\n              {label: \"double\", value: \"d\"},\n            ]\n          },{\n            id: 'typstorage', label: gettext('Storage type'),\n            type: 'text', mode: ['properties', 'create', 'edit'],\n            group: gettext('Optional-2'), cell: 'string',\n            disabled: 'inSchemaWithModelCheck', control: 'select2',\n            select2: { allowClear: true, placeholder: \"\", width: \"100%\" },\n            options: [\n              {label :\"\", value : \"\"},\n              {label: \"PLAIN\", value: \"p\"},\n              {label: \"EXTERNAL\", value: \"e\"},\n              {label: \"MAIN\", value: \"m\"},\n              {label: \"EXTENDED\", value: \"x\"},\n             ]\n          },{\n            id: 'typbyval', label: gettext('Passed by value?'),\n            cell: 'switch',\n            type: 'switch', mode: ['properties', 'create', 'edit'],\n            disabled: 'inSchemaWithModelCheck', group: gettext('Optional-2'),\n          },{\n            id: 'is_collatable', label: gettext('Collatable?'),\n            cell: 'switch',  min_version: 90100, group: gettext('Optional-2'),\n            type: 'switch', mode: ['properties', 'create', 'edit'],\n            disabled: 'inSchemaWithModelCheck'\n          // End of extension tab\n        }]\n        },{\n          id: 'alias', label: gettext('Alias'), cell: 'string',\n          type: 'text', mode: ['properties'],\n          disabled: 'inSchema'\n        }, pgBrowser.SecurityGroupSchema,{\n          id: 'type_acl', label: gettext('Privileges'), cell: 'string',\n          type: 'text', mode: ['properties'], group: 'security',\n          disabled: 'inSchema'\n        },{\n          id: 'member_list', label: gettext('Members'), cell: 'string',\n          type: 'text', mode: ['properties'], group: gettext('Definition'),\n          disabled: 'inSchema', visible: function(m) {\n            if(m.get('typtype') === 'c') {\n              return true;\n            }\n            return false;\n          }\n        },{\n          id: 'enum_list', label: gettext('Labels'), cell: 'string',\n          type: 'text', mode: ['properties'], group: gettext('Definition'),\n          disabled: 'inSchema', visible: function(m) {\n            if(m.get('typtype') === 'e') {\n              return true;\n            }\n            return false;\n          }\n        },{\n          id: 'is_sys_type', label: gettext('System type?'), cell: 'switch',\n          type: 'switch', mode: ['properties'],\n          disabled: 'inSchema'\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchema'\n        },{\n          id: 'typacl', label: gettext('Privileges'), type: 'collection',\n          group: 'security', control: 'unique-col-collection',\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n            privileges: ['U']\n          }),\n          mode: ['edit', 'create'], canDelete: true,\n          uniqueCol : ['grantee'], deps: ['typtype'],\n          canAdd: function(m) {\n            // Do not allow to add when shell type is selected\n            // Clear acl & security label collections as well\n            if (m.get('typtype') === 'p') {\n                var acl = m.get('typacl');\n                  if(acl.length > 0)\n                    acl.reset();\n            }\n            return !(m.get('typtype') === 'p');\n          }\n        },{\n          id: 'seclabels', label: gettext('Security Labels'),\n          model: pgBrowser.SecLabelModel, editable: false, type: 'collection',\n          group: 'security', mode: ['edit', 'create'],\n          min_version: 90100, canEdit: false, canDelete: true,\n          control: 'unique-col-collection', deps: ['typtype'],\n          canAdd: function(m) {\n            // Do not allow to add when shell type is selected\n            // Clear acl & security label collections as well\n            if (m.get('typtype') === 'p') {\n                var secLabs = m.get('seclabels');\n                  if(secLabs.length > 0)\n                    secLabs.reset();\n            }\n            return !(m.get('typtype') === 'p');\n          }\n        }],\n        validate: function() {\n        // Validation code for required fields\n          var changedAttrs = this.sessAttrs,\n              msg = undefined;\n\n          this.errorModel.clear();\n\n          if (\n            _.isUndefined(this.get('name')) ||\n            _.isNull(this.get('name')) ||\n            String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == ''\n          ) {\n            msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n\n          if (\n            _.isUndefined(this.get('schema')) ||\n            _.isNull(this.get('schema')) ||\n            String(this.get('schema')).replace(/^\\s+|\\s+$/g, '') == ''\n          ) {\n            msg = gettext('Schema cannot be empty.');\n            this.errorModel.set('schema', msg);\n            return msg;\n          }\n\n          if (\n            _.isUndefined(this.get('typtype')) ||\n            _.isNull(this.get('typtype')) ||\n            String(this.get('typtype')).replace(/^\\s+|\\s+$/g, '') == ''\n          ) {\n            msg = gettext('Type cannot be empty.');\n            this.errorModel.set('typtype', msg);\n            return msg;\n          }\n\n          // For Range\n          if(this.get('typtype') == 'r') {\n              if (\n                _.isUndefined(this.get('typname')) ||\n                _.isNull(this.get('typname')) ||\n                String(this.get('typname')).replace(/^\\s+|\\s+$/g, '') == ''\n              ) {\n                msg = gettext('Subtype name cannot be empty.');\n                this.errorModel.set('typname', msg);\n                return msg;\n              }\n          }\n\n          // For External\n          if(this.get('typtype') == 'b') {\n              if (\n                _.isUndefined(this.get('typinput')) ||\n                _.isNull(this.get('typinput')) ||\n                String(this.get('typinput')).replace(/^\\s+|\\s+$/g, '') == ''\n              ) {\n                msg = gettext('Input function cannot be empty.');\n                this.errorModel.set('typinput', msg);\n                return msg;\n              }\n              if (\n                _.isUndefined(this.get('typoutput')) ||\n                _.isNull(this.get('typoutput')) ||\n                String(this.get('typoutput')).replace(/^\\s+|\\s+$/g, '') == ''\n              ) {\n                msg = gettext('Output function cannot be empty.');\n                this.errorModel.set('typoutput', msg);\n                return msg;\n              }\n          }\n\n          return null;\n        },\n        // We will disable everything if we are under catalog node\n        inSchema: function() {\n          if(this.node_info &&  'catalog' in this.node_info)\n          {\n            return true;\n          }\n          return false;\n        },\n        schemaCheck: function(m) {\n          if(this.node_info && 'schema' in this.node_info)\n          {\n            if (m.isNew()) {\n              return false;\n            } else {\n              return m.get('typtype') === 'p';\n            }\n          }\n          return true;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchemaWithModelCheck: function(m) {\n          if(this.node_info &&  'schema' in this.node_info)\n          {\n            // We will disbale control if it's in 'edit' mode\n            if (m.isNew()) {\n              return false;\n            } else {\n              return true;\n            }\n\n          }\n          return true;\n        },\n        // We want to enable only in edit mode\n        inSchemaWithEditMode: function(m) {\n          if(this.node_info &&  'schema' in this.node_info)\n          {\n            // We will disbale control if it's in 'edit' mode\n            if (m.isNew()) {\n              return true;\n            } else {\n              return false;\n            }\n\n          }\n          return true;\n        },\n        // Function will help us to fill combobox\n        external_func_combo: function(d) {\n           var result = [];\n           _.each(d, function(item) {\n             // if type from selected from combobox matches in options\n             if ( item.cbtype == 'all' ) {\n               result.push(item);\n             }\n           });\n           return result;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n          //If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData;\n          // To iterate over tree to check parent node\n          while (i) {\n            // If it is schema then allow user to create table\n            if (_.indexOf(['schema'], d._type) > -1)\n              return true;\n\n            if ('coll-type' == d._type) {\n              //Check if we are not child of catalog\n              var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n              if( prev_d._type == 'catalog') {\n                return false;\n              } else {\n                return true;\n              }\n            }\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // by default we do not want to allow create menu\n          return true;\n      }\n  });\n  }\n  return pgBrowser.Nodes['type'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/types/static/js/type.js","define('pgadmin.node.index', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'backform', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, Backform, alertify) {\n\n  if (!pgBrowser.Nodes['coll-index']) {\n    var databases = pgAdmin.Browser.Nodes['coll-index'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'index',\n        label: gettext('Indexes'),\n        type: 'coll-index',\n        getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n        sqlAlterHelp: 'sql-alterindex.html',\n        sqlCreateHelp: 'sql-createindex.html',\n        dialogHelp: url_for('help.static', {'filename': 'index_dialog.html'}),\n        columns: ['name', 'description'],\n        hasStatistics: true,\n        statsPrettifyFields: ['Size', 'Index size']\n      });\n  };\n\n  // Node-Ajax-Cell with Deps\n  var NodeAjaxOptionsDepsCell = Backgrid.Extension.NodeAjaxOptionsCell.extend({\n      initialize: function() {\n        Backgrid.Extension.NodeAjaxOptionsCell.prototype.initialize.apply(this, arguments);\n        Backgrid.Extension.DependentCell.prototype.initialize.apply(this, arguments);\n      },\n      dependentChanged: function () {\n        var model = this.model,\n          column = this.column,\n          editable = this.column.get(\"editable\"),\n          input = this.$el.find('select').first();\n\n        var is_editable = _.isFunction(editable) ? !!editable.apply(column, [model]) : !!editable;\n        if (is_editable) {\n           this.$el.addClass(\"editable\");\n           input.prop('disabled', false);\n         } else {\n           this.$el.removeClass(\"editable\");\n           input.prop('disabled', true);\n         }\n\n        this.delegateEvents();\n        return this;\n      },\n      remove: Backgrid.Extension.DependentCell.prototype.remove\n    });\n\n\n    // Model to create column collection control\n    var ColumnModel = pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          colname: undefined,\n          collspcname: undefined,\n          op_class: undefined,\n          sort_order: false,\n          nulls: false,\n          is_sort_nulls_applicable: true\n        },\n        schema: [\n          {\n            id: 'colname', label: gettext('Column'), cell: 'node-list-by-name',\n            type: 'text', disabled: 'inSchemaWithModelCheck', editable: function(m) {\n                // Header cell then skip\n                if (m instanceof Backbone.Collection) {\n                    return false;\n                }\n                return !(m.inSchemaWithModelCheck.apply(this, arguments));\n            },\n            control: 'node-list-by-name', node: 'column'\n          },{\n            id: 'collspcname', label: gettext('Collation'),\n            cell: NodeAjaxOptionsDepsCell,\n            type: 'text', disabled: 'inSchemaWithModelCheck', editable: function(m) {\n                // Header cell then skip\n                if (m instanceof Backbone.Collection) {\n                    return false;\n                }\n                return !(m.inSchemaWithModelCheck.apply(this, arguments));\n            },\n            control: 'node-ajax-options', url: 'get_collations', node: 'index'\n          },{\n            id: 'op_class', label: gettext('Operator class'),\n            cell: NodeAjaxOptionsDepsCell, tags: true,\n            type: 'text', disabled: 'checkAccessMethod',\n            editable: function(m) {\n                // Header cell then skip\n                if (m instanceof Backbone.Collection) {\n                  return false;\n                } else if (m.inSchemaWithModelCheck.apply(this, arguments)) {\n                  return false;\n                }\n                return !(m.checkAccessMethod.apply(this, arguments));\n            },\n            control: 'node-ajax-options', url: 'get_op_class', node: 'index',\n            deps: ['amname'], transform: function(data, control) {\n             /* We need to extract data from collection according\n              * to access method selected by user if not selected\n              * send btree related op_class options\n              */\n             var amname = control.model.top.get('amname'),\n                 options = data['btree'];\n\n             if(_.isUndefined(amname))\n               return options;\n\n             _.each(data, function(v, k) {\n                if(amname === k) {\n                  options = v;\n                }\n              });\n             return options;\n            }\n          },{\n            id: 'sort_order', label: gettext('Sort order'),\n            cell: Backgrid.Extension.TableChildSwitchCell, type: 'switch',\n            editable: function(m) {\n              // Header cell then skip\n              if (m instanceof Backbone.Collection) {\n                  return false;\n              } else if (m.inSchemaWithModelCheck.apply(this, arguments)) {\n                  return false;\n              } else if (m.top.get('amname') === 'btree') {\n                m.set('is_sort_nulls_applicable', true);\n                return true;\n              } else {\n                m.set('is_sort_nulls_applicable', false);\n                return false;\n              }\n            },\n            deps: ['amname'],\n            options: {\n             'onText': 'DESC', 'offText': 'ASC',\n             'onColor': 'success', 'offColor': 'primary',\n             'size': 'small'\n            }\n          },{\n            id: 'nulls', label: gettext('NULLs'),\n            cell: Backgrid.Extension.TableChildSwitchCell, type: 'switch',\n            editable: function(m) {\n              // Header cell then skip\n              if (m instanceof Backbone.Collection) {\n                  return false;\n              } else if (m.inSchemaWithModelCheck.apply(this, arguments)) {\n                  return false;\n              } else if (m.top.get('amname') === 'btree') {\n                m.set('is_sort_nulls_applicable', true);\n                return true;\n              } else {\n                m.set('is_sort_nulls_applicable', false);\n                return false;\n              }\n            },\n            deps: ['amname', 'sort_order'],\n            options: {\n             'onText': 'FIRST', 'offText': 'LAST',\n             'onColor': 'success', 'offColor': 'primary',\n             'size': 'small'\n            }\n          }\n        ],\n        validate: function() {\n          this.errorModel.clear();\n\n          if (_.isUndefined(this.get('colname'))\n              || String(this.get('colname')).replace(/^\\s+|\\s+$/g, '') == '') {\n            var msg = gettext('Column Name cannot be empty.');\n            this.errorModel.set('colname', msg);\n            return msg;\n          }\n        },\n        // We will check if we are under schema node\n        inSchema: function() {\n          if(this.node_info &&  'catalog' in this.node_info) {\n            return true;\n          }\n          return false;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchemaWithModelCheck: function(m) {\n          if(m.top.node_info &&  'schema' in m.top.node_info) {\n            // We will disable control if it's in 'edit' mode\n            if (m.top.isNew()) {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          return true;\n        },\n        // We will check if we are under schema node and added condition\n        checkAccessMethod: function(m) {\n        //Access method is empty or btree then do not disable field\n          var parent_model = m.top;\n          if(_.isUndefined(parent_model.get('amname')) ||\n               _.isNull(parent_model.get('amname')) ||\n               String(parent_model.get('amname')).replace(/^\\s+|\\s+$/g, '') == '' ||\n               parent_model.get('amname') === 'btree') {\n            // We need to set nulls to true if sort_order is set to desc\n            // nulls first is default for desc\n            if(m.get('sort_order') == true && m.previous('sort_order') ==  false) {\n               setTimeout(function() { m.set('nulls', true) }, 10);\n            }\n          }\n          else {\n            m.set('is_sort_nulls_applicable', false);\n          }\n          return false;\n        }\n    });\n\n  if (!pgBrowser.Nodes['index']) {\n    pgAdmin.Browser.Nodes['index'] = pgBrowser.Node.extend({\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      parent_type: ['table', 'view', 'mview', 'partition'],\n      collection_type: ['coll-table', 'coll-view'],\n      sqlAlterHelp: 'sql-alterindex.html',\n      sqlCreateHelp: 'sql-createindex.html',\n      type: 'index',\n      label: gettext('Index'),\n      hasSQL:  true,\n      hasDepends: true,\n      hasStatistics: true,\n      statsPrettifyFields: ['Size', 'Index size'],\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_index_on_coll', node: 'coll-index', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Index...'),\n          icon: 'wcTabIcon icon-index', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_index', node: 'index', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Index...'),\n          icon: 'wcTabIcon icon-index', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_index_onTable', node: 'table', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Index...'),\n          icon: 'wcTabIcon icon-index', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_index_onPartition', node: 'partition', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Index...'),\n          icon: 'wcTabIcon icon-index', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_index_onMatView', node: 'mview', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 5, label: gettext('Index...'),\n          icon: 'wcTabIcon icon-index', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        }\n        ]);\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      model: pgAdmin.Browser.Node.Model.extend({\n        idAttribute: 'oid',\n\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          nspname: undefined,\n          tabname: undefined,\n          spcname: undefined,\n          amname: 'btree'\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', disabled: 'inSchema'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'int', disabled: true, mode: ['edit', 'properties']\n        },{\n          id: 'spcname', label: gettext('Tablespace'), cell: 'string',\n          control: 'node-list-by-name', node: 'tablespace',\n          select2: {'allowClear': true},\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchema', filter: function(d) {\n            // If tablespace name is not \"pg_global\" then we need to exclude them\n            if(d && d.label.match(/pg_global/))\n            {\n              return false;\n            }\n            return true;\n          }\n        },{\n          id: 'amname', label: gettext('Access Method'), cell: 'string',\n          type: 'text', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchemaWithModelCheck', url: 'get_access_methods',\n          group: gettext('Definition'), select2: {'allowClear': true},\n          control: Backform.NodeAjaxOptionsControl.extend({\n            // When access method changes we need to clear columns collection\n            onChange: function() {\n              Backform.NodeAjaxOptionsControl.prototype.onChange.apply(this, arguments);\n              var self = this,\n              // current access method\n              current_am = self.model.get('amname'),\n              // previous access method\n              previous_am = self.model.previous('amname');\n              if (current_am != previous_am && self.model.get('columns').length !== 0) {\n                var msg = gettext('Changing access method will clear columns collection');\n                alertify.confirm(msg, function (e) {\n                    // User clicks Ok, lets clear collection\n                    var column_collection = self.model.get('columns'),\n                      col_length = column_collection.length;\n                    for (var i=(col_length-1);i>=0;i--) {\n                       column_collection.remove(column_collection.models[i]);\n                    }\n                  }, function() {\n                    // User clicks Cancel set previous value again in combo box\n                    setTimeout(function(){\n                      self.model.set('amname', previous_am);\n                    }, 10);\n                });\n              }\n            }\n          })\n        },{\n          id: 'cols', label: gettext('Columns'), cell: 'string',\n          type: 'text', disabled: 'inSchema', mode: ['properties'],\n          group: gettext('Definition')\n        },{\n          id: 'fillfactor', label: gettext('Fill factor'), cell: 'string',\n          type: 'int', disabled: 'inSchema', mode: ['create', 'edit', 'properties'],\n          min: 10, max:100, group: gettext('Definition')\n        },{\n          id: 'indisunique', label: gettext('Unique?'), cell: 'string',\n          type: 'switch', disabled: 'inSchemaWithModelCheck',\n          group: gettext('Definition')\n        },{\n          id: 'indisclustered', label: gettext('Clustered?'), cell: 'string',\n          type: 'switch', disabled: 'inSchema',\n          group: gettext('Definition')\n        },{\n          id: 'indisvalid', label: gettext('Valid?'), cell: 'string',\n          type: 'switch', disabled: true, mode: ['properties'],\n          group: gettext('Definition')\n        },{\n          id: 'indisprimary', label: gettext('Primary?'), cell: 'string',\n          type: 'switch', disabled: true, mode: ['properties'],\n          group: gettext('Definition')\n        },{\n          id: 'is_sys_idx', label: gettext('System index?'), cell: 'string',\n          type: 'switch', disabled: true, mode: ['properties']\n        },{\n          id: 'isconcurrent', label: gettext('Concurrent build?'), cell: 'string',\n          type: 'switch', disabled: 'inSchemaWithModelCheck',\n          mode: ['create', 'edit'], group: gettext('Definition')\n        },{\n          id: 'indconstraint', label: gettext('Constraint'), cell: 'string',\n          type: 'text', disabled: 'inSchemaWithModelCheck', mode: ['create', 'edit'],\n          control: 'sql-field', visible: true, group: gettext('Definition')\n        },{\n          id: 'columns', label: 'Columns', type: 'collection', deps: ['amname'],\n          group: gettext('Definition'), model: ColumnModel, mode: ['edit', 'create'],\n          canAdd: function(m) {\n            // We will disable it if it's in 'edit' mode\n            if (m.isNew()) {\n              return true;\n            } else {\n              return false;\n            }\n          },\n          canEdit: false,\n          canDelete: function(m) {\n            // We will disable it if it's in 'edit' mode\n            if (m.isNew()) {\n              return true;\n            } else {\n              return false;\n            }\n          },\n          control: 'unique-col-collection', uniqueCol : ['colname'],\n          columns: ['colname', 'op_class', 'sort_order', 'nulls', 'collspcname']\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchema'\n        }\n        ],\n        validate: function(keys) {\n          var err = {},\n              changedAttrs = this.changed,\n              msg = undefined;\n\n          // Nothing to validate\n          if (keys && keys.length == 0) {\n            this.errorModel.clear();\n            return null;\n          } else {\n            this.errorModel.clear();\n          }\n\n          if (_.isUndefined(this.get('name'))\n              || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n          if (_.isUndefined(this.get('spcname'))\n              || String(this.get('spcname')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Tablespace cannot be empty.');\n            this.errorModel.set('spcname', msg);\n            return msg;\n          }\n          if (_.isUndefined(this.get('amname'))\n              || String(this.get('amname')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Access method cannot be empty.');\n            this.errorModel.set('amname', msg);\n            return msg;\n          }\n          // Checks if all columns has names\n          var cols = this.get('columns');\n          if(cols && cols.length > 0) {\n             if(!_.every(cols.pluck('colname'))) {\n               msg = gettext('You must specify column name.');\n               this.errorModel.set('columns', msg);\n               return msg;\n             }\n          } else if(cols){\n               msg = gettext('You must specify at least one column.');\n               this.errorModel.set('columns', msg);\n               return msg;\n          }\n          return null;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchema: function() {\n          if(this.node_info &&  'catalog' in this.node_info) {\n            return true;\n          }\n          return false;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchemaWithModelCheck: function(m) {\n          if(this.node_info &&  'schema' in this.node_info) {\n            // We will disable control if it's in 'edit' mode\n            if (m.isNew()) {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          return true;\n        },\n        // Checks weather to enable/disable control\n        inSchemaWithColumnCheck: function(m) {\n          if(this.node_info &&  'schema' in this.node_info) {\n            // We will disable control if it's system columns\n            // ie: it's position is less then 1\n            if (m.isNew()) {\n              return false;\n            } else {\n              // if we are in edit mode\n              if (!_.isUndefined(m.get('attnum')) && m.get('attnum') >= 1 ) {\n                return false;\n              } else {\n                return true;\n              }\n           }\n          }\n          return true;\n        }\n      }),\n      // Below function will enable right click menu for creating column\n      canCreate: function(itemData, item, data) {\n          // If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData, parents = [],\n            immediate_parent_table_found = false,\n            is_immediate_parent_table_partitioned = false;\n          // To iterate over tree to check parent node\n          while (i) {\n            // Do not allow creating index on partitioned tables.\n            if (!immediate_parent_table_found &&\n                _.indexOf(['table', 'partition'], d._type) > -1) {\n              immediate_parent_table_found = true;\n              if ('is_partitioned' in d && d.is_partitioned) {\n                is_immediate_parent_table_partitioned = true;\n              }\n            }\n\n            // If it is schema then allow user to create index\n            if (_.indexOf(['schema'], d._type) > -1)\n              return !is_immediate_parent_table_partitioned;\n            parents.push(d._type);\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // If node is under catalog then do not allow 'create' menu\n          if (_.indexOf(parents, 'catalog') > -1) {\n            return false;\n          } else {\n            return !is_immediate_parent_table_partitioned;\n          }\n      }\n  });\n }\n\n  return pgBrowser.Nodes['index'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/indexes/static/js/index.js","define('pgadmin.node.trigger', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'backform', 'pgadmin.alertifyjs',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, Backform, alertify) {\n\n  var CustomSwitchControl = Backform.CustomSwitchControl = Backform.SwitchControl.extend({\n    template: _.template([\n      '<label class=\"<%=Backform.controlLabelClassName%> custom_switch_label_class\"><%=label%></label>',\n      '<div class=\"<%=Backform.controlsClassName%> custom_switch_control_class\">',\n      '  <div class=\"checkbox\">',\n      '    <label>',\n      '      <input type=\"checkbox\" class=\"<%=extraClasses.join(\\' \\')%>\"',\n      '        name=\"<%=name%>\" <%=value ? \"checked=\\'checked\\'\" : \"\"%>',\n      '        <%=disabled ? \"disabled\" : \"\"%> <%=required ? \"required\" : \"\"%> />',\n      '    </label>',\n      '  </div>',\n      '</div>',\n      '<% if (helpMessage && helpMessage.length) { %>',\n      '  <span class=\"<%=Backform.helpMessageClassName%>\"><%=helpMessage%></span>',\n      '<% } %>'\n    ].join(\"\\n\")),\n    className: 'pgadmin-control-group form-group col-xs-6'\n  });\n\n  if (!pgBrowser.Nodes['coll-trigger']) {\n    var triggers = pgAdmin.Browser.Nodes['coll-trigger'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'trigger',\n        label: gettext('Triggers'),\n        type: 'coll-trigger',\n        getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n        columns: ['name', 'description']\n      });\n  };\n\n  if (!pgBrowser.Nodes['trigger']) {\n    pgAdmin.Browser.Nodes['trigger'] = pgBrowser.Node.extend({\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      parent_type: ['table', 'view', 'partition'],\n      collection_type: ['coll-table', 'coll-view'],\n      type: 'trigger',\n      label: gettext('Trigger'),\n      hasSQL:  true,\n      hasDepends: true,\n      width: '650px',\n      sqlAlterHelp: 'sql-altertrigger.html',\n      sqlCreateHelp: 'sql-createtrigger.html',\n      dialogHelp: url_for('help.static', {'filename': 'trigger_dialog.html'}),\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_trigger_on_coll', node: 'coll-trigger', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Trigger...'),\n          icon: 'wcTabIcon icon-trigger', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_trigger', node: 'trigger', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Trigger...'),\n          icon: 'wcTabIcon icon-trigger', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_trigger_onTable', node: 'table', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Trigger...'),\n          icon: 'wcTabIcon icon-trigger', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_trigger_onPartition', node: 'partition', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Trigger...'),\n          icon: 'wcTabIcon icon-trigger', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'enable_trigger', node: 'trigger', module: this,\n          applies: ['object', 'context'], callback: 'enable_trigger',\n          category: 'connect', priority: 3, label: gettext('Enable trigger'),\n          icon: 'fa fa-check', enable : 'canCreate_with_trigger_enable'\n        },{\n          name: 'disable_trigger', node: 'trigger', module: this,\n          applies: ['object', 'context'], callback: 'disable_trigger',\n          category: 'drop', priority: 3, label: gettext('Disable trigger'),\n          icon: 'fa fa-times', enable : 'canCreate_with_trigger_disable'\n        },{\n          name: 'create_trigger_onView', node: 'view', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Trigger...'),\n          icon: 'wcTabIcon icon-trigger', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        }\n        ]);\n      },\n      callbacks: {\n        /* Enable trigger */\n        enable_trigger: function(args) {\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          var data = d;\n          $.ajax({\n            url: obj.generate_url(i, 'enable' , d, true),\n            type:'PUT',\n            data: {'enable' : true},\n            dataType: \"json\",\n            success: function(res) {\n              if (res.success == 1) {\n                alertify.success(res.info);\n                t.removeIcon(i);\n                data.icon = 'icon-trigger';\n                t.addIcon(i, {icon: data.icon});\n                t.unload(i);\n                t.setInode(false);\n                t.deselect(i);\n                // Fetch updated data from server\n                setTimeout(function() {\n                  t.select(i);\n                }, 10);\n              }\n            },\n            error: function(xhr, status, error) {\n              try {\n                var err = $.parseJSON(xhr.responseText);\n                if (err.success == 0) {\n                  alertify.error(err.errormsg);\n                }\n              } catch (e) {}\n              t.unload(i);\n            }\n          })\n        },\n        /* Disable trigger */\n        disable_trigger: function(args) {\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          var data = d;\n          $.ajax({\n            url: obj.generate_url(i, 'enable' , d, true),\n            type:'PUT',\n            data: {'enable' : false},\n            dataType: \"json\",\n            success: function(res) {\n              if (res.success == 1) {\n                alertify.success(res.info);\n                t.removeIcon(i);\n                data.icon = 'icon-trigger-bad';\n                t.addIcon(i, {icon: data.icon});\n                t.unload(i);\n                t.setInode(false);\n                t.deselect(i);\n                // Fetch updated data from server\n                setTimeout(function() {\n                  t.select(i);\n                }, 10);\n              }\n            },\n            error: function(xhr, status, error) {\n              try {\n                var err = $.parseJSON(xhr.responseText);\n                if (err.success == 0) {\n                  alertify.error(err.errormsg);\n                }\n              } catch (e) {}\n              t.unload(i);\n            }\n          })\n        }\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          is_row_trigger: true,\n          fires: 'BEFORE'\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', disabled: 'inSchema'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'int', disabled: true, mode: ['properties']\n        },{\n          id: 'is_enable_trigger', label: gettext('Trigger enabled?'),\n          type: 'switch', disabled: 'inSchema', mode: ['edit', 'properties'],\n          group: gettext('Definition')\n        },{\n          id: 'is_row_trigger', label: gettext('Row trigger?'),\n          type: 'switch', group: gettext('Definition'),\n          mode: ['create','edit', 'properties'],\n          deps: ['is_constraint_trigger'],\n          disabled: function(m) {\n            // Disabled if table is a partitioned table.\n            if (_.has(m, 'node_info') && _.has(m.node_info, 'table') &&\n                _.has(m.node_info.table, 'is_partitioned') && m.node_info.table.is_partitioned)\n            {\n              setTimeout(function(){\n                  m.set('is_row_trigger', false);\n              },10);\n\n              return true;\n            }\n\n            // If constraint trigger is set to True then row trigger will\n            // automatically set to True and becomes disable\n            var is_constraint_trigger = m.get('is_constraint_trigger');\n            if(!m.inSchemaWithModelCheck.apply(this, [m])) {\n                if(!_.isUndefined(is_constraint_trigger) &&\n                is_constraint_trigger === true) {\n                // change it's model value\n                    setTimeout(function() { m.set('is_row_trigger', true) }, 10);\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                // Check if it is row trigger then enabled it.\n                var is_row_trigger = m.get('is_row_trigger');\n                if (!_.isUndefined(is_row_trigger) && m.node_info['server']['server_type'] == 'ppas') {\n                  return false;\n                }\n                // Disable it\n                return true;\n            }\n          }\n        },{\n          id: 'is_constraint_trigger', label: gettext('Constraint trigger?'),\n          type: 'switch', disabled: 'inSchemaWithModelCheck',\n          mode: ['create','edit', 'properties'],\n          group: gettext('Definition'),\n          disabled: function(m) {\n            // Disabled if table is a partitioned table.\n            if (_.has(m, 'node_info') && _.has(m.node_info, 'table') &&\n                _.has(m.node_info.table, 'is_partitioned') && m.node_info.table.is_partitioned)\n            {\n              setTimeout(function(){\n                  m.set('is_constraint_trigger', false);\n              },10);\n\n              return true;\n            }\n          }\n        },{\n          id: 'tgdeferrable', label: gettext('Deferrable?'),\n          type: 'switch', group: gettext('Definition'),\n          mode: ['create','edit', 'properties'],\n          deps: ['is_constraint_trigger'],\n          disabled: function(m) {\n            // If constraint trigger is set to True then only enable it\n            var is_constraint_trigger = m.get('is_constraint_trigger');\n            if(!m.inSchemaWithModelCheck.apply(this, [m])) {\n                if(!_.isUndefined(is_constraint_trigger) &&\n                is_constraint_trigger === true) {\n                    return false;\n                } else {\n                    // If value is already set then reset it to false\n                    if(m.get('tgdeferrable')) {\n                      setTimeout(function() { m.set('tgdeferrable', false) }, 10);\n                    }\n                    return true;\n                }\n            } else {\n                // Disable it\n                return true;\n            }\n          }\n        },{\n          id: 'tginitdeferred', label: gettext('Deferred?'),\n          type: 'switch', group: gettext('Definition'),\n          mode: ['create','edit', 'properties'],\n          deps: ['tgdeferrable', 'is_constraint_trigger'],\n          disabled: function(m) {\n            // If Deferrable is set to True then only enable it\n            var tgdeferrable = m.get('tgdeferrable');\n            if(!m.inSchemaWithModelCheck.apply(this, [m])) {\n                if(!_.isUndefined(tgdeferrable) &&\n                tgdeferrable) {\n                    return false;\n                } else {\n                    // If value is already set then reset it to false\n                    if(m.get('tginitdeferred')) {\n                      setTimeout(function() { m.set('tginitdeferred', false) }, 10);\n                    }\n                    // If constraint trigger is set then do not disable\n                    return m.get('is_constraint_trigger') ? false : true;\n                }\n            } else {\n                // Disable it\n                return true;\n            }\n          }\n        },{\n          id: 'tfunction', label: gettext('Trigger Function'),\n          type: 'text', disabled: 'inSchemaWithModelCheck',\n          mode: ['create','edit', 'properties'], group: gettext('Definition'),\n          control: 'node-ajax-options', url: 'get_triggerfunctions',\n          cache_node: 'trigger_function'\n        },{\n          id: 'tgargs', label: gettext('Arguments'), cell: 'string',\n          group: gettext('Definition'),\n          type: 'text',mode: ['create','edit', 'properties'], deps: ['tfunction'],\n          disabled: function(m) {\n            // We will disable it when EDB PPAS and trigger function is\n            // set to Inline EDB-SPL\n            var tfunction = m.get('tfunction'),\n                server_type = m.node_info['server']['server_type'];\n            if(!m.inSchemaWithModelCheck.apply(this, [m])) {\n                if(server_type === 'ppas' &&\n                    !_.isUndefined(tfunction) &&\n                tfunction === 'Inline EDB-SPL') {\n                    // Disable and clear its value\n                    m.set('tgargs', undefined)\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                // Disable it\n                return true;\n            }\n          }\n        },{\n        id: 'fires', label: gettext('Fires'), deps: ['is_constraint_trigger'],\n        mode: ['create','edit', 'properties'], group: gettext('Events'),\n        options: function(control) {\n            var table_options = [\n                {label: \"BEFORE\", value: \"BEFORE\"},\n                {label: \"AFTER\", value: \"AFTER\"}],\n                view_options = [\n                {label: \"BEFORE\", value: \"BEFORE\"},\n                {label: \"AFTER\", value: \"AFTER\"},\n                {label: \"INSTEAD OF\", value: \"INSTEAD OF\"}];\n            // If we are under table then show table specific options\n            if(_.indexOf(Object.keys(control.model.node_info), 'table') != -1) {\n                return table_options;\n            } else {\n                return view_options;\n            }\n        },\n        // If create mode then by default open composite type\n        control: 'select2', select2: { allowClear: false, width: \"100%\" },\n        disabled: function(m) {\n        // If contraint trigger is set to True then only enable it\n        var is_constraint_trigger = m.get('is_constraint_trigger');\n        if(!m.inSchemaWithModelCheck.apply(this, [m])) {\n            if(!_.isUndefined(is_constraint_trigger) &&\n            is_constraint_trigger === true) {\n                setTimeout(function() { m.set('fires', 'AFTER') }, 10);\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            // Check if it is row trigger then enabled it.\n            var fires_ = m.get('fires');\n            if (!_.isUndefined(fires_) && m.node_info['server']['server_type'] == 'ppas') {\n              return false;\n            }\n            // Disable it\n            return true;\n        }\n       }\n      },{\n        type: 'nested', control: 'fieldset', mode: ['create','edit', 'properties'],\n        label: gettext('Events'), group: gettext('Events'),\n        schema:[{\n            id: 'evnt_insert', label: gettext('INSERT'),\n            type: 'switch', mode: ['create','edit', 'properties'],\n            group: gettext('Events'),\n            control: Backform.CustomSwitchControl,\n            disabled: function(m) {\n                var evn_insert = m.get('evnt_insert');\n                if (!_.isUndefined(evn_insert) && m.node_info['server']['server_type'] == 'ppas')\n                  return false;\n                return m.inSchemaWithModelCheck.apply(this, [m]);\n            }\n        },{\n            id: 'evnt_update', label: gettext('UPDATE'),\n            type: 'switch', mode: ['create','edit', 'properties'],\n            group: gettext('Events'),\n            control: Backform.CustomSwitchControl,\n            disabled: function(m) {\n                var evn_update = m.get('evnt_update');\n                if (!_.isUndefined(evn_update) && m.node_info['server']['server_type'] == 'ppas')\n                  return false;\n                return m.inSchemaWithModelCheck.apply(this, [m]);\n            }\n        },{\n            id: 'evnt_delete', label: gettext('DELETE'),\n            type: 'switch', mode: ['create','edit', 'properties'],\n            group: gettext('Events'),\n            control: Backform.CustomSwitchControl,\n            disabled: function(m) {\n                var evn_delete = m.get('evnt_delete');\n                if (!_.isUndefined(evn_delete) && m.node_info['server']['server_type'] == 'ppas')\n                  return false;\n                return m.inSchemaWithModelCheck.apply(this, [m]);\n            }\n        },{\n            id: 'evnt_truncate', label: gettext('TRUNCATE'),\n            type: 'switch', group: gettext('Events'),\n            control: Backform.CustomSwitchControl,\n            disabled: function(m) {\n            var is_constraint_trigger = m.get('is_constraint_trigger'),\n                is_row_trigger = m.get('is_row_trigger'),\n                server_type = m.node_info['server']['server_type'];\n            if(!m.inSchemaWithModelCheck.apply(this, [m])) {\n                // We will enabale truncate only for EDB PPAS\n                // and both triggers row & constarint are set to false\n                if(server_type === 'ppas' &&\n                    !_.isUndefined(is_constraint_trigger) &&\n                    !_.isUndefined(is_row_trigger) &&\n                is_constraint_trigger === false &&\n                    is_row_trigger === false) {\n                    return false;\n                } else {\n                    return true;\n                }\n            } else {\n                // Disable it\n                return true;\n            }\n        }\n        }]\n        },{\n            id: 'whenclause', label: gettext('When'),\n            type: 'text', disabled: 'inSchemaWithModelCheck',\n            mode: ['create', 'edit', 'properties'],\n            control: 'sql-field', visible: true, group: gettext('Events')\n        },{\n            id: 'columns', label: gettext('Columns'), url: 'nodes',\n            control: 'node-list-by-name', cache_node: 'column', type: 'array',\n            select2: {'multiple': true},\n            deps: ['evnt_update'], node: 'column', group: gettext('Events'),\n            disabled: function(m) {\n                if(this.node_info &&  'catalog' in this.node_info) {\n                    return true;\n                }\n                //Disable in edit mode\n                if (!m.isNew()) {\n                    return true;\n                }\n                // Enable column only if update event is set true\n                var isUpdate = m.get('evnt_update');\n                if(!_.isUndefined(isUpdate) && isUpdate) {\n                    return false;\n                }\n             return true;\n            }\n        },{\n            id: 'prosrc', label: gettext('Code'), group: gettext('Code'),\n            type: 'text', mode: ['create', 'edit'], deps: ['tfunction'],\n            control: 'sql-field', visible: true,\n            disabled: function(m) {\n                // We will enable it only when EDB PPAS and trigger function is\n                // set to Inline EDB-SPL\n                var tfunction = m.get('tfunction'),\n                    server_type = m.node_info['server']['server_type'];\n\n                if(server_type === 'ppas' &&\n                    !_.isUndefined(tfunction) &&\n                    tfunction === 'Inline EDB-SPL')\n                  return false;\n                else\n                  return true;\n            }\n        },{\n          id: 'is_sys_trigger', label: gettext('System trigger?'), cell: 'string',\n          type: 'switch', disabled: 'inSchemaWithModelCheck', mode: ['properties']\n        },{\n          id: 'is_constarint', label: gettext('Constraint?'), cell: 'string',\n          type: 'switch', disabled: 'inSchemaWithModelCheck', mode: ['properties'],\n          group: gettext('Definition')\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchema'\n    }],\n        validate: function(keys) {\n          var err = {},\n              msg = undefined;\n          this.errorModel.clear();\n\n          // If nothing to validate\n          if (keys && keys.length == 0) {\n            return null;\n          }\n\n          if(_.isUndefined(this.get('name'))\n              || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n            }\n          if(_.isUndefined(this.get('tfunction'))\n              || String(this.get('tfunction')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Trigger function cannot be empty.');\n            this.errorModel.set('tfunction', msg);\n            return msg;\n          }\n\n          if(!this.get('evnt_truncate') && !this.get('evnt_delete') &&\n            !this.get('evnt_update') && !this.get('evnt_insert')) {\n            msg = gettext('Specify at least one event.');\n            this.errorModel.set('evnt_truncate', \" \");\n            this.errorModel.set('evnt_delete', \" \");\n            this.errorModel.set('evnt_update', \" \");\n            this.errorModel.set('evnt_insert', msg);\n            return msg;\n          }\n\n          if(!_.isUndefined(this.get('tfunction')) &&\n            this.get('tfunction') === 'Inline EDB-SPL' &&\n            (_.isUndefined(this.get('prosrc'))\n              || String(this.get('prosrc')).replace(/^\\s+|\\s+$/g, '') == ''))\n          {\n            msg = gettext('Trigger code cannot be empty.');\n            this.errorModel.set('prosrc', msg);\n            return msg;\n          }\n          return null;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchema: function() {\n          if(this.node_info &&  'catalog' in this.node_info) {\n            return true;\n          }\n          return false;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchemaWithModelCheck: function(m) {\n          if(this.node_info &&  'schema' in this.node_info) {\n            // We will disable control if it's in 'edit' mode\n            if (m.isNew()) {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          return true;\n        },\n        // Checks weather to enable/disable control\n        inSchemaWithColumnCheck: function(m) {\n          if(this.node_info &&  'schema' in this.node_info) {\n            // We will disable control if it's system columns\n            // ie: it's position is less then 1\n            if (m.isNew()) {\n              return false;\n            } else {\n              // if we are in edit mode\n              if (!_.isUndefined(m.get('attnum')) && m.get('attnum') >= 1 ) {\n                return false;\n              } else {\n                return true;\n              }\n           }\n          }\n          return true;\n        }\n      }),\n      // Below function will enable right click menu for creating column\n      canCreate: function(itemData, item, data) {\n          // If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData, parents = [];\n          // To iterate over tree to check parent node\n          while (i) {\n            // If it is schema then allow user to c reate table\n            if (_.indexOf(['schema'], d._type) > -1)\n              return true;\n            parents.push(d._type);\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // If node is under catalog then do not allow 'create' menu\n          if (_.indexOf(parents, 'catalog') > -1) {\n            return false;\n          } else {\n            return true;\n          }\n      },\n      // Check to whether trigger is disable ?\n      canCreate_with_trigger_enable: function(itemData, item, data) {\n        if(this.canCreate.apply(this, [itemData, item, data])) {\n          // We are here means we can create menu, now let's check condition\n          if(itemData.icon === 'icon-trigger-bad') {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      },\n      // Check to whether trigger is enable ?\n      canCreate_with_trigger_disable: function(itemData, item, data) {\n        if(this.canCreate.apply(this, [itemData, item, data])) {\n          // We are here means we can create menu, now let's check condition\n          if(itemData.icon === 'icon-trigger') {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n  });\n }\n\n  return pgBrowser.Nodes['trigger'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/triggers/static/js/trigger.js","define('pgadmin.node.catalog_object_column', [\n  'sources/gettext', 'jquery', 'underscore', 'underscore.string', 'sources/pgadmin',\n  'pgadmin.browser', 'alertify', 'pgadmin.browser.collection'\n], function(gettext, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-catalog_object_column']) {\n    var databases = pgAdmin.Browser.Nodes['coll-catalog_object_column'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'catalog_object_column',\n        label: gettext('catalog_object_column'),\n        type: 'coll-catalog_object_column',\n        columns: ['attname', 'attnum', 'cltype', 'description']\n      });\n  };\n\n  if (!pgBrowser.Nodes['catalog_object_column']) {\n    pgAdmin.Browser.Nodes['catalog_object_column'] =\n      pgAdmin.Browser.Node.extend({\n      parent_type: 'catalog_object',\n      type: 'catalog_object_column',\n      label: gettext('catalog_object_column'),\n      hasSQL:  false,\n      hasScriptTypes: [],\n      hasDepends: true,\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n      },\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          attname: undefined,\n          attowner: undefined,\n          atttypid: undefined,\n          attnum: undefined,\n          cltype: undefined,\n          collspcname: undefined,\n          attacl: undefined,\n          description: undefined\n        },\n        schema: [{\n          id: 'attname', label: gettext('Column'), cell: 'string',\n          type: 'text', disabled: true\n        },{\n          id: 'attowner', label: gettext('Owner'), cell: 'string',\n          type: 'text', disabled: true\n        },{\n          id: 'attnum', label: gettext('Position'), cell: 'string',\n          type: 'text', disabled: true\n        },{\n          id: 'cltype', label: gettext('Data type'), cell: 'string',\n          group: gettext('Definition'), type: 'text', disabled: true\n        },{\n          id: 'collspcname', label: gettext('Collation'), cell: 'string',\n          group: gettext('Definition'), type: 'text', disabled: true\n        },{\n          id: 'attacl', label: gettext('Privileges'), cell: 'string',\n          group: gettext('Security'), type: 'text', disabled: true\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', disabled: true\n        }]\n      })\n    });\n  }\n\n  return pgBrowser.Nodes['catalog_object_column'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/catalog_objects/columns/static/js/catalog_object_column.js","define('pgadmin.node.view', [\n  'sources/gettext',\n  'sources/url_for', 'jquery', 'underscore', 'underscore.string', 'sources/pgadmin',\n  'pgadmin.browser', 'codemirror', 'pgadmin.browser.server.privilege',\n  'pgadmin.node.rule'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, CodeMirror) {\n\n  /**\n    Create and add a view collection into nodes\n    @param {variable} label - Label for Node\n    @param {variable} type - Type of Node\n    @param {variable} columns - List of columns to\n      display under under properties.\n   */\n  if (!pgBrowser.Nodes['coll-view']) {\n    var views= pgBrowser.Nodes['coll-view'] =\n      pgBrowser.Collection.extend({\n        node: 'view',\n        label: gettext('Views'),\n        type: 'coll-view',\n        columns: [\"name\", \"owner\"]\n      });\n  }\n\n  /**\n    Create and Add a View Node into nodes\n    @param {variable} parent_type - The list of nodes\n    under which this node to display\n    @param {variable} type - Type of Node\n    @param {variable} hasSQL - To show SQL tab\n    @param {variable} canDrop - Adds drop view option\n    in the context menu\n    @param {variable} canDropCascade - Adds drop Cascade\n    view option in the context menu\n   */\n  if (!pgBrowser.Nodes['view']) {\n    pgBrowser.Nodes['view'] = pgBrowser.Node.extend({\n      parent_type: ['schema', 'catalog'],\n      type: 'view',\n      sqlAlterHelp: 'sql-alterview.html',\n      sqlCreateHelp: 'sql-createview.html',\n      dialogHelp: url_for('help.static', {'filename': 'view_dialog.html'}),\n      label: gettext('View'),\n      hasSQL:  true,\n      hasDepends: true,\n      hasScriptTypes: ['create', 'select', 'insert'],\n      collection_type: 'coll-view',\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      Init: function() {\n\n        // Avoid mulitple registration of menus\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        /**\n          Add \"create view\" menu option into context and object menu\n          for the following nodes:\n          coll-view, view and schema.\n          @property {data} - Allow create view option on schema node or\n          system view nodes.\n         */\n        pgBrowser.add_menus([{\n          name: 'create_view_on_coll', node: 'coll-view', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 1, label: gettext('View...'),\n          icon: 'wcTabIcon icon-view', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_view', node: 'view', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 1, label: gettext('View...'),\n          icon: 'wcTabIcon icon-view', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_view', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 17, label: gettext('View...'),\n          icon: 'wcTabIcon icon-view', data: {action: 'create', check: false},\n          enable: 'canCreate'\n        }\n        ]);\n      },\n\n      /**\n        Define model for the view node and specify the\n        properties of the model in schema.\n       */\n      model: pgBrowser.Node.Model.extend({\n        initialize: function(attrs, args) {\n          if (_.size(attrs) === 0) {\n            // Set Selected Schema and, Current User\n            var schemaLabel = args.node_info.schema._label || 'public',\n                userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            this.set({\n              'schema': schemaLabel, 'owner': userInfo.name\n            }, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', disabled: 'notInSchema'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text', disabled: true, mode: ['properties']\n        },{\n          id: 'owner', label: gettext('Owner'), cell: 'string', control: 'node-list-by-name',\n          node: 'role', disabled: 'notInSchema', select2: { allowClear: false }\n        },{\n          id: 'schema', label: gettext('Schema'), cell: 'string', first_empty: false,\n          control: 'node-list-by-name', type: 'text', cache_level: 'database',\n          node: 'schema', disabled: 'notInSchema', mode: ['create', 'edit'],\n          select2: { allowClear: false }, cache_node: 'database'\n        },{\n          id: 'system_view', label: gettext('System view?'), cell: 'string',\n          type: 'switch', disabled: true, mode: ['properties']\n        },{\n          id: 'acl', label: gettext('Privileges'),\n          mode: ['properties'], type: 'text', group: gettext('Security')\n        },{\n          id: 'comment', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', disabled: 'notInSchema'\n        },{\n          id: 'security_barrier', label: gettext('Security barrier'),\n          type: 'switch', min_version: '90200', group: gettext('Definition'),\n          disabled: 'notInSchema'\n        },{\n          id: 'check_option', label: gettext('Check options'),\n          control: 'select2', group: gettext('Definition'), type: 'text',\n          min_version: '90400', mode:['properties', 'create', 'edit'],\n          select2: {\n            // Set select2 option width to 100%\n            allowClear: false,\n          }, disabled: 'notInSchema',\n          options:[{\n            label: gettext(\"No\"), value: \"no\"\n          },{\n            label: gettext(\"Local\"), value: \"local\"\n          },{\n            label: gettext(\"Cascaded\"), value: \"cascaded\"\n          }]\n        },{\n          id: 'definition', label: gettext('Definition'), cell: 'string',\n          type: 'text', mode: ['create', 'edit'], group: gettext('Definition'),\n          control: Backform.SqlFieldControl,\n          disabled: 'notInSchema'\n        }, pgBrowser.SecurityGroupSchema, {\n          // Add Privilege Control\n          id: 'datacl', label: gettext('Privileges'), type: 'collection',\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n            privileges: ['a', 'r', 'w', 'd', 'D', 'x', 't']\n          }), uniqueCol : ['grantee'], editable: false, group: 'security',\n          mode: ['edit', 'create'], canAdd: true, canDelete: true,\n          control: 'unique-col-collection', disabled: 'notInSchema'\n        },{\n          // Add Security Labels Control\n          id: 'seclabels', label: gettext('Security labels'),\n          model: pgBrowser.SecLabelModel, editable: false, type: 'collection',\n          canEdit: false, group: 'security', canDelete: true,\n          mode: ['edit', 'create'], canAdd: true, disabled: 'notInSchema',\n          control: 'unique-col-collection', uniqueCol : ['provider']\n        }],\n        validate: function() {\n          // Triggers specific error messages for fields\n          var err = {},\n            errmsg,\n            field_name = this.get('name'),\n            field_def = this.get('definition');\n          if (_.isUndefined(field_name) || _.isNull(field_name) ||\n            String(field_name).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['name'] = gettext('Please specify name.');\n            errmsg = errmsg || err['name'];\n            this.errorModel.set('name', errmsg);\n            return errmsg;\n          }else{\n            this.errorModel.unset('name');\n          }\n          if (_.isUndefined(field_def) || _.isNull(field_def) ||\n            String(field_def).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['definition'] = gettext('Please enter view definition.');\n            errmsg = errmsg || err['definition'];\n            this.errorModel.set('definition', errmsg);\n            return errmsg;\n          }else{\n            this.errorModel.unset('definition');\n          }\n          return null;\n        },\n        // We will disable everything if we are under catalog node\n        notInSchema: function() {\n          if(this.node_info && 'catalog' in this.node_info) {\n            return true;\n          }\n          return false;\n        }\n      }),\n\n      /**\n        Show or hide create view menu option on parent node\n        and hide for system view in catalogs.\n       */\n      canCreate: function(itemData, item, data) {\n\n        // If check is false then, we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n\n        // To iterate over tree to check parent node\n        while (i) {\n\n          // If it is schema then allow user to create view\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-view' == d._type) {\n\n            // Check if we are not child of view\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n            if( prev_d._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n\n        // by default we do not want to allow create menu\n        return true;\n\n      }\n  });\n  }\n\n  return pgBrowser.Nodes['view'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/views/static/js/view.js","define('pgadmin.node.mview', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.alertifyjs', 'pgadmin.browser', 'codemirror',\n  'pgadmin.browser.server.privilege'\n], function(gettext, url_for, $, _, S, pgAdmin, alertify, pgBrowser, CodeMirror) {\n\n  /**\n    Create and add a view collection into nodes\n    @param {variable} label - Label for Node\n    @param {variable} type - Type of Node\n    @param {variable} columns - List of columns to\n      display under under properties.\n   */\n  if (!pgBrowser.Nodes['coll-mview']) {\n    var mviews= pgBrowser.Nodes['coll-mview'] =\n      pgBrowser.Collection.extend({\n        node: 'mview',\n        label: gettext('Materialized Views'),\n        type: 'coll-mview',\n        columns: ['name', 'owner']\n      });\n  }\n\n  /**\n    Create and Add a View Node into nodes\n    @param {variable} parent_type - The list of nodes\n    under which this node to display\n    @param {variable} type - Type of Node\n    @param {variable} hasSQL - To show SQL tab\n    @param {variable} canDrop - Adds drop view option\n    in the context menu\n    @param {variable} canDropCascade - Adds drop Cascade\n    view option in the context menu\n   */\n  if (!pgBrowser.Nodes['mview']) {\n    pgBrowser.Nodes['mview'] = pgBrowser.Node.extend({\n      parent_type: ['schema', 'catalog'],\n      type: 'mview',\n      sqlAlterHelp: 'sql-altermaterializedview.html',\n      sqlCreateHelp: 'sql-creatematerializedview.html',\n      dialogHelp: url_for('help.static', {'filename': 'materialized_view_dialog.html'}),\n      label: gettext('Materialized View'),\n      hasSQL:  true,\n      hasDepends: true,\n      hasScriptTypes: ['create', 'select'],\n      collection_type: 'coll-mview',\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      Init: function() {\n\n        // Avoid mulitple registration of menus\n        if (this.initialized)\n          return;\n\n        this.initialized = true;\n\n        /**\n          Add \"create view\" menu option into context and object menu\n          for the following nodes:\n          coll-mview, view and schema.\n          @property {data} - Allow create view option on schema node or\n          system view nodes.\n         */\n        pgAdmin.Browser.add_menu_category(\n          'refresh_mview', gettext('Refresh View'), 18, 'fa fa-recycle');\n        pgBrowser.add_menus([{\n          name: 'create_mview_on_coll', node: 'coll-mview', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 1, icon: 'wcTabIcon icon-mview',\n          data: {action: 'create', check: true}, enable: 'canCreate',\n          label: gettext('Materialized View...')\n        },{\n          name: 'create_mview', node: 'mview', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 1, icon: 'wcTabIcon icon-mview',\n          data: {action: 'create', check: true}, enable: 'canCreate',\n          label: gettext('Materialized View...'),\n        },{\n          name: 'create_mview', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 18, icon: 'wcTabIcon icon-mview',\n          data: {action: 'create', check: false}, enable: 'canCreate',\n          label: gettext('Materialized View...')\n        },{\n          name: 'refresh_mview_data', node: 'mview', module: this,\n          priority: 1, callback: 'refresh_mview', category: 'refresh_mview',\n          applies: ['object', 'context'], label: gettext('With data'),\n          data: {concurrent: false, with_data: true}, icon: 'fa fa-recycle'\n        },{\n          name: 'refresh_mview_nodata', node: 'mview',\n          callback: 'refresh_mview', priority: 2, module: this,\n          category: 'refresh_mview', applies: ['object', 'context'],\n          label: gettext('With no data'), data: {\n            concurrent: false, with_data: false\n          }, icon: 'fa fa-refresh'\n        },{\n          name: 'refresh_mview_concurrent', node: 'mview', module: this,\n          category: 'refresh_mview', enable: 'is_version_supported',\n          data: {concurrent: true, with_data: true}, priority: 3,\n          applies: ['object', 'context'], callback: 'refresh_mview',\n          label: gettext('With data (concurrently)'), icon: 'fa fa-recycle'\n        },{\n          name: 'refresh_mview_concurrent_nodata', node: 'mview', module: this,\n          category: 'refresh_mview', enable: 'is_version_supported',\n          data: {concurrent: true, with_data: false}, priority: 4,\n          applies: ['object', 'context'], callback: 'refresh_mview',\n          label: gettext('With no data (concurrently)'),\n          icon: 'fa fa-refresh'\n        }]);\n      },\n\n      /**\n        Define model for the view node and specify the\n        properties of the model in schema.\n       */\n      model: pgBrowser.Node.Model.extend({\n        initialize: function(attrs, args) {\n          if (_.size(attrs) === 0) {\n            // Set Selected Schema and Current User\n            var schemaLabel = args.node_info.schema._label || 'public',\n                userInfo = pgBrowser.serverInfo[args.node_info.server._id].user;\n            this.set({\n              'schema': 'public', 'owner': userInfo.name\n            }, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n        },\n        defaults: {\n          spcname: undefined,\n          toast_autovacuum_enabled: false,\n          autovacuum_enabled: false\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', disabled: 'inSchema'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text', disabled: true, mode: ['properties']\n        },{\n          id: 'owner', label: gettext('Owner'), cell: 'string',\n          control: 'node-list-by-name', select2: { allowClear: false },\n          node: 'role', disabled: 'inSchema'\n        },{\n          id: 'schema', label: gettext('Schema'), cell: 'string', first_empty: false,\n          control: 'node-list-by-name', type: 'text', cache_level: 'database',\n          node: 'schema', mode: ['create', 'edit'], cache_node: 'database',\n          disabled: 'inSchema', select2: { allowClear: false }\n        },{\n          id: 'system_view', label: gettext('System view?'), cell: 'string',\n          type: 'switch', disabled: true, mode: ['properties'],\n        }, pgBrowser.SecurityGroupSchema, {\n          id: 'acl', label: gettext('Privileges'),\n          mode: ['properties'], type: 'text', group: gettext('Security')\n        },{\n          id: 'comment', label: gettext('Comment'), cell: 'string',\n          type: 'multiline'\n        },{\n          id: 'definition', label:'', cell: 'string',\n          type: 'text', mode: ['create', 'edit'], group: gettext('Definition'),\n          control: Backform.SqlFieldControl, extraClasses:['sql_field_width_full']\n        },{\n          id: 'with_data', label: gettext('With Data'),\n          group: gettext('Storage'), mode: ['edit', 'create'],\n          type: 'switch',\n        },{\n          id: 'spcname', label: gettext('Tablespace'), cell: 'string',\n          type: 'text', group: gettext('Storage'), first_empty: false,\n          control: 'node-list-by-name', node: 'tablespace', select2: { allowClear: false },\n          filter: function(m) {\n            if (m.label == \"pg_global\") return false;\n            else return true;\n          }\n        },{\n          id: 'fillfactor', label: gettext('Fill Factor'),\n          group: gettext('Storage'), mode: ['edit', 'create'],\n          type: 'int'\n        },{\n          type: 'nested', control: 'tab', id: 'materialization',\n          label: gettext('Parameter'), mode: ['edit', 'create'],\n          group: gettext('Parameter'),\n          schema: Backform.VacuumSettingsSchema\n        },{\n          // Add Privilege Control\n          id: 'datacl', label: gettext('Privileges'), type: 'collection',\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n            privileges: ['a', 'r', 'w', 'd', 'D', 'x', 't']\n          }), uniqueCol : ['grantee'], editable: false,\n          group: \"security\", canAdd: true, canDelete: true,\n          mode: ['edit', 'create'], control: 'unique-col-collection'\n        },{\n        // Add Security Labels Control\n          id: 'seclabels', label: gettext('Security Labels'),\n          model: pgBrowser.SecLabelModel, editable: false, type: 'collection',\n          canEdit: false, group: \"security\", canDelete: true,\n          mode: ['edit', 'create'], canAdd: true,\n          control: 'unique-col-collection', uniqueCol : ['provider']\n        }],\n        validate: function(keys) {\n\n          // Triggers specific error messages for fields\n          var err = {},\n            errmsg,\n            field_name = this.get('name'),\n            field_def = this.get('definition');\n          if (_.indexOf(keys, 'autovacuum_enabled') != -1 ||\n              _.indexOf(keys, 'toast_autovacuum_enabled') != -1 )\n              return null;\n\n          if (_.isUndefined(field_name) || _.isNull(field_name) ||\n            String(field_name).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['name'] = gettext('Please specify name.');\n            errmsg = errmsg || err['name'];\n            this.errorModel.set('name', errmsg);\n            return errmsg;\n          }else{\n            this.errorModel.unset('name');\n          }\n          if (_.isUndefined(field_def) || _.isNull(field_def) ||\n            String(field_def).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['definition'] = gettext('Please enter view definition.');\n            errmsg = errmsg || err['definition'];\n            this.errorModel.set('definition', errmsg);\n            return errmsg;\n          }else{\n            this.errorModel.unset('definition');\n          }\n          return null;\n        },\n        // We will disable everything if we are under catalog node\n        inSchema: function() {\n          if(this.node_info && 'catalog' in this.node_info)\n          {\n            return true;\n          }\n          return false;\n        }\n\n      }),\n\n      /**\n        Show or hide create view menu option on parent node\n        and hide for system view in catalogs.\n       */\n      canCreate: function(itemData, item, data) {\n\n        // If check is false then, we will allow create menu\n        if (data && data.check === false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData;\n\n        // To iterate over tree to check parent node\n        while (i) {\n\n          // If it is schema then allow user to create view\n          if (_.indexOf(['schema'], d._type) > -1)\n            return true;\n\n          if ('coll-mview' == d._type) {\n\n            // Check if we are not child of view\n            var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n            if( prev_d._type == 'catalog') {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n\n        // by default we do not want to allow create menu\n        return true;\n      },\n      refresh_mview: function(args) {\n          var input = args || {},\n              obj = this,\n              t = pgBrowser.tree,\n              i = input.item || t.selected(),\n              d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n        // Make ajax call to refresh mview data\n        $.ajax({\n          url: obj.generate_url(i, 'refresh_data' , d, true),\n          type: 'PUT',\n          data: {'concurrent': args.concurrent, 'with_data': args.with_data},\n          dataType: \"json\",\n          success: function(res) {\n            if (res.success == 1) {\n              alertify.success('View refreshed successfully');\n            }\n            else {\n              alertify.alert(\n                'Error refreshing view',\n                  res.data.result\n              );\n            }\n          },\n          error: function(e) {\n            var errmsg = $.parseJSON(e.responseText);\n            alertify.alert('Error refreshing view', errmsg.errormsg);\n          }\n        });\n\n      },\n      is_version_supported: function(data, item, args) {\n        var t = pgAdmin.Browser.tree,\n            i = item || t.selected(),\n            d = data || (i && i.length == 1 ? t.itemData(i): undefined),\n            node = this || (d && pgAdmin.Browser.Nodes[d._type]),\n            info = node.getTreeNodeHierarchy.apply(node, [i]),\n            version = info.server.version;\n\n        // disable refresh concurrently if server version is 9.3\n        return (version >= 90400);\n      }\n    });\n  }\n\n  return pgBrowser.Nodes['mview'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/views/static/js/mview.js","define('pgadmin.node.table', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'pgadmin.alertifyjs',\n  'pgadmin.browser.collection', 'pgadmin.node.column',\n  'pgadmin.node.constraints', 'pgadmin.browser.table.partition.utils'\n], function(\n  gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  if (!pgBrowser.Nodes['coll-table']) {\n    var databases = pgBrowser.Nodes['coll-table'] =\n      pgBrowser.Collection.extend({\n        node: 'table',\n        label: gettext('Tables'),\n        type: 'coll-table',\n        columns: ['name', 'relowner', 'is_partitioned', 'description'],\n        hasStatistics: true,\n        statsPrettifyFields: ['Size', 'Indexes size', 'Table size',\n                              'Toast table size', 'Tuple length',\n                              'Dead tuple length', 'Free space']\n      });\n  };\n\n  if (!pgBrowser.Nodes['table']) {\n    pgBrowser.Nodes['table'] = pgBrowser.Node.extend({\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      type: 'table',\n      label: gettext('Table'),\n      collection_type: 'coll-table',\n      hasSQL: true,\n      hasDepends: true,\n      hasStatistics: true,\n      statsPrettifyFields: ['Size', 'Indexes size', 'Table size',\n                            'Toast table size', 'Tuple length',\n                            'Dead tuple length', 'Free space'],\n      sqlAlterHelp: 'sql-altertable.html',\n      sqlCreateHelp: 'sql-createtable.html',\n      dialogHelp: url_for('help.static', {'filename': 'table_dialog.html'}),\n      parent_type: ['schema', 'catalog'],\n      hasScriptTypes: ['create', 'select', 'insert', 'update', 'delete'],\n      height: '95%',\n      width: '85%',\n      Init: function() {\n        /* Avoid multiple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_table_on_coll', node: 'coll-table', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 1, label: gettext('Table...'),\n          icon: 'wcTabIcon icon-table', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_table', node: 'table', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 1, label: gettext('Table...'),\n          icon: 'wcTabIcon icon-table', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_table__on_schema', node: 'schema', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Table...'),\n          icon: 'wcTabIcon icon-table', data: {action: 'create', check: false},\n          enable: 'canCreate'\n        },{\n          name: 'truncate_table', node: 'table', module: this,\n          applies: ['object', 'context'], callback: 'truncate_table',\n          category: 'Truncate', priority: 3, label: gettext('Truncate'),\n          icon: 'fa fa-eraser', enable : 'canCreate'\n        },{\n          name: 'truncate_table_cascade', node: 'table', module: this,\n          applies: ['object', 'context'], callback: 'truncate_table_cascade',\n          category: 'Truncate', priority: 3, label: gettext('Truncate Cascade'),\n          icon: 'fa fa-eraser', enable : 'canCreate'\n        },{\n          // To enable/disable all triggers for the table\n          name: 'enable_all_triggers', node: 'table', module: this,\n          applies: ['object', 'context'], callback: 'enable_triggers_on_table',\n          category: 'Trigger(s)', priority: 4, label: gettext('Enable All'),\n          icon: 'fa fa-check', enable : 'canCreate_with_trigger_enable'\n        },{\n          name: 'disable_all_triggers', node: 'table', module: this,\n          applies: ['object', 'context'], callback: 'disable_triggers_on_table',\n          category: 'Trigger(s)', priority: 4, label: gettext('Disable All'),\n          icon: 'fa fa-times', enable : 'canCreate_with_trigger_disable'\n        },{\n          name: 'reset_table_stats', node: 'table', module: this,\n          applies: ['object', 'context'], callback: 'reset_table_stats',\n          category: 'Reset', priority: 4, label: gettext('Reset Statistics'),\n          icon: 'fa fa-bar-chart', enable : 'canCreate'\n        }\n        ]);\n        pgBrowser.Events.on(\n          'pgadmin:browser:node:table:updated', this.onTableUpdated, this\n        );\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      callbacks: {\n        /* Enable trigger(s) on table */\n        enable_triggers_on_table: function(args) {\n            var params = {'enable': true };\n            this.callbacks.set_triggers.apply(this, [args, params]);\n        },\n        /* Disable trigger(s) on table */\n        disable_triggers_on_table: function(args) {\n            var params = {'enable': false };\n            this.callbacks.set_triggers.apply(this, [args, params]);\n        },\n        set_triggers: function(args, params) {\n          // This function will send request to enable or\n          // disable triggers on table level\n          var input = args || {},\n          obj = this,\n          t = pgBrowser.tree,\n          i = input.item || t.selected(),\n          d = i && i.length == 1 ? t.itemData(i) : undefined;\n          if (!d)\n            return false;\n\n          $.ajax({\n            url: obj.generate_url(i, 'set_trigger' , d, true),\n            type:'PUT',\n            data: params,\n            dataType: \"json\",\n            success: function(res) {\n              if (res.success == 1) {\n                alertify.success(res.info);\n                t.unload(i);\n                t.setInode(i);\n                t.deselect(i);\n                setTimeout(function() {\n                  t.select(i);\n                }, 10);\n              }\n            },\n            error: function(xhr, status, error) {\n              try {\n                var err = $.parseJSON(xhr.responseText);\n                if (err.success == 0) {\n                  alertify.error(err.errormsg);\n                }\n              } catch (e) {}\n              t.unload(i);\n            }\n          });\n        },\n        /* Truncate table */\n        truncate_table: function(args) {\n            var params = {'cascade': false };\n            this.callbacks.truncate.apply(this, [args, params]);\n        },\n        /* Truncate table with cascade */\n        truncate_table_cascade: function(args) {\n            var params = {'cascade': true };\n            this.callbacks.truncate.apply(this, [args, params]);\n        },\n        truncate: function(args, params) {\n          var input = args || {},\n          obj = this,\n          t = pgBrowser.tree,\n          i = input.item || t.selected(),\n          d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          alertify.confirm(\n            gettext('Truncate Table'),\n            S(gettext('Are you sure you want to truncate table %s?')).sprintf(d.label).value(),\n            function (e) {\n            if (e) {\n              var data = d;\n              $.ajax({\n                url: obj.generate_url(i, 'truncate' , d, true),\n                type:'PUT',\n                data: params,\n                dataType: \"json\",\n                success: function(res) {\n                  if (res.success == 1) {\n                    alertify.success(res.info);\n                    t.removeIcon(i);\n                    data.icon = data.is_partitioned ? 'icon-partition': 'icon-table';\n                    t.addIcon(i, {icon: data.icon});\n                    t.unload(i);\n                    t.setInode(i);\n                    t.deselect(i);\n                    // Fetch updated data from server\n                    setTimeout(function() {\n                      t.select(i);\n                    }, 10);\n                  }\n                },\n                error: function(xhr, status, error) {\n                  try {\n                    var err = $.parseJSON(xhr.responseText);\n                    if (err.success == 0) {\n                      alertify.error(err.errormsg);\n                    }\n                  } catch (e) {}\n                  t.unload(i);\n                }\n              });\n            }\n          }, function() {}\n        );\n       },\n       reset_table_stats: function(args) {\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          alertify.confirm(\n            gettext('Reset statistics'),\n            S(gettext('Are you sure you want to reset the statistics for table %s?')).sprintf(d._label).value(),\n            function (e) {\n              if (e) {\n                var data = d;\n                $.ajax({\n                  url: obj.generate_url(i, 'reset' , d, true),\n                  type:'DELETE',\n                  success: function(res) {\n                    if (res.success == 1) {\n                      alertify.success(res.info);\n                      t.removeIcon(i);\n                      data.icon = data.is_partitioned ? 'icon-partition': 'icon-table';\n                      t.addIcon(i, {icon: data.icon});\n                      t.unload(i);\n                      t.setInode(i);\n                      t.deselect(i);\n                      // Fetch updated data from server\n                      setTimeout(function() {\n                        t.select(i);\n                      }, 10);\n                    }\n                  },\n                  error: function(xhr, status, error) {\n                    try {\n                      var err = $.parseJSON(xhr.responseText);\n                      if (err.success == 0) {\n                        alertify.error(err.errormsg);\n                      }\n                    } catch (e) {}\n                    t.unload(i);\n                  }\n                });\n              }\n            },\n            function() {}\n          );\n       }\n      },\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          spcoid: undefined,\n          spcname: undefined,\n          relowner: undefined,\n          relacl: undefined,\n          relhasoids: undefined,\n          relhassubclass: undefined,\n          reltuples: undefined,\n          description: undefined,\n          conname: undefined,\n          conkey: undefined,\n          isrepl: undefined,\n          triggercount: undefined,\n          relpersistence: undefined,\n          fillfactor: undefined,\n          reloftype: undefined,\n          typname: undefined,\n          labels: undefined,\n          providers: undefined,\n          is_sys_table: undefined,\n          coll_inherits: [],\n          hastoasttable: true,\n          toast_autovacuum_enabled: false,\n          autovacuum_enabled: false,\n          primary_key: [],\n          partitions: [],\n          partition_type: 'range',\n          is_partitioned: false\n        },\n        // Default values!\n        initialize: function(attrs, args) {\n          var self = this;\n\n          if (_.size(attrs) === 0) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user,\n                schemaInfo = args.node_info.schema;\n\n            this.set({\n              'relowner': userInfo.name, 'schema': schemaInfo._label\n            }, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), type: 'text',\n          mode: ['properties', 'create', 'edit'], disabled: 'inSchema'\n        },{\n          id: 'oid', label: gettext('OID'), type: 'text', mode: ['properties']\n        },{\n          id: 'relowner', label: gettext('Owner'), type: 'text', node: 'role',\n          mode: ['properties', 'create', 'edit'], select2: {allowClear: false},\n          disabled: 'inSchema', control: 'node-list-by-name'\n        },{\n          id: 'schema', label: gettext('Schema'), type: 'text', node: 'schema',\n          control: 'node-list-by-name', mode: ['create', 'edit'],\n          disabled: 'inSchema', filter: function(d) {\n            // If schema name start with pg_* then we need to exclude them\n            if(d && d.label.match(/^pg_/))\n            {\n              return false;\n            }\n            return true;\n          }, cache_node: 'database', cache_level: 'database'\n        },{\n          id: 'spcname', label: gettext('Tablespace'), node: 'tablespace',\n          type: 'text', control: 'node-list-by-name', disabled: 'inSchema',\n          mode: ['properties', 'create', 'edit'],\n          filter: function(d) {\n            // If tablespace name is not \"pg_global\" then we need to exclude them\n            return (!(d && d.label.match(/pg_global/)))\n          }\n        },{\n          id: 'partition', type: 'group', label: gettext('Partition'),\n          mode: ['edit', 'create'], min_version: 100000,\n          visible: function(m) {\n            // Always show in case of create mode\n            if (m.isNew() || m.get('is_partitioned'))\n              return true;\n            return false;\n          }\n        },{\n          id: 'is_partitioned', label:gettext('Partitioned Table?'), cell: 'switch',\n          type: 'switch', mode: ['properties', 'create', 'edit'],\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          },\n          disabled: function(m) {\n            if (!m.isNew())\n              return true;\n            return false;\n          }\n        },{\n          id: 'description', label: gettext('Comment'), type: 'multiline',\n          mode: ['properties', 'create', 'edit'], disabled: 'inSchema'\n        },{\n          id: 'coll_inherits', label: gettext('Inherited from table(s)'),\n          url: 'get_inherits', type: 'array', group: gettext('Columns'),\n          disabled: 'checkInheritance', deps: ['typname', 'is_partitioned'],\n          mode: ['create', 'edit'],\n          select2: { multiple: true, allowClear: true,\n          placeholder: gettext('Select to inherit from...')},\n          transform: function(data, cell) {\n            var control = cell || this,\n              m = control.model;\n              m.inherited_tables_list = data;\n              return data;\n          },\n          control: Backform.MultiSelectAjaxControl.extend({\n            // When changes we need to add/clear columns collection\n            onChange: function() {\n              Backform.MultiSelectAjaxControl.prototype.onChange.apply(this, arguments);\n              var self = this,\n              // current table list and previous table list\n              cTbl_list = self.model.get('coll_inherits') || [],\n              pTbl_list = self.model.previous('coll_inherits') || [];\n\n              if (!_.isUndefined(cTbl_list)) {\n                var tbl_name = undefined,\n                  tid = undefined;\n\n                // Add columns logic\n                // If new table is added in list\n                if(cTbl_list.length > 1 && cTbl_list.length > pTbl_list.length) {\n                  // Find newly added table from current list\n                  tbl_name = _.difference(cTbl_list, pTbl_list);\n                  tid = this.get_table_oid(tbl_name[0]);\n                  this.add_columns(tid);\n                } else if (cTbl_list.length == 1) {\n                  // First table added\n                  tid = this.get_table_oid(cTbl_list[0]);\n                  this.add_columns(tid);\n                }\n\n                // Remove columns logic\n                if(cTbl_list.length > 0 && cTbl_list.length < pTbl_list.length) {\n                  // Find deleted table from previous list\n                  tbl_name = _.difference(pTbl_list, cTbl_list);\n                  this.remove_columns(tbl_name[0]);\n                } else if (pTbl_list.length === 1 && cTbl_list.length < 1) {\n                  // We got last table from list\n                  tbl_name = pTbl_list[0];\n                  this.remove_columns(tbl_name);\n                }\n\n              }\n            },\n            add_columns: function(tid) {\n              // Create copy of old model if anything goes wrong at-least we have backup\n              // Then send AJAX request to fetch table specific columns\n              var self = this,\n                url = 'get_columns',\n                m = self.model.top || self.model,\n                data = undefined,\n                old_columns = _.clone(m.get('columns')),\n                column_collection = m.get('columns');\n\n              var arg = {'tid': tid}\n              data = self.model.fetch_columns_ajax.apply(self, [arg]);\n\n              // Update existing column collection\n              column_collection.set(data, { merge:false,remove:false });\n            },\n            remove_columns: function(tblname) {\n              // Remove all the column models for deleted table\n              var tid = this.get_table_oid(tblname),\n                column_collection = this.model.get('columns');\n              column_collection.remove(column_collection.where({'inheritedid': tid }));\n            },\n            get_table_oid: function(tblname) {\n              // Here we will fetch the table oid from table name\n              var tbl_oid = undefined;\n              // iterate over list to find table oid\n              _.each(this.model.inherited_tables_list, function(obj) {\n                  if(obj.label === tblname) {\n                    tbl_oid = obj.tid;\n                  }\n              });\n              return tbl_oid;\n            }\n          })\n        },{\n          id: 'coll_inherits', label: gettext('Inherited from table(s)'),\n          type: 'text', group: gettext('Advanced'), mode: ['properties']\n        },{\n          id: 'inherited_tables_cnt', label: gettext('Inherited tables count'),\n          type: 'text', mode: ['properties'], group: gettext('Advanced'),\n          disabled: 'inSchema'\n        },{\n          // Tab control for columns\n          id: 'columns', label: gettext('Columns'), type: 'collection',\n          group: gettext('Columns'),\n          model: pgBrowser.Nodes['column'].model,\n          subnode: pgBrowser.Nodes['column'].model,\n          mode: ['create', 'edit'],\n          disabled: function(m) {\n            // In case of partitioned table remove inherited columns\n            if (m.isNew() && m.get('is_partitioned')) {\n              setTimeout(function() {\n                var coll = m.get('columns');\n                coll.remove(coll.filter(function(model) {\n                  if (_.isUndefined(model.get('inheritedfrom')))\n                    return false;\n                  return true;\n                }));\n              }, 10);\n            }\n\n            if(this.node_info &&  'catalog' in this.node_info)\n            {\n              return true;\n            }\n            return false;\n          },\n          deps: ['typname', 'is_partitioned'],\n          canAdd: 'check_grid_add_condition',\n          canEdit: true, canDelete: true,\n          // For each row edit/delete button enable/disable\n          canEditRow: 'check_grid_row_edit_delete',\n          canDeleteRow: 'check_grid_row_edit_delete',\n          uniqueCol : ['name'],\n          columns : ['name' , 'cltype', 'attlen', 'attprecision', 'attnotnull', 'is_primary_key'],\n          control: Backform.UniqueColCollectionControl.extend({\n            initialize: function() {\n              Backform.UniqueColCollectionControl.prototype.initialize.apply(this, arguments);\n              var self = this,\n                  collection = self.model.get(self.field.get('name'));\n\n              collection.on(\"change:is_primary_key\", function(m) {\n                var primary_key_coll = self.model.get('primary_key'),\n                    column_name = m.get('name'),\n                    primary_key;\n\n                if(m.get('is_primary_key')) {\n                // Add column to primary key.\n                  if (primary_key_coll.length < 1) {\n                    primary_key = new (primary_key_coll.model)({}, {\n                      top: self.model,\n                      collection: primary_key_coll,\n                      handler: primary_key_coll\n                    });\n                    primary_key_coll.add(primary_key);\n                  } else {\n                    primary_key = primary_key_coll.first();\n                  }\n                  // Do not alter existing primary key columns.\n                  if (_.isUndefined(primary_key.get('oid'))) {\n                    var primary_key_column_coll = primary_key.get('columns'),\n                      primary_key_column_exist = primary_key_column_coll.where({column:column_name});\n\n                    if (primary_key_column_exist.length == 0) {\n                      var primary_key_column = new (primary_key_column_coll.model)(\n                          {column: column_name}, { silent: true,\n                          top: self.model,\n                          collection: primary_key_coll,\n                          handler: primary_key_coll\n                        });\n\n                      primary_key_column_coll.add(primary_key_column);\n                    }\n\n                    primary_key_column_coll.trigger('pgadmin:multicolumn:updated', primary_key_column_coll);\n                  }\n\n                } else {\n                // remove column from primary key.\n                  if (primary_key_coll.length > 0) {\n                    var primary_key = primary_key_coll.first();\n                    // Do not alter existing primary key columns.\n                    if (!_.isUndefined(primary_key.get('oid'))) {\n                      return;\n                    }\n\n                    var  primary_key_column_coll = primary_key.get('columns'),\n                        removedCols = primary_key_column_coll.where({column:column_name});\n                    if (removedCols.length > 0) {\n                      primary_key_column_coll.remove(removedCols);\n                      _.each(removedCols, function(m) {\n                        m.destroy();\n                      })\n                      if (primary_key_column_coll.length == 0) {\n                        setTimeout(function () {\n                          // There will be only on primary key so remove the first one.\n                          primary_key_coll.remove(primary_key_coll.first());\n                          /* Ideally above line of code should be \"primary_key_coll.reset()\".\n                           * But our custom DataCollection (extended from Backbone collection in datamodel.js)\n                           * does not respond to reset event, it only supports add, remove, change events.\n                           * And hence no custom event listeners/validators get called for reset event.\n                           */\n                        }, 10);\n                      }\n                    }\n                    primary_key_column_coll.trigger('pgadmin:multicolumn:updated', primary_key_column_coll);\n                  }\n                }\n              })\n            },\n            remove: function() {\n              var collection = this.model.get(this.field.get('name'));\n              if (collection) {\n                collection.off(\"change:is_primary_key\");\n              }\n\n              Backform.UniqueColCollectionControl.prototype.remove.apply(this, arguments);\n            }\n          }),\n          allowMultipleEmptyRow: false\n        },{\n          // Here we will create tab control for constraints\n          type: 'nested', control: 'tab', group: gettext('Constraints'),\n          mode: ['edit', 'create'],\n          schema: [{\n              id: 'primary_key', label: gettext('Primary key'),\n              model: pgBrowser.Nodes['primary_key'].model,\n              subnode: pgBrowser.Nodes['primary_key'].model,\n              editable: false, type: 'collection',\n              group: gettext('Primary Key'), mode: ['edit', 'create'],\n              canEdit: true, canDelete: true, deps:['is_partitioned'],\n              control: 'unique-col-collection',\n              columns : ['name', 'columns'],\n              canAdd: function(m) {\n                if (m.get('is_partitioned')) {\n                  setTimeout(function() {\n                    var coll = m.get('primary_key');\n                    coll.remove(coll.filter(function(model) {\n                      return true;\n                    }));\n                  }, 10);\n                  return false;\n                }\n\n                return true;\n              },\n              canAddRow: function(m) {\n               // User can only add one primary key\n               var columns = m.get('columns');\n\n               return (m.get('primary_key') &&\n                        m.get('primary_key').length < 1 &&\n                        _.some(columns.pluck('name')));\n              }\n            },{\n              id: 'foreign_key', label: gettext('Foreign key'),\n              model: pgBrowser.Nodes['foreign_key'].model,\n              subnode: pgBrowser.Nodes['foreign_key'].model,\n              editable: false, type: 'collection',\n              group: gettext('Foreign Key'), mode: ['edit', 'create'],\n              canEdit: true, canDelete: true, deps:['is_partitioned'],\n              control: 'unique-col-collection',\n              canAdd: function(m) {\n                if (m.get('is_partitioned')) {\n                  setTimeout(function() {\n                    var coll = m.get('foreign_key');\n                    coll.remove(coll.filter(function(model) {\n                      return true;\n                    }));\n                  }, 10);\n                  return false;\n                }\n\n                return true;\n              },\n              columns : ['name', 'columns'],\n              canAddRow: function(m) {\n               // User can only add if there is at least one column with name.\n               var columns = m.get('columns');\n               return _.some(columns.pluck('name'));\n              }\n            },{\n              id: 'check_constraint', label: gettext('Check constraint'),\n              model: pgBrowser.Nodes['check_constraints'].model,\n              subnode: pgBrowser.Nodes['check_constraints'].model,\n              editable: false, type: 'collection',\n              group: gettext('Check'), mode: ['edit', 'create'],\n              canEdit: true, canDelete: true, deps:['is_partitioned'],\n              control: 'unique-col-collection',\n              canAdd: true,\n              columns : ['name', 'consrc']\n            },{\n              id: 'unique_constraint', label: gettext('Unique Constraint'),\n              model: pgBrowser.Nodes['unique_constraint'].model,\n              subnode: pgBrowser.Nodes['unique_constraint'].model,\n              editable: false, type: 'collection',\n              group: gettext('Unique'), mode: ['edit', 'create'],\n              canEdit: true, canDelete: true, deps:['is_partitioned'],\n              control: 'unique-col-collection',\n              columns : ['name', 'columns'],\n              canAdd: function(m) {\n                if (m.get('is_partitioned')) {\n                  setTimeout(function() {\n                    var coll = m.get('unique_constraint');\n                    coll.remove(coll.filter(function(model) {\n                      return true;\n                    }));\n                  }, 10);\n                  return false;\n                }\n\n                return true;\n              },\n              canAddRow: function(m) {\n               // User can only add if there is at least one column with name.\n               var columns = m.get('columns');\n               return _.some(columns.pluck('name'));\n              }\n            },{\n              id: 'exclude_constraint', label: gettext('Exclude constraint'),\n              model: pgBrowser.Nodes['exclusion_constraint'].model,\n              subnode: pgBrowser.Nodes['exclusion_constraint'].model,\n              editable: false, type: 'collection',\n              group: gettext('Exclude'), mode: ['edit', 'create'],\n              canEdit: true, canDelete: true, deps:['is_partitioned'],\n              control: 'unique-col-collection',\n              columns : ['name', 'columns', 'constraint'],\n              canAdd: function(m) {\n                if (m.get('is_partitioned')) {\n                  setTimeout(function() {\n                    var coll = m.get('exclude_constraint');\n                    coll.remove(coll.filter(function(model) {\n                      return true;\n                    }));\n                  }, 10);\n                  return false;\n                }\n\n                return true;\n              },\n              canAddRow: function(m) {\n               // User can only add if there is at least one column with name.\n               var columns = m.get('columns');\n               return _.some(columns.pluck('name'));\n              }\n          }]\n        },{\n          id: 'typname', label: gettext('Of type'), type: 'text',\n          mode: ['properties', 'create', 'edit'],\n          disabled: 'checkOfType', url: 'get_oftype', group: gettext('Advanced'),\n          deps: ['coll_inherits'], transform: function(data, cell) {\n            var control = cell || this,\n              m = control.model;\n              m.of_types_tables = data;\n              return data;\n          },\n          control: Backform.NodeAjaxOptionsControl.extend({\n              // When of_types changes we need to clear columns collection\n              onChange: function() {\n                Backform.NodeAjaxOptionsControl.prototype.onChange.apply(this, arguments);\n                var self = this,\n                  tbl_oid = undefined,\n                  tbl_name = self.model.get('typname'),\n                  data = undefined,\n                  arg = undefined,\n                  column_collection = self.model.get('columns');\n\n                if (!_.isUndefined(tbl_name) && !_.isNull(tbl_name) &&\n                    tbl_name !== '' && column_collection.length !== 0) {\n                  var title = gettext('Remove column definitions?'),\n                      msg = gettext('Changing \\'Of type\\' will remove column definitions.');\n\n                  alertify.confirm(title, msg, function (e) {\n                      // User clicks Ok, lets clear columns collection\n                      column_collection.remove(\n                        column_collection.filter(function(model) {\n                          return true;\n                          }\n                        )\n                      );\n                    },\n                    function() {\n                      setTimeout(function() {\n                        self.model.set('typname', null);\n                      }, 10)\n                    }\n                  );\n                } else if (!_.isUndefined(tbl_name) && tbl_name === '') {\n                  column_collection.remove(\n                    column_collection.filter(function(model) {\n                      return true;\n                      }\n                    )\n                  );\n                }\n\n                // Run Ajax now to fetch columns\n                if (!_.isUndefined(tbl_name) && tbl_name !== '') {\n                  arg = { 'tname': tbl_name }\n                  data = self.model.fetch_columns_ajax.apply(self, [arg]);\n                  // Add into column collection\n                  column_collection.set(data, { merge:false,remove:false });\n                }\n              }\n            })\n        },{\n          id: 'fillfactor', label: gettext('Fill factor'), type: 'int',\n          mode: ['create', 'edit'], min: 10, max: 100,\n          disabled: 'inSchema',group: gettext('Advanced')\n        },{\n          id: 'relhasoids', label: gettext('Has OIDs?'), cell: 'switch',\n          type: 'switch', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchema', group: gettext('Advanced')\n        },{\n          id: 'relpersistence', label: gettext('Unlogged?'), cell: 'switch',\n          type: 'switch', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchemaWithModelCheck',\n          group: gettext('Advanced')\n        },{\n          id: 'conname', label: gettext('Primary key'), cell: 'string',\n          type: 'text', mode: ['properties'], group: gettext('Advanced'),\n          disabled: 'inSchema'\n        },{\n          id: 'reltuples', label: gettext('Rows (estimated)'), cell: 'string',\n          type: 'text', mode: ['properties'], group: gettext('Advanced'),\n          disabled: 'inSchema'\n        },{\n          id: 'rows_cnt', label: gettext('Rows (counted)'), cell: 'string',\n          type: 'text', mode: ['properties'], group: gettext('Advanced'),\n          disabled: 'inSchema'\n        },{\n          id: 'relhassubclass', label: gettext('Inherits tables?'), cell: 'switch',\n          type: 'switch', mode: ['properties'], group: gettext('Advanced'),\n          disabled: 'inSchema'\n        },{\n          id: 'is_sys_table', label: gettext('System table?'), cell: 'switch',\n          type: 'switch', mode: ['properties'],\n          disabled: 'inSchema'\n        },{\n          type: 'nested', control: 'fieldset', label: gettext('Like'),\n          group: gettext('Advanced'),\n          schema:[{\n            id: 'like_relation', label: gettext('Relation'),\n            type: 'text', mode: ['create', 'edit'], deps: ['typname'],\n            control: 'node-ajax-options', url: 'get_relations',\n            disabled: 'isLikeDisable', group: gettext('Like')\n          },{\n            id: 'like_default_value', label: gettext('With default values?'),\n            type: 'switch', mode: ['create', 'edit'], deps: ['typname'],\n            disabled: 'isLikeDisable', group: gettext('Like')\n          },{\n            id: 'like_constraints', label: gettext('With constraints?'),\n            type: 'switch', mode: ['create', 'edit'], deps: ['typname'],\n            disabled: 'isLikeDisable', group: gettext('Like')\n          },{\n            id: 'like_indexes', label: gettext('With indexes?'),\n            type: 'switch', mode: ['create', 'edit'], deps: ['typname'],\n            disabled: 'isLikeDisable', group: gettext('Like')\n          },{\n            id: 'like_storage', label: gettext('With storage?'),\n            type: 'switch', mode: ['create', 'edit'], deps: ['typname'],\n            disabled: 'isLikeDisable', group: gettext('Like')\n          },{\n            id: 'like_comments', label: gettext('With comments?'),\n            type: 'switch', mode: ['create', 'edit'], deps: ['typname'],\n            disabled: 'isLikeDisable', group: gettext('Like')\n          }]\n        },{\n          id: 'partition_type', label:gettext('Partition Type'),\n          editable: false, type: 'select2', select2: {allowClear: false},\n          group: 'partition', deps: ['is_partitioned'],\n          options:[{\n            label: 'Range', value: 'range'\n          },{\n            label: 'List', value: 'list'\n          }],\n          mode:['create'],\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          },\n          disabled: function(m) {\n            if (!m.isNew() || !m.get('is_partitioned'))\n              return true;\n            return false;\n          }\n        },{\n          id: 'partition_keys', label:gettext('Partition Keys'),\n          model: Backform.PartitionKeyModel,\n          subnode: Backform.PartitionKeyModel,\n          editable: true, type: 'collection',\n          group: 'partition', mode: ['create'],\n          deps: ['is_partitioned', 'partition_type', 'typname'],\n          canEdit: false, canDelete: true,\n          control: 'sub-node-collection',\n          canAdd: function(m) {\n            if (m.isNew() && m.get('is_partitioned'))\n              return true;\n            return false;\n          },\n          canAddRow: function(m) {\n            var columns = m.get('columns'),\n                typename = m.get('typname'),\n                columns_exist= false;\n\n            var max_row_count = 1000;\n            if (m.get('partition_type') && m.get('partition_type') == 'list')\n              max_row_count = 1;\n\n            /* If columns are not specified by the user then it may be\n             * possible that he/she selected 'OF TYPE', so we should check\n             * for that as well.\n             */\n            if (columns.length <= 0 && !_.isUndefined(typename)\n              && !_.isNull(typename) && m.of_types_tables.length > 0){\n              _.each(m.of_types_tables, function(data) {\n                if (data.label == typename && data.oftype_columns.length > 0){\n                  columns_exist = true;\n                }\n              });\n            } else if (columns.length > 0) {\n              columns_exist = _.some(columns.pluck('name'));\n            }\n\n            return (m.get('partition_keys') &&\n                m.get('partition_keys').length < max_row_count && columns_exist\n            );\n\n          },\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          },\n          disabled: function(m) {\n            if (m.get('partition_keys') && m.get('partition_keys').models.length > 0) {\n              setTimeout(function () {\n                var coll = m.get('partition_keys');\n                coll.remove(coll.filter(function(model) {\n                  return true;\n                }));\n              }, 10);\n            }\n          }\n        },{\n          id: 'partition_scheme', label: gettext('Partition Scheme'),\n          type: 'note', group: 'partition', mode: ['edit'],\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          },\n          disabled: function(m) {\n            if (!m.isNew()) {\n              this.text = m.get('partition_scheme');\n            }\n          }\n        },{\n          id: 'partition_key_note', label: gettext('Partition Keys'),\n          type: 'note', group: 'partition', mode: ['create'],\n          text: [\n            '<br>&nbsp;&nbsp;',\n            gettext('Partition table supports two types of keys:'),\n            '<br><ul><li>',\n            gettext('Column: User can select any column from the list of available columns.'),\n            '</li><li>',\n            gettext('Expression: User can specify expression to create partition key.'),\n            '<br><p>',\n            gettext('Example'),\n            ':',\n            gettext(\"Let's say, we want to create a partition table based per year for the column 'saledate', having datatype 'date/timestamp', then we need to specify the expression as 'extract(YEAR from saledate)' as partition key.\"),\n            '</p></li></ul>'\n          ].join(''),\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          }\n        }, {\n          id: 'partitions', label:gettext('Partitions'),\n          model: Backform.PartitionsModel,\n          subnode: Backform.PartitionsModel,\n          editable: true, type: 'collection',\n          group: 'partition', mode: ['edit', 'create'],\n          deps: ['is_partitioned', 'partition_type', 'typname'],\n          canEdit: false, canDelete: true,\n          customDeleteTitle: gettext('Detach Partition'),\n          customDeleteMsg: gettext('Are you sure you wish to detach this partition?'),\n          columns:['is_attach', 'partition_name', 'values_from', 'values_to', 'values_in'],\n          control: Backform.SubNodeCollectionControl.extend({\n            row: Backgrid.PartitionRow,\n            initialize: function() {\n              Backform.SubNodeCollectionControl.prototype.initialize.apply(this, arguments);\n              var self = this;\n              if (!this.model.isNew()) {\n                var node = this.field.get('schema_node'),\n                    node_info = this.field.get('node_info');\n\n                // Make ajax call to get the tables to be attached\n                $.ajax({\n                  url: node.generate_url.apply(\n                      node, [\n                        null, 'get_attach_tables', this.field.get('node_data'),\n                        true, node_info\n                      ]),\n\n                  type: 'GET',\n                  async: false,\n                  success: function(res) {\n                    if (res.success == 1) {\n                      self.model.table_options = res.data;\n                    }\n                    else {\n                      alertify.alert(\n                        'Error fetching tables to be attached', res.data.result\n                      );\n                    }\n                  },\n                  error: function(e) {\n                    var errmsg = $.parseJSON(e.responseText);\n                    alertify.alert('Error fetching tables to be attached.', errmsg.errormsg);\n                  }\n                });\n              }\n            }\n          }\n          ),\n          canAdd: function(m) {\n            if (m.get('is_partitioned'))\n              return true;\n            return false;\n          },\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          },\n          disabled: function(m) {\n            if (m.isNew() && m.get('partitions') && m.get('partitions').models.length > 0) {\n              setTimeout(function () {\n                var coll = m.get('partitions');\n                coll.remove(coll.filter(function(model) {\n                  return true;\n                }));\n              }, 10);\n            }\n          }\n        },{\n          id: 'partition_note', label: gettext('Partitions'),\n          type: 'note', group: 'partition',\n          text: [\n            '<ul>',\n            ' <li>',\n            gettext('Create a table: User can create multiple partitions while creating new partitioned table. Operation switch is disabled in this scenario.'),\n            '</li><li>',\n            gettext('Edit existing table: User can create/attach/detach multiple partitions. In attach operation user can select table from the list of suitable tables to be attached.'),\n            '</li><li>',\n            gettext('From/To/In input: Values for these fields must be quoted with single quote. For more than one partition key values must be comma(,) separated.'),\n            '<br>',\n            gettext('Example'),\n            ':<ul><li>',\n            gettext(\"From/To: Enabled for range partition. Consider partitioned table with multiple keys of type Integer, then values should be specified like '100','200'.\"),\n            '</li><li> ',\n            gettext('In: Enabled for list partition. Values must be comma(,) separated and quoted with single quote.'),\n            '</li></ul></li></ul>'\n          ].join(''),\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          }\n        },{\n          // Here - we will create tab control for storage parameters\n          // (auto vacuum).\n          type: 'nested', control: 'tab', group: gettext('Parameter'),\n          mode: ['edit', 'create'], deps: ['is_partitioned'],\n          schema: Backform.VacuumSettingsSchema\n        },{\n          id: 'relacl_str', label: gettext('Privileges'), disabled: 'inSchema',\n          type: 'text', mode: ['properties'], group: gettext('Security')\n        }, pgBrowser.SecurityGroupSchema,{\n          id: 'relacl', label: gettext('Privileges'), type: 'collection',\n          group: 'security', control: 'unique-col-collection',\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n          privileges: ['a','r','w','d','D','x','t']}),\n          mode: ['edit', 'create'], canAdd: true, canDelete: true,\n          uniqueCol : ['grantee']\n        },{\n          id: 'seclabels', label: gettext('Security labels'), canEdit: false,\n          model: pgBrowser.SecLabelModel, editable: false, canAdd: true,\n          type: 'collection', min_version: 90100, mode: ['edit', 'create'],\n          group: 'security', canDelete: true, control: 'unique-col-collection'\n        },{\n          id: 'vacuum_settings_str', label: gettext('Storage settings'),\n          type: 'multiline', group: gettext('Advanced'), mode: ['properties']\n        }],\n        validate: function(keys) {\n          var err = {},\n              changedAttrs = this.changed,\n              msg = undefined,\n              name = this.get('name'),\n              schema = this.get('schema'),\n              relowner = this.get('relowner'),\n              is_partitioned = this.get('is_partitioned'),\n              partition_keys = this.get('partition_keys');\n\n          if (\n            _.isUndefined(name) || _.isNull(name) ||\n            String(name).replace(/^\\s+|\\s+$/g, '') == ''\n          ) {\n            msg = gettext('Table name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n          this.errorModel.unset('name');\n          if (\n            _.isUndefined(schema) || _.isNull(schema) ||\n            String(schema).replace(/^\\s+|\\s+$/g, '') == ''\n          ) {\n            msg = gettext('Table schema cannot be empty.');\n            this.errorModel.set('schema', msg);\n            return msg;\n          }\n          this.errorModel.unset('schema');\n          if (\n            _.isUndefined(relowner) || _.isNull(relowner) ||\n            String(relowner).replace(/^\\s+|\\s+$/g, '') == ''\n          ) {\n            msg = gettext('Table owner cannot be empty.');\n            this.errorModel.set('relowner', msg);\n            return msg;\n          }\n          this.errorModel.unset('relowner');\n          if (\n            is_partitioned && this.isNew() &&\n            !_.isNull(partition_keys) && partition_keys.length <= 0\n          ) {\n            msg = gettext('Please specify at least one key for partitioned table.');\n            this.errorModel.set('partition_keys', msg);\n            return msg;\n          }\n          this.errorModel.unset('partition_keys');\n          return null;\n        },\n        // We will disable everything if we are under catalog node\n        inSchema: function() {\n          if(this.node_info &&  'catalog' in this.node_info)\n          {\n            return true;\n          }\n          return false;\n        },\n        isInheritedTable: function(m) {\n          if(!m.inSchema.apply(this, [m])) {\n            if(\n              (!_.isUndefined(m.get('coll_inherits')) && m.get('coll_inherits').length != 0)\n                ||\n                  (!_.isUndefined(m.get('typname')) && String(m.get('typname')).replace(/^\\s+|\\s+$/g, '') !== '')\n            ) {\n              // Either of_types or coll_inherits has value\n              return false;\n            } else {\n              return true;\n            }\n          }\n          return false;\n        },\n        // Oftype is defined?\n        checkInheritance: function(m) {\n          // Disabled if it is partitioned table\n          if (m.get('is_partitioned')) {\n            setTimeout( function() {\n               m.set('coll_inherits', []);\n            }, 10);\n            return true;\n          }\n\n          // coll_inherits || typname\n          if(!m.inSchema.apply(this, [m]) &&\n              ( _.isUndefined(m.get('typname')) ||\n                _.isNull(m.get('typname')) ||\n                String(m.get('typname')).replace(/^\\s+|\\s+$/g, '') == '')) {\n            return false;\n          }\n          return true;\n        },\n        // We will disable Like if ofType is defined\n        isLikeDisable: function(m) {\n          if(!m.inSchemaWithModelCheck.apply(this, [m]) &&\n              ( _.isUndefined(m.get('typname')) ||\n                _.isNull(m.get('typname')) ||\n                String(m.get('typname')).replace(/^\\s+|\\s+$/g, '') == '')) {\n            return false;\n          }\n          return true;\n        },\n        // Check for column grid when to Add\n        check_grid_add_condition: function(m) {\n          var enable_flag = true;\n          if(!m.inSchema.apply(this, [m])) {\n            // if of_type then disable add in grid\n            if (!_.isUndefined(m.get('typname')) &&\n                !_.isNull(m.get('typname')) &&\n                m.get('typname') !== '') {\n                    enable_flag = false;\n                }\n          }\n          return enable_flag;\n        },\n        // Check for column grid when to edit/delete (for each row)\n        check_grid_row_edit_delete: function(m) {\n          var flag = true;\n          if(!_.isUndefined(m.get('inheritedfrom')) &&\n               !_.isNull(m.get('inheritedfrom')) &&\n               String(m.get('inheritedfrom')).replace(/^\\s+|\\s+$/g, '') !== '') {\n            flag = false;\n          }\n          return flag;\n        },\n        // We will disable it if Inheritance is defined\n        checkOfType: function(m) {\n          //coll_inherits || typname\n          if(!m.inSchemaWithModelCheck.apply(this, [m]) &&\n              (_.isUndefined(m.get('coll_inherits')) ||\n               _.isNull(m.get('coll_inherits')) ||\n               String(m.get('coll_inherits')).replace(/^\\s+|\\s+$/g, '') == '')) {\n            return false;\n          }\n          return true;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchemaWithModelCheck: function(m) {\n          if(this.node_info &&  'schema' in this.node_info)\n          {\n            // We will disbale control if it's in 'edit' mode\n            if (m.isNew()) {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          return true;\n        },\n        isTableAutoVacuumEnable: function(m) {\n          // We need to check additional condition to toggle enable/disable\n          // for table auto-vacuum\n          if(!m.inSchema.apply(this, [m]) &&\n              m.get('autovacuum_enabled') === true) {\n            return false;\n          }\n          return true;\n        },\n        isToastTableAutoVacuumEnable: function(m) {\n          // We need to check additional condition to toggle enable/disable\n          // for toast table auto-vacuum\n          if(!m.inSchemaWithModelCheck.apply(this, [m]) &&\n              m.get('toast_autovacuum_enabled') == true) {\n            return false;\n          }\n          return true;\n        },\n        fetch_columns_ajax: function(arg) {\n          var self = this,\n              url = 'get_columns',\n              m = self.model.top || self.model,\n              old_columns = _.clone(m.get('columns')),\n              data = undefined,\n              node = this.field.get('schema_node'),\n              node_info = this.field.get('node_info'),\n              full_url = node.generate_url.apply(\n                node, [\n                  null, url, this.field.get('node_data'),\n                  this.field.get('url_with_id') || false, node_info\n                ]\n              ),\n              cache_level = this.field.get('cache_level') || node.type,\n              cache_node = this.field.get('cache_node');\n\n          cache_node = (cache_node && pgBrowser.Nodes['cache_node']) || node;\n\n          m.trigger('pgadmin:view:fetching', m, self.field);\n          // Fetching Columns data for the selected table.\n          $.ajax({\n            async: false,\n            url: full_url,\n            data: arg,\n            success: function(res) {\n              data = cache_node.cache(url, node_info, cache_level, res.data);\n            },\n            error: function() {\n              m.trigger('pgadmin:view:fetch:error', m, self.field);\n            }\n          });\n          m.trigger('pgadmin:view:fetched', m, self.field);\n          data = (data && data.data) || [];\n          return data;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n          //If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData;\n          // To iterate over tree to check parent node\n          while (i) {\n            // If it is schema then allow user to create table\n            if (_.indexOf(['schema'], d._type) > -1)\n              return true;\n\n            if ('coll-table' == d._type) {\n              //Check if we are not child of catalog\n              var prev_i = t.hasParent(i) ? t.parent(i) : null,\n              prev_d = prev_i ? t.itemData(prev_i) : null;\n              if( prev_d._type == 'catalog') {\n                return false;\n              } else {\n                return true;\n              }\n            }\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // by default we do not want to allow create menu\n          return true;\n      },\n      // Check to whether table has disable trigger(s)\n      canCreate_with_trigger_enable: function(itemData, item, data) {\n        if(this.canCreate.apply(this, [itemData, item, data])) {\n          // We are here means we can create menu, now let's check condition\n          if(itemData.tigger_count > 0) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      },\n      // Check to whether table has enable trigger(s)\n      canCreate_with_trigger_disable: function(itemData, item, data) {\n        if(this.canCreate.apply(this, [itemData, item, data])) {\n          // We are here means we can create menu, now let's check condition\n          if(itemData.tigger_count > 0 && itemData.has_enable_triggers > 0) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      },\n      onTableUpdated: function(_node, _oldNodeData, _newNodeData) {\n        if (\n          _newNodeData.is_partitioned && 'affected_partitions' in _newNodeData\n        ) {\n          var partitions = _newNodeData.affected_partitions,\n              idx, node_info, self = this,\n              newPartitionsIDs = [],\n              insertChildTreeNodes = [],\n              insertChildrenNodes = function() {\n                if (!insertChildTreeNodes.length)\n                  return;\n                var option = insertChildTreeNodes.pop();\n                pgBrowser.addChildTreeNodes(\n                  option.treeHierarchy, option.parent, option.type,\n                  option.childrenIDs, insertChildrenNodes\n                );\n              };\n\n          if ('detached' in partitions && partitions.detached.length > 0) {\n            // Remove it from the partition collections node first\n            pgBrowser.removeChildTreeNodesById(\n              _node, 'coll-partition', _.map(\n                partitions.detached, function(_d) { return parseInt(_d.oid); }\n              )\n            );\n\n            var schemaNode = pgBrowser.findParentTreeNodeByType(\n                  _node, 'schema'\n                ),\n                detachedBySchema = _.groupBy(\n                  partitions.detached,\n                  function(_d) { return parseInt(_d.schema_id); }\n                ), childIDs;\n\n            for (var key in detachedBySchema) {\n              schemaNode = pgBrowser.findSiblingTreeNode(schemaNode, key);\n\n              if (schemaNode) {\n                childIDs = _.map(\n                  detachedBySchema[key],\n                  function(_d) { return parseInt(_d.oid); }\n                );\n\n                var tablesCollNode = pgBrowser.findChildCollectionTreeNode(\n                  schemaNode, 'coll-table'\n                );\n\n                if (tablesCollNode) {\n                  insertChildTreeNodes.push({\n                    'parent': tablesCollNode,\n                    'type': 'table',\n                    'treeHierarchy': pgAdmin.Browser.Nodes.schema.getTreeNodeHierarchy(schemaNode),\n                    'childrenIDs': _.clone(childIDs)\n                  });\n                }\n              }\n            }\n          }\n\n          if ('attached' in partitions && partitions.attached.length > 0) {\n            var schemaNode = pgBrowser.findParentTreeNodeByType(\n                  _node, 'schema'\n                ),\n                attachedBySchema = _.groupBy(\n                  partitions.attached,\n                  function(_d) { return parseInt(_d.schema_id); }\n                ), childIDs;\n\n            for (var key in attachedBySchema) {\n              schemaNode = pgBrowser.findSiblingTreeNode(schemaNode, key);\n\n              if (schemaNode) {\n                childIDs = _.map(\n                  attachedBySchema[key],\n                  function(_d) { return parseInt(_d.oid); }\n                );\n                // Remove it from the table collections node first\n                pgBrowser.removeChildTreeNodesById(\n                  schemaNode, 'coll-table', childIDs\n                );\n              }\n              newPartitionsIDs = newPartitionsIDs.concat(childIDs);\n            }\n          }\n\n          if ('created' in partitions && partitions.created.length > 0) {\n            _.each(partitions.created, function(_data) {\n              newPartitionsIDs.push(_data.oid);\n            });\n          }\n\n          if (newPartitionsIDs.length) {\n            node_info = self.getTreeNodeHierarchy(_node);\n\n            var partitionsCollNode = pgBrowser.findChildCollectionTreeNode(\n              _node, 'coll-partition'\n            );\n\n            if (partitionsCollNode) {\n              insertChildTreeNodes.push({\n                'parent': partitionsCollNode,\n                'type': 'partition',\n                'treeHierarchy': self.getTreeNodeHierarchy(_node),\n                'childrenIDs': newPartitionsIDs\n              });\n            }\n          }\n          insertChildrenNodes();\n        }\n      }\n    });\n  }\n\n  return pgBrowser.Nodes['table'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/static/js/table.js","define('pgadmin.node.column', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'backform', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, Backform, alertify) {\n\n  if (!pgBrowser.Nodes['coll-column']) {\n    var databases = pgBrowser.Nodes['coll-column'] =\n      pgBrowser.Collection.extend({\n        node: 'column',\n        label: gettext('Columns'),\n        type: 'coll-column',\n        columns: ['name', 'atttypid', 'description']\n      });\n  };\n\n   // This Node model will be used for variable control for column\n   var VariablesModel = Backform.VariablesModel = pgBrowser.Node.Model.extend({\n    idAttribute: 'name',\n    defaults: {\n      name: null,\n      value: null\n    },\n    schema: [{\n      id: 'name', label: gettext('Name'), cell: 'select2',\n      type: 'text', disabled: false, node: 'column',\n      options: [['n_distinct', 'n_distinct'],\n      ['n_distinct_inherited','n_distinct_inherited']],\n      select2: {placeholder: \"Select variable\"},\n      cellHeaderClasses:'width_percent_50'\n    },{\n      id: 'value', label: gettext('Value'),\n      type: 'text', disabled: false,\n      cellHeaderClasses:'width_percent_50'\n    }],\n    validate: function() {\n      var err = {},\n          errmsg = null;\n\n      if (_.isUndefined(this.get('value')) ||\n        _.isNull(this.get('value')) ||\n        String(this.get('value')).replace(/^\\s+|\\s+$/g, '') == '') {\n            errmsg = gettext('Please provide input for variable.');\n            this.errorModel.set('value', errmsg);\n            return errmsg;\n          } else {\n            this.errorModel.unset('value');\n          }\n      return null;\n    }\n  });\n\n  // Integer Cell for Columns Length and Precision\n  var IntegerDepCell = Backgrid.Extension.IntegerDepCell =\n    Backgrid.IntegerCell.extend({\n      initialize: function() {\n        Backgrid.NumberCell.prototype.initialize.apply(this, arguments);\n        Backgrid.Extension.DependentCell.prototype.initialize.apply(this, arguments);\n      },\n      dependentChanged: function () {\n        this.$el.empty();\n        var model = this.model,\n            column = this.column,\n            editable = this.column.get(\"editable\"),\n            is_editable = _.isFunction(editable) ? !!editable.apply(column, [model]) : !!editable;\n\n        if (is_editable){ this.$el.addClass(\"editable\"); }\n        else { this.$el.removeClass(\"editable\"); }\n\n        this.delegateEvents();\n        return this;\n      },\n      render: function() {\n        Backgrid.NumberCell.prototype.render.apply(this, arguments);\n\n        var model = this.model,\n            column = this.column,\n            editable = this.column.get(\"editable\"),\n            is_editable = _.isFunction(editable) ? !!editable.apply(column, [model]) : !!editable;\n\n        if (is_editable){ this.$el.addClass(\"editable\"); }\n        else { this.$el.removeClass(\"editable\"); }\n        return this;\n      },\n      remove: Backgrid.Extension.DependentCell.prototype.remove\n    });\n\n  if (!pgBrowser.Nodes['column']) {\n    pgBrowser.Nodes['column'] = pgBrowser.Node.extend({\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      parent_type: ['table', 'view', 'mview'],\n      collection_type: ['coll-table', 'coll-view', 'coll-mview'],\n      type: 'column',\n      label: gettext('Column'),\n      hasSQL:  true,\n      sqlAlterHelp: 'sql-altertable.html',\n      sqlCreateHelp: 'sql-altertable.html',\n      dialogHelp: url_for('help.static', {'filename': 'column_dialog.html'}),\n      canDrop: function(itemData, item, data){\n        if (pgBrowser.Nodes['schema'].canChildDrop.apply(this, [itemData, item, data])) {\n          var t = pgBrowser.tree, i = item, d = itemData, parents = [];\n          // To iterate over tree to check parent node\n          while (i) {\n            parents.push(d._type);\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n\n          // Check if menu is allowed ?\n          if(_.indexOf(parents, 'catalog') > -1 ||\n             _.indexOf(parents, 'view') > -1 ||\n             _.indexOf(parents, 'mview') > -1) {\n            return false;\n          } else if(_.indexOf(parents, 'table') > -1) {\n            return true;\n          }\n        } else {\n          return false;\n        }\n      },\n      hasDepends: true,\n      hasStatistics: true,\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_column_on_coll', node: 'coll-column', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Column...'),\n          icon: 'wcTabIcon icon-column', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_column', node: 'column', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Column...'),\n          icon: 'wcTabIcon icon-column', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_column_onTable', node: 'table', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Column...'),\n          icon: 'wcTabIcon icon-column', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'create_column_onView', node: 'view', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Column...'),\n          icon: 'wcTabIcon icon-column', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        }\n        ]);\n      },\n      model: pgBrowser.Node.Model.extend({\n        idAttribute: 'attnum',\n\n        defaults: {\n          name: undefined,\n          attowner: undefined,\n          atttypid: undefined,\n          attnum: undefined,\n          cltype: undefined,\n          collspcname: undefined,\n          attacl: undefined,\n          description: undefined,\n          parent_tbl: undefined,\n          min_val: undefined,\n          max_val: undefined,\n          edit_types: undefined,\n          is_primary_key: false,\n          inheritedfrom: undefined,\n          attstattarget:undefined,\n          attnotnull: false,\n          attlen: null,\n          attprecision: null\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), cell: 'string',\n          type: 'text', disabled: 'inSchemaWithColumnCheck',\n          cellHeaderClasses:'width_percent_30',\n          editable: 'editable_check_for_table'\n        },{\n          // Need to show this field only when creating new table\n          // [in SubNode control]\n          id: 'is_primary_key', label: gettext('Primary key?'),\n          cell: Backgrid.Extension.TableChildSwitchCell, type: 'switch',\n          deps:['name'], cellHeaderClasses:'width_percent_5',\n          options: {\n            onText: gettext('Yes'), offText: gettext('No'),\n            onColor: 'success', offColor: 'primary'\n          },\n          visible: function(m) {\n            return _.isUndefined(\n              m.top.node_info['table'] || m.top.node_info['view'] ||\n                m.top.node_info['mview']\n            );\n          },\n          disabled: function(m){\n            // Disable it, when one of this:\n            // - Primary key already exist\n            // - Table is a partitioned table\n            if (\n              m.top && ((\n                !_.isUndefined(m.top.get('oid')) &&\n                  m.top.get('primary_key').length > 0 &&\n                  !_.isUndefined(m.top.get('primary_key').first().get('oid'))\n              ) || (\n                m.top.has('is_partitioned') && m.top.get('is_partitioned')\n              ))\n            ) {\n              return true;\n            }\n\n            var name = m.get('name');\n\n            if(!m.inSchemaWithColumnCheck.apply(this, [m]) &&\n            (_.isUndefined(name)  || _.isNull(name) || name == '')) {\n              return true;\n            }\n            return false;\n          },\n          editable: function(m){\n            var name = m.get('name');\n            // If HeaderCell then allow True\n            if(m instanceof Backbone.Collection) {\n              return true;\n            }\n            // If primary key already exist then disable.\n            if (m.top && !_.isUndefined(m.top.get('oid')) &&\n                      m.top.get('primary_key').length > 0 &&\n                      !_.isUndefined(m.top.get('primary_key').first().get('oid'))) {\n\n              return false;\n            }\n\n            // If table is partitioned table then disable\n            if (m.top && !_.isUndefined(m.top.get('is_partitioned')) &&\n              m.top.get('is_partitioned'))\n            {\n              setTimeout(function () {\n                m.set('is_primary_key', false);\n              }, 10);\n\n              return false;\n            }\n\n            if(!m.inSchemaWithColumnCheck.apply(this, [m]) &&\n              !_.isUndefined(name) && !_.isNull(name) && name !== '') {\n              return true;\n            }\n            return false;\n            // Set to false if no condition is met\n            m.set('is_primary_key', false);\n          }\n        },{\n          id: 'attnum', label: gettext('Position'), cell: 'string',\n          type: 'text', disabled: 'notInSchema', mode: ['properties']\n        },{\n          id: 'cltype', label: gettext('Data type'),\n          cell: Backgrid.Extension.NodeAjaxOptionsCell.extend({\n            exitEditMode: function(e) {\n                var self = this;\n                this.$select.off('blur', this.exitEditMode);\n                this.$select.select2('close');\n                this.$el.removeClass('editor');\n                // Once user have selected a value\n                // we can shift to next cell if it is editable\n                var next_cell, length_cell = this.$el.next(),\n                  not_null_cell = this.$el.next().next().next();\n\n                // Add delay so that Select2 cell tab event is captured\n                // first before triggerring backgrid:edited event.\n                setTimeout(function() {\n                  // First check Length column if it is disable then goto\n                  // Not Null column\n                  if(length_cell && length_cell.hasClass('editable') && e) {\n                    next_cell = length_cell;\n                  } else if(not_null_cell && not_null_cell.hasClass('editable') && e) {\n                    next_cell = not_null_cell;\n                  }\n\n                  if(next_cell) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    var command = new Backgrid.Command({key: \"Tab\", keyCode: 9, which: 9});\n                    self.model.trigger(\"backgrid:edited\", self.model, self.column,\n                                      command);\n                    next_cell.focus();\n                  }\n                }, 20);\n            }\n          }),\n          type: 'text', disabled: 'inSchemaWithColumnCheck',\n          control: 'node-ajax-options', url: 'get_types', node: 'table',\n          cellHeaderClasses:'width_percent_30', first_empty: true,\n          select2: { allowClear: false }, group: gettext('Definition'),\n          transform: function(data, cell) {\n            /* 'transform' function will be called by control, and cell both.\n             * The way, we use the transform in cell, and control is different.\n             * Because - options are shared using 'column' object in backgrid,\n             * hence - the cell is passed as second parameter, while the control\n             * uses (this) as a object.\n             */\n            var control = cell || this,\n                m = control.model;\n\n            /* We need different data in create mode & in edit mode\n             * if we are in create mode then return data as it is\n             * if we are in edit mode then we need to filter data\n             */\n            control.model.datatypes = data;\n            var edit_types = m.get('edit_types'),\n                result = [];\n\n            // If called from Table, We will check if in edit mode\n            // then send edit_types only\n            if( !_.isUndefined(m.top) && !m.top.isNew() ) {\n              _.each(data, function(t) {\n                if (_.indexOf(edit_types, t.value) != -1) {\n                  result.push(t);\n                }\n            });\n              // There may be case that user adds new column in  existing collection\n              // we will not have edit types then\n              return result.length > 0 ? result : data;\n            }\n\n            // If called from Column\n            if(m.isNew()) {\n              return data;\n            } else {\n              //edit mode\n              _.each(data, function(t) {\n                if (_.indexOf(edit_types, t.value) != -1) {\n                  result.push(t);\n                }\n              });\n\n              return result;\n            }\n          },\n          editable: 'editable_check_for_table'\n        },{\n          // Need to show this field only when creating new table [in SubNode control]\n          id: 'inheritedfrom', label: gettext('Inherited from table'),\n          type: 'text', disabled: true, editable: false,\n          cellHeaderClasses:'width_percent_10',\n          visible: function(m) {\n            return _.isUndefined(m.top.node_info['table'] || m.top.node_info['view'] || m.top.node_info['mview']);\n          }\n        },{\n          id: 'attlen', label: gettext('Length'), cell: IntegerDepCell,\n           deps: ['cltype'], type: 'int', group: gettext('Definition'), cellHeaderClasses:'width_percent_20',\n           disabled: function(m) {\n             var of_type = m.get('cltype'),\n               flag = true;\n              _.each(m.datatypes, function(o) {\n                if ( of_type == o.value ) {\n                    if(o.length)\n                    {\n                      m.set('min_val', o.min_val, {silent: true});\n                      m.set('max_val', o.max_val, {silent: true});\n                      flag = false;\n                    }\n                }\n              });\n\n              flag && setTimeout(function() {\n                  if(m.get('attlen')) {\n                    m.set('attlen', null);\n                  }\n                },10);\n\n              return flag;\n           },\n           editable: function(m) {\n             // inheritedfrom has value then we should disable it\n             if(!_.isUndefined(m.get('inheritedfrom'))) {\n                return false;\n             }\n\n             if (!m.datatypes) {\n              // datatypes not loaded, may be this call is from CallByNeed from backgrid cell initialize.\n              return true;\n             }\n             var of_type = m.get('cltype'),\n               flag = false;\n\n               _.each(m.datatypes, function(o) {\n               if ( of_type == o.value ) {\n                 if(o.length) {\n                   m.set('min_val', o.min_val, {silent: true});\n                   m.set('max_val', o.max_val, {silent: true});\n                   flag = true;\n                 }\n                }\n              });\n\n              !flag && setTimeout(function() {\n                  if(m.get('attlen')) {\n                    m.set('attlen', null, {silent: true});\n                  }\n                },10);\n\n              return flag;\n           }\n        },{\n          id: 'attprecision', label: gettext('Precision'), cell: IntegerDepCell,\n           deps: ['cltype'], type: 'int', group: gettext('Definition'), cellHeaderClasses:'width_percent_20',\n           disabled: function(m) {\n             var of_type = m.get('cltype'),\n               flag = true;\n              _.each(m.datatypes, function(o) {\n                if ( of_type == o.value ) {\n                  if(o.precision) {\n                    m.set('min_val', o.min_val, {silent: true});\n                    m.set('max_val', o.max_val, {silent: true});\n                    flag = false;\n                  }\n                }\n              });\n\n              flag && setTimeout(function() {\n                if(m.get('attprecision')) {\n                  m.set('attprecision', null);\n                }\n              },10);\n              return flag;\n           },\n           editable: function(m) {\n             // inheritedfrom has value then we should disable it\n             if(!_.isUndefined(m.get('inheritedfrom'))) {\n                return false;\n             }\n\n             if (!m.datatypes) {\n              // datatypes not loaded yet, may be this call is from CallByNeed from backgrid cell initialize.\n              return true;\n             }\n\n             var of_type = m.get('cltype'),\n               flag = false;\n              _.each(m.datatypes, function(o) {\n                if ( of_type == o.value ) {\n                  if(o.precision) {\n                    m.set('min_val', o.min_val, {silent: true});\n                    m.set('max_val', o.max_val, {silent: true});\n                    flag = true;\n                  }\n                }\n              });\n\n              !flag && setTimeout(function() {\n                if(m.get('attprecision')) {\n                  m.set('attprecision', null);\n                }\n              },10);\n\n              return flag;\n           }\n         },{\n          id: 'collspcname', label: gettext('Collation'), cell: 'string',\n          type: 'text', control: 'node-ajax-options', url: 'get_collations',\n          group: gettext('Definition'), node: 'collation',\n          deps: ['cltype'], disabled: function(m) {\n             var of_type = m.get('cltype'),\n               flag = true;\n             _.each(m.datatypes, function(o) {\n                if ( of_type == o.value ) {\n                    if(o.is_collatable)\n                    {\n                      flag = false;\n                    }\n                }\n             });\n             if (flag) {\n                setTimeout(function(){\n                  if(m.get('collspcname') && m.get('collspcname') !== '') {\n                    m.set('collspcname', \"\");\n                  }\n                }, 10);\n             }\n             return flag;\n          }\n        },{\n          id: 'defval', label: gettext('Default Value'), cell: 'string',\n          type: 'text', group: gettext('Definition'), deps: ['cltype'],\n          disabled: function(m) {\n            if(!m.inSchemaWithModelCheck.apply(this, [m])) {\n              var type = m.get('cltype');\n                return type == 'serial' || type == 'bigserial'\n                                        || type == 'smallserial';\n            }\n          }\n        },{\n          id: 'attnotnull', label: gettext('Not NULL?'), cell: 'switch',\n          type: 'switch', disabled: 'inSchemaWithColumnCheck', cellHeaderClasses:'width_percent_20',\n          group: gettext('Definition'), editable: 'editable_check_for_table',\n          options: { onText: 'Yes', offText: 'No', onColor: 'success', offColor: 'primary' }\n        },{\n          id: 'attstattarget', label: gettext('Statistics'), cell: 'string',\n          type: 'text', disabled: 'inSchemaWithColumnCheck', mode: ['properties', 'edit'],\n          group: gettext('Definition')\n        },{\n          id: 'attstorage', label: gettext('Storage'), group: gettext('Definition'),\n          type: 'text', mode: ['properties', 'edit'],\n          cell: 'string', disabled: 'inSchemaWithColumnCheck', first_empty: true,\n          control: 'select2', select2: { placeholder: \"Select storage\",\n            allowClear: false,\n            width: \"100%\"\n          },\n          options: [\n            {label: \"PLAIN\", value: \"p\"},\n            {label: \"MAIN\", value: \"m\"},\n            {label: \"EXTERNAL\", value: \"e\"},\n            {label: \"EXTENDED\", value: \"x\"},\n           ]\n        },{\n          id: 'is_pk', label: gettext('Primary key?'),\n          type: 'switch', disabled: true, mode: ['properties'],\n          group: gettext('Definition')\n        },{\n          id: 'is_fk', label: gettext('Foreign key?'),\n          type: 'switch', disabled: true, mode: ['properties'],\n          group: gettext('Definition')\n        },{\n          id: 'is_inherited', label: gettext('Inherited?'),\n          type: 'switch', disabled: true, mode: ['properties'],\n          group: gettext('Definition')\n        },{\n          id: 'tbls_inherited', label: gettext('Inherited from table(s)'),\n          type: 'text', disabled: true, mode: ['properties'], deps: ['is_inherited'],\n          group: gettext('Definition'),\n          visible: function(m) {\n              if (!_.isUndefined(m.get('is_inherited')) && m.get('is_inherited')) {\n                return true;\n              } else {\n                return false;\n              }\n          }\n        },{\n          id: 'is_sys_column', label: gettext('System column?'), cell: 'string',\n          type: 'switch', disabled: true, mode: ['properties']\n        },{\n          id: 'description', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', mode: ['properties', 'create', 'edit'],\n          disabled: 'notInSchema'\n        },{\n          id: 'attoptions', label: 'Variables', type: 'collection',\n          group: gettext('Variables'), control: 'unique-col-collection',\n          model: VariablesModel, uniqueCol : ['name'],\n          mode: ['edit', 'create'], canAdd: true, canEdit: false,\n          canDelete: true\n        }, pgBrowser.SecurityGroupSchema, {\n          id: 'attacl', label: 'Privileges', type: 'collection',\n          group: 'security', control: 'unique-col-collection',\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n          privileges: ['a','r','w','x']}),\n          mode: ['edit'], canAdd: true, canDelete: true,\n          uniqueCol : ['grantee']\n        },{\n          id: 'seclabels', label: gettext('Security Labels'), canAdd: true,\n          model: pgBrowser.SecLabelModel, group: 'security',\n          mode: ['edit', 'create'], editable: false, type: 'collection',\n          min_version: 90100, canEdit: false, canDelete: true,\n          control: 'unique-col-collection'\n        }],\n        validate: function(keys) {\n          var err = {},\n              changedAttrs = this.changed,\n              msg = undefined;\n\n          // Nothing to validate\n          if (keys && keys.length == 0) {\n            this.errorModel.clear();\n            return null;\n          } else {\n            this.errorModel.clear();\n          }\n\n          if (_.isUndefined(this.get('name'))\n              || String(this.get('name')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Column name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n\n          if (_.isUndefined(this.get('cltype'))\n              || String(this.get('cltype')).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Column type cannot be empty.');\n            this.errorModel.set('cltype', msg);\n            return msg;\n          }\n\n          if (!_.isUndefined(this.get('cltype'))\n                && !_.isUndefined(this.get('attlen'))\n                && !_.isNull(this.get('attlen'))\n                && this.get('attlen') !== '') {\n            // Validation for Length field\n            if (this.get('attlen') < this.get('min_val'))\n              msg = gettext('Length should not be less than: ') + this.get('min_val');\n            if (this.get('attlen') > this.get('max_val'))\n              msg = gettext('Length should not be greater than: ') + this.get('max_val');\n            // If we have any error set then throw it to user\n            if(msg) {\n              this.errorModel.set('attlen', msg)\n              return msg;\n            }\n          }\n\n          if (!_.isUndefined(this.get('cltype'))\n                && !_.isUndefined(this.get('attprecision'))\n                && !_.isNull(this.get('attprecision'))\n                && this.get('attprecision') !== '') {\n            // Validation for precision field\n            if (this.get('attprecision') < this.get('min_val'))\n              msg = gettext('Precision should not be less than: ') + this.get('min_val');\n            if (this.get('attprecision') > this.get('max_val'))\n              msg = gettext('Precision should not be greater than: ') + this.get('max_val');\n            // If we have any error set then throw it to user\n            if(msg) {\n              this.errorModel.set('attprecision', msg)\n              return msg;\n            }\n          }\n\n          return null;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        notInSchema: function() {\n          if(this.node_info &&  'catalog' in this.node_info)\n          {\n            return true;\n          }\n          return false;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchemaWithModelCheck: function(m) {\n          if(this.node_info &&  'schema' in this.node_info)\n          {\n            // We will disable control if it's in 'edit' mode\n            if (m.isNew()) {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          return true;\n        },\n        // Checks weather to enable/disable control\n        inSchemaWithColumnCheck: function(m) {\n          var node_info = this.node_info || m.node_info || m.top.node_info;\n\n          // disable all fields if column is listed under view or mview\n          if (node_info && ('view' in node_info || 'mview' in node_info)) {\n            if (this && _.has(this, 'name') && (this.name != 'defval')) {\n              return true;\n            }\n          }\n\n          if(node_info &&  'schema' in node_info)\n          {\n            // We will disable control if it's system columns\n            // inheritedfrom check is useful when we use this schema in table node\n            // inheritedfrom has value then we should disable it\n            if(!_.isUndefined(m.get('inheritedfrom'))) {\n                return true;\n            }\n            // ie: it's position is less then 1\n            if (m.isNew()) {\n              return false;\n            }\n            // if we are in edit mode\n            if (!_.isUndefined(m.get('attnum')) && m.get('attnum') > 0 ) {\n              return false;\n            } else {\n              return true;\n            }\n           }\n          return true;\n        },\n        editable_check_for_table: function(arg) {\n            if (arg instanceof Backbone.Collection) {\n                return !arg.model.prototype.inSchemaWithColumnCheck.apply(\n                         this, [arg.top]\n                       );\n            } else {\n                return !arg.inSchemaWithColumnCheck.apply(\n                         this, [arg]\n                       );\n            }\n        }\n      }),\n      // Below function will enable right click menu for creating column\n      canCreate: function(itemData, item, data) {\n          // If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData, parents = [];\n          // To iterate over tree to check parent node\n          while (i) {\n            // If it is schema then allow user to create table\n            if (_.indexOf(['schema'], d._type) > -1) {\n              return true;\n            }\n            else if (_.indexOf(['view', 'coll-view',\n                                'mview',\n                                'coll-mview'], d._type) > -1) {\n              parents.push(d._type);\n              break;\n            }\n            parents.push(d._type);\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // If node is under catalog then do not allow 'create' menu\n          if (_.indexOf(parents, 'catalog') > -1 ||\n              _.indexOf(parents, 'coll-view') > -1 ||\n              _.indexOf(parents, 'coll-mview') > -1 ||\n              _.indexOf(parents, 'mview') > -1 ||\n              _.indexOf(parents, 'view') > -1) {\n            return false;\n          } else {\n            return true;\n          }\n      }\n    });\n  }\n\n  return pgBrowser.Nodes['column'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/column/static/js/column.js","define('pgadmin.node.constraints', [\n  'sources/gettext', 'jquery', 'underscore', 'underscore.string', 'sources/pgadmin',\n  'pgadmin.browser', 'pgadmin.browser.collection', 'pgadmin.node.unique_constraint',\n  'pgadmin.node.check_constraint', 'pgadmin.node.foreign_key',\n  'pgadmin.node.exclusion_constraint', 'pgadmin.node.primary_key'\n], function(gettext, $, _, S, pgAdmin, pgBrowser) {\n\n  if (!pgBrowser.Nodes['coll-constraints']) {\n    var databases = pgAdmin.Browser.Nodes['coll-constraints'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'constraints',\n        label: gettext('Constraints'),\n        type: 'coll-constraints',\n        getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n        columns: ['name', 'comment']\n      });\n  };\n\n  if (!pgBrowser.Nodes['constraints']) {\n    pgAdmin.Browser.Nodes['constraints'] = pgBrowser.Node.extend({\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      type: 'constraints',\n      label: gettext('Constraints'),\n      collection_type: 'coll-constraints',\n      parent_type: ['table','partition'],\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([]);\n      },\n      model: pgAdmin.Browser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          comment: undefined\n       },\n        schema: [{\n          id: 'name', label: gettext('Name'), type: 'text',\n          mode: ['properties', 'create', 'edit']\n        },{\n          id: 'oid', label: gettext('Oid'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'comment', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', mode: ['properties', 'create', 'edit']\n        }]\n      })\n  });\n  }\n\n  return pgBrowser.Nodes['constraints'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/static/js/constraints.js","define('pgadmin.node.unique_constraint', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Extend the browser's node class for index constraint node\n  if (!pgBrowser.Nodes['unique_constraint']) {\n    pgAdmin.Browser.Nodes['unique_constraint'] = pgBrowser.Node.extend({\n      type: 'unique_constraint',\n      label: gettext('Unique constraint'),\n      collection_type: 'coll-constraints',\n      sqlAlterHelp: 'ddl-alter.html',\n      sqlCreateHelp: 'ddl-constraints.html',\n      dialogHelp: url_for('help.static', {filename: 'unique_constraint_dialog.html'}),\n      hasSQL: true,\n      hasDepends: true,\n      hasStatistics: true,\n      statsPrettifyFields: ['Index size'],\n      parent_type: ['table','partition'],\n      canDrop: true,\n      canDropCascade: true,\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      Init: function() {\n        /* Avoid multiple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_unique_constraint_on_coll', node: 'coll-constraints', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Unique constraint'),\n          icon: 'wcTabIcon icon-unique_constraint', data: {action: 'create', check: true},\n          enable: 'canCreate'\n\n        }\n        ]);\n      },\n      canCreate: function(itemData, item, data) {\n        // If check is false then , we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData, parents = [],\n            immediate_parent_table_found = false,\n            is_immediate_parent_table_partitioned = false;\n\n        // To iterate over tree to check parent node\n        while (i) {\n          // If table is partitioned table then return false\n          if (!immediate_parent_table_found && (d._type == 'table' || d._type == 'partition')) {\n            immediate_parent_table_found = true;\n            if ('is_partitioned' in d && d.is_partitioned) {\n              is_immediate_parent_table_partitioned = true;\n            }\n          }\n\n          // If it is schema then allow user to c reate table\n          if (_.indexOf(['schema'], d._type) > -1) {\n            return !is_immediate_parent_table_partitioned;\n          }\n          parents.push(d._type);\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // If node is under catalog then do not allow 'create' menu\n        if (_.indexOf(parents, 'catalog') > -1) {\n          return false;\n        } else {\n          return !is_immediate_parent_table_partitioned;\n        }\n      },\n\n      // Define the model for index constraint node\n      model: pgAdmin.Browser.Node.Model.extend({\n        idAttribute: 'oid',\n\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          comment: undefined,\n          spcname: undefined,\n          index: undefined,\n          fillfactor: undefined,\n          condeferrable: undefined,\n          condeferred: undefined,\n          columns: []\n        },\n\n        // Define the schema for the index constraint node\n        schema: [{\n          id: 'name', label: gettext('Name'), type: 'text',\n          mode: ['properties', 'create', 'edit'], editable:true,\n          cellHeaderClasses:'width_percent_40',\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties'], editable: false,\n          cellHeaderClasses:'width_percent_20',\n        },{\n          id: 'comment', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', mode: ['properties', 'create', 'edit'],\n          deps:['name'], disabled:function(m) {\n            var name = m.get('name');\n            if (!(name && name != '')) {\n              setTimeout(function(){\n               if(m.get('comment') && m.get('comment') !== '') {\n                 m.set('comment', null);\n               }\n              },10);\n              return true;\n            } else {\n              return false;\n            }\n          }\n        },{\n          id: 'columns', label: gettext('Columns'),\n          type: 'collection', group: gettext('Definition'),\n          editable: false,\n          cell: Backgrid.StringCell.extend({\n            initialize: function() {\n              Backgrid.StringCell.prototype.initialize.apply(this, arguments);\n\n              var self = this,\n                collection = this.model.get('columns');\n\n               // Do not listen for any event(s) for existing constraint.\n              if (_.isUndefined(self.model.get('oid'))) {\n                var tableCols = self.model.top.get('columns');\n                  self.listenTo(tableCols, 'remove' , self.removeColumn);\n                  self.listenTo(tableCols, 'change:name', self.resetColOptions);\n              }\n\n              collection.on('pgadmin:multicolumn:updated', function() {\n                self.render.apply(self);\n              });\n              self.listenTo(collection, \"add\", self.render);\n              self.listenTo(collection, \"remove\", self.render);\n            },\n            removeColumn: function(m) {\n              var self = this,\n                  removedCols = self.model.get('columns').where(\n                    {column: m.get('name')}\n                    );\n\n              self.model.get('columns').remove(removedCols);\n              setTimeout(function () {\n                self.render();\n              }, 10);\n\n              var key = 'unique_constraint'\n              setTimeout(function () {\n                constraints = self.model.top.get(key);\n                var removed = [];\n                constraints.each(function(constraint) {\n                  if (constraint.get(\"columns\").length == 0) {\n                     removed.push(constraint);\n                  }\n                });\n                constraints.remove(removed);\n              },100);\n\n            },\n            resetColOptions : function(m) {\n              var self = this,\n                updatedCols = self.model.get('columns').where(\n                {column: m.previous('name')}\n                );\n              if (updatedCols.length > 0) {\n                /*\n                 * Table column name has changed so update\n                 * column name in primary key as well.\n                 */\n                updatedCols[0].set(\n                {\"column\": m.get('name')},\n                {silent: true});\n              }\n\n              setTimeout(function () {\n                self.render();\n              }, 10);\n            },\n            formatter: {\n              fromRaw: function (rawValue, model) {\n                return rawValue.pluck(\"column\").toString();\n              },\n              toRaw: function (val, model) {\n                return val;\n              }\n            },\n            render: function() {\n              return Backgrid.StringCell.prototype.render.apply(this, arguments);\n            },\n            remove: function() {\n              var tableCols = this.model.top.get('columns'),\n              primary_key_col = this.model.get('columns');\n\n              if (primary_key_col) {\n                primary_key_col.off('pgadmin:multicolumn:updated');\n              }\n\n              this.stopListening(tableCols, 'remove' , self.removeColumn);\n              this.stopListening(tableCols, 'change:name' , self.resetColOptions);\n\n              Backgrid.StringCell.prototype.remove.apply(this, arguments);\n            }\n          }),\n          canDelete: true, canAdd: true,\n          control: Backform.MultiSelectAjaxControl.extend({\n            defaults: _.extend(\n              {},\n              Backform.NodeListByNameControl.prototype.defaults,\n              {\n                select2: {\n                  multiple: true,\n                  allowClear: true,\n                  width: 'style',\n                  placeholder: gettext('Select the column(s)'),\n                }\n              }\n            ),\n            keyPathAccessor: function(obj, path) {\n              var res = obj;\n              if(_.isArray(res)) {\n                return _.map(res, function(o) { return o['column']\n                });\n              }\n              path = path.split('.');\n              for (var i = 0; i < path.length; i++) {\n                if (_.isNull(res)) return null;\n                if (_.isEmpty(path[i])) continue;\n                if (!_.isUndefined(res[path[i]])) res = res[path[i]];\n              }\n              return _.isObject(res) && !_.isArray(res) ? null : res;\n            },\n            initialize: function() {\n            // Here we will decide if we need to call URL\n            // Or fetch the data from parent columns collection\n              var self = this;\n              if(this.model.handler) {\n                Backform.Select2Control.prototype.initialize.apply(this, arguments);\n                // Do not listen for any event(s) for existing constraint.\n                if (_.isUndefined(self.model.get('oid'))) {\n                  var tableCols = self.model.top.get('columns');\n                  self.listenTo(tableCols, 'remove' , self.resetColOptions);\n                  self.listenTo(tableCols, 'change:name', self.resetColOptions);\n                }\n\n                self.custom_options();\n              } else {\n                Backform.MultiSelectAjaxControl.prototype.initialize.apply(this, arguments);\n              }\n              self.model.get('columns').on('pgadmin:multicolumn:updated', function() {\n                  self.render.apply(self);\n                });\n            },\n            resetColOptions: function(m) {\n              var self = this;\n\n              setTimeout(function () {\n                self.custom_options();\n                self.render.apply(self);\n              }, 50);\n\n            },\n            custom_options: function() {\n              // We will add all the columns entered by user in table model\n              var columns = this.model.top.get('columns'),\n                added_columns_from_tables = [];\n\n              if (columns.length > 0) {\n                _.each(columns.models, function(m) {\n                    var col = m.get('name');\n                    if(!_.isUndefined(col) && !_.isNull(col)) {\n                      added_columns_from_tables.push(\n                        {label: col, value: col, image:'icon-column'}\n                      );\n                    }\n                });\n              }\n              // Set the values in to options so that user can select\n              this.field.set('options', added_columns_from_tables);\n            },\n            onChange: function(e) {\n              var self = this,\n                  model = this.model,\n                  $el = $(e.target),\n                  attrArr = this.field.get(\"name\").split('.'),\n                  name = attrArr.shift(),\n                  path = attrArr.join('.'),\n                  vals = this.getValueFromDOM(),\n                  collection = model.get(name),\n                  removed = [];\n\n              this.stopListening(this.model, \"change:\" + name, this.render);\n\n              /*\n               * Iterate through all the values, and find out how many are already\n               * present in the collection.\n               */\n              collection.each(function(m) {\n                  var column = m.get('column'),\n                      idx = _.indexOf(vals, column);\n\n                  if (idx > -1) {\n                    vals.splice(idx, 1);\n                  } else {\n                    removed.push(column);\n                  }\n               });\n\n              /*\n               * Adding new values\n               */\n\n              _.each(vals, function(v) {\n                var m = new (self.field.get('model'))(\n                      {column: v}, { silent: true,\n                      top: self.model.top,\n                      collection: collection,\n                      handler: collection\n                    });\n\n                collection.add(m);\n              });\n\n              /*\n               * Removing unwanted!\n               */\n              _.each(removed, function(v) {\n                collection.remove(collection.where({column: v}));\n              });\n\n              this.listenTo(this.model, \"change:\" + name, this.render);\n            },\n            remove: function() {\n              if(this.model.handler) {\n                var self = this,\n                tableCols = self.model.top.get('columns');\n                self.stopListening(tableCols, 'remove' , self.resetColOptions);\n                self.stopListening(tableCols, 'change:name' , self.resetColOptions);\n                self.model.get('columns').off('pgadmin:multicolumn:updated');\n\n                Backform.Select2Control.prototype.remove.apply(this, arguments);\n\n              } else {\n                Backform.MultiSelectAjaxControl.prototype.remove.apply(this, arguments);\n              }\n            }\n          }),\n          deps: ['index'], node: 'column',\n          model: pgBrowser.Node.Model.extend({\n            defaults: {\n              column: undefined\n            },\n            validate: function() {\n              return null;\n           }\n          }),\n          transform : function(data){\n            var res = [];\n            if (data && _.isArray(data)) {\n              _.each(data, function(d) {\n                res.push({label: d.label, value: d.label, image:'icon-column'});\n              })\n            }\n            return res;\n          },\n          select2:{allowClear:false},\n          disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'top') && !_.isUndefined(m.top)\n                                    && !m.top.isNew()) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should be allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n\n            // We can't update columns of existing index constraint.\n            if (!m.isNew()) {\n                return true;\n            }\n            // Disable if index is selected.\n            var index = m.get('index');\n              if(_.isUndefined(index) || index == '') {\n                return false;\n              } else {\n                var col = m.get('columns');\n                col.reset();\n                return true;\n              }\n            }\n          },{\n          id: 'spcname', label: gettext('Tablespace'),\n          type: 'text', group: gettext('Definition'),\n          control: 'node-list-by-name', node: 'tablespace',\n          deps: ['index'],\n          select2:{allowClear:false},\n          filter: function(m) {\n            // Don't show pg_global tablespace in selection.\n            if (m.label == \"pg_global\") return false;\n            else return true;\n          },\n          disabled: function(m) {\n            // Disable if index is selected.\n            m = m.top || m;\n            var index = m.get('index');\n              if(_.isUndefined(index) || index == '') {\n                return false;\n              } else {\n                setTimeout(function(){\n                  m.set('spcname', '');\n                },10);\n                return true;\n              }\n          }\n        },{\n          id: 'index', label: gettext('Index'),\n          type: 'text', group: gettext('Definition'),\n          control: Backform.NodeListByNameControl.extend({\n          initialize:function() {\n            if (_.isUndefined(this.model.top)) {\n              Backform.NodeListByNameControl.prototype.initialize.apply(this,arguments);\n            } else {\n              Backform.Control.prototype.initialize.apply(this,arguments);\n            }\n          }\n          }),\n          select2:{allowClear:true}, node: 'index',\n          disabled: function(m) {\n            // If we are in table edit mode then disable it\n            if (_.has(m, 'top') && !_.isUndefined(m.top)\n                                    && !m.top.isNew()) {\n                return true;\n            }\n\n            // We can't update index of existing index constraint.\n            return !m.isNew();\n          },\n          // We will not show this field in Create Table mode\n          visible: function(m) {\n            return !_.isUndefined(m.top.node_info['table']);\n          }\n        },{\n          id: 'fillfactor', label: gettext('Fill factor'), deps: ['index'],\n          type: 'int', group: gettext('Definition'), allowNull: true,\n          disabled: function(m) {\n            // Disable if index is selected.\n            var index = m.get('index');\n              if(_.isUndefined(index) || index == '') {\n                return false;\n              } else {\n                setTimeout(function(){\n                  m.set('fillfactor', null);\n                },10);\n                return true;\n              }\n            }\n        },{\n          id: 'condeferrable', label: gettext('Deferrable?'),\n          type: 'switch', group: gettext('Definition'), deps: ['index'],\n          disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'top') && !_.isUndefined(m.top)\n                                    && !m.top.isNew()) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n\n            // We can't update condeferrable of existing index constraint.\n            if (!m.isNew()) {\n                return true;\n            }\n            // Disable if index is selected.\n            var index = m.get('index');\n            if(_.isUndefined(index) || index == '') {\n              return false;\n            } else {\n              setTimeout(function(){\n                if(m.get('condeferrable'))\n                  m.set('condeferrable', false);\n              },10);\n              return true;\n            }\n          }\n        },{\n          id: 'condeferred', label: gettext('Deferred?'),\n          type: 'switch', group: gettext('Definition'),\n          deps: ['condeferrable'],\n          disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'top') && !_.isUndefined(m.top)\n                                    && !m.top.isNew()) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n\n            // We can't update condeferred of existing index constraint.\n            if (!m.isNew()) {\n              return true;\n            }\n            // Disable if condeferred is false or unselected.\n            if(m.get('condeferrable') == true) {\n              return false;\n            } else {\n              setTimeout(function(){\n               if(m.get('condeferred'))\n                  m.set('condeferred', false);\n              },10);\n              return true;\n            }\n          }\n        }\n        ],\n        validate: function() {\n          this.errorModel.clear();\n          // Clear parent's error as well\n          if (_.has(this, 'top')) {\n            this.top.errorModel.clear();\n          }\n\n          var columns = this.get('columns'),\n            index = this.get('index');\n\n            if ((_.isUndefined(index) || String(index).replace(/^\\s+|\\s+$/g, '') == '') &&\n                (_.isUndefined(columns) || _.isNull(columns) || columns.length < 1)) {\n              var msg = gettext('Please specify columns for %(node)s', {node: gettext('Unique constraint')});\n              this.errorModel.set('columns', msg);\n              return msg;\n            }\n\n          return null;\n        }\n      })\n  });\n  }\n\n  return pgBrowser.Nodes['unique_constraint'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/index_constraint/static/js/unique_constraint.js","// Check Constraint Module: Node\ndefine('pgadmin.node.check_constraint', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'pgadmin.alertifyjs',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Check Constraint Node\n  if (!pgBrowser.Nodes['check_constraints']) {\n    pgAdmin.Browser.Nodes['check_constraints'] = pgBrowser.Node.extend({\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      type: 'check_constraints',\n      label: gettext('Check'),\n      collection_type: 'coll-constraints',\n      sqlAlterHelp: 'ddl-alter.html',\n      sqlCreateHelp: 'ddl-constraints.html',\n      dialogHelp: url_for('help.static', {'filename': 'check_dialog.html'}),\n      hasSQL: true,\n      hasDepends: true,\n      parent_type: ['table','partition'],\n      Init: function() {\n        // Avoid mulitple registration of menus\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_check_constraints_on_coll', node: 'coll-constraints', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 5, label: gettext('Check...'),\n          icon: 'wcTabIcon icon-check_constraints', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'validate_check_constraint', node: 'check_constraints', module: this,\n          applies: ['object', 'context'], callback: 'validate_check_constraint',\n          category: 'validate', priority: 4, label: gettext('Validate check constraint'),\n          icon: 'fa fa-link', enable : 'is_not_valid', data: {action: 'edit', check: true}\n        }\n        ]);\n\n      },\n      is_not_valid: function(itemData, item, data) {\n        if (this.canCreate(itemData, item, data)) {\n          return (itemData && !itemData.valid);\n        } else {\n          return false;\n        }\n      },\n      callbacks: {\n        validate_check_constraint: function(args) {\n          var input = args || {},\n          obj = this,\n          t = pgBrowser.tree,\n          i = input.item || t.selected(),\n          d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d) {\n            return false;\n          }\n          var data = d;\n          $.ajax({\n            url: obj.generate_url(i, 'validate', d, true),\n            type:'GET',\n            success: function(res) {\n              if (res.success == 1) {\n                alertify.success(res.info);\n                t.removeIcon(i);\n                data.valid = true;\n                data.icon = 'icon-check_constraints';\n                t.addIcon(i, {icon: data.icon});\n                setTimeout(function() {t.deselect(i);}, 10);\n                setTimeout(function() {t.select(i);}, 100);\n              }\n            },\n            error: function(xhr, status, error) {\n              try {\n                var err = $.parseJSON(xhr.responseText);\n                if (err.success == 0) {\n                  alertify.error(err.errormsg);\n                }\n              } catch (e) {}\n              t.unload(i);\n            }\n            });\n\n          return false;\n        }\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      model: pgAdmin.Browser.Node.Model.extend({\n        idAttribute: 'oid',\n\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          description: undefined,\n          consrc: undefined,\n          connoinherit: undefined,\n          convalidated: true\n        },\n        // Check Constraint Schema\n        schema: [{\n          id: 'name', label: gettext('Name'), type:'text', cell:'string',\n          disabled: 'isDisabled'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'comment', label: gettext('Comment'), type: 'multiline', cell:\n          'string', mode: ['properties', 'create', 'edit'],\n          deps:['name'], disabled:function(m) {\n            var name = m.get('name');\n            if (!(name && name != '')) {\n              setTimeout(function(){\n                if(m.get('comment') && m.get('comment') !== '')\n                  m.set('comment', null);\n              },10);\n              return true;\n            } else {\n              return false;\n            }\n          }\n        },{\n          id: 'consrc', label: gettext('Check'), type: 'multiline', cell:\n          'string', group: gettext('Definition'), mode: ['properties',\n          'create', 'edit'], disabled: function(m) {\n            return ((_.has(m, 'handler') &&\n              !_.isUndefined(m.handler) &&\n              !_.isUndefined(m.get('oid'))) || (_.isFunction(m.isNew) && !m.isNew()));\n          }, editable: false\n        },{\n          id: 'connoinherit', label: gettext('No Inherit?'), type:\n          'switch', cell: 'boolean', group: gettext('Definition'), mode:\n          ['properties', 'create', 'edit'], min_version: 90200,\n          disabled: function(m) {\n            // Disabled if table is a partitioned table.\n            if ((_.has(m , 'top') && !_.isUndefined(m.top) && m.top.get('is_partitioned')) ||\n                (_.has(m, 'node_info') && _.has(m.node_info, 'table') &&\n                _.has(m.node_info.table, 'is_partitioned') && m.node_info.table.is_partitioned)\n            ){\n              setTimeout(function(){\n                  m.set('connoinherit', false);\n              },10);\n\n              return true;\n            }\n\n            return ((_.has(m, 'handler') &&\n              !_.isUndefined(m.handler) &&\n              !_.isUndefined(m.get('oid'))) || (_.isFunction(m.isNew) && !m.isNew()));\n          }\n        },{\n          id: 'convalidated', label: gettext(\"Don't validate?\"), type: 'switch', cell:\n          'boolean', group: gettext('Definition'), min_version: 90200,\n          disabled: function(m) {\n            if ((_.isFunction(m.isNew) && !m.isNew()) ||\n                  (_.has(m, 'handler') &&\n                  !_.isUndefined(m.handler) &&\n                  !_.isUndefined(m.get('oid')))) {\n\n              return !m.get(\"convalidated\");\n            } else {\n              return false;\n            }\n          },\n          mode: ['properties', 'create', 'edit']\n        }],\n        // Client Side Validation\n        validate: function() {\n          var err = {},\n              errmsg;\n\n          if (_.isUndefined(this.get('consrc')) || String(this.get('consrc')).replace(/^\\s+|\\s+$/g, '') == '') {\n            err['consrc'] = gettext('Check cannot be empty!');\n            errmsg = errmsg || err['consrc'];\n          }\n\n          this.errorModel.clear().set(err);\n\n          if (_.size(err)) {\n            this.trigger('on-status', {msg: errmsg});\n            return errmsg;\n          }\n\n          return null;\n\n        },\n        isDisabled: function(m){\n          if ((_.has(m, 'handler') &&\n              !_.isUndefined(m.handler) &&\n              !_.isUndefined(m.get('oid'))) ||\n            (_.isFunction(m.isNew) && !m.isNew())) {\n            var server = (this.node_info || m.top.node_info).server;\n            if (server.version < 90200)\n            {\n              return true;\n            }\n          }\n          return false;\n        }\n      }),\n      // Below function will enable right click menu for creating check constraint.\n      canCreate: function(itemData, item, data) {\n          // If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData, parents = [];\n          // To iterate over tree to check parent node\n          while (i) {\n            // If it is schema then allow user to c reate table\n            if (_.indexOf(['schema'], d._type) > -1)\n              return true;\n            parents.push(d._type);\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // If node is under catalog then do not allow 'create' menu\n          if (_.indexOf(parents, 'catalog') > -1) {\n            return false;\n          } else {\n            return true;\n          }\n      }\n  });\n\n  }\n\n  return pgBrowser.Nodes['check_constraints'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/check_constraint/static/js/check_constraint.js","define('pgadmin.node.foreign_key', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'pgadmin.alertifyjs',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  var formatNode = function(opt) {\n        if (!opt.id) {\n          return opt.text;\n        }\n\n        var optimage = $(opt.element).data('image');\n\n        if(!optimage) {\n          return opt.text;\n        } else {\n          return $(\n            '<span><span class=\"wcTabIcon ' + optimage + '\"/>' + opt.text + '</span>'\n          );\n        }\n      },\n      headerSelectControlTemplate = _.template([\n        '<div class=\"<%=Backform.controlsClassName%> <%=extraClasses.join(\\' \\')%>\">',\n        '  <select class=\"pgadmin-node-select form-control\" name=\"<%=name%>\" style=\"width:100%;\" value=\"<%-value%>\" <%=disabled ? \"disabled\" : \"\"%> <%=required ? \"required\" : \"\"%> >',\n        '    <%=select2.first_empty ? \" <option></option>\" : \"\"%>',\n        '    <% for (var i=0; i < options.length; i++) { %>',\n        '    <% var option = options[i]; %>',\n        '    <option <% if (option.image) { %> data-image=<%= option.image %> <% } %> value=<%= formatter.fromRaw(option.value) %> <%=option.value === rawValue ? \"selected=\\'selected\\'\" : \"\" %>><%-option.label%></option>',\n        '    <% } %>',\n        '  </select>',\n        '</div>'].join(\"\\n\")\n      );\n\n  var ForeignKeyColumnModel = pgBrowser.Node.Model.extend({\n    defaults: {\n      local_column: undefined,\n      references: undefined,\n      referenced: undefined\n    },\n    schema: [{\n        id: 'local_column', label:'Local', type:'text', editable: false,\n        cellHeaderClasses: 'width_percent_50', cell:'string',\n        headerCell: Backgrid.Extension.CustomHeaderCell\n      },{\n        id: 'referenced', label:'Referenced', type: 'text', editable: false,\n        cell:'string', cellHeaderClasses: 'width_percent_50',\n        headerCell: Backgrid.Extension.CustomHeaderCell\n      }]\n  });\n\n  var ForeignKeyColumnControl =  Backform.ForeignKeyColumnControl =\n    Backform.UniqueColCollectionControl.extend({\n\n    initialize: function(opts) {\n      Backform.UniqueColCollectionControl.prototype.initialize.apply(\n        this, arguments\n          );\n\n      var self = this,\n        node = 'foreign_key',\n        headerSchema = [{\n          id: 'local_column', label:'', type:'text',\n          node: 'column', control: Backform.NodeListByNameControl.extend({\n            initialize: function() {\n              // Here we will decide if we need to call URL\n              // Or fetch the data from parent columns collection\n                if(self.model.handler) {\n                  Backform.Select2Control.prototype.initialize.apply(this, arguments);\n                  // Do not listen for any event(s) for existing constraint.\n                  if (_.isUndefined(self.model.get('oid'))) {\n                    var tableCols = self.model.top.get('columns');\n                    this.listenTo(tableCols, 'remove' , this.removeColumn);\n                    this.listenTo(tableCols, 'change:name', this.resetColOptions);\n                  }\n\n                  this.custom_options();\n                } else {\n                  Backform.NodeListByNameControl.prototype.initialize.apply(this, arguments);\n                }\n            },\n            removeColumn: function (m) {\n              var that = this;\n              setTimeout(function   () {\n                that.custom_options();\n                that.render.apply(that);\n              }, 50);\n            },\n            resetColOptions: function(m) {\n              var that = this;\n\n              if (m.previous('name') ==  self.headerData.get('local_column')) {\n                /*\n                 * Table column name has changed so update\n                 * column name in foreign key as well.\n                 */\n                self.headerData.set(\n                  {\"local_column\": m.get('name')});\n                  self.headerDataChanged();\n              }\n\n              setTimeout(function () {\n                that.custom_options();\n                that.render.apply(that);\n              }, 50);\n            },\n            custom_options: function() {\n              // We will add all the columns entered by user in table model\n              var columns = self.model.top.get('columns'),\n                  added_columns_from_tables = [];\n\n              if (columns.length > 0) {\n                _.each(columns.models, function(m) {\n                    var col = m.get('name');\n                    if(!_.isUndefined(col) && !_.isNull(col)) {\n                      added_columns_from_tables.push(\n                        {label: col, value: col, image:'icon-column'}\n                      );\n                    }\n                });\n              }\n              // Set the values in to options so that user can select\n              this.field.set('options', added_columns_from_tables);\n            },\n            template: headerSelectControlTemplate,\n            remove: function () {\n              if(self.model.handler) {\n                var tableCols = self.model.top.get('columns');\n                this.stopListening(tableCols, 'remove' , this.removeColumn);\n                this.stopListening(tableCols, 'change:name' , this.resetColOptions);\n\n                Backform.Select2Control.prototype.remove.apply(this, arguments);\n\n              } else {\n                Backform.NodeListByNameControl.prototype.remove.apply(this, arguments);\n              }\n            }\n          }),\n          select2: {\n            allowClear: false, width: 'style',\n            placeholder: gettext('Select column'),\n            first_empty: !_.isUndefined(self.model.get('oid'))\n          },\n          version_compatible: self.field.get('version_compatible'),\n          disabled: function(m) {\n            return !_.isUndefined(self.model.get('oid'));\n          }\n        },{\n          id: 'references', label:'', type: 'text', cache_level: 'server',\n          select2: {\n            allowClear: false, width: 'style',\n            placeholder: 'Select foreign table',\n          }, first_empty: true,\n          control: Backform.NodeListByNameControl.extend({\n            formatter: Backform.ControlFormatter,\n            template: headerSelectControlTemplate\n            }),\n          url: 'all_tables', node: 'table',\n          version_compatible: self.field.get('version_compatible'),\n          disabled: function(m) {\n            return !_.isUndefined(self.model.get('oid'));\n          },\n          transform: function(rows) {\n            var res = [];\n            _.each(rows, function(r) {\n              res.push({\n                'value': r.value,\n                'image': \"icon-table\",\n                'label': r.label\n              });\n            });\n            return res;\n          }\n        },{\n          id: 'referenced', label:'', type: 'text', cache_level: 'server',\n          transform: function(rows) {\n            var res = [];\n            _.each(rows, function(r) {\n              res.push({\n                'value': r.name,\n                'image': 'icon-column',\n                'label': r.name\n              });\n            });\n            return res;\n          },\n          control: Backform.Select2Control.extend({\n            formatter: Backform.ControlFormatter,\n            template: headerSelectControlTemplate,\n            render: function() {\n              var self = this,\n              url = self.field.get('url') || self.defaults.url,\n              m = self.model,\n              tid = m.get('references');\n\n              // Clear any existing value before setting new options.\n              m.set(self.field.get('name'), null, {silent: true});\n\n              if (url && !_.isUndefined(tid) && !_.isNull(tid) && tid != '') {\n                var node = this.field.get('schema_node'),\n                    node_info = this.field.get('node_info'),\n                    full_url = node.generate_url.apply(\n                      node, [\n                        null, url, this.field.get('node_data'),\n                        this.field.get('url_with_id') || false, node_info\n                      ]),\n                    data = [];\n\n                if (this.field.get('version_compatible')) {\n                  m.trigger('pgadmin:view:fetching', m, self.field);\n                  $.ajax({\n                    async: false,\n                    data : {tid:tid},\n                    url: full_url,\n                    success: function(res) {\n                      data = res.data;\n                    },\n                    error: function() {\n                      m.trigger('pgadmin:view:fetch:error', m, self.field);\n                    }\n                  });\n                  m.trigger('pgadmin:view:fetched', m, self.field);\n                }\n                /*\n                 * Transform the data\n                 */\n                var transform = this.field.get('transform') || self.defaults.transform;\n                if (transform && _.isFunction(transform)) {\n                  // We will transform the data later, when rendering.\n                  // It will allow us to generate different data based on the\n                  // dependencies.\n                  self.field.set('options', transform.bind(self, data));\n                } else {\n                  self.field.set('options', data);\n                }\n              } else {\n                self.field.set('options', []);\n              }\n              Backform.Select2Control.prototype.render.apply(this, arguments);\n              return this;\n            }\n          }), url: 'get_columns',\n          select2: {\n            allowClear: false,\n            width: \"style\",\n            placeholder: gettext('Select column'),\n            templateResult: formatNode,\n            templateSelection: formatNode\n          },\n          deps:['references'],  node: 'table',\n          version_compatible: self.field.get('version_compatible'),\n          disabled: function(m) {\n            return !_.isUndefined(self.model.get('oid'));\n          }\n        }],\n        headerDefaults = {local_column: null,\n                          references: null,\n                          referenced:null},\n        gridCols = ['local_column', 'references', 'referenced'];\n\n      if ((!self.model.isNew() && _.isUndefined(self.model.handler)) ||\n          (_.has(self.model, 'handler') &&\n          !_.isUndefined(self.model.handler) &&\n          !_.isUndefined(self.model.get('oid')))) {\n        var column = self.collection.first();\n        if (column) {\n          headerDefaults[\"references\"] = column.get(\"references\");\n        }\n      }\n\n      self.headerData = new (Backbone.Model.extend({\n        defaults: headerDefaults,\n        schema: headerSchema\n      }))({});\n\n      var headerGroups = Backform.generateViewSchema(\n          self.field.get('node_info'), self.headerData, 'create',\n          node, self.field.get('node_data')\n          ),\n          fields = [];\n\n      _.each(headerGroups, function(o) {\n        fields = fields.concat(o.fields);\n      });\n\n      self.headerFields = new Backform.Fields(fields);\n      self.gridSchema = Backform.generateGridColumnsFromModel(\n          //null, ForeignKeyColumnModel, 'edit', gridCols\n          self.field.get('node_info'), self.field.get('model'), 'edit',\n          gridCols, self.field.get('schema_node')\n          );\n\n      self.controls = [];\n      self.listenTo(self.headerData, \"change\", self.headerDataChanged);\n      self.listenTo(self.headerData, \"select2\", self.headerDataChanged);\n      self.listenTo(self.collection, \"add\", self.onAddorRemoveColumns);\n      self.listenTo(self.collection, \"remove\", self.onAddorRemoveColumns);\n    },\n\n    generateHeader: function(data) {\n      var header = [\n        '<div class=\"subnode-header-form\">',\n        ' <div class=\"container-fluid\">',\n        '  <div class=\"row\">',\n        '   <div class=\"col-md-4\">',\n        '    <label class=\"control-label\"><%-column_label%></label>',\n        '   </div>',\n        '   <div class=\"col-md-6\" header=\"local_column\"></div>',\n        '   <div class=\"col-md-2\">',\n        '     <button class=\"btn-sm btn-default add fa fa-plus\" <%=canAdd ? \"\" : \"disabled=\\'disabled\\'\"%> ></button>',\n        '   </div>',\n        '  </div>',\n        '  <div class=\"row\">',\n        '   <div class=\"col-md-4\">',\n        '    <label class=\"control-label\"><%-references_label%></label>',\n        '   </div>',\n        '   <div class=\"col-md-6\" header=\"references\"></div>',\n        '  </div>',\n        '  <div class=\"row\">',\n        '   <div class=\"col-md-4\">',\n        '    <label class=\"control-label\"><%-referenced_label%></label>',\n        '   </div>',\n        '   <div class=\"col-md-6\" header=\"referenced\"></div>',\n        '  </div>',\n        ' </div>',\n        '</div>',].join(\"\\n\")\n\n      _.extend(data, {\n        column_label: gettext('Local column'),\n        references_label: gettext('References'),\n        referenced_label: gettext('Referencing')\n      });\n\n      var self = this,\n          headerTmpl = _.template(header),\n          $header = $(headerTmpl(data)),\n          controls = this.controls;\n\n      this.headerFields.each(function(field) {\n        var control = new (field.get(\"control\"))({\n          field: field,\n          model: self.headerData\n        });\n\n        $header.find('div[header=\"' + field.get('name') + '\"]').append(\n          control.render().$el\n        );\n\n        controls.push(control);\n      });\n\n      // We should not show add but in properties mode\n      if (data.mode == 'properties') {\n        $header.html('');\n      }\n\n      self.$header = $header;\n\n      return $header;\n    },\n\n    events: _.extend(\n                {}, Backform.UniqueColCollectionControl.prototype.events,\n                {'click button.add': 'addColumns'}\n                ),\n\n    showGridControl: function(data) {\n\n      var self = this,\n          titleTmpl = _.template([\n            \"<div class='subnode-header'>\",\n            \"<label class='control-label'><%-label%></label>\",\n            \"</div>\"].join(\"\\n\")),\n          $gridBody =\n            $(\"<div class='pgadmin-control-group backgrid form-group col-xs-12 object subnode'></div>\").append(\n              // Append titleTmpl only if create/edit mode\n              data.mode !== 'properties' ? titleTmpl({label: data.label}) : ''\n            );\n\n      // Clean up existing grid if any (in case of re-render)\n      if (self.grid) {\n        self.grid.remove();\n      }\n\n      $gridBody.append(self.generateHeader(data));\n\n      var gridSchema = _.clone(this.gridSchema);\n\n      // Insert Delete Cell into Grid\n      if (data.disabled == false && data.canDelete) {\n          gridSchema.columns.unshift({\n            name: \"pg-backform-delete\", label: \"\",\n            cell: Backgrid.Extension.DeleteCell,\n            editable: false, cell_priority: -1\n          });\n      }\n\n      // Initialize a new Grid instance\n      var grid = self.grid = new Backgrid.Grid({\n        columns: gridSchema.columns,\n        collection: self.collection,\n        className: \"backgrid table-bordered\"\n      });\n      self.$grid = grid.render().$el;\n\n      $gridBody.append(self.$grid);\n\n      setTimeout(function() {\n        self.headerData.set({\n          'local_column':\n          self.$header.find(\n            'div[header=\"local_column\"] select option:first'\n            ).val(),\n            'referenced':\n          self.$header.find(\n            'div[header=\"referenced\"] select option:first'\n            ).val(),\n            'references':\n          self.$header.find(\n            'div[header=\"references\"] select option:first'\n            ).val()\n            }, {silent:true}\n          );\n      }, 10);\n\n      // Remove unwanted class from grid to display it properly\n      if(data.mode === 'properties')\n        $gridBody.find('.subnode-header-form').removeClass('subnode-header-form');\n\n      // Render node grid\n      return $gridBody;\n    },\n\n    headerDataChanged: function() {\n      var self = this, val,\n          data = this.headerData.toJSON(),\n          inSelected = false,\n          checkVars = ['local_column', 'referenced'];\n\n      if (!self.$header) {\n        return;\n      }\n\n      if (self.control_data.canAdd) {\n        self.collection.each(function(m) {\n          if (!inSelected) {\n            _.each(checkVars, function(v) {\n              if (!inSelected) {\n                val = m.get(v);\n                inSelected = ((\n                  (_.isUndefined(val) || _.isNull(val)) &&\n                  (_.isUndefined(data[v]) || _.isNull(data[v]))\n                  ) ||\n                  (val == data[v]));\n              }\n            });\n          }\n        });\n      }\n      else {\n        inSelected = true;\n      }\n\n      self.$header.find('button.add').prop('disabled', inSelected);\n    },\n\n    addColumns: function(ev) {\n      ev.preventDefault();\n      var self = this,\n          local_column = self.headerData.get('local_column'),\n          referenced = self.headerData.get('referenced');\n\n      if (!local_column || local_column == '' ||\n          !referenced || referenced  =='') {\n        return false;\n      }\n\n      var m = new (self.field.get('model'))(\n                self.headerData.toJSON()),\n          coll = self.model.get(self.field.get('name'));\n\n      coll.add(m);\n\n      var idx = coll.indexOf(m);\n\n      // idx may not be always > -1 because our UniqueColCollection may\n      // remove 'm' if duplicate value found.\n      if (idx > -1) {\n        self.$grid.find('.new').removeClass('new');\n\n        var newRow = self.grid.body.rows[idx].$el;\n\n        newRow.addClass(\"new\");\n        $(newRow).pgMakeVisible('backform-tab');\n      } else {\n        //delete m;\n      }\n\n      return false;\n    },\n\n    onAddorRemoveColumns: function() {\n      var self = this;\n\n      // Wait for collection to be updated before checking for the button to be\n      // enabled, or not.\n      setTimeout(function() {\n        if (self.collection.length > 0) {\n          self.$header.find(\n            'div[header=\"references\"] select'\n            ).prop('disabled', true);\n        } else {\n          self.$header.find(\n            'div[header=\"references\"] select'\n            ).prop('disabled', false);\n        }\n\n        self.collection.trigger('pgadmin:columns:updated', self.collection);\n\n        self.headerDataChanged();\n\n        if ((!_.has(self.model, 'handler') || (_.has(self.model, 'handler') &&\n              _.isUndefined(self.model.handler))) ||\n            (_.has(self.model, 'handler') && !_.isUndefined(self.model.handler) &&\n            !_.isUndefined(self.model.handler.get('oid')))) {\n          self.getCoveringIndex();\n        }\n\n      }, 10);\n    },\n\n    getCoveringIndex: function() {\n\n      var self = this,\n          url = 'get_coveringindex',\n          m = self.model,\n          cols = [],\n          coveringindex = null;\n\n          self.collection.each(function(m){\n            cols.push(m.get('local_column'));\n          })\n\n          if (cols.length > 0) {\n            var node = this.field.get('schema_node'),\n              node_info = this.field.get('node_info'),\n              full_url = node.generate_url.apply(\n                node, [\n                  null, url, this.field.get('node_data'),\n                  this.field.get('url_with_id') || false, node_info\n                ]);\n\n            if (this.field.get('version_compatible')) {\n              m.trigger('pgadmin:view:fetching', m, self.field);\n              $.ajax({\n                async: false,\n                data : {cols:JSON.stringify(cols)},\n                url: full_url,\n                success: function(res) {\n                  coveringindex = res.data;\n                },\n                error: function() {\n                  m.trigger('pgadmin:view:fetch:error', m, self.field);\n                }\n              });\n              m.trigger('pgadmin:view:fetched', m, self.field);\n            }\n          }\n\n          if (coveringindex) {\n            m.set('hasindex', true);\n            m.set('autoindex', false);\n            m.set('coveringindex', coveringindex);\n          } else {\n            m.set('coveringindex', null);\n            m.set('autoindex', true);\n            m.set('hasindex', false);\n          }\n    },\n\n    remove: function() {\n      /*\n       * Stop listening the events registered by this control.\n       */\n      this.stopListening(this.headerData, \"change\", this.headerDataChanged);\n      this.listenTo(this.headerData, \"select2\", this.headerDataChanged);\n      this.listenTo(this.collection, \"remove\", this.onRemoveVariable);\n      // Remove header controls.\n      _.each(this.controls, function(controls) {\n        controls.remove();\n      });\n\n      ForeignKeyColumnControl.__super__.remove.apply(this, arguments);\n\n      // Remove the header model\n      delete (this.headerData);\n\n    }\n  });\n\n  // Extend the browser's node class for foreign key node\n  if (!pgBrowser.Nodes['foreign_key']) {\n    pgAdmin.Browser.Nodes['foreign_key'] = pgBrowser.Node.extend({\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      type: 'foreign_key',\n      label: gettext('Foreign key'),\n      collection_type: 'coll-constraints',\n      sqlAlterHelp: 'ddl-alter.html',\n      sqlCreateHelp: 'ddl-constraints.html',\n      dialogHelp: url_for('help.static', {'filename': 'foreign_key_dialog.html'}),\n      hasSQL: true,\n      parent_type: ['table','partition'],\n      canDrop: true,\n      canDropCascade: true,\n      hasDepends: true,\n      Init: function() {\n        /* Avoid multiple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_foreign_key_on_coll', node: 'coll-constraints', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Foreign key...'),\n          icon: 'wcTabIcon icon-foreign_key', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        },{\n          name: 'validate_foreign_key', node: 'foreign_key', module: this,\n          applies: ['object', 'context'], callback: 'validate_foreign_key',\n          category: 'validate', priority: 4, label: gettext('Validate foreign key'),\n          icon: 'fa fa-link', enable : 'is_not_valid'\n        }\n        ]);\n      },\n      is_not_valid: function(node) {\n        return (node && !node.valid);\n      },\n      callbacks: {\n        validate_foreign_key: function(args) {\n          var input = args || {},\n          obj = this,\n          t = pgBrowser.tree,\n          i = input.item || t.selected(),\n          d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d) {\n            return false;\n          }\n          var data = d;\n          $.ajax({\n            url: obj.generate_url(i, 'validate', d, true),\n            type:'GET',\n            success: function(res) {\n              if (res.success == 1) {\n                alertify.success(res.info);\n                t.removeIcon(i);\n                data.valid = true;\n                data.icon = 'icon-foreign_key';\n                t.addIcon(i, {icon: data.icon});\n                setTimeout(function() {t.deselect(i);}, 10);\n                setTimeout(function() {t.select(i);}, 100);\n              }\n            },\n            error: function(xhr, status, error) {\n              try {\n                var err = $.parseJSON(xhr.responseText);\n                if (err.success == 0) {\n                  alertify.error(err.errormsg);\n                }\n              } catch (e) {}\n              t.unload(i);\n            }\n            });\n\n          return false;\n        }\n      },\n      // Define the model for foreign key node\n      model: pgAdmin.Browser.Node.Model.extend({\n        idAttribute: 'oid',\n\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          comment: undefined,\n          condeferrable: undefined,\n          condeferred: undefined,\n          confmatchtype: undefined,\n          convalidated: undefined,\n          columns: undefined,\n          confupdtype: \"a\",\n          confdeltype: \"a\",\n          autoindex: true,\n          coveringindex: undefined,\n          hasindex:undefined\n        },\n        toJSON: function () {\n          var d = pgAdmin.Browser.Node.Model.prototype.toJSON.apply(this, arguments);\n          delete d.hasindex;\n          return d;\n        },\n        // Define the schema for the foreign key node\n        schema: [{\n          id: 'name', label: gettext('Name'), type: 'text',\n          mode: ['properties', 'create', 'edit'], editable:true,\n          headerCell: Backgrid.Extension.CustomHeaderCell, cellHeaderClasses: 'width_percent_50'\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'comment', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', mode: ['properties', 'create', 'edit'],\n          deps:['name'], disabled:function(m) {\n            var name = m.get('name');\n            if (!(name && name != '')) {\n              setTimeout(function(){\n              if(m.get('comment') && m.get('comment') !== '')\n                 m.set('comment', null);\n              },10);\n              return true;\n            } else {\n              return false;\n            }\n          }\n        },{\n          id: 'condeferrable', label: gettext('Deferrable?'),\n          type: 'switch', group: gettext('Definition'),\n          disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'handler') && !_.isUndefined(m.handler)) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n            // We can't update condeferrable of existing foreign key.\n            return !m.isNew();\n          }\n        },{\n          id: 'condeferred', label: gettext('Deferred?'),\n          type: 'switch', group: gettext('Definition'),\n          deps: ['condeferrable'],\n          disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'handler') && !_.isUndefined(m.handler)) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            } else if(!m.isNew()) {\n              return true;\n            }\n            // Disable if condeferred is false or unselected.\n            if(m.get('condeferrable') == true) {\n              return false;\n            } else {\n              setTimeout(function(){\n                if(m.get('condeferred'))\n                  m.set('condeferred', false);\n              },10);\n              return true;\n            }\n          }\n        },{\n          id: 'confmatchtype', label: gettext('Match type'),\n          type: 'switch', group: gettext('Definition'),\n          options: {\n            onText: 'FULL',\n            offText: 'SIMPLE',\n          },disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'handler') && !_.isUndefined(m.handler)) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n            // We can't update condeferred of existing foreign key.\n            return !m.isNew();\n          }\n        },{\n          id: 'convalidated', label: gettext(\"Validated?\"),\n          type: 'switch', group: gettext('Definition'),\n          options: {\n            onText: gettext('Yes'),\n            offText: gettext('No')\n          },disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'handler') && !_.isUndefined(m.handler)) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed\n                return !(_.isUndefined(m.get('oid')) || m.get(\"convalidated\"));\n            }\n            // We can't update condeferred of existing foreign key.\n            return !(m.isNew() || m.get(\"convalidated\"));\n          }\n        },{\n          id: 'autoindex', label: gettext('Auto FK index?'),\n          type: 'switch', group: gettext('Definition'),\n          deps: ['name', 'hasindex'],\n          options: {\n            onText: gettext('Yes'),\n            offText: gettext('No')\n          },disabled: function(m) {\n            var index = m.get('coveringindex'),\n                autoindex = m.get('autoindex'),\n                setIndexName = function() {\n                  var name = m.get('name'),\n                  oldindex = 'fki_'+m.previous ('name');\n\n                  if (m.get('hasindex')) {\n                    return true;\n                  } else if (m.get('autoindex') && !_.isUndefined(name) && !_.isNull(name) &&\n                              name != '' && (_.isUndefined(index) || _.isNull(index) ||\n                              index == '' || index == oldindex)) {\n                    var newIndex = 'fki_' + name;\n                    m.set('coveringindex', newIndex);\n                    return false;\n                  } else {\n                    return false;\n                  }\n                };\n            // If we are in table edit mode then\n            if (_.has(m, 'handler') && !_.isUndefined(m.handler)) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                if(_.isUndefined(m.get('oid')) && _.isUndefined(m.handler.get('oid'))) {\n                  setTimeout(function () {\n                    if(m.get('autoindex'))\n                      m.set('autoindex', false);\n                  }, 10);\n                  return true;\n                } else {\n                  return setIndexName();\n                }\n            } else {\n              if(!m.isNew() && autoindex && !_.isUndefined(index) &&\n                    !_.isNull(index) && index != '' && m.get('hasindex')) {\n                return true;\n              } else {\n                return setIndexName();\n              }\n            }\n          }\n        },{\n          id: 'coveringindex', label: gettext('Covering index'), type: 'text',\n          mode: ['properties', 'create', 'edit'], group: gettext('Definition'),\n          deps:['autoindex', 'hasindex'],\n          disabled: function(m) {\n            var index = m.get('coveringindex'),\n              setIndexName = function() {\n                if (m.get('hasindex')) {\n                  return true;\n                } else if (!m.get('autoindex')) {\n                  setTimeout(function () {\n                    m.set('coveringindex', null);\n                  });\n                  return true;\n                } else {\n                  setTimeout(function () {\n                    var name = m.get('name'),\n                      newIndex = 'fki_' + name;\n\n                      if (m.get('autoindex') && !_.isUndefined(name) && !_.isNull(name) &&\n                            name != '') {\n                        m.set('coveringindex', newIndex);\n                      }\n                  });\n\n                  return false;\n                }\n              };\n\n            // If we are in table edit mode then\n            if (_.has(m, 'handler') && !_.isUndefined(m.handler)) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                if (_.isUndefined(m.get('oid')) && _.isUndefined(m.handler.get('oid'))) {\n                  return true;\n                } else {\n                  return setIndexName();\n                }\n\n            } else if (!m.isNew() && m.get('autoindex') && !_.isUndefined(index)\n                        && _.isNull(index) && index == '') {\n              return true;\n            }\n\n            return setIndexName();\n          }\n        },{\n          id: 'columns', label: gettext('Columns'),\n          type: 'collection', group: gettext('Columns'), disabled: false,\n          node: 'foreign_key', editable: false, headerCell: Backgrid.Extension.CustomHeaderCell,\n          cellHeaderClasses: 'width_percent_50',\n          cell: Backgrid.StringCell.extend({\n            initialize: function() {\n              Backgrid.StringCell.prototype.initialize.apply(this, arguments);\n              var self = this,\n                collection = this.model.get('columns');\n              // Do not listen for any event(s) for existing constraint.\n              if (_.isUndefined(self.model.get('oid'))) {\n                var tableCols = self.model.top.get('columns');\n                self.listenTo(tableCols, 'remove' , self.removeColumn);\n                self.listenTo(tableCols, 'change:name', self.resetColOptions);\n              }\n\n              self.model.get('columns').on('pgadmin:columns:updated', function() {\n                self.render.apply(self);\n              });\n              self.listenTo(collection, \"add\", self.render);\n              self.listenTo(collection, \"remove\", self.render);\n            },\n            removeColumn: function(m){\n              var self = this,\n                  removedCols = self.model.get('columns').where(\n                    {local_column: m.get('name')}\n                    );\n\n              self.model.get('columns').remove(removedCols);\n              setTimeout(function () {\n                self.render();\n              }, 10);\n\n              setTimeout(function () {\n                var constraints = self.model.top.get(\"foreign_key\");\n                var removed = [];\n                constraints.each(function(constraint) {\n                  if (constraint.get(\"columns\").length == 0) {\n                     removed.push(constraint);\n                  }\n                });\n                constraints.remove(removed);\n              },100);\n            },\n            resetColOptions : function(m) {\n                var self = this,\n                  updatedCols = self.model.get('columns').where(\n                  {\"local_column\": m.previous('name')}\n                  );\n                if (updatedCols.length > 0) {\n                  /*\n                   * Table column name has changed so update\n                   * column name in foreign key as well.\n                   */\n                  updatedCols[0].set(\n                  {\"local_column\": m.get('name')});\n                }\n\n                setTimeout(function () {\n                  self.render();\n                }, 10);\n            },\n            formatter: {\n              fromRaw: function (rawValue, model) {\n                var cols = [],\n                    remote_cols = [];\n                if (rawValue.length > 0) {\n                  rawValue.each(function(col){\n                    cols.push(col.get('local_column'));\n                    remote_cols.push(col.get('referenced'))\n                  });\n                  return '('+cols.join(', ')+') -> ('+ remote_cols.join(', ')+')';\n                }\n                return \"\";\n              },\n              toRaw: function (val, model) {\n                return val;\n              }\n            },\n            render: function() {\n              return Backgrid.StringCell.prototype.render.apply(this, arguments);\n            },\n            remove: function() {\n              var tableCols = this.model.top.get('columns');\n\n              this.stopListening(tableCols, 'remove' , self.removeColumn);\n              this.stopListening(tableCols, 'change:name' , self.resetColOptions);\n\n              Backgrid.StringCell.prototype.remove.apply(this, arguments);\n            }\n          }),\n          canAdd: function(m) {\n            // We can't update columns of existing foreign key.\n            return m.isNew();\n          }, canDelete: true,\n          control: ForeignKeyColumnControl,\n          model: ForeignKeyColumnModel,\n          disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'handler') && !_.isUndefined(m.handler)) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n            // We can't update columns of existing foreign key.\n            return !m.isNew();\n            }\n        },{\n          id: 'confupdtype', label: gettext('On update'),\n          type:\"select2\", group: gettext('Action'), mode: ['edit','create'],\n          select2:{width:\"50%\", allowClear: false},\n          options: [\n            {label: \"NO ACTION\", value: \"a\"},\n            {label: \"RESTRICT\", value: \"r\"},\n            {label: \"CASCADE\", value: \"c\"},\n            {label: \"SET NULL\", value: \"n\"},\n            {label: \"SET DEFAULT\", value: \"d\"}\n          ],disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'handler') && !_.isUndefined(m.handler)) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n            // We can't update confupdtype of existing foreign key.\n            return !m.isNew();\n          }\n        },{\n          id: 'confdeltype', label: gettext('On delete'),\n          type:\"select2\", group: gettext('Action'), mode: ['edit','create'],\n          select2:{width:\"50%\", allowClear: false},\n          options: [\n            {label: \"NO ACTION\", value: \"a\"},\n            {label: \"RESTRICT\", value: \"r\"},\n            {label: \"CASCADE\", value: \"c\"},\n            {label: \"SET NULL\", value: \"n\"},\n            {label: \"SET DEFAULT\", value: \"d\"}\n          ],disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'handler') && !_.isUndefined(m.handler)) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n            // We can't update confdeltype of existing foreign key.\n            return !m.isNew();\n          }\n        }\n        ],\n        validate: function() {\n          this.errorModel.clear();\n\n          var columns = this.get('columns');\n          if ((_.isUndefined(columns) || _.isNull(columns) || columns.length < 1)) {\n            var msg = gettext('Please specify columns for Foreign key.');\n            this.errorModel.set('columns', msg);\n            return msg;\n          }\n\n          var coveringindex = this.get('coveringindex'),\n              autoindex = this.get('autoindex');\n          if (autoindex && (_.isUndefined(coveringindex) || _.isNull(coveringindex) ||\n            String(coveringindex).replace(/^\\s+|\\s+$/g, '') == '')) {\n            var msg = gettext('Please specify covering index name.');\n            this.errorModel.set('coveringindex', msg);\n            return msg;\n          }\n\n          return null;\n        }\n      }),\n\n      canCreate: function(itemData, item, data) {\n          // If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData, parents = [],\n            immediate_parent_table_found = false,\n            is_immediate_parent_table_partitioned = false;\n          // To iterate over tree to check parent node\n          while (i) {\n            // If table is partitioned table then return false\n            if (!immediate_parent_table_found && (d._type == 'table' || d._type == 'partition')) {\n              immediate_parent_table_found = true;\n              if ('is_partitioned' in d && d.is_partitioned) {\n                is_immediate_parent_table_partitioned = true;\n              }\n            }\n\n            // If it is schema then allow user to c reate table\n            if (_.indexOf(['schema'], d._type) > -1)\n              return !is_immediate_parent_table_partitioned;\n            parents.push(d._type);\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // If node is under catalog then do not allow 'create' menu\n          if (_.indexOf(parents, 'catalog') > -1) {\n            return false;\n          } else {\n            return !is_immediate_parent_table_partitioned;\n          }\n      }\n    });\n  }\n\n  return pgBrowser.Nodes['foreign_key'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/foreign_key/static/js/foreign_key.js","define('pgadmin.node.exclusion_constraint', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, Alertify) {\n\n  var ExclusionConstraintColumnModel = pgBrowser.Node.Model.extend({\n    defaults: {\n      column: undefined,\n      oper_class: undefined,\n      order: false,\n      nulls_order: false,\n      operator:undefined,\n      col_type:undefined,\n      is_sort_nulls_applicable: true\n    },\n    toJSON: function () {\n      var d = pgBrowser.Node.Model.prototype.toJSON.apply(this, arguments);\n      delete d.col_type;\n      return d;\n    },\n    schema: [{\n        id: 'column', label: gettext('Column'), type:'text', editable: false,\n        cell:'string'\n      },{\n        id: 'oper_class', label: gettext('Operator class'), type:'text',\n        node: 'table', url: 'get_oper_class', first_empty: true,\n        editable: function(m) {\n          if (m instanceof Backbone.Collection) {\n            return true;\n          } else if ((_.has(m.collection, 'handler') &&\n                !_.isUndefined(m.collection.handler) &&\n                !_.isUndefined(m.collection.handler.get('oid')))) {\n            return false;\n          } else if (_.has(m.collection, 'handler') &&\n                !_.isUndefined(m.collection.handler) &&\n                !_.isUndefined(m.collection.handler.get('amname')) &&\n                m.collection.handler.get('amname') != 'btree') {\n            // Disable if access method is not btree\n            return false;\n          }\n          return true;\n        },\n        select2: {\n          allowClear: true, width: 'style', tags: true,\n          placeholder: gettext('Select the operator class')\n        }, cell: Backgrid.Extension.Select2Cell.extend({\n          initialize: function () {\n            Backgrid.Extension.Select2Cell.prototype.initialize.apply(this, arguments);\n\n          var self = this,\n            url = self.column.get('url') || self.defaults.url,\n            m = self.model,\n            indextype = self.model.collection.handler.get('amname');\n\n            if (url && (indextype == 'btree' || _.isUndefined(indextype) ||\n                _.isNull(indextype) || indextype == '')) {\n              // Set sort_order and nulls to true if access method is btree\n              setTimeout(function() {\n                m.set('order', true);\n                m.set('nulls_order', true);\n              }, 10);\n\n              var node = this.column.get('schema_node'),\n                  eventHandler = m.top || m,\n                  node_info = this.column.get('node_info'),\n                  full_url = node.generate_url.apply(\n                    node, [\n                      null, url, this.column.get('node_data'),\n                      this.column.get('url_with_id') || false, node_info\n                    ]),\n                  data = [];\n\n              indextype = 'btree';\n\n              if (this.column.get('version_compatible')) {\n                eventHandler.trigger('pgadmin:view:fetching', m, self.column);\n                $.ajax({\n                  async: false,\n                  data : {indextype:indextype},\n                  url: full_url,\n                  success: function(res) {\n                    data = res.data;\n                    self.column.set('options', data);\n                  },\n                  error: function() {\n                    eventHandler.trigger('pgadmin:view:fetch:error', m, self.column);\n                  }\n                });\n                eventHandler.trigger('pgadmin:view:fetched', m, self.column);\n              }\n            } else {\n              self.column.set('options', []);\n            }\n          }\n        })\n      },{\n        id: 'order', label: gettext('DESC'), type: 'switch',\n        options: {\n          onText: 'ASC',\n          offText: 'DESC',\n        },\n        editable: function(m) {\n          if (m instanceof Backbone.Collection) {\n            return true;\n          } else if ((_.has(m.collection, 'handler') &&\n                !_.isUndefined(m.collection.handler) &&\n                !_.isUndefined(m.collection.handler.get('oid')))) {\n            return false;\n          } else if (m.top.get('amname') === 'btree') {\n            m.set('is_sort_nulls_applicable', true);\n            return true;\n          } else {\n            m.set('is_sort_nulls_applicable', false);\n            return false;\n          }\n        }\n      },{\n        id: 'nulls_order', label: gettext('NULLs order'), type:\"switch\",\n        options: {\n          onText: 'FIRST',\n          offText: 'LAST',\n        },\n        editable: function(m) {\n          if (m instanceof Backbone.Collection) {\n            return true;\n          } else if ((_.has(m.collection, 'handler') &&\n                !_.isUndefined(m.collection.handler) &&\n                !_.isUndefined(m.collection.handler.get('oid')))) {\n            return false;\n          } else if (m.top.get('amname') === 'btree') {\n              m.set('is_sort_nulls_applicable', true);\n              return true;\n          } else {\n            m.set('is_sort_nulls_applicable', false);\n            return false;\n          }\n        }\n      },{\n        id: 'operator', label: gettext('Operator'), type: 'text',\n        node: 'table', url: 'get_operator',\n        editable: function(m) {\n          if (m instanceof Backbone.Collection) {\n            return true;\n          }\n          if ((_.has(m.collection, 'handler') &&\n                !_.isUndefined(m.collection.handler) &&\n                !_.isUndefined(m.collection.handler.get('oid')))) {\n            return false;\n          }\n          return true;\n        },\n        select2: {\n          allowClear: false, width: 'style',\n        }, cell: Backgrid.Extension.Select2Cell.extend({\n        initialize: function () {\n          Backgrid.Extension.Select2Cell.prototype.initialize.apply(this, arguments);\n\n          var self = this,\n            url = self.column.get('url') || self.defaults.url,\n            m = self.model,\n            col_type = self.model.get('col_type');\n\n            self.column.set('options', []);\n\n            if (url && !_.isUndefined(col_type) && !_.isNull(col_type) && col_type != '') {\n              var node = this.column.get('schema_node'),\n                  eventHandler = m.top || m,\n                  node_info = this.column.get('node_info'),\n                  full_url = node.generate_url.apply(\n                    node, [\n                      null, url, this.column.get('node_data'),\n                      this.column.get('url_with_id') || false, node_info\n                    ]),\n                  data = [];\n\n              if (this.column.get('version_compatible')) {\n                eventHandler.trigger('pgadmin:view:fetching', m, self.column);\n                $.ajax({\n                  async: false,\n                  data : {col_type:col_type},\n                  url: full_url,\n                  success: function(res) {\n                    data = res.data;\n                    self.column.set('options', data);\n                  },\n                  error: function() {\n                    eventHandler.trigger('pgadmin:view:fetch:error', m, self.column);\n                  }\n                });\n                eventHandler.trigger('pgadmin:view:fetched', m, self.column);\n              }\n            }\n          }\n        })\n      }\n    ],\n    validate: function() {\n      this.errorModel.clear();\n      var operator = this.get('operator'),\n        column_name = this.get('column');\n      if (_.isUndefined(operator) || _.isNull(operator)) {\n        var msg = gettext('Please specify operator for column: ') + column_name;\n        this.errorModel.set('operator', msg);\n        return msg;\n      }\n      return null;\n    }\n  });\n\n  var ExclusionConstraintColumnControl =  Backform.ExclusionConstraintColumnControl =\n    Backform.UniqueColCollectionControl.extend({\n\n    initialize: function(opts) {\n      Backform.UniqueColCollectionControl.prototype.initialize.apply(\n        this, arguments\n          );\n\n      var self = this,\n        node = 'exclusion_constraint',\n        headerSchema = [{\n          id: 'column', label:'', type:'text',\n          node: 'column', control: Backform.NodeListByNameControl.extend({\n            initialize: function() {\n              // Here we will decide if we need to call URL\n              // Or fetch the data from parent columns collection\n                if(self.model.handler) {\n                  Backform.Select2Control.prototype.initialize.apply(this, arguments);\n                  // Do not listen for any event(s) for existing constraint.\n                  if (_.isUndefined(self.model.get('oid'))) {\n                    var tableCols = self.model.top.get('columns');\n                    this.listenTo(tableCols, 'remove' , this.removeColumn);\n                    this.listenTo(tableCols, 'change:name', this.resetColOptions);\n                    this.listenTo(tableCols, 'change:cltype', this.resetColOptions);\n                  }\n                  this.custom_options();\n                } else {\n                  Backform.NodeListByNameControl.prototype.initialize.apply(this, arguments);\n                }\n            },\n            removeColumn: function (m) {\n              var that = this;\n              setTimeout(function   () {\n                that.custom_options();\n                that.render.apply(that);\n              }, 50);\n            },\n            resetColOptions: function(m) {\n              var that = this;\n\n              if (m.previous('name') ==  self.headerData.get('column')) {\n                /*\n                 * Table column name has changed so update\n                 * column name in exclusion constraint as well.\n                 */\n                self.headerData.set(\n                  {\"column\": m.get('name')});\n                  self.headerDataChanged();\n              }\n\n              setTimeout(function () {\n                that.custom_options();\n                that.render.apply(that);\n              }, 50);\n            },\n            custom_options: function() {\n              // We will add all the columns entered by user in table model\n              var columns = self.model.top.get('columns'),\n                  added_columns_from_tables = [],\n                  col_types = [];\n\n              if (columns.length > 0) {\n                _.each(columns.models, function(m) {\n                  var col = m.get('name');\n                  if(!_.isUndefined(col) && !_.isNull(col)) {\n                    added_columns_from_tables.push({\n                      label: col, value: col, image:'icon-column'\n                      });\n                    col_types.push({name:col, type:m.get('cltype')});\n                  }\n                });\n              }\n              // Set the values in to options so that user can select\n              this.field.set('options', added_columns_from_tables);\n              self.field.set('col_types', col_types);\n            },\n            remove: function () {\n              if(self.model.handler) {\n                  var tableCols = self.model.top.get('columns');\n                  this.stopListening(tableCols, 'remove' , this.removeColumn);\n                  this.stopListening(tableCols, 'change:name' , this.resetColOptions);\n                  this.stopListening(tableCols, 'change:cltype' , this.resetColOptions);\n\n                Backform.Select2Control.prototype.remove.apply(this, arguments);\n\n              } else {\n                Backform.NodeListByNameControl.prototype.remove.apply(this, arguments);\n              }\n            },\n            template: _.template([\n              '<div class=\"<%=Backform.controlsClassName%> <%=extraClasses.join(\\' \\')%>\">',\n              '  <select class=\"pgadmin-node-select form-control\" name=\"<%=name%>\" style=\"width:100%;\" value=\"<%-value%>\" <%=disabled ? \"disabled\" : \"\"%> <%=required ? \"required\" : \"\"%> >',\n              '    <% for (var i=0; i < options.length; i++) { %>',\n              '    <% var option = options[i]; %>',\n              '    <option <% if (option.image) { %> data-image=<%= option.image %> <% } %> value=<%= formatter.fromRaw(option.value) %> <%=option.value === rawValue ? \"selected=\\'selected\\'\" : \"\" %>><%-option.label%></option>',\n              '    <% } %>',\n              '  </select>',\n              '</div>'].join(\"\\n\"))\n          }),\n          transform: function(rows) {\n            // This will only get called in case of NodeListByNameControl.\n\n            var that = this,\n                node = that.field.get('schema_node'),\n                res = [],\n                col_types = [],\n                filter = that.field.get('filter') || function() { return true; };\n\n            filter = filter.bind(that);\n\n            _.each(rows, function(r) {\n              if (filter(r)) {\n                var l = (_.isFunction(node['node_label']) ?\n                      (node['node_label']).apply(node, [r, that.model, that]) :\n                      r.label),\n                    image = (_.isFunction(node['node_image']) ?\n                      (node['node_image']).apply(\n                        node, [r, that.model, that]\n                        ) :\n                      (node['node_image'] || ('icon-' + node.type)));\n                res.push({\n                  'value': r.label,\n                  'image': image,\n                  'label': l\n                });\n                col_types.push({name:r.label, type:r.datatype});\n              }\n            });\n            self.field.set('col_types', col_types);\n            return res;\n          },\n          canAdd: function(m) {\n            return !((_.has(m, 'handler') &&\n              !_.isUndefined(m.handler) &&\n              !_.isUndefined(m.get('oid'))) || (_.isFunction(m.isNew) && !m.isNew()));\n          },\n          select2: {\n            allowClear: false, width: 'style',\n            placeholder: 'Select column'\n          }, first_empty: !self.model.isNew(),\n          disabled: function(m) {\n            return !_.isUndefined(self.model.get('oid'));\n          }\n        }],\n        headerDefaults = {column: null},\n\n        gridCols = ['column', 'oper_class', 'order', 'nulls_order', 'operator'];\n\n      self.headerData = new (Backbone.Model.extend({\n        defaults: headerDefaults,\n        schema: headerSchema\n      }))({});\n\n      var headerGroups = Backform.generateViewSchema(\n          self.field.get('node_info'), self.headerData, 'create',\n          node, self.field.get('node_data')\n          ),\n          fields = [];\n\n      _.each(headerGroups, function(o) {\n        fields = fields.concat(o.fields);\n      });\n\n      self.headerFields = new Backform.Fields(fields);\n      self.gridSchema = Backform.generateGridColumnsFromModel(\n          self.field.get('node_info'), self.field.get('model'), 'edit', gridCols, self.field.get('schema_node')\n          );\n\n      self.controls = [];\n      self.listenTo(self.headerData, \"change\", self.headerDataChanged);\n      self.listenTo(self.headerData, \"select2\", self.headerDataChanged);\n      self.listenTo(self.collection, \"add\", self.onAddorRemoveColumns);\n      self.listenTo(self.collection, \"remove\", self.onAddorRemoveColumns);\n    },\n\n    generateHeader: function(data) {\n      var header = [\n        '<div class=\"subnode-header-form\">',\n        ' <div class=\"container-fluid\">',\n        '  <div class=\"row\">',\n        '   <div class=\"col-xs-4\">',\n        '    <label class=\"control-label\"><%-column_label%></label>',\n        '   </div>',\n        '   <div class=\"col-xs-4\" header=\"column\"></div>',\n        '   <div class=\"col-xs-4\">',\n        '     <button class=\"btn-sm btn-default add fa fa-plus\" <%=canAdd ? \"\" : \"disabled=\\'disabled\\'\"%> ></button>',\n        '   </div>',\n        '  </div>',\n        ' </div>',\n        '</div>',].join(\"\\n\")\n\n      _.extend(data, {\n        column_label: gettext('Column')\n      });\n\n      var self = this,\n          headerTmpl = _.template(header),\n          $header = $(headerTmpl(data)),\n          controls = this.controls;\n\n      this.headerFields.each(function(field) {\n        var control = new (field.get(\"control\"))({\n          field: field,\n          model: self.headerData\n        });\n\n        $header.find('div[header=\"' + field.get('name') + '\"]').append(\n          control.render().$el\n        );\n\n        controls.push(control);\n      });\n\n      // We should not show in properties mode\n      if (data.mode == 'properties') {\n        $header.html('');\n      }\n\n      self.$header = $header;\n\n      return $header;\n    },\n\n    events: _.extend(\n                  {}, Backform.UniqueColCollectionControl.prototype.events,\n                {'click button.add': 'addColumns'}\n                ),\n\n    showGridControl: function(data) {\n      var self = this,\n          titleTmpl = _.template(\"<div class='subnode-header'></div>\"),\n          $gridBody =\n            $(\"<div class='pgadmin-control-group backgrid form-group col-xs-12 object subnode'></div>\").append(\n              // Append titleTmpl only if create/edit mode\n              data.mode !== 'properties' ? titleTmpl({label: data.label}) : ''\n            );\n\n      $gridBody.append(self.generateHeader(data));\n\n      var gridColumns = _.clone(this.gridSchema.columns);\n\n      // Insert Delete Cell into Grid\n      if (data.disabled == false && data.canDelete) {\n          gridColumns.unshift({\n            name: \"pg-backform-delete\", label: \"\",\n            cell: Backgrid.Extension.DeleteCell,\n            editable: false, cell_priority: -1\n          });\n      }\n\n      if (self.grid) {\n        self.grid.remove();\n        self.grid.null;\n      }\n      // Initialize a new Grid instance\n      var grid = self.grid = new Backgrid.Grid({\n        columns: gridColumns,\n        collection: self.collection,\n        className: \"backgrid table-bordered\"\n      });\n      self.$grid = grid.render().$el;\n\n      $gridBody.append(self.$grid);\n\n      setTimeout(function() {\n        self.headerData.set({\n          'column': self.$header.find(\n            'div[header=\"column\"] select'\n            ).val()\n            }, {silent:true}\n          );\n      }, 10);\n\n      // Remove unwanted class from grid to display it properly\n      if(data.mode === 'properties')\n        $gridBody.find('.subnode-header-form').removeClass('subnode-header-form');\n\n      // Render node grid\n      return $gridBody;\n    },\n\n    headerDataChanged: function() {\n      var self = this, val,\n          data = this.headerData.toJSON(),\n          inSelected = false,\n          checkVars = ['column'];\n\n      if (!self.$header) {\n        return;\n      }\n\n      if (self.control_data.canAdd) {\n        self.collection.each(function(m) {\n          if (!inSelected) {\n            _.each(checkVars, function(v) {\n              if (!inSelected) {\n                val = m.get(v);\n                inSelected = ((\n                  (_.isUndefined(val) || _.isNull(val)) &&\n                  (_.isUndefined(data[v]) || _.isNull(data[v]))\n                  ) ||\n                  (val == data[v]));\n              }\n            });\n          }\n        });\n      }\n      else {\n        inSelected = true;\n      }\n\n      self.$header.find('button.add').prop('disabled', inSelected);\n    },\n\n    addColumns: function(ev) {\n      ev.preventDefault();\n      var self = this,\n          column = self.headerData.get('column');\n\n      if (!column || column == '') {\n        return false;\n      }\n\n      var coll = self.model.get(self.field.get('name')),\n          m = new (self.field.get('model'))(\n                self.headerData.toJSON(), {\n                  silent: true, top: self.model.top,\n                  collection: coll, handler: coll\n                }),\n          col_types =self.field.get('col_types') || [];\n\n      for(var i=0; i < col_types.length; i++) {\n        var col_type = col_types[i];\n        if (col_type['name'] ==  m.get('column')) {\n            m.set({'col_type':col_type['type']});\n          break;\n        }\n      }\n\n      coll.add(m);\n\n      var idx = coll.indexOf(m);\n\n      // idx may not be always > -1 because our UniqueColCollection may\n      // remove 'm' if duplicate value found.\n      if (idx > -1) {\n        self.$grid.find('.new').removeClass('new');\n\n        var newRow = self.grid.body.rows[idx].$el;\n\n        newRow.addClass(\"new\");\n        $(newRow).pgMakeVisible('backform-tab');\n      } else {\n        //delete m;\n      }\n\n      return false;\n    },\n\n    onAddorRemoveColumns: function() {\n      var self = this;\n\n      // Wait for collection to be updated before checking for the button to be\n      // enabled, or not.\n      setTimeout(function() {\n          self.collection.trigger('pgadmin:columns:updated', self.collection);\n        self.headerDataChanged();\n      }, 10);\n    },\n\n    remove: function() {\n      /*\n       * Stop listening the events registered by this control.\n       */\n      this.stopListening(this.headerData, \"change\", this.headerDataChanged);\n      this.listenTo(this.headerData, \"select2\", this.headerDataChanged);\n      this.listenTo(this.collection, \"remove\", this.onAddorRemoveColumns);\n\n      // Remove header controls.\n      _.each(this.controls, function(controls) {\n        controls.remove();\n      });\n\n      ExclusionConstraintColumnControl.__super__.remove.apply(this, arguments);\n\n      // Remove the header model\n      delete (this.headerData);\n\n    }\n  });\n\n  // Extend the browser's node class for exclusion constraint node\n  if (!pgBrowser.Nodes['exclusion_constraint']) {\n    pgAdmin.Browser.Nodes['exclusion_constraint'] = pgBrowser.Node.extend({\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      type: 'exclusion_constraint',\n      label: gettext('Exclusion constraint'),\n      collection_type: 'coll-constraints',\n      sqlAlterHelp: 'ddl-alter.html',\n      sqlCreateHelp: 'ddl-constraints.html',\n      dialogHelp: url_for('help.static', {'filename': 'exclusion_constraint_dialog.html'}),\n      hasSQL: true,\n      parent_type: ['table','partition'],\n      canDrop: true,\n      canDropCascade: true,\n      hasDepends: true,\n      hasStatistics: true,\n      statsPrettifyFields: ['Index size'],\n      Init: function() {\n        /* Avoid multiple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_exclusion_constraint_on_coll', node: 'coll-constraints', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Exclusion constraint...'),\n          icon: 'wcTabIcon icon-exclusion_constraint', data: {action: 'create', check: true},\n          enable: 'canCreate'\n        }]);\n      },\n      is_not_valid: function(node) {\n        return (node && !node.valid);\n      },\n      // Define the model for exclusion constraint node\n      model: pgAdmin.Browser.Node.Model.extend({\n        idAttribute: 'oid',\n\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          comment: undefined,\n          spcname: undefined,\n          amname: \"gist\",\n          fillfactor: undefined,\n          condeferrable: undefined,\n          condeferred: undefined,\n          columns: []\n        },\n\n        // Define the schema for the exclusion constraint node\n        schema: [{\n          id: 'name', label: gettext('Name'), type: 'text',\n          mode: ['properties', 'create', 'edit'], editable: true,\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties']\n        },{\n          id: 'comment', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', mode: ['properties', 'create', 'edit'],\n          deps:['name'], disabled:function(m) {\n            var name = m.get('name');\n            if (!(name && name != '')) {\n              setTimeout(function(){\n              if(m.get('comment') && m.get('comment') !== '')\n                 m.set('comment', null);\n              },10);\n              return true;\n            } else {\n              return false;\n            }\n          }\n        },{\n          id: 'spcname', label: gettext('Tablespace'),\n          type: 'text', group: gettext('Definition'),\n          control: 'node-list-by-name', node: 'tablespace',\n          select2:{allowClear:false},\n          filter: function(m) {\n            // Don't show pg_global tablespace in selection.\n            if (m.label == \"pg_global\") return false;\n            else return true;\n          }\n        },{\n          id: 'amname', label: gettext('Access method'),\n          type: 'text', group: gettext('Definition'),\n          url:\"get_access_methods\", node: 'table',\n          control: Backform.NodeAjaxOptionsControl.extend({\n            // When access method changes we need to clear columns collection\n            onChange: function() {\n              Backform.NodeAjaxOptionsControl.prototype.onChange.apply(this, arguments);\n              var self = this,\n              // current access method\n              current_am = self.model.get('amname'),\n              // previous access method\n              previous_am = self.model.previous('amname'),\n              column_collection = self.model.get('columns');\n\n              if (column_collection.length > 0 && current_am != previous_am) {\n                var msg = gettext('Changing access method will clear columns collection');\n                Alertify.confirm(msg, function (e) {\n                    // User clicks Ok, lets clear collection.\n                    column_collection.each(function(m) {\n                      /*\n                       * Our datamodel do not support collection reset method.\n                       * So remove model one by one.\n                       */\n                      column_collection.remove(m);\n                    });\n                    setTimeout(function() {\n                      column_collection.trigger('pgadmin:columns:updated', column_collection);\n                    }, 10);\n\n                  }, function() {\n                    // User clicks Cancel set previous value again in combo box\n                    setTimeout(function(){\n                      self.model.set('amname', previous_am);\n                    }, 10);\n                });\n              }\n            }\n          }),\n          select2:{allowClear:true},\n          disabled: function(m) {\n            return ((_.has(m, 'handler') &&\n              !_.isUndefined(m.handler) &&\n              !_.isUndefined(m.get('oid'))) || (_.isFunction(m.isNew) && !m.isNew()));\n          }\n        },{\n          id: 'fillfactor', label: gettext('Fill factor'),\n          type: 'int', group: gettext('Definition'), allowNull: true\n        },{\n          id: 'condeferrable', label: gettext('Deferrable?'),\n          type: 'switch', group: gettext('Definition'), deps: ['index'],\n          disabled: function(m) {\n            return ((_.has(m, 'handler') &&\n              !_.isUndefined(m.handler) &&\n              !_.isUndefined(m.get('oid'))) || (_.isFunction(m.isNew) && !m.isNew()));\n          }\n        },{\n          id: 'condeferred', label: gettext('Deferred?'),\n          type: 'switch', group: gettext('Definition'),\n          deps: ['condeferrable'],\n          disabled: function(m) {\n            if((_.has(m, 'handler') &&\n              !_.isUndefined(m.handler) &&\n              !_.isUndefined(m.get('oid'))) || (_.isFunction(m.isNew) && !m.isNew())) {\n              return true;\n            }\n\n            // Disable if condeferred is false or unselected.\n            if(m.get('condeferrable') == true) {\n              return false;\n            } else {\n              setTimeout(function(){\n                if(m.get('condeferred'))\n                  m.set('condeferred', false);\n              },10);\n              return true;\n            }\n          }\n        },{\n          id: 'constraint', label: gettext('Constraint'), cell: 'string',\n          type: 'multiline', mode: ['create', 'edit'], editable: false,\n          group: gettext('Definition'), disabled: function(m) {\n            return ((_.has(m, 'handler') &&\n              !_.isUndefined(m.handler) &&\n              !_.isUndefined(m.get('oid'))) || (_.isFunction(m.isNew) && !m.isNew()));\n          }\n        },{\n          id: 'columns', label: gettext('Columns'),\n          type: 'collection', group: gettext('Columns'),\n          deps:['amname'], canDelete: true, editable: false,\n          canAdd: function(m) {\n            // We can't update columns of existing exclusion constraint.\n            return !((_.has(m, 'handler') &&\n              !_.isUndefined(m.handler) &&\n              !_.isUndefined(m.get('oid'))) || (_.isFunction(m.isNew) && !m.isNew()));\n          },\n          control: ExclusionConstraintColumnControl,\n          model: ExclusionConstraintColumnModel,\n          disabled: function(m) {\n            return ((_.has(m, 'handler') &&\n              !_.isUndefined(m.handler) &&\n              !_.isUndefined(m.get('oid'))) || (_.isFunction(m.isNew) && !m.isNew()));\n          },\n          cell: Backgrid.StringCell.extend({\n            initialize: function() {\n              Backgrid.StringCell.prototype.initialize.apply(this, arguments);\n              var self = this;\n              // Do not listen for any event(s) for existing constraint.\n              if (_.isUndefined(self.model.get('oid'))) {\n                var tableCols = self.model.top.get('columns');\n\n                self.listenTo(tableCols, 'remove' , self.removeColumn);\n                self.listenTo(tableCols, 'change:name', self.resetColOptions);\n                self.listenTo(tableCols, 'change:cltype', self.removeColumnWithType);\n              }\n\n              this.model.get('columns').on('pgadmin:columns:updated', function() {\n                self.render.apply(self);\n              });\n            },\n            removeColumnWithType: function(m){\n              var self = this,\n                  cols = self.model.get('columns'),\n                  removedCols = cols.where(\n                    {col_type: m.previous('cltype')}\n                    );\n\n              cols.remove(removedCols);\n              setTimeout(function () {\n                self.render();\n              }, 10);\n\n              setTimeout(function () {\n                var constraints = self.model.top.get(\"exclude_constraint\");\n                var removed = [];\n                constraints.each(function(constraint) {\n                  if (constraint.get(\"columns\").length == 0) {\n                     removed.push(constraint);\n                  }\n                });\n                constraints.remove(removed);\n              },100);\n            },\n            removeColumn: function(m){\n              var self = this,\n                  removedCols = self.model.get('columns').where(\n                    {column: m.get('name')}\n                    );\n\n              self.model.get('columns').remove(removedCols);\n              setTimeout(function () {\n                self.render();\n              }, 10);\n\n              setTimeout(function () {\n                var constraints = self.model.top.get(\"exclude_constraint\");\n                var removed = [];\n                constraints.each(function(constraint) {\n                  if (constraint.get(\"columns\").length == 0) {\n                     removed.push(constraint);\n                  }\n                });\n                constraints.remove(removed);\n              },100);\n            },\n            resetColOptions : function(m) {\n                var self = this,\n                  updatedCols = self.model.get('columns').where(\n                  {\"column\": m.previous('name')}\n                  );\n\n                if (updatedCols.length > 0) {\n                  /*\n                   * Table column name has changed so update\n                   * column name in foreign key as well.\n                   */\n                  updatedCols[0].set(\n                  {\"column\": m.get('name')});\n                }\n\n                setTimeout(function () {\n                  self.render();\n                }, 10);\n            },\n            formatter: {\n              fromRaw: function (rawValue, model) {\n                return rawValue.pluck(\"column\").toString();\n              },\n              toRaw: function (val, model) {\n                return val;\n              }\n            },\n            render: function() {\n              return Backgrid.StringCell.prototype.render.apply(this, arguments);\n            },\n            remove: function() {\n              var tableCols = this.model.top.get('columns'),\n                  cols = this.model.get('columns');\n              if (cols) {\n                cols.off('pgadmin:columns:updated');\n              }\n\n              this.stopListening(tableCols, 'remove' , self.removeColumn);\n              this.stopListening(tableCols, 'change:name' , self.resetColOptions);\n              this.stopListening(tableCols, 'change:cltype' , self.removeColumnWithType);\n\n              Backgrid.StringCell.prototype.remove.apply(this, arguments);\n            }\n          }),\n        }],\n        validate: function() {\n          this.errorModel.clear();\n          var columns = this.get('columns'),\n              name = this.get('name');\n\n          if ((_.isUndefined(name) || _.isNull(name) || name.length < 1)) {\n            var msg = gettext('Please specify name for exclusion constraint.');\n            this.errorModel.set('name', msg);\n            return msg;\n          }\n          else  if ((_.isUndefined(columns) || _.isNull(columns) || columns.length < 1)) {\n            var msg = gettext('Please specify columns for exclusion constraint.');\n            this.errorModel.set('columns', msg);\n            return msg;\n          }\n\n          return null;\n        }\n      }),\n\n      canCreate: function(itemData, item, data) {\n          // If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData, parents = [],\n            immediate_parent_table_found = false,\n            is_immediate_parent_table_partitioned = false;\n          // To iterate over tree to check parent node\n          while (i) {\n            // If table is partitioned table then return false\n            if (!immediate_parent_table_found && (d._type == 'table' || d._type == 'partition')) {\n              immediate_parent_table_found = true;\n              if ('is_partitioned' in d && d.is_partitioned) {\n                is_immediate_parent_table_partitioned = true;\n              }\n            }\n\n            // If it is schema then allow user to create table\n            if (_.indexOf(['schema'], d._type) > -1)\n              return !is_immediate_parent_table_partitioned;\n            parents.push(d._type);\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // If node is under catalog then do not allow 'create' menu\n          if (_.indexOf(parents, 'catalog') > -1) {\n            return false;\n          } else {\n            return !is_immediate_parent_table_partitioned;\n          }\n      }\n    });\n  }\n\n  return pgBrowser.Nodes['exclusion_constraint'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/exclusion_constraint/static/js/exclusion_constraint.js","define('pgadmin.node.primary_key', [\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'alertify',\n  'pgadmin.browser.collection'\n], function(gettext, url_for, $, _, S, pgAdmin, pgBrowser, alertify) {\n\n  // Extend the browser's node class for index constraint node\n  if (!pgBrowser.Nodes['primary_key']) {\n    pgAdmin.Browser.Nodes['primary_key'] = pgBrowser.Node.extend({\n      type: 'primary_key',\n      label: gettext('Primary key'),\n      collection_type: 'coll-constraints',\n      sqlAlterHelp: 'ddl-alter.html',\n      sqlCreateHelp: 'ddl-constraints.html',\n      dialogHelp: url_for('help.static', {filename: 'primary_key_dialog.html'}),\n      hasSQL: true,\n      hasDepends: true,\n      hasStatistics: true,\n      statsPrettifyFields: ['Index size'],\n      parent_type: ['table','partition'],\n      canDrop: true,\n      canDropCascade: true,\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      Init: function() {\n        /* Avoid multiple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'create_primary_key_on_coll', node: 'coll-constraints', module: this,\n          applies: ['object', 'context'], callback: 'show_obj_properties',\n          category: 'create', priority: 4, label: gettext('Primary key'),\n          icon: 'wcTabIcon icon-primary_key', data: {action: 'create', check: true},\n          enable: 'canCreate'\n\n        }\n        ]);\n      },\n      canCreate: function(itemData, item, data) {\n        // If check is false then , we will allow create menu\n        if (data && data.check == false)\n          return true;\n\n        var t = pgBrowser.tree, i = item, d = itemData, parents = [],\n            immediate_parent_table_found = false,\n            is_immediate_parent_table_partitioned = false;\n\n        // To iterate over tree to check parent node\n        while (i) {\n          // If table is partitioned table then return false\n          if (!immediate_parent_table_found && (d._type == 'table' || d._type == 'partition')) {\n            immediate_parent_table_found = true;\n            if ('is_partitioned' in d && d.is_partitioned) {\n              is_immediate_parent_table_partitioned = true;\n            }\n          }\n\n          // If it is schema then allow user to c reate table\n          if (_.indexOf(['schema'], d._type) > -1) {\n            if (is_immediate_parent_table_partitioned) {\n              return false;\n            }\n\n            // There should be only one primary key per table.\n            var children = t.children(arguments[1], false),\n              primary_key_found = false;\n\n            _.each(children, function(child){\n              data = pgBrowser.tree.itemData($(child));\n              if (!primary_key_found && data._type == \"primary_key\") {\n                primary_key_found = true;\n              }\n            });\n            return !primary_key_found;\n          }\n          parents.push(d._type);\n          i = t.hasParent(i) ? t.parent(i) : null;\n          d = i ? t.itemData(i) : null;\n        }\n        // If node is under catalog then do not allow 'create' menu\n        if (_.indexOf(parents, 'catalog') > -1) {\n          return false;\n        } else {\n          return !is_immediate_parent_table_partitioned;\n        }\n      },\n\n      // Define the model for index constraint node\n      model: pgAdmin.Browser.Node.Model.extend({\n        idAttribute: 'oid',\n\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          comment: undefined,\n          spcname: undefined,\n          index: undefined,\n          fillfactor: undefined,\n          condeferrable: undefined,\n          condeferred: undefined,\n          columns: []\n        },\n\n        // Define the schema for the index constraint node\n        schema: [{\n          id: 'name', label: gettext('Name'), type: 'text',\n          mode: ['properties', 'create', 'edit'], editable:true,\n          cellHeaderClasses:'width_percent_40',\n        },{\n          id: 'oid', label: gettext('OID'), cell: 'string',\n          type: 'text' , mode: ['properties'], editable: false,\n          cellHeaderClasses:'width_percent_20',\n        },{\n          id: 'comment', label: gettext('Comment'), cell: 'string',\n          type: 'multiline', mode: ['properties', 'create', 'edit'],\n          deps:['name'], disabled:function(m) {\n            var name = m.get('name');\n            if (!(name && name != '')) {\n              setTimeout(function(){\n               if(m.get('comment') && m.get('comment') !== '') {\n                 m.set('comment', null);\n               }\n              },10);\n              return true;\n            } else {\n              return false;\n            }\n          }\n        },{\n          id: 'columns', label: gettext('Columns'),\n          type: 'collection', group: gettext('Definition'),\n          editable: false,\n          cell: Backgrid.StringCell.extend({\n            initialize: function() {\n              Backgrid.StringCell.prototype.initialize.apply(this, arguments);\n\n              var self = this,\n                collection = this.model.get('columns');\n\n               // Do not listen for any event(s) for existing constraint.\n              if (_.isUndefined(self.model.get('oid'))) {\n                var tableCols = self.model.top.get('columns');\n                  self.listenTo(tableCols, 'remove' , self.removeColumn);\n                  self.listenTo(tableCols, 'change:name', self.resetColOptions);\n              }\n\n              collection.on('pgadmin:multicolumn:updated', function() {\n                self.render.apply(self);\n              });\n              self.listenTo(collection, \"add\", self.render);\n              self.listenTo(collection, \"remove\", self.render);\n            },\n            removeColumn: function(m) {\n              var self = this,\n                  removedCols = self.model.get('columns').where(\n                    {column: m.get('name')}\n                    );\n\n              self.model.get('columns').remove(removedCols);\n              setTimeout(function () {\n                self.render();\n              }, 10);\n\n              var key = 'primary_key'\n              setTimeout(function () {\n                constraints = self.model.top.get(key);\n                var removed = [];\n                constraints.each(function(constraint) {\n                  if (constraint.get(\"columns\").length == 0) {\n                     removed.push(constraint);\n                  }\n                });\n                constraints.remove(removed);\n              },100);\n\n            },\n            resetColOptions : function(m) {\n              var self = this,\n                updatedCols = self.model.get('columns').where(\n                {column: m.previous('name')}\n                );\n              if (updatedCols.length > 0) {\n                /*\n                 * Table column name has changed so update\n                 * column name in primary key as well.\n                 */\n                updatedCols[0].set(\n                {\"column\": m.get('name')},\n                {silent: true});\n              }\n\n              setTimeout(function () {\n                self.render();\n              }, 10);\n            },\n            formatter: {\n              fromRaw: function (rawValue, model) {\n                return rawValue.pluck(\"column\").toString();\n              },\n              toRaw: function (val, model) {\n                return val;\n              }\n            },\n            render: function() {\n              return Backgrid.StringCell.prototype.render.apply(this, arguments);\n            },\n            remove: function() {\n              var tableCols = this.model.top.get('columns'),\n              primary_key_col = this.model.get('columns');\n\n              if (primary_key_col) {\n                primary_key_col.off('pgadmin:multicolumn:updated');\n              }\n\n              this.stopListening(tableCols, 'remove' , self.removeColumn);\n              this.stopListening(tableCols, 'change:name' , self.resetColOptions);\n\n              Backgrid.StringCell.prototype.remove.apply(this, arguments);\n            }\n          }),\n          canDelete: true, canAdd: true,\n          control: Backform.MultiSelectAjaxControl.extend({\n            defaults: _.extend(\n              {},\n              Backform.NodeListByNameControl.prototype.defaults,\n              {\n                select2: {\n                  multiple: true,\n                  allowClear: true,\n                  width: 'style',\n                  placeholder: gettext('Select the column(s)'),\n                }\n              }\n            ),\n            keyPathAccessor: function(obj, path) {\n              var res = obj;\n              if(_.isArray(res)) {\n                return _.map(res, function(o) { return o['column']\n                });\n              }\n              path = path.split('.');\n              for (var i = 0; i < path.length; i++) {\n                if (_.isNull(res)) return null;\n                if (_.isEmpty(path[i])) continue;\n                if (!_.isUndefined(res[path[i]])) res = res[path[i]];\n              }\n              return _.isObject(res) && !_.isArray(res) ? null : res;\n            },\n            initialize: function() {\n            // Here we will decide if we need to call URL\n            // Or fetch the data from parent columns collection\n              var self = this;\n              if(this.model.handler) {\n                Backform.Select2Control.prototype.initialize.apply(this, arguments);\n                // Do not listen for any event(s) for existing constraint.\n                if (_.isUndefined(self.model.get('oid'))) {\n                  var tableCols = self.model.top.get('columns');\n                  self.listenTo(tableCols, 'remove' , self.resetColOptions);\n                  self.listenTo(tableCols, 'change:name', self.resetColOptions);\n                }\n\n                self.custom_options();\n              } else {\n                Backform.MultiSelectAjaxControl.prototype.initialize.apply(this, arguments);\n              }\n              self.model.get('columns').on('pgadmin:multicolumn:updated', function() {\n                  self.render.apply(self);\n                });\n            },\n            resetColOptions: function(m) {\n              var self = this;\n\n              setTimeout(function () {\n                self.custom_options();\n                self.render.apply(self);\n              }, 50);\n\n            },\n            custom_options: function() {\n              // We will add all the columns entered by user in table model\n              var columns = this.model.top.get('columns'),\n                added_columns_from_tables = [];\n\n              if (columns.length > 0) {\n                _.each(columns.models, function(m) {\n                    var col = m.get('name');\n                    if(!_.isUndefined(col) && !_.isNull(col)) {\n                      added_columns_from_tables.push(\n                        {label: col, value: col, image:'icon-column'}\n                      );\n                    }\n                });\n              }\n              // Set the values in to options so that user can select\n              this.field.set('options', added_columns_from_tables);\n            },\n            onChange: function(e) {\n              var self = this,\n                  model = this.model,\n                  $el = $(e.target),\n                  attrArr = this.field.get(\"name\").split('.'),\n                  name = attrArr.shift(),\n                  path = attrArr.join('.'),\n                  vals = this.getValueFromDOM(),\n                  collection = model.get(name),\n                  removed = [];\n\n              this.stopListening(this.model, \"change:\" + name, this.render);\n\n              /*\n               * Iterate through all the values, and find out how many are already\n               * present in the collection.\n               */\n              collection.each(function(m) {\n                  var column = m.get('column'),\n                      idx = _.indexOf(vals, column);\n\n                  if (idx > -1) {\n                    vals.splice(idx, 1);\n                  } else {\n                    removed.push(column);\n                  }\n               });\n\n              /*\n               * Adding new values\n               */\n\n              _.each(vals, function(v) {\n                var m = new (self.field.get('model'))(\n                      {column: v}, { silent: true,\n                      top: self.model.top,\n                      collection: collection,\n                      handler: collection\n                    });\n\n                collection.add(m);\n              });\n\n              /*\n               * Removing unwanted!\n               */\n              _.each(removed, function(v) {\n                collection.remove(collection.where({column: v}));\n              });\n\n              this.listenTo(this.model, \"change:\" + name, this.render);\n            },\n            remove: function() {\n              if(this.model.handler) {\n                var self = this,\n                tableCols = self.model.top.get('columns');\n                self.stopListening(tableCols, 'remove' , self.resetColOptions);\n                self.stopListening(tableCols, 'change:name' , self.resetColOptions);\n                self.model.get('columns').off('pgadmin:multicolumn:updated');\n\n                Backform.Select2Control.prototype.remove.apply(this, arguments);\n\n              } else {\n                Backform.MultiSelectAjaxControl.prototype.remove.apply(this, arguments);\n              }\n            }\n          }),\n          deps: ['index'], node: 'column',\n          model: pgBrowser.Node.Model.extend({\n            defaults: {\n              column: undefined\n            },\n            validate: function() {\n              return null;\n           }\n          }),\n          transform : function(data){\n            var res = [];\n            if (data && _.isArray(data)) {\n              _.each(data, function(d) {\n                res.push({label: d.label, value: d.label, image:'icon-column'});\n              })\n            }\n            return res;\n          },\n          select2:{allowClear:false},\n          disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'top') && !_.isUndefined(m.top)\n                                    && !m.top.isNew()) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should be allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n\n            // We can't update columns of existing index constraint.\n            if (!m.isNew()) {\n                return true;\n            }\n            // Disable if index is selected.\n            var index = m.get('index');\n              if(_.isUndefined(index) || index == '') {\n                return false;\n              } else {\n                var col = m.get('columns');\n                col.reset();\n                return true;\n              }\n            }\n          },{\n          id: 'spcname', label: gettext('Tablespace'),\n          type: 'text', group: gettext('Definition'),\n          control: 'node-list-by-name', node: 'tablespace',\n          deps: ['index'],\n          select2:{allowClear:false},\n          filter: function(m) {\n            // Don't show pg_global tablespace in selection.\n            if (m.label == \"pg_global\") return false;\n            else return true;\n          },\n          disabled: function(m) {\n            // Disable if index is selected.\n            m = m.top || m;\n            var index = m.get('index');\n              if(_.isUndefined(index) || index == '') {\n                return false;\n              } else {\n                setTimeout(function(){\n                  m.set('spcname', '');\n                },10);\n                return true;\n              }\n          }\n        },{\n          id: 'index', label: gettext('Index'),\n          type: 'text', group: gettext('Definition'),\n          control: Backform.NodeListByNameControl.extend({\n          initialize:function() {\n            if (_.isUndefined(this.model.top)) {\n              Backform.NodeListByNameControl.prototype.initialize.apply(this,arguments);\n            } else {\n              Backform.Control.prototype.initialize.apply(this,arguments);\n            }\n          }\n          }),\n          select2:{allowClear:true}, node: 'index',\n          disabled: function(m) {\n            // If we are in table edit mode then disable it\n            if (_.has(m, 'top') && !_.isUndefined(m.top)\n                                    && !m.top.isNew()) {\n                return true;\n            }\n\n            // We can't update index of existing index constraint.\n            return !m.isNew();\n          },\n          // We will not show this field in Create Table mode\n          visible: function(m) {\n            return !_.isUndefined(m.top.node_info['table']);\n          }\n        },{\n          id: 'fillfactor', label: gettext('Fill factor'), deps: ['index'],\n          type: 'int', group: gettext('Definition'), allowNull: true,\n          disabled: function(m) {\n            // Disable if index is selected.\n            var index = m.get('index');\n              if(_.isUndefined(index) || index == '') {\n                return false;\n              } else {\n                setTimeout(function(){\n                  m.set('fillfactor', null);\n                },10);\n                return true;\n              }\n            }\n        },{\n          id: 'condeferrable', label: gettext('Deferrable?'),\n          type: 'switch', group: gettext('Definition'), deps: ['index'],\n          disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'top') && !_.isUndefined(m.top)\n                                    && !m.top.isNew()) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n\n            // We can't update condeferrable of existing index constraint.\n            if (!m.isNew()) {\n                return true;\n            }\n            // Disable if index is selected.\n            var index = m.get('index');\n            if(_.isUndefined(index) || index == '') {\n              return false;\n            } else {\n              setTimeout(function(){\n                if(m.get('condeferrable'))\n                  m.set('condeferrable', false);\n              },10);\n              return true;\n            }\n          }\n        },{\n          id: 'condeferred', label: gettext('Deferred?'),\n          type: 'switch', group: gettext('Definition'),\n          deps: ['condeferrable'],\n          disabled: function(m) {\n            // If we are in table edit mode then\n            if (_.has(m, 'top') && !_.isUndefined(m.top)\n                                    && !m.top.isNew()) {\n                // If OID is undefined then user is trying to add\n                // new constraint which should allowed for Unique\n                return !_.isUndefined(m.get('oid'));\n            }\n\n            // We can't update condeferred of existing index constraint.\n            if (!m.isNew()) {\n              return true;\n            }\n            // Disable if condeferred is false or unselected.\n            if(m.get('condeferrable') == true) {\n              return false;\n            } else {\n              setTimeout(function(){\n               if(m.get('condeferred'))\n                  m.set('condeferred', false);\n              },10);\n              return true;\n            }\n          }\n        }\n        ],\n        validate: function() {\n          this.errorModel.clear();\n          // Clear parent's error as well\n          if (_.has(this, 'top')) {\n            this.top.errorModel.clear();\n          }\n\n          var columns = this.get('columns'),\n            index = this.get('index');\n\n            if ((_.isUndefined(index) || String(index).replace(/^\\s+|\\s+$/g, '') == '') &&\n                (_.isUndefined(columns) || _.isNull(columns) || columns.length < 1)) {\n              var msg = gettext('Please specify columns for %(node)s', {node: gettext('Primary key')});\n              this.errorModel.set('columns', msg);\n              return msg;\n            }\n\n          return null;\n        }\n      })\n  });\n  }\n\n  return pgBrowser.Nodes['primary_key'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/constraints/index_constraint/static/js/primary_key.js","define([\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore',\n  'underscore.string', 'sources/pgadmin', 'pgadmin.browser', 'backform', 'pgadmin.alertifyjs',\n  'pgadmin.browser.collection', 'pgadmin.browser.table.partition.utils'\n],\nfunction(gettext, url_for, $, _, S, pgAdmin, pgBrowser, Backform, alertify) {\n\n  if (!pgBrowser.Nodes['coll-partition']) {\n    var databases = pgAdmin.Browser.Nodes['coll-partition'] =\n      pgAdmin.Browser.Collection.extend({\n        node: 'partition',\n        label: gettext('Partitions'),\n        getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n        type: 'coll-partition',\n        columns: [\n          'name', 'schema', 'partition_value', 'is_partitioned', 'description'\n        ]\n      });\n  };\n\n  if (!pgBrowser.Nodes['partition']) {\n    pgAdmin.Browser.Nodes['partition'] = pgBrowser.Node.extend({\n      getTreeNodeHierarchy: pgBrowser.tableChildTreeNodeHierarchy,\n      parent_type: 'table',\n      collection_type: 'coll-partition',\n      type: 'partition',\n      label: gettext('Partition'),\n      hasSQL: true,\n      hasDepends: true,\n      hasStatistics: true,\n      statsPrettifyFields: ['Size', 'Indexes size', 'Table size',\n                            'Toast table size', 'Tuple length',\n                            'Dead tuple length', 'Free space'],\n      sqlAlterHelp: 'sql-altertable.html',\n      sqlCreateHelp: 'sql-createtable.html',\n      dialogHelp: url_for('help.static', {'filename': 'table_dialog.html'}),\n      hasScriptTypes: ['create'],\n      height: '95%',\n      width: '85%',\n      Init: function() {\n        /* Avoid mulitple registration of menus */\n        if (this.initialized)\n            return;\n\n        this.initialized = true;\n\n        pgBrowser.add_menus([{\n          name: 'truncate_table', node: 'partition', module: this,\n          applies: ['object', 'context'], callback: 'truncate_table',\n          category: 'Truncate', priority: 3, label: gettext('Truncate'),\n          icon: 'fa fa-eraser', enable : 'canCreate'\n        },{\n          name: 'truncate_table_cascade', node: 'partition', module: this,\n          applies: ['object', 'context'], callback: 'truncate_table_cascade',\n          category: 'Truncate', priority: 3, label: gettext('Truncate Cascade'),\n          icon: 'fa fa-eraser', enable : 'canCreate'\n        },{\n          // To enable/disable all triggers for the table\n          name: 'enable_all_triggers', node: 'partition', module: this,\n          applies: ['object', 'context'], callback: 'enable_triggers_on_table',\n          category: 'Trigger(s)', priority: 4, label: gettext('Enable All'),\n          icon: 'fa fa-check', enable : 'canCreate_with_trigger_enable'\n        },{\n          name: 'disable_all_triggers', node: 'partition', module: this,\n          applies: ['object', 'context'], callback: 'disable_triggers_on_table',\n          category: 'Trigger(s)', priority: 4, label: gettext('Disable All'),\n          icon: 'fa fa-times', enable : 'canCreate_with_trigger_disable'\n        },{\n          name: 'reset_table_stats', node: 'partition', module: this,\n          applies: ['object', 'context'], callback: 'reset_table_stats',\n          category: 'Reset', priority: 4, label: gettext('Reset Statistics'),\n          icon: 'fa fa-bar-chart', enable : 'canCreate'\n        },{\n          name: 'detach_partition', node: 'partition', module: this,\n          applies: ['object', 'context'], callback: 'detach_partition',\n          priority: 2, label: gettext('Detach Partition'),\n          icon: 'fa fa-remove'\n        }\n        ]);\n      },\n      getTreeNodeHierarchy: function(i) {\n        var idx = 0,\n            res = {},\n            t = pgBrowser.tree;\n\n        do {\n          var d = t.itemData(i);\n          if (\n            d._type in pgBrowser.Nodes && pgBrowser.Nodes[d._type].hasId\n          ) {\n            if (d._type == 'partition' && 'partition' in res) {\n              if (!('table' in res)) {\n                res['table'] = _.extend({}, d, {'priority': idx});\n                idx -= 1;\n              }\n            } else if (d._type == 'table') {\n              if (!('table' in res)) {\n                res['table'] = _.extend({}, d, {'priority': idx});\n                idx -= 1;\n              }\n            } else {\n              res[d._type] = _.extend({}, d, {'priority': idx});\n              idx -= 1;\n            }\n          }\n          i = t.hasParent(i) ? t.parent(i) : null;\n        } while (i);\n\n        return res;\n      },\n      generate_url: function(item, type, d, with_id, info) {\n        if (_.indexOf([\n            'stats', 'statistics', 'dependency', 'dependent', 'reset',\n            'get_relations', 'get_oftype', 'get_attach_tables'\n            ], type) == -1) {\n          return pgBrowser.Node.generate_url.apply(this, arguments);\n        }\n\n        if (type == 'statistics') {\n          type = 'stats';\n        }\n\n        info = (_.isUndefined(item) || _.isNull(item)) ?\n          info || {} : this.getTreeNodeHierarchy(item);\n\n        return S('table/%s/%s/%s/%s/%s/%s').sprintf(\n            encodeURIComponent(type), encodeURIComponent(info['server_group']._id),\n            encodeURIComponent(info['server']._id),\n            encodeURIComponent(info['database']._id),\n            encodeURIComponent(info['partition'].schema_id),\n            encodeURIComponent(info['partition']._id)\n            ).value();\n      },\n      canDrop: pgBrowser.Nodes['schema'].canChildDrop,\n      canDropCascade: pgBrowser.Nodes['schema'].canChildDrop,\n      callbacks: {\n        /* Enable trigger(s) on table */\n        enable_triggers_on_table: function(args) {\n            var params = {'enable': true };\n            this.callbacks.set_triggers.apply(this, [args, params]);\n        },\n        /* Disable trigger(s) on table */\n        disable_triggers_on_table: function(args) {\n            var params = {'enable': false };\n            this.callbacks.set_triggers.apply(this, [args, params]);\n        },\n        set_triggers: function(args, params) {\n          // This function will send request to enable or\n          // disable triggers on table level\n          var input = args || {},\n              obj = this,\n              t = pgBrowser.tree,\n              i = input.item || t.selected(),\n              d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          $.ajax({\n            url: obj.generate_url(i, 'set_trigger' , d, true),\n            type:'PUT',\n            data: params,\n            dataType: \"json\",\n            success: function(res) {\n              if (res.success == 1) {\n                alertify.success(res.info);\n                t.unload(i);\n                t.setInode(i);\n                t.deselect(i);\n                setTimeout(function() {\n                  t.select(i);\n                }, 10);\n              }\n            },\n            error: function(xhr, status, error) {\n              try {\n                var err = $.parseJSON(xhr.responseText);\n                if (err.success == 0) {\n                  alertify.error(err.errormsg);\n                }\n              } catch (e) {}\n              t.unload(i);\n            }\n          });\n        },\n        /* Truncate table */\n        truncate_table: function(args) {\n            var params = {'cascade': false };\n            this.callbacks.truncate.apply(this, [args, params]);\n        },\n        /* Truncate table with cascade */\n        truncate_table_cascade: function(args) {\n            var params = {'cascade': true };\n            this.callbacks.truncate.apply(this, [args, params]);\n        },\n        truncate: function(args, params) {\n          var input = args || {},\n              obj = this,\n              t = pgBrowser.tree,\n              i = input.item || t.selected(),\n              d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          alertify.confirm(\n            gettext('Truncate Table'),\n            S(gettext('Are you sure you want to truncate table %s?')).sprintf(d.label).value(),\n            function (e) {\n            if (e) {\n              var data = d;\n              $.ajax({\n                url: obj.generate_url(i, 'truncate' , d, true),\n                type:'PUT',\n                data: params,\n                dataType: \"json\",\n                success: function(res) {\n                  if (res.success == 1) {\n                    alertify.success(res.info);\n                    t.removeIcon(i);\n                    data.icon = 'icon-partition';\n                    t.addIcon(i, {icon: data.icon});\n                    t.unload(i);\n                    t.setInode(i);\n                    t.deselect(i);\n                    // Fetch updated data from server\n                    setTimeout(function() {\n                      t.select(i);\n                    }, 10);\n                  }\n                },\n                error: function(xhr, status, error) {\n                  try {\n                    var err = $.parseJSON(xhr.responseText);\n                    if (err.success == 0) {\n                      alertify.error(err.errormsg);\n                    }\n                  } catch (e) {}\n                  t.unload(i);\n                }\n              });\n            }},\n            function() {}\n          );\n        },\n        reset_table_stats: function(args) {\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          alertify.confirm(\n            gettext('Reset statistics'),\n            S(gettext('Are you sure you want to reset the statistics for table %s?')).sprintf(d._label).value(),\n            function (e) {\n              if (e) {\n                var data = d;\n                $.ajax({\n                  url: obj.generate_url(i, 'reset' , d, true),\n                  type:'DELETE',\n                  success: function(res) {\n                    if (res.success == 1) {\n                      alertify.success(res.info);\n                      t.removeIcon(i);\n                      data.icon = 'icon-partition';\n                      t.addIcon(i, {icon: data.icon});\n                      t.unload(i);\n                      t.setInode(i);\n                      t.deselect(i);\n                      // Fetch updated data from server\n                      setTimeout(function() {\n                        t.select(i);\n                      }, 10);\n                    }\n                  },\n                  error: function(xhr, status, error) {\n                    try {\n                      var err = $.parseJSON(xhr.responseText);\n                      if (err.success == 0) {\n                        alertify.error(err.errormsg);\n                      }\n                    } catch (e) {}\n                    t.unload(i);\n                  }\n                });\n              }\n            },\n            function() {}\n          );\n        },\n        detach_partition: function(args) {\n          var input = args || {},\n            obj = this,\n            t = pgBrowser.tree,\n            i = input.item || t.selected(),\n            d = i && i.length == 1 ? t.itemData(i) : undefined;\n\n          if (!d)\n            return false;\n\n          alertify.confirm(\n            gettext('Detach Partition'),\n            S(gettext('Are you sure you want to detach the partition %s?')).sprintf(d._label).value(),\n            function (e) {\n              if (e) {\n                var data = d;\n                $.ajax({\n                  url: obj.generate_url(i, 'detach' , d, true),\n                  type:'PUT',\n                  success: function(res) {\n                    if (res.success == 1) {\n                      alertify.success(res.info);\n                      var n = t.next(i);\n                      if (!n || !n.length) {\n                        n = t.prev(i);\n                        if (!n || !n.length) {\n                          n = t.parent(i);\n                          t.setInode(n, true);\n                        }\n                      }\n                      t.remove(i);\n                      if (n.length) {\n                        t.select(n);\n                      }\n                    }\n                  },\n                  error: function(xhr, status, error) {\n                    try {\n                      var err = $.parseJSON(xhr.responseText);\n                      if (err.success == 0) {\n                        alertify.error(err.errormsg);\n                      }\n                    } catch (e) {}\n                  }\n                });\n              }\n            },\n            function() {}\n          );\n       }\n      },\n      model: pgBrowser.Node.Model.extend({\n        defaults: {\n          name: undefined,\n          oid: undefined,\n          spcoid: undefined,\n          spcname: undefined,\n          relowner: undefined,\n          relacl: undefined,\n          relhasoids: undefined,\n          relhassubclass: undefined,\n          reltuples: undefined,\n          description: undefined,\n          conname: undefined,\n          conkey: undefined,\n          isrepl: undefined,\n          triggercount: undefined,\n          relpersistence: undefined,\n          fillfactor: undefined,\n          reloftype: undefined,\n          typname: undefined,\n          labels: undefined,\n          providers: undefined,\n          is_sys_table: undefined,\n          coll_inherits: [],\n          hastoasttable: true,\n          toast_autovacuum_enabled: false,\n          autovacuum_enabled: false,\n          primary_key: [],\n          partitions: [],\n          partition_type: 'range',\n          is_partitioned: false,\n          partition_value: undefined\n        },\n        // Default values!\n        initialize: function(attrs, args) {\n          var self = this;\n\n          if (_.size(attrs) === 0) {\n            var userInfo = pgBrowser.serverInfo[args.node_info.server._id].user,\n                schemaInfo = args.node_info.schema;\n\n            this.set({\n              'relowner': userInfo.name, 'schema': schemaInfo._label\n            }, {silent: true});\n          }\n          pgBrowser.Node.Model.prototype.initialize.apply(this, arguments);\n\n        },\n        schema: [{\n          id: 'name', label: gettext('Name'), type: 'text',\n          mode: ['properties', 'create', 'edit'], disabled: 'inSchema'\n        },{\n          id: 'oid', label: gettext('OID'), type: 'text', mode: ['properties']\n        },{\n          id: 'relowner', label: gettext('Owner'), type: 'text', node: 'role',\n          mode: ['properties', 'create', 'edit'], select2: {allowClear: false},\n          disabled: 'inSchema', control: 'node-list-by-name'\n        },{\n          id: 'schema', label: gettext('Schema'), type: 'text', node: 'schema',\n          control: 'node-list-by-name', mode: ['create', 'edit', 'properties'],\n          disabled: 'inSchema', filter: function(d) {\n            // If schema name start with pg_* then we need to exclude them\n            if(d && d.label.match(/^pg_/))\n            {\n              return false;\n            }\n            return true;\n          }, cache_node: 'database', cache_level: 'database'\n        },{\n          id: 'spcname', label: gettext('Tablespace'), node: 'tablespace',\n          type: 'text', control: 'node-list-by-name', disabled: 'inSchema',\n          mode: ['properties', 'create', 'edit'],\n          filter: function(d) {\n            // If tablespace name is not \"pg_global\" then we need to exclude them\n            return (!(d && d.label.match(/pg_global/)))\n          }\n        },{\n          id: 'partition', type: 'group', label: gettext('Partition'),\n          mode: ['edit', 'create'], min_version: 100000,\n          visible: function(m) {\n            // Always show in case of create mode\n            if (m.isNew() || m.get('is_partitioned'))\n              return true;\n            return false;\n          }\n        },{\n          id: 'is_partitioned', label:gettext('Partitioned Table?'), cell: 'switch',\n          type: 'switch', mode: ['properties', 'create', 'edit'],\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          },\n          disabled: function(m) {\n            if (!m.isNew())\n              return true;\n            return false;\n          }\n        },{\n          id: 'description', label: gettext('Comment'), type: 'multiline',\n          mode: ['properties', 'create', 'edit'], disabled: 'inSchema'\n        },\n        {\n          id: 'partition_value', label:gettext('Partition Scheme'),\n          type: 'text', visible: false\n        },{\n          id: 'coll_inherits', label: gettext('Inherited from table(s)'),\n          type: 'text', group: gettext('Advanced'), mode: ['properties']\n        },{\n          id: 'Columns', type: 'group', label: gettext('Columns'),\n          mode: ['edit', 'create'], min_version: 100000,\n          visible: function(m) {\n            // Always hide in case of partition table.\n            return false;\n          }\n        },{\n          // Tab control for columns\n          id: 'columns', label: gettext('Columns'), type: 'collection',\n          group: gettext('Columns'),\n          model: pgBrowser.Nodes['column'].model,\n          subnode: pgBrowser.Nodes['column'].model,\n          mode: ['create', 'edit'],\n          disabled: function(m) {\n            // In case of partitioned table remove inherited columns\n            if (m.isNew() && m.get('is_partitioned')) {\n              setTimeout(function() {\n                var coll = m.get('columns');\n                coll.remove(coll.filter(function(model) {\n                  if (_.isUndefined(model.get('inheritedfrom')))\n                    return false;\n                  return true;\n                }));\n              }, 10);\n            }\n\n            if(this.node_info &&  'catalog' in this.node_info)\n            {\n              return true;\n            }\n            return false;\n          },\n          deps: ['typname', 'is_partitioned'],\n          canAdd: 'check_grid_add_condition',\n          canEdit: true, canDelete: true,\n          // For each row edit/delete button enable/disable\n          canEditRow: 'check_grid_row_edit_delete',\n          canDeleteRow: 'check_grid_row_edit_delete',\n          uniqueCol : ['name'],\n          columns : ['name' , 'cltype', 'attlen', 'attprecision', 'attnotnull', 'is_primary_key'],\n          control: Backform.UniqueColCollectionControl.extend({\n            initialize: function() {\n              Backform.UniqueColCollectionControl.prototype.initialize.apply(this, arguments);\n              var self = this,\n                  collection = self.model.get(self.field.get('name'));\n\n              collection.on(\"change:is_primary_key\", function(m) {\n                var primary_key_coll = self.model.get('primary_key'),\n                    column_name = m.get('name'),\n                    primary_key;\n\n                if(m.get('is_primary_key')) {\n                // Add column to primary key.\n                  if (primary_key_coll.length < 1) {\n                    primary_key = new (primary_key_coll.model)({}, {\n                      top: self.model,\n                      collection: primary_key_coll,\n                      handler: primary_key_coll\n                    });\n                    primary_key_coll.add(primary_key);\n                  } else {\n                    primary_key = primary_key_coll.first();\n                  }\n                  // Do not alter existing primary key columns.\n                  if (_.isUndefined(primary_key.get('oid'))) {\n                    var primary_key_column_coll = primary_key.get('columns'),\n                      primary_key_column_exist = primary_key_column_coll.where({column:column_name});\n\n                    if (primary_key_column_exist.length == 0) {\n                      var primary_key_column = new (primary_key_column_coll.model)(\n                          {column: column_name}, { silent: true,\n                          top: self.model,\n                          collection: primary_key_coll,\n                          handler: primary_key_coll\n                        });\n\n                      primary_key_column_coll.add(primary_key_column);\n                    }\n\n                    primary_key_column_coll.trigger('pgadmin:multicolumn:updated', primary_key_column_coll);\n                  }\n\n                } else {\n                // remove column from primary key.\n                  if (primary_key_coll.length > 0) {\n                    var primary_key = primary_key_coll.first();\n                    // Do not alter existing primary key columns.\n                    if (!_.isUndefined(primary_key.get('oid'))) {\n                      return;\n                    }\n\n                    var  primary_key_column_coll = primary_key.get('columns'),\n                        removedCols = primary_key_column_coll.where({column:column_name});\n                    if (removedCols.length > 0) {\n                      primary_key_column_coll.remove(removedCols);\n                      _.each(removedCols, function(m) {\n                        m.destroy();\n                      })\n                      if (primary_key_column_coll.length == 0) {\n                        setTimeout(function () {\n                          // There will be only on primary key so remove the first one.\n                          primary_key_coll.remove(primary_key_coll.first());\n                          /* Ideally above line of code should be \"primary_key_coll.reset()\".\n                           * But our custom DataCollection (extended from Backbone collection in datamodel.js)\n                           * does not respond to reset event, it only supports add, remove, change events.\n                           * And hence no custom event listeners/validators get called for reset event.\n                           */\n                        }, 10);\n                      }\n                    }\n                    primary_key_column_coll.trigger('pgadmin:multicolumn:updated', primary_key_column_coll);\n                  }\n                }\n              })\n            },\n            remove: function() {\n              var collection = this.model.get(this.field.get('name'));\n              if (collection) {\n                collection.off(\"change:is_primary_key\");\n              }\n\n              Backform.UniqueColCollectionControl.prototype.remove.apply(this, arguments);\n            }\n          }),\n          allowMultipleEmptyRow: false\n        },{\n          id: 'inherited_tables_cnt', label: gettext('Inherited tables count'),\n          type: 'text', mode: ['properties'], group: gettext('Advanced'),\n          disabled: 'inSchema'\n        },{\n          // Here we will create tab control for constraints\n          type: 'nested', control: 'tab', group: gettext('Constraints'),\n          mode: ['edit', 'create'],\n          schema: [{\n              id: 'primary_key', label: gettext('Primary key'),\n              model: pgBrowser.Nodes['primary_key'].model,\n              subnode: pgBrowser.Nodes['primary_key'].model,\n              editable: false, type: 'collection',\n              group: gettext('Primary Key'), mode: ['edit', 'create'],\n              canEdit: true, canDelete: true, deps:['is_partitioned'],\n              control: 'unique-col-collection',\n              columns : ['name', 'columns'],\n              canAdd: function(m) {\n                if (m.get('is_partitioned')) {\n                  setTimeout(function() {\n                    var coll = m.get('primary_key');\n                    coll.remove(coll.filter(function(model) {\n                      return true;\n                    }));\n                  }, 10);\n                  return false;\n                }\n\n                return true;\n              },\n              canAddRow: function(m) {\n               // User can only add one primary key\n               var columns = m.get('columns');\n\n               return (m.get('primary_key') &&\n                        m.get('primary_key').length < 1 &&\n                        _.some(columns.pluck('name')));\n              }\n            },{\n              id: 'foreign_key', label: gettext('Foreign key'),\n              model: pgBrowser.Nodes['foreign_key'].model,\n              subnode: pgBrowser.Nodes['foreign_key'].model,\n              editable: false, type: 'collection',\n              group: gettext('Foreign Key'), mode: ['edit', 'create'],\n              canEdit: true, canDelete: true, deps:['is_partitioned'],\n              control: 'unique-col-collection',\n              canAdd: function(m) {\n                if (m.get('is_partitioned')) {\n                  setTimeout(function() {\n                    var coll = m.get('foreign_key');\n                    coll.remove(coll.filter(function(model) {\n                      return true;\n                    }));\n                  }, 10);\n                  return false;\n                }\n\n                return true;\n              },\n              columns : ['name', 'columns'],\n              canAddRow: function(m) {\n               // User can only add if there is at least one column with name.\n               var columns = m.get('columns');\n               return _.some(columns.pluck('name'));\n              }\n            },{\n              id: 'check_constraint', label: gettext('Check constraint'),\n              model: pgBrowser.Nodes['check_constraints'].model,\n              subnode: pgBrowser.Nodes['check_constraints'].model,\n              editable: false, type: 'collection',\n              group: gettext('Check'), mode: ['edit', 'create'],\n              canEdit: true, canDelete: true, deps:['is_partitioned'],\n              control: 'unique-col-collection',\n              canAdd: true,\n              columns : ['name', 'consrc']\n            },{\n              id: 'unique_constraint', label: gettext('Unique Constraint'),\n              model: pgBrowser.Nodes['unique_constraint'].model,\n              subnode: pgBrowser.Nodes['unique_constraint'].model,\n              editable: false, type: 'collection',\n              group: gettext('Unique'), mode: ['edit', 'create'],\n              canEdit: true, canDelete: true, deps:['is_partitioned'],\n              control: 'unique-col-collection',\n              columns : ['name', 'columns'],\n              canAdd: function(m) {\n                if (m.get('is_partitioned')) {\n                  setTimeout(function() {\n                    var coll = m.get('unique_constraint');\n                    coll.remove(coll.filter(function(model) {\n                      return true;\n                    }));\n                  }, 10);\n                  return false;\n                }\n\n                return true;\n              },\n              canAddRow: function(m) {\n               // User can only add if there is at least one column with name.\n               var columns = m.get('columns');\n               return _.some(columns.pluck('name'));\n              }\n            },{\n              id: 'exclude_constraint', label: gettext('Exclude constraint'),\n              model: pgBrowser.Nodes['exclusion_constraint'].model,\n              subnode: pgBrowser.Nodes['exclusion_constraint'].model,\n              editable: false, type: 'collection',\n              group: gettext('Exclude'), mode: ['edit', 'create'],\n              canEdit: true, canDelete: true, deps:['is_partitioned'],\n              control: 'unique-col-collection',\n              columns : ['name', 'columns', 'constraint'],\n              canAdd: function(m) {\n                if (m.get('is_partitioned')) {\n                  setTimeout(function() {\n                    var coll = m.get('exclude_constraint');\n                    coll.remove(coll.filter(function(model) {\n                      return true;\n                    }));\n                  }, 10);\n                  return false;\n                }\n\n                return true;\n              },\n              canAddRow: function(m) {\n               // User can only add if there is at least one column with name.\n               var columns = m.get('columns');\n               return _.some(columns.pluck('name'));\n              }\n          }]\n        },{\n          id: 'typname', label: gettext('Of type'), type: 'text',\n          control: 'node-ajax-options', mode: ['properties', 'create', 'edit'],\n          disabled: 'checkOfType', url: 'get_oftype', group: gettext('Advanced'),\n          deps: ['coll_inherits', 'is_partitioned'], transform: function(data, cell) {\n            var control = cell || this,\n              m = control.model;\n              m.of_types_tables = data;\n              return data;\n          },\n          control: Backform.NodeAjaxOptionsControl.extend({\n              // When of_types changes we need to clear columns collection\n              onChange: function() {\n                Backform.NodeAjaxOptionsControl.prototype.onChange.apply(this, arguments);\n                var self = this,\n                  tbl_oid = undefined,\n                  tbl_name = self.model.get('typname'),\n                  data = undefined,\n                  arg = undefined,\n                  column_collection = self.model.get('columns');\n\n                if (!_.isUndefined(tbl_name) &&\n                    tbl_name !== '' && column_collection.length !== 0) {\n                  var msg = gettext('Changing of type table will clear columns collection');\n                  alertify.confirm(msg, function (e) {\n                    if (e) {\n                      // User clicks Ok, lets clear columns collection\n                      column_collection.reset();\n                    } else {\n                      return this;\n                    }\n                  });\n                } else if (!_.isUndefined(tbl_name) && tbl_name === '') {\n                  column_collection.reset();\n                }\n\n                // Run Ajax now to fetch columns\n                if (!_.isUndefined(tbl_name) && tbl_name !== '') {\n                  arg = { 'tname': tbl_name }\n                  data = self.model.fetch_columns_ajax.apply(self, [arg]);\n                  // Add into column collection\n                  column_collection.set(data, { merge:false,remove:false });\n                }\n              }\n            })\n        },{\n          id: 'fillfactor', label: gettext('Fill factor'), type: 'int',\n          mode: ['create', 'edit'], min: 10, max: 100,\n          disabled: 'inSchema',group: gettext('Advanced')\n        },{\n          id: 'relhasoids', label: gettext('Has OIDs?'), cell: 'switch',\n          type: 'switch', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchema', group: gettext('Advanced')\n        },{\n          id: 'relpersistence', label: gettext('Unlogged?'), cell: 'switch',\n          type: 'switch', mode: ['properties', 'create', 'edit'],\n          disabled: 'inSchemaWithModelCheck',\n          group: gettext('Advanced')\n        },{\n          id: 'conname', label: gettext('Primary key'), cell: 'string',\n          type: 'text', mode: ['properties'], group: gettext('Advanced'),\n          disabled: 'inSchema'\n        },{\n          id: 'reltuples', label: gettext('Rows (estimated)'), cell: 'string',\n          type: 'text', mode: ['properties'], group: gettext('Advanced'),\n          disabled: 'inSchema'\n        },{\n          id: 'rows_cnt', label: gettext('Rows (counted)'), cell: 'string',\n          type: 'text', mode: ['properties'], group: gettext('Advanced'),\n          disabled: 'inSchema'\n        },{\n          id: 'relhassubclass', label: gettext('Inherits tables?'), cell: 'switch',\n          type: 'switch', mode: ['properties'], group: gettext('Advanced'),\n          disabled: 'inSchema'\n        },{\n          id: 'is_sys_table', label: gettext('System table?'), cell: 'switch',\n          type: 'switch', mode: ['properties'],\n          disabled: 'inSchema'\n        },{\n          type: 'nested', control: 'fieldset', label: gettext('Like'),\n          group: gettext('Advanced'),\n          schema:[{\n            id: 'like_relation', label: gettext('Relation'),\n            type: 'text', mode: ['create', 'edit'], deps: ['typname'],\n            control: 'node-ajax-options', url: 'get_relations',\n            disabled: 'isLikeDisable', group: gettext('Like')\n          },{\n            id: 'like_default_value', label: gettext('With default values?'),\n            type: 'switch', mode: ['create', 'edit'], deps: ['typname'],\n            disabled: 'isLikeDisable', group: gettext('Like')\n          },{\n            id: 'like_constraints', label: gettext('With constraints?'),\n            type: 'switch', mode: ['create', 'edit'], deps: ['typname'],\n            disabled: 'isLikeDisable', group: gettext('Like')\n          },{\n            id: 'like_indexes', label: gettext('With indexes?'),\n            type: 'switch', mode: ['create', 'edit'], deps: ['typname'],\n            disabled: 'isLikeDisable', group: gettext('Like')\n          },{\n            id: 'like_storage', label: gettext('With storage?'),\n            type: 'switch', mode: ['create', 'edit'], deps: ['typname'],\n            disabled: 'isLikeDisable', group: gettext('Like')\n          },{\n            id: 'like_comments', label: gettext('With comments?'),\n            type: 'switch', mode: ['create', 'edit'], deps: ['typname'],\n            disabled: 'isLikeDisable', group: gettext('Like')\n          }]\n        },{\n          id: 'partition_type', label:gettext('Partition Type'),\n          editable: false, type: 'select2', select2: {allowClear: false},\n          group: 'partition', deps: ['is_partitioned'],\n          options:[{\n            label: 'Range', value: 'range'\n          },{\n            label: 'List', value: 'list'\n          }],\n          mode:['create'],\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          },\n          disabled: function(m) {\n            if (!m.isNew() || !m.get('is_partitioned'))\n              return true;\n            return false;\n          }\n        },{\n          id: 'partition_keys', label:gettext('Partition Keys'),\n          model: Backform.PartitionKeyModel,\n          subnode: Backform.PartitionKeyModel,\n          editable: true, type: 'collection',\n          group: 'partition', mode: ['create'],\n          deps: ['is_partitioned', 'partition_type'],\n          canEdit: false, canDelete: true,\n          control: 'sub-node-collection',\n          canAdd: function(m) {\n            if (m.isNew() && m.get('is_partitioned'))\n              return true;\n            return false;\n          },\n          canAddRow: function(m) {\n            var columns = m.get('columns');\n            var max_row_count = 1000;\n\n            if (m.get('partition_type') && m.get('partition_type') == 'list')\n              max_row_count = 1;\n\n            return (m.get('partition_keys') &&\n                m.get('partition_keys').length < max_row_count &&\n                _.some(columns.pluck('name'))\n            );\n          },\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          },\n          disabled: function(m) {\n            if (m.get('partition_keys') && m.get('partition_keys').models.length > 0) {\n              setTimeout(function () {\n                var coll = m.get('partition_keys');\n                coll.remove(coll.filter(function(model) {\n                  return true;\n                }));\n              }, 10);\n            }\n          }\n        },{\n          id: 'partition_scheme', label: gettext('Partition Scheme'),\n          type: 'note', group: 'partition', mode: ['edit'],\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          },\n          disabled: function(m) {\n            if (!m.isNew()) {\n              this.text = m.get('partition_scheme');\n            }\n          }\n        },{\n          id: 'partitions', label:gettext('Partitions'),\n          model: Backform.PartitionsModel,\n          subnode: Backform.PartitionsModel,\n          editable: true, type: 'collection',\n          group: 'partition', mode: ['edit', 'create'],\n          deps: ['is_partitioned', 'partition_type'],\n          canEdit: false, canDelete: true,\n          customDeleteTitle: gettext('Detach Partition'),\n          customDeleteMsg: gettext('Are you sure you wish to detach this partition?'),\n          columns:['is_attach', 'partition_name', 'values_from', 'values_to', 'values_in'],\n          control: Backform.SubNodeCollectionControl.extend({\n            row: Backgrid.PartitionRow,\n            initialize: function() {\n              Backform.SubNodeCollectionControl.prototype.initialize.apply(this, arguments);\n              var self = this;\n              if (!this.model.isNew()) {\n                var node = this.field.get('schema_node'),\n                    node_info = this.field.get('node_info');\n\n                // Make ajax call to get the tables to be attached\n                $.ajax({\n                  url: node.generate_url.apply(\n                      node, [\n                        null, 'get_attach_tables', this.field.get('node_data'),\n                        true, node_info\n                      ]),\n\n                  type: 'GET',\n                  async: false,\n                  success: function(res) {\n                    if (res.success == 1) {\n                      self.model.table_options = res.data;\n                    }\n                    else {\n                      alertify.alert(\n                        'Error fetching tables to be attached', res.data.result\n                      );\n                    }\n                  },\n                  error: function(e) {\n                    var errmsg = $.parseJSON(e.responseText);\n                    alertify.alert('Error fetching tables to be attached.', errmsg.errormsg);\n                  }\n                });\n              }\n            }\n          }\n          ),\n          canAdd: function(m) {\n            if (m.get('is_partitioned'))\n              return true;\n            return false;\n          },\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          },\n          disabled: function(m) {\n            if (m.isNew() && m.get('partitions') && m.get('partitions').models.length > 0) {\n              setTimeout(function () {\n                var coll = m.get('partitions');\n                coll.remove(coll.filter(function(model) {\n                  return true;\n                }));\n              }, 10);\n            }\n          }\n        },{\n          id: 'partition_note', label: gettext('Partition'),\n          type: 'note', group: 'partition',\n          text: gettext('Above control will be used to Create/Attach/Detach partitions.<br>' +\n            '<ul><li>Create Mode: User will be able to create N number of partitions. Mode switch control is disabled in this scenario.</li>' +\n            '<li>Edit Mode: User will be able to create/attach/detach N number of partitions.' +\n            'In attach mode there will be list of suitable tables to be attached.</li></ul>'),\n          visible: function(m) {\n            if(!_.isUndefined(m.node_info) && !_.isUndefined(m.node_info.server)\n              && !_.isUndefined(m.node_info.server.version) &&\n              m.node_info.server.version >= 100000)\n              return true;\n\n            return false;\n          }\n        },{\n          // Here - we will create tab control for storage parameters\n          // (auto vacuum).\n          type: 'nested', control: 'tab', group: gettext('Parameter'),\n          mode: ['edit', 'create'], deps: ['is_partitioned'],\n          schema: Backform.VacuumSettingsSchema\n        },{\n          id: 'relacl_str', label: gettext('Privileges'), disabled: 'inSchema',\n          type: 'text', mode: ['properties'], group: gettext('Security')\n        }, pgBrowser.SecurityGroupSchema,{\n          id: 'relacl', label: gettext('Privileges'), type: 'collection',\n          group: 'security', control: 'unique-col-collection',\n          model: pgBrowser.Node.PrivilegeRoleModel.extend({\n          privileges: ['a','r','w','d','D','x','t']}),\n          mode: ['edit', 'create'], canAdd: true, canDelete: true,\n          uniqueCol : ['grantee']\n        },{\n          id: 'seclabels', label: gettext('Security labels'), canEdit: false,\n          model: pgBrowser.SecLabelModel, editable: false, canAdd: true,\n          type: 'collection', min_version: 90100, mode: ['edit', 'create'],\n          group: 'security', canDelete: true, control: 'unique-col-collection'\n        },{\n          id: 'vacuum_settings_str', label: gettext('Storage settings'),\n          type: 'multiline', group: gettext('Advanced'), mode: ['properties']\n        }],\n        validate: function(keys) {\n          var err = {},\n              changedAttrs = this.changed,\n              msg = undefined,\n              name = this.get('name'),\n              schema = this.get('schema'),\n              relowner = this.get('relowner'),\n              is_partitioned = this.get('is_partitioned'),\n              partition_keys = this.get('partition_keys');\n\n          // If nothing to validate or VacuumSetting keys then\n          // return from here\n          if ( keys && (keys.length == 0\n                        || _.indexOf(keys, 'autovacuum_enabled') != -1\n                        || _.indexOf(keys, 'toast_autovacuum_enabled') != -1) ) {\n            return null;\n          }\n\n          // Have to clear existing validation before initiating current state validation only\n          this.errorModel.clear();\n\n          if (_.isUndefined(name) || _.isNull(name) ||\n            String(name).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Table name cannot be empty.');\n            this.errorModel.set('name', msg);\n            return msg;\n          } else if (_.isUndefined(schema) || _.isNull(schema) ||\n            String(schema).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Table schema cannot be empty.');\n            this.errorModel.set('schema', msg);\n            return msg;\n          } else if (_.isUndefined(relowner) || _.isNull(relowner) ||\n            String(relowner).replace(/^\\s+|\\s+$/g, '') == '') {\n            msg = gettext('Table owner cannot be empty.');\n            this.errorModel.set('relowner', msg);\n            return msg;\n          } else if (is_partitioned && this.isNew() &&\n            !_.isNull(partition_keys) && partition_keys.length <= 0)\n          {\n            msg = gettext('Please specify at least one key for partitioned table.');\n            this.errorModel.set('partition_keys', msg);\n            return msg;\n          }\n          return null;\n        },\n        // We will disable everything if we are under catalog node\n        inSchema: function() {\n          if(this.node_info &&  'catalog' in this.node_info)\n          {\n            return true;\n          }\n          return false;\n        },\n        isInheritedTable: function(m) {\n          if(!m.inSchema.apply(this, [m])) {\n            if(\n              (!_.isUndefined(m.get('coll_inherits')) && m.get('coll_inherits').length != 0)\n                ||\n                  (!_.isUndefined(m.get('typname')) && String(m.get('typname')).replace(/^\\s+|\\s+$/g, '') !== '')\n            ) {\n              // Either of_types or coll_inherits has value\n              return false;\n            } else {\n              return true;\n            }\n          }\n          return false;\n        },\n        // Oftype is defined?\n        checkInheritance: function(m) {\n          // Disabled if it is partitioned table\n          if (m.get('is_partitioned')) {\n            setTimeout( function() {\n               m.set('coll_inherits', []);\n            }, 10);\n            return true;\n          }\n\n          // coll_inherits || typname\n          if(!m.inSchema.apply(this, [m]) &&\n              ( _.isUndefined(m.get('typname')) ||\n                _.isNull(m.get('typname')) ||\n                String(m.get('typname')).replace(/^\\s+|\\s+$/g, '') == '')) {\n            return false;\n          }\n          return true;\n        },\n        // We will disable Like if ofType is defined\n        isLikeDisable: function(m) {\n          if(!m.inSchemaWithModelCheck.apply(this, [m]) &&\n              ( _.isUndefined(m.get('typname')) ||\n                _.isNull(m.get('typname')) ||\n                String(m.get('typname')).replace(/^\\s+|\\s+$/g, '') == '')) {\n            return false;\n          }\n          return true;\n        },\n        // Check for column grid when to Add\n        check_grid_add_condition: function(m) {\n          var enable_flag = true;\n          if(!m.inSchema.apply(this, [m])) {\n            // if of_type then disable add in grid\n            if (!_.isUndefined(m.get('typname')) &&\n                !_.isNull(m.get('typname')) &&\n                m.get('typname') !== '') {\n                    enable_flag = false;\n                }\n          }\n          return enable_flag;\n        },\n        // Check for column grid when to edit/delete (for each row)\n        check_grid_row_edit_delete: function(m) {\n          var flag = true;\n          if(!_.isUndefined(m.get('inheritedfrom')) &&\n               !_.isNull(m.get('inheritedfrom')) &&\n               String(m.get('inheritedfrom')).replace(/^\\s+|\\s+$/g, '') !== '') {\n            flag = false;\n          }\n          return flag;\n        },\n        // We will disable it if Inheritance is defined\n        checkOfType: function(m) {\n          // Disabled if it is partitioned table\n          if (m.get('is_partitioned')) {\n            setTimeout( function() {\n               m.set('typname', undefined);\n            }, 10);\n            return true;\n          }\n\n          //coll_inherits || typname\n          if(!m.inSchemaWithModelCheck.apply(this, [m]) &&\n              (_.isUndefined(m.get('coll_inherits')) ||\n               _.isNull(m.get('coll_inherits')) ||\n               String(m.get('coll_inherits')).replace(/^\\s+|\\s+$/g, '') == '')) {\n            return false;\n          }\n          return true;\n        },\n        // We will check if we are under schema node & in 'create' mode\n        inSchemaWithModelCheck: function(m) {\n          if(this.node_info &&  'schema' in this.node_info)\n          {\n            // We will disbale control if it's in 'edit' mode\n            if (m.isNew()) {\n              return false;\n            } else {\n              return true;\n            }\n          }\n          return true;\n        },\n        isTableAutoVacuumEnable: function(m) {\n          // We need to check additional condition to toggle enable/disable\n          // for table auto-vacuum\n          if(!m.inSchema.apply(this, [m]) &&\n              m.get('autovacuum_enabled') === true) {\n            return false;\n          }\n          return true;\n        },\n        isToastTableAutoVacuumEnable: function(m) {\n          // We need to check additional condition to toggle enable/disable\n          // for toast table auto-vacuum\n          if(!m.inSchemaWithModelCheck.apply(this, [m]) &&\n              m.get('toast_autovacuum_enabled') == true) {\n            return false;\n          }\n          return true;\n        },\n        fetch_columns_ajax: function(arg) {\n          var self = this,\n              url = 'get_columns',\n              m = self.model.top || self.model,\n              old_columns = _.clone(m.get('columns')),\n              data = undefined,\n              node = this.field.get('schema_node'),\n              node_info = this.field.get('node_info'),\n              full_url = node.generate_url.apply(\n                node, [\n                  null, url, this.field.get('node_data'),\n                  this.field.get('url_with_id') || false, node_info\n                ]\n              ),\n              cache_level = this.field.get('cache_level') || node.type,\n              cache_node = this.field.get('cache_node');\n\n          cache_node = (cache_node && pgBrowser.Nodes['cache_node']) || node;\n\n          m.trigger('pgadmin:view:fetching', m, self.field);\n          // Fetching Columns data for the selected table.\n          $.ajax({\n            async: false,\n            url: full_url,\n            data: arg,\n            success: function(res) {\n              data = cache_node.cache(url, node_info, cache_level, res.data);\n            },\n            error: function() {\n              m.trigger('pgadmin:view:fetch:error', m, self.field);\n            }\n          });\n          m.trigger('pgadmin:view:fetched', m, self.field);\n          data = (data && data.data) || [];\n          return data;\n        }\n      }),\n      canCreate: function(itemData, item, data) {\n          //If check is false then , we will allow create menu\n          if (data && data.check == false)\n            return true;\n\n          var t = pgBrowser.tree, i = item, d = itemData;\n          // To iterate over tree to check parent node\n          while (i) {\n            // If it is schema then allow user to create table\n            if (_.indexOf(['schema'], d._type) > -1)\n              return true;\n\n            if ('coll-table' == d._type) {\n              //Check if we are not child of catalog\n              var prev_i = t.hasParent(i) ? t.parent(i) : null;\n              var prev_d = prev_i ? t.itemData(prev_i) : null;\n              if( prev_d._type == 'catalog') {\n                return false;\n              } else {\n                return true;\n              }\n            }\n            i = t.hasParent(i) ? t.parent(i) : null;\n            d = i ? t.itemData(i) : null;\n          }\n          // by default we do not want to allow create menu\n          return true;\n      },\n      // Check to whether table has disable trigger(s)\n      canCreate_with_trigger_enable: function(itemData, item, data) {\n        if(this.canCreate.apply(this, [itemData, item, data])) {\n          // We are here means we can create menu, now let's check condition\n          if(itemData.tigger_count > 0) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      },\n      // Check to whether table has enable trigger(s)\n      canCreate_with_trigger_disable: function(itemData, item, data) {\n        if(this.canCreate.apply(this, [itemData, item, data])) {\n          // We are here means we can create menu, now let's check condition\n          if(itemData.tigger_count > 0 && itemData.has_enable_triggers > 0) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    });\n  }\n\n  return pgBrowser.Nodes['partition'];\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/browser/server_groups/servers/databases/schemas/tables/partitions/static/js/partition.js"],"mappings":";;;;;;;;;AAAA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AARA;AACA;AASA;AACA;AAXA;AACA;AAYA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AClEA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AClFA;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;ACAA;AACA;;;;;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;;;;;;;;ACpBA;AACA;AAMA;;;;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;;;;AAIA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AACA;AAutBA;AACA;AAwvFA;AAyFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAxoBA;AA0oBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5CA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AApBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AA9BA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AA5BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AArBA;AAulGA;AAoGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAhIA;AAkIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAjCA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAtCA;AAwCA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AA5BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AADA;AACA;AAGA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AADA;AACA;AAGA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAnBA;AAqBA;AAptCA;AACA;AAuttGA;AACA;AAyGA;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAdA;AAgBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAbA;AAeA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AA1BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAjBA;AAmBA;AA9SA;AACA;AAgTA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1pDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AA+CA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAUA;AAAA;AAk7BA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AADA;AAIA;AACA;AACA;AADA;AAVA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAdA;AAgBA;AACA;AAEA;AACA;AA5EA;AA8EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AA9mCA;AA+mCA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAnnCA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AACA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAuCA;AACA;AACA;AACA;AAMA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AATA;AAAA;AAYA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAPA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AAvGA;AAyGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AAtbA;AAwbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnSA;AAqSA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AA74BA;AAklCA;AACA;AACA;AACA;AACA;;;;;;;ACnoCA;;;;;;;;;;ACAA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AA7DA;AACA;AAgEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAiCA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AAEA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AANA;AAQA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AANA;AAQA;AACA;AACA;AAHA;AASA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAKA;AARA;AAUA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AADA;AAGA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3TA;AA6TA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnYA;AAsYA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/dA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AAEA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAlEA;AApBA;AA0FA;AACA;AACA;AACA;AACA;;;;;;;;;AChHA;AACA;AAIA;;;;;;;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAPA;AAeA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AA9FA;AACA;AAgGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAhBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAxOA;AA0OA;AACA;AACA;AACA;AACA;;;;;;;;;AClRA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AACA;AAqjFA;AAmFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzGA;AA2GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAzKA;AACA;AA2KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAKA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AAKA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AAKA;AACA;AAXA;AAaA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzGA;AA4GA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClVA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;ACzCA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAtCA;AACA;AAwCA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AAeA;AAhBA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AANA;AAYA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AA7CA;AACA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAPA;AAcA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AANA;AAQA;AACA;AACA;AACA;AAEA;AANA;AAQA;AACA;AACA;AACA;AAEA;AANA;AAjBA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AARA;AAUA;AACA;AACA;AACA;AAIA;AARA;AAUA;AACA;AAFA;AArBA;AA0BA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAZA;AAiBA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAZA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAFA;AATA;AAcA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAZA;AAiBA;AACA;AACA;AAhKA;AACA;AAkKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;;;;;;;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AAMA;AAGA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAlBA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AADA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AApBA;AAsBA;AACA;AAjJA;AAmJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAlBA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAMA;AACA;AADA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAlBA;AAoBA;AACA;AApKA;AAsKA;AACA;AACA;AACA;AAriBA;AAuiBA;AACA;AACA;;;;;;;;;;AC/yBA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAPA;AAYA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AARA;AAUA;AACA;AACA;AACA;AAIA;AARA;AAUA;AACA;AACA;AACA;AAIA;AARA;AArBA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAVA;AAYA;AACA;AACA;AACA;AAMA;AAVA;AAdA;AA2BA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AATA;AAcA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AANA;AAQA;AACA;AAFA;AAbA;AAkBA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AANA;AAWA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAXA;AAiBA;AACA;AACA;AArLA;AACA;AAuLA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;;;;;;;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AAMA;AAGA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AApBA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAMA;AACA;AADA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAtBA;AAwBA;AACA;AAlMA;AAoMA;AACA;AACA;AACA;AACA;AAnVA;AAqVA;AACA;AACA;;;;;;;;;;ACjjBA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AACA;AAuDA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AA3BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAJA;AAeA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AAMA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;;;;;;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;;;;;;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;;;;AAIA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AADA;AACA;AAEA;AACA;AAEA;AADA;AAbA;AAiBA;AACA;AAFA;AACA;AACA;AAGA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AA0BA;;;;;;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAIA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAJA;AAOA;AAjBA;AACA;AAmBA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/DA;AAiEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtGA;AACA;AAwGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AARA;AALA;AACA;AAiBA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;AAKA;AAGA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtGA;AAwGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AA9KA;AACA;AAiLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AAXA;AACA;AACA;AA0DA;;;;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AArCA;AACA;AAwCA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AAGA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAcA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAyDA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAl5BA;AAo5BA;AACA;AACA;AACA;AACA;AACA;AAp+BA;AACA;AAs+BA;AACA;AACA;;;;;;;;;;;AC3mCA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAaA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AADA;AAaA;AACA;AACA;AACA;AAHA;AAtBA;AA6BA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AARA;AAcA;AACA;AAFA;AACA;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AAnGA;AACA;AAqGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AAMA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAWA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AArBA;AAuBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAMA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AA5JA;AA8JA;AACA;AACA;AACA;AACA;AACA;AA9RA;AACA;AAgSA;AACA;AACA;;;;;;;;;AC9aA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAGA;AANA;AAQA;AACA;AACA;AAHA;AApBA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA2BA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AA3DA;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAhCA;AAmCA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AATA;AAYA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAVA;AAmBA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAPA;AAgBA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAPA;AA1CA;AACA;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AApPA;AACA;AAsPA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAnBA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AAJA;AAAA;AAWA;AADA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjKA;AAmKA;AACA;AACA;AACA;AACA;AAKA;AA9QA;AACA;AAgRA;AACA;AACA;;;;;;;;;AC3hBA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAAA;AACA;AAEA;AAKA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AA2CA;AACA;AACA;;;;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAIA;AAxCA;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjGA;AAmGA;AApbA;AACA;AAsbA;AACA;AACA;;;;;;;;;ACxcA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnGA;AAqGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AACA;AA2BA;AACA;AAtLA;AAwLA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9MA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAIA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA9BA;AACA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AANA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAJA;AASA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AATA;AAcA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAJA;AAUA;AACA;AAKA;AACA;AARA;AAUA;AADA;AAGA;AACA;AA1EA;AA4EA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAVA;AAaA;AACA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnNA;AAzCA;AA+PA;AACA;AACA;AACA;AACA;;;;;;;;;AC1TA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAjDA;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9FA;AAgGA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AA5GA;AA8GA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlDA;AACA;AAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AALA;AASA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAPA;AASA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AArBA;AAFA;AA0BA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAMA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AAdA;AAlDA;AAmEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AAdA;AAlBA;AAmCA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9PA;AApCA;AAqSA;AACA;AACA;AACA;AACA;;;;;;;;;;AC9dvBA;AAyBA;AACA;AAvEA;AAyEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AApEA;AAsEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AA7EA;AA+EA;AAtgBA;AACA;AAwgBA;AACA;AACA;;;;;;;;;AC3qBA;AACA;AAQA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AAEA;AACA;AAEA;AA/DA;AACA;AAiEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AAEA;AACA;AAEA;AA/DA;AACA;AAiEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AA9BA;AACA;AAgCA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAnBA;AACA;AA0BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAXA;AAajCA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AA1CA;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAVA;AACA;AAeA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAKA;AAKA;AAKA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAVA;AACA;AAeA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAKA;AAKA;AAKA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAxmCA;AACA;AA0mCA;AACA;AACA;;;;;;;;ACx0CA;;;;;;;;;ACAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxOA;AAAA;AAAA;AA6OA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAnDA;AACA;AAqDA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAHA;AAFA;AAUA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAfA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAjBA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAKA;AApBA;AAsBA;AACA;AA3FA;AAnCA;AAAA;AAAA;AAAA;AAwIA;AACA;AAFA;AAvIA;AA4IA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAxSA;AA0SA;AACA;AACA;AACA;AACA;AAxmBA;AA0mBA;AACA;AACA;;;;;;;;;;AC1oBA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AAfA;AACA;AAiBA;AACA;AADA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;;;AAhCA;;;AAAA;AAHA;AAAA;AACA;AA4CA;AAEA;AACA;AACA;AACA;AACA;AALA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAlBA;AACA;AAoBA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AADA;AAIA;AAMA;AACA;AAEA;AACA;AACA;AACA;AA5EA;AA8EA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAGA;AACA;AAIA;AACA;AACA;AAIA;AACA;AA/SA;AACA;AAiTA;AACA;AACA;;;;;;;;;;AC7YA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxBA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAPA;AASA;AACA;AACA;AACA;AAIA;AACA;AACA;AAnBA;AACA;AAqBA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;;;;AAIA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAXA;AAcA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AA9BA;AACA;AAgCA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AADA;AAIA;AAMA;AACA;AAEA;AACA;AACA;AACA;AA/BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/WA;AACA;AAiXA;AACA;AACA;;;;;;;;;;AChYA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AADA;AAIA;AAMA;AACA;AAEA;AACA;AAvCA;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhJA;AACA;AAkJA;AACA;AACA;;;;;;;;;;ACjKA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AACA;AAuBA;AACA;AAGA;AAEA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAfA;AAidA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAeA;AADA;AAdA;AAoBA;AADA;AAnBA;AACA;AA2BA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAjYA;AACA;AAmYA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AA/BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AANA;AAQA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAmBA;AACA;AACA;AA1BA;AA4BA;AACA;AAtHA;AACA;AAwHA;AACA;AACA;;;;;;;;;ACxhBA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtEA;AAwEA;AACA;AACA;AACA;AACA;;;;;;;;;AClFA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAAA;AAkdA;AACA;AACA;AApdA;AAsdA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAlBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnDA;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAniBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAmCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AA9GA;AAgHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AAEA;AARA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AACA;AACA;AADA;AAGA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AACA;AANA;AAQA;AACA;AAFA;AA5BA;AAmCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtMA;AAxPA;AACA;AAicA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAiGA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3jBA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAHA;AASA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AACA;AA2CA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAeA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAcA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AANA;AAaA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AApBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;;;;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAzNA;AACA;AA2NA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAZA;AAcA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AA3GA;AA8GA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9KA;AA3EA;AA4PA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnjBA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAGA;;;;;AAKA;AACA;AACA;AAKA;AAnBA;AAjBA;AACA;AAuCA;;;;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAGA;;;;;AAKA;AACA;AACA;AAKA;AAnBA;AAhBA;AAsCA;;;;AAIA;AACA;AACA;AAFA;AACA;AAIA;;;;;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AA7CA;AA+CA;;;;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AALA;AAWA;;;;AAIA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AAjMA;AACA;AAqMA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AApPA;AAzCA;AAiSA;AACA;AACA;AACA;;;;;;;;;ACroCA;AACA;AACA;AAlEA;AACA;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAXA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AADA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AAEA;AACA;AAEA;AACA;AArIA;AAuIA;AACA;AACA;AACA;AAjOA;AAmOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;AAhSA;AAyXA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjZA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAAA;AAEA;AAEA;AAbA;AAeA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AACA;AAIA;;;;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AA9CA;AAwGA;AACA;AACA;AACA;AACA;;;;;;;;;AC9HA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AACA;AACA;AAHA;AAUA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AASA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhHA;AArCA;AAyJA;AACA;AACA;AACA;AACA;;;;;;;;;AChLA;AACA;AAKA;;;;;;;AAOA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;;;;;;;;;;;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAxCA;AAxCA;AAoFA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAwBA;AACA;AAFA;AAKA;AACA;AACA;;;;AAIA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AApKA;AA/CA;AAsNA;AACA;AACA;AACA;AACA;;;;;;;;;AChQA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3MA;AAzCA;AAuPA;AACA;AACA;AACA;;;;;;;;;AC7QA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;;;;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AACA;AAgCA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAVA;AAYA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;AACA;AAFA;AAIA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;AA3CA;AAmIA;AACA;AACA;AACA;AACA;;;;;;;;;AC5LA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAIA;;;;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AACA;AA+BA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AARA;AAUA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AACA;AAKA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnFA;AAzCA;AAgIA;AACA;AACA;AACA;AACA;;;;;;;;;ACxLA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AACA;AAIA;;;;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AACA;AAkCA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAIA;AAEA;AACA;AAfA;AAiBA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AACA;AAMA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DA;AA1CA;AA2GA;AACA;AACA;AACA;AACA;;;;;;;;;ACrKA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AA1EA;AACA;AA4EA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAJA;AAdA;AAsBA;AA3BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AAJA;AAfA;AAuBA;AA9BA;AACA;AAgCA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAPA;AAxBA;AAmCA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAtHA;AAwHA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArLA;AACA;AAuLA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AACA;AA6BA;AACA;AACA;;;;;;;;;;ACvgBA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AA3CA;AAdA;AA6DA;AACA;AACA;AACA;AACA;;;;;;;;;AClFA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAhBA;AAfA;AAuCA;AACA;AACA;AACA;AACA;;;;;;;;;AC3DA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AArKA;AAuKA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3OA;AA8OA;AACA;AACA;AACA;AACA;;;;;;;;;ACnQA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AAvDA;AACA;AAyDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5KA;AA8KA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA7PA;AAgQA;AACA;AACA;AACA;AACA;;;;;;;;;;AClVA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AADA;AAIA;AAEA;AAAA;AAHA;AAKA;AAGA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA/EA;AAxCA;AA0HA;AACA;AACA;AACA;AACA;;;;;;;;;AClJA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AADA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AACA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxDA;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;AAsDA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAVA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AARA;AAUA;AADA;AAGA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAvNA;AACA;AA0NA;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlGA;AACA;AAqGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AADA;AAGA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArEA;AACA;AAwEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAhBA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AAGA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnJA;AAqJA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1NA;AA6NA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/sBA;AACA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAxCA;AACA;AA0CA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AAGA;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAGA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA9EA;AAgFA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AA7FA;AAFA;AACA;AAiGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAFA;AAFA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAzVA;AACA;AA4VA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAZA;AAcA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;;;;;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AA1HA;AA4HA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlMA;AAoMA;AACA;AACA;AACA;AACA;;;;;;;;;;ACtmBA;AACA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAhCA;AACA;AAkCA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAtFA;AAwFA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7JA;AA+JA;AACA;AACA;AACA;AACA;;;;;;;;;AC1NA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AACA;AAOA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAzIA;AA2IA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjNA;AAmNA;AACA;AACA;AACA;AACA;;;;;;;;;AC1OA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AACA;AAMA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA7EA;AA+EA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArJA;AAuJA;AACA;AACA;AACA;AACA;;;;;;;;;AC9KA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArGA;AAxDA;AAiKA;AACA;AACA;AACA;AACA;;;;;;;;;AC5LA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AADA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAfA;AApBA;AAwCA;AACA;AACA;AACA;AACA;;;;;;;;;ACnEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAzBA;AAnBA;AAgDA;AACA;AACA;AACA;AACA;;;;;;;;;ACtEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AAEA;AAHA;AAKA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AANA;AAQA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AANA;AAQA;AACA;AACA;AAHA;AASA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AADA;AAGA;AANA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/SA;AAiTA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtXA;AAyXA;AACA;AACA;AACA;AACA;;;;;;;;;AChZA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AANA;AAQA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAnGA;AA1DA;AAgKA;AACA;AACA;AACA;AACA;;;;;;;;;ACvLA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvNA;AAvEA;AAiSA;AACA;AACA;AACA;AACA;;;;;;;;;ACzTA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AASA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AAxCA;AA0CA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxKA;AA0KA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAjOA;AAoOA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzPA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA2BA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnKA;AACA;AAqKA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAZA;AACA;AAcA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AAOA;AArCA;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AA/BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAmCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAXA;AAaA;AACA;AACA;AAjCA;AAmCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAXA;AAaA;AACA;AACA;AAnCA;AArHA;AA2JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAwBA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AALA;AArKA;AA6KA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAfA;AAihnBA;AAknBA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvrBA;AAyrBA;AACA;AACA;AACA;;;;;;;;;ACp7BA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAlBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAlBA;AAyBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AA9JA;AACA;AAgKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AALA;AAiCA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/MA;AAiNA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxSA;AA0SA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACngBA;AACA;AAKA;AACA;AAeA;AAhBA;AACA;AAkBA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AA8BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AA8BA;AAtFA;AAwFA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAwCA;AACA;AACA;AACA;AArDA;AAuDA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxCA;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AApCA;AA+DA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAMA;AAhBA;AAkBA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApYA;AAsYA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1kBA;AA4kBA;AACA;AACA;AACA;AACA;;;;;;;;;ACrnBA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AA7BA;AAfA;AAkDA;AACA;AACA;AACA;AACA;;;;;;;;;ACvEA;AACA;AAMA;;;;;;;AAOA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AADA;AAGA;AADA;AAZA;AAgBA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AADA;AAGA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3GA;AACA;AA6GA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAzMA;AA2MA;AACA;AACA;AACA;AACA;;;;;;;;;ACnPA;AACA;AAKA;;;;;;;AAOA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAPA;AASA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AADA;AAGA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAzHA;AACA;AA2HA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AA7RA;AA+RA;AACA;AACA;AACA;AACA;;;;;;;;;ACtUA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AA8BA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AAGA;AA7JA;AA+JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AADA;AAGA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAfA;AAiBA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AAbA;AAuFA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlFA;AAoFA;AAtHA;AAwHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AA7BA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAlGA;AA+HA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAVA;AA4DA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAxBA;AA8BA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AA8DA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AAaA;AACA;AACA;AAIA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AAnCA;AAsCA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AAyEA;AACA;AACA;AAgBA;AACA;AACA;AAIA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAl/BA;AAo/BA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AAAA;AAKA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AA/3CA;AAi4CA;AACA;AACA;AACA;AACA;;;;;;;;;;AC55CA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AANA;AAQA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AACA;AAkCA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AA9BA;AACA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAxEA;AA0EA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA/BA;AAiCA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AAAA;AACA;AAEA;;;;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApFA;AAsFA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAyDA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AAuDA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AATA;AAWA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AARA;AAeA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AA1hBA;AA4hBA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAjoBA;AAmoBA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/tBA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAZA;AAfA;AAiCA;AACA;AACA;AACA;AACA;;;;;;;;;ACxfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;;;;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtFA;AAwFA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;;;;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA5IA;AA8IA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApRA;AAsRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA3BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA3cA;AApEA;AAkhBA;AACA;AACA;AACA;AACA;;;;;;;;;;AC9hBA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AACA;AAwBA;AACA;AAtCA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AAGA;AAGA;AAPA;AASA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AApBA;AAsBA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AA9GA;AAgHA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvNA;AA0NA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvOA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAdA;AACA;AA0BA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAVA;AACA;AAgBA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAzEA;AA2EA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AArFA;AAuFA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtDA;AAwDA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAhFA;AAlHA;AAqMA;AACA;AAtMA;AACA;AAwMA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0BA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AATA;AAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAjiBA;AACA;AAmiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AACA;AAwBA;AACA;AAtCA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAiDA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AA7CA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;AAuFA;AACA;AACA;AACA;AACA;AACA;AA1RA;AA4RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA3XA;AACA;AA6XA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3eA;AA6eA;AACA;AACA;AACA;AACA;;;;;;;;;;AC1kCA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AAhDA;AAtBA;AAyEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAvCA;AAhBA;AA2DA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAzMA;AACA;AA2MA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA7EA;AAuFA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AApIA;AAFA;AAAA;AACA;AA2IA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAFA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAnYA;AACA;AAqYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAmCA;AACA;AACA;AAGA;AA5CA;AA8CA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAGA;AAPA;AASA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AAGA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxGA;AAjBA;AA4HA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAlRA;AACA;AAoRA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtVA;AAwVA;AACA;AACA;AACA;AACA;;;;;;;;;;ACvfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;;;;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtFA;AAwFA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;;;;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA5IA;AA8IA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApRA;AAsRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA3BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA3cA;AAlFA;AAgiBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5iBA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AA1DA;AA4DA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AA8BA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AAGA;AAhNA;AAmNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AADA;AAGA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAfA;AAiBA;AACA;AAFA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlFA;AAoFA;AAtHA;AAwHA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AA7BA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAlGA;AA+HA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAxUA;AA0UA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAoCA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAxBA;AA8BA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;AA6CA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AAnCA;AAsCA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AAyEA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AA12BA;AA62BA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}