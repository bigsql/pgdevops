{"version":3,"file":"sqleditor.js","sources":["webpack:///pgadmin/static/js/check_node_visibility.js?08be","webpack:///pgadmin/static/js/sqleditor_utils.js?6013","webpack:///pgadmin/static/js/selection/clipboard.js","webpack:///pgadmin/static/js/selection/copy_data.js","webpack:///pgadmin/static/js/gettext.js?14a1","webpack:///pgadmin/static/bundle/codemirror.js?4eb2","webpack:///pgadmin/static/js/pgadmin.js?1681","webpack:///pgadmin/static/js/selection/range_selection_helper.js","webpack:///pgadmin/tools/sqleditor/static/js/sqleditor.js","webpack:///pgadmin/misc/static/explain/js/explain.js","webpack:///pgadmin/static/js/selection/grid_selector.js","webpack:///pgadmin/static/js/selection/column_selector.js","webpack:///pgadmin/static/js/selection/row_selector.js","webpack:///pgadmin/static/js/selection/active_cell_capture.js","webpack:///pgadmin/static/js/selection/range_boundary_navigator.js","webpack:///pgadmin/static/js/selection/xcell_selection_model.js","webpack:///pgadmin/static/js/selection/set_staged_rows.js","webpack:///pgadmin/static/js/history/index.js","webpack:///pgadmin/static/js/history/history_collection.js","webpack:///pgadmin/static/jsx/history/query_history.jsx","webpack:///pgadmin/static/js/codemirror/addon/fold/pgadmin-sqlfoldcode.js?36c8","webpack:///external \"translations\"?b04a","webpack:///external \"pgadmin.browser.endpoints\"?48c7","webpack:///pgadmin/static/jsx/history/query_history_detail.jsx","webpack:///pgadmin/static/jsx/history/detail/history_detail_metadata.jsx","webpack:///pgadmin/static/jsx/history/detail/history_detail_query.jsx","webpack:///pgadmin/static/jsx/history/detail/code_mirror.jsx","webpack:///pgadmin/static/jsx/history/detail/history_detail_message.jsx","webpack:///pgadmin/static/jsx/history/detail/history_error_message.jsx","webpack:///pgadmin/static/jsx/history/query_history_entries.jsx","webpack:///pgadmin/static/jsx/history/query_history_entry.jsx","webpack:///pgadmin/static/jsx/history/query_history_entry_date_group.jsx","webpack:///pgadmin/static/js/sqleditor/keyboard_shortcuts.js","webpack:///pgadmin/static/js/sqleditor/query_tool_actions.js","webpack:///pgadmin/static/bundle/slickgrid.js","webpack:///pgadmin/static/jsx/react_shapes.jsx","webpack:///pgadmin/static/js/slickgrid/event_handlers/handle_query_output_keyboard_event.js","webpack:///pgadmin/static/js/url_for.js?a292","webpack:///external \"pgadmin.browser.utils\"?743c","webpack:///external \"pgadmin.browser.messages\"?30f9","webpack:///pgadmin/static/js/browser/generate_url.js?b814"],"sourcesContent":["//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\ndefine(['jquery', 'underscore', 'underscore.string'],\n  function ($, _, S) {\n\n    var check_node_visibility = function (pgBrowser, node_type) {\n      if(_.isUndefined(node_type) || _.isNull(node_type)) {\n        return true;\n      }\n\n      // Target actual node instead of collection.\n      // If node is disabled then there is no meaning of\n      // adding collection node menu\n      if(S.startsWith(node_type, \"coll-\")) {\n        node_type = node_type.replace(\"coll-\", \"\")\n      }\n\n      // Exclude non-applicable nodes\n      var nodes_not_supported = [\n        \"server_group\", \"server\", \"catalog_object_column\"\n      ];\n      if(_.indexOf(nodes_not_supported, node_type) >= 0) {\n        return true;\n      }\n\n      var preference = pgBrowser.get_preference(\"browser\", 'show_node_'+node_type);\n\n      if (preference) {\n        return preference.value\n      }\n      else {\n        return true;\n      }\n    }\n\n  return check_node_visibility;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/check_node_visibility.js","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n// This file contains common utilities functions used in sqleditor modules\n\ndefine(['jquery'],\n  function ($) {\n    var sqlEditorUtils = {\n      /* Reference link http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n       * Modified as per requirement.\n       */\n      epicRandomString: function(length) {\n        var s = [];\n        var hexDigits = \"0123456789abcdef\";\n        for (var i = 0; i < 36; i++) {\n            s[i] = hexDigits.substr(\n                    Math.floor(Math.random() * 0x10), 1\n                  );\n        }\n        // bits 12-15 of the time_hi_and_version field to 0010\n        s[14] = \"4\";\n        // bits 6-7 of the clock_seq_hi_and_reserved to 01\n        s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);\n        s[8] = s[13] = s[18] = s[23] = \"-\";\n\n        var uuid = s.join(\"\");\n        return uuid.replace(/-/g, '').substr(0, length);\n      },\n\n      // Returns a unique hash for input string\n      getHash: function(input) {\n        var hash = 0, len = input.length;\n        for (var i = 0; i < len; i++) {\n          hash  = ((hash << 5) - hash) + input.charCodeAt(i);\n          hash |= 0; // to 32bit integer\n        }\n        return hash;\n      },\n      calculateColumnWidth: function (text) {\n        // Calculate column header width based on column name or type\n        // Create a temporary element with given label, append to body\n        // calculate its width and remove the element.\n        $('body').append(\n            '<span id=\"pg_text\" style=\"visibility: hidden;\">'+ text + '</span>'\n        );\n        var width = $('#pg_text').width() + 23;\n        $('#pg_text').remove(); // remove element\n\n        return width;\n      },\n      capitalizeFirstLetter: function (string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n      }\n    };\n    return sqlEditorUtils;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/sqleditor_utils.js","define(['sources/gettext', 'alertify'], function (gettext, alertify) {\n  var clipboard = {\n    copyTextToClipboard: function (text) {\n      var textArea = document.createElement('textarea');\n\n      //\n      // *** This styling is an extra step which is likely not required. ***\n      //\n      // Why is it here? To ensure:\n      // 1. the element is able to have focus and selection.\n      // 2. if element was to flash render it has minimal visual impact.\n      // 3. less flakyness with selection and copying which **might** occur if\n      //    the textarea element is not visible.\n      //\n      // The likelihood is the element won't even render, not even a flash,\n      // so some of these are just precautions. However in IE the element\n      // is visible whilst the popup box asking the user for permission for\n      // the web page to copy to the clipboard.\n      //\n\n      // Place in top-left corner of screen regardless of scroll position.\n      textArea.style.position = 'fixed';\n      textArea.style.top = 0;\n      textArea.style.left = 0;\n\n      // Ensure it has a small width and height. Setting to 1px / 1em\n      // doesn't work as this gives a negative w/h on some browsers.\n      textArea.style.width = '2em';\n      textArea.style.height = '2em';\n\n      // We don't need padding, reducing the size if it does flash render.\n      textArea.style.padding = 0;\n\n      // Clean up any borders.\n      textArea.style.border = 'none';\n      textArea.style.outline = 'none';\n      textArea.style.boxShadow = 'none';\n\n      // Avoid flash of white box if rendered for any reason.\n      textArea.style.background = 'transparent';\n\n      document.body.appendChild(textArea);\n\n      textArea.select();\n\n      var copyTextToClipboardHandler = function(e) {\n        /* Remove oncopy event listener from document as we add listener for\n         * oncopy event on each copy operation.\n         * Also we don't want this listener to be persistent; Otherwise it'll get\n         * called for each copy operation performed on any input/textarea from\n         * this document.\n         */\n        document.removeEventListener('copy', copyTextToClipboardHandler);\n        var clipboardData = e.clipboardData || window.clipboardData;\n\n        if (clipboardData) {\n          clipboardData.setData('text', text);\n          // We want our data, not data from any selection, to be written to the clipboard\n          e.preventDefault();\n        }\n      };\n\n      document.addEventListener('copy', copyTextToClipboardHandler);\n\n      try {\n        // just perform copy on empty textarea so that copy event will be\n        // triggered on document and then we can set clipboardData.\n        document.execCommand('copy');\n      } catch (err) {\n        alertify.alert(\n          gettext('Error'),\n          gettext('Oops, unable to copy to clipboard'));\n      }\n\n      document.body.removeChild(textArea);\n    },\n  };\n  return clipboard;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/selection/clipboard.js","define([\n  'jquery',\n  'underscore',\n  'sources/selection/clipboard',\n  'sources/selection/range_selection_helper',\n  'sources/selection/range_boundary_navigator',\n],\nfunction ($, _, clipboard, RangeSelectionHelper, rangeBoundaryNavigator) {\n  var copyData = function () {\n    var self = this || window;\n\n    var grid = self.slickgrid;\n    var columnDefinitions = grid.getColumns();\n    var selectedRanges = grid.getSelectionModel().getSelectedRanges();\n    var dataView = grid.getData();\n    var rows = grid.getSelectedRows();\n\n    if (RangeSelectionHelper.areAllRangesCompleteRows(grid, selectedRanges)) {\n      self.copied_rows = rows.map(function (rowIndex) {\n        return grid.getDataItem(rowIndex);\n      });\n      setPasteRowButtonEnablement(self.can_edit, true);\n    } else {\n      self.copied_rows = [];\n      setPasteRowButtonEnablement(self.can_edit, false);\n    }\n    var csvText = rangeBoundaryNavigator.rangesToCsv(dataView.getItems(), columnDefinitions, selectedRanges);\n    if (csvText) {\n      clipboard.copyTextToClipboard(csvText);\n    }\n  };\n\n  var setPasteRowButtonEnablement = function (canEditFlag, isEnabled) {\n    if (canEditFlag) {\n      $('#btn-paste-row').prop('disabled', !isEnabled);\n    }\n  };\n  return copyData;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/selection/copy_data.js","define([\"translations\"], function (translations) {\n\n  /***\n   * This method behaves as a drop-in replacement for flask translation rendering.\n   * It uses the same translation file under the hood and uses flask to determine the language.\n   *\n   * ex. translate(\"some %(adjective)s text\", {adjective: \"cool\"})\n   *\n   * @param {String} text\n   * @param {Object} substitutions\n   */\n  return function gettext(text, substitutions) {\n\n    var rawTranslation = translations[text] ? translations[text] : text;\n\n    // captures things of the form %(substitutionName)s\n    var substitutionGroupsRegExp = /([^%]*)%\\(([^\\)]+)\\)s(.*)/;\n    var matchFound;\n\n    var interpolated = rawTranslation;\n    do {\n      matchFound = false;\n      interpolated = interpolated.replace(substitutionGroupsRegExp, function (_, textBeginning, substitutionName, textEnd) {\n        matchFound = true;\n        return textBeginning + substitutions[substitutionName] + textEnd;\n      });\n    } while (matchFound);\n\n    return interpolated;\n  };\n\n});\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/gettext.js","import CodeMirror from 'codemirror/lib/codemirror';\nimport 'codemirror/mode/sql/sql';\nimport 'codemirror/addon/selection/mark-selection';\nimport 'codemirror/addon/selection/active-line';\nimport 'codemirror/addon/fold/foldcode';\nimport 'codemirror/addon/fold/foldgutter';\nimport 'codemirror/addon/hint/show-hint';\nimport 'codemirror/addon/hint/sql-hint';\nimport 'codemirror/addon/scroll/simplescrollbars';\nimport 'codemirror/addon/dialog/dialog';\nimport 'codemirror/addon/search/search';\nimport 'codemirror/addon/search/searchcursor';\nimport 'codemirror/addon/search/jump-to-line';\nimport 'codemirror/addon/edit/matchbrackets';\nimport 'codemirror/addon/edit/closebrackets';\nimport 'codemirror/addon/comment/comment'\nimport '../js/codemirror/addon/fold/pgadmin-sqlfoldcode';\n\nexport default CodeMirror;\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/bundle/codemirror.js","(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if(typeof module !== 'undefined' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // Browser globals\n    factory();\n  }\n}(function(){\n  var pgAdmin = window.pgAdmin = window.pgAdmin || {};\n\n  // Reference:\n  // https://github.com/heygrady/Units/blob/master/Length.min.js\n  // Changed it to save the function in pgAdmin object.\n  (function(t,e,o) {\"use strict\";function r(t,e,r,p){r=r||\"width\";var n,l,m,c=(e.match(s)||[])[2],f=\"px\"===c?1:d[c+\"toPx\"],u=/r?em/i;if(f||u.test(c)&&!p)t=f?t:\"rem\"===c?i:\"fontSize\"===r?t.parentNode||t:t,f=f||parseFloat(a(t,\"fontSize\")),m=parseFloat(e)*f;else{n=t.style,l=n[r];try{n[r]=e}catch(x){return 0}m=n[r]?parseFloat(a(t,r)):0,n[r]=l!==o?l:null}return m}function a(t,e){var o,n,i,l,d,c=/^top|bottom/,f=[\"paddingTop\",\"paddingBottom\",\"borderTop\",\"borderBottom\"],u=4;if(o=m?m(t)[e]:(n=t.style[\"pixel\"+e.charAt(0).toUpperCase()+e.slice(1)])?n+\"px\":\"fontSize\"===e?r(t,\"1em\",\"left\",1)+\"px\":t.currentStyle[e],i=(o.match(s)||[])[2],\"%\"===i&&p)if(c.test(e)){for(l=(d=t.parentNode||t).offsetHeight;u--;)l-=parseFloat(a(d,f[u]));o=parseFloat(o)/100*l+\"px\"}else o=r(t,o);else(\"auto\"===o||i&&\"px\"!==i)&&m?o=0:i&&\"px\"!==i&&!m&&(o=r(t,o)+\"px\");return o}var p,n=e.createElement(\"test\"),i=e.documentElement,l=e.defaultView,m=l&&l.getComputedStyle,s=/^(-?[\\d+\\.\\-]+)([a-z]+|%)$/i,d={},c=[1/25.4,1/2.54,1/72,1/6],f=[\"mm\",\"cm\",\"pt\",\"pc\",\"in\",\"mozmm\"],u=6;for(i.appendChild(n),m&&(n.style.marginTop=\"1%\",p=\"1%\"===m(n).marginTop);u--;)d[f[u]+\"toPx\"]=c[u]?c[u]*d.inToPx:r(n,\"1\"+f[u]);i.removeChild(n),n=o,t.toPx=r})(pgAdmin, window.document);\n\n  // Reference:\n  // https://github.com/javve/natural-sort/blob/master/index.js\n  // Changed it to save the function in pgAdmin object.\n  pgAdmin.natural_sort = function(a, b, options) {\n    var re = /(^-?[0-9]+(\\.?[0-9]*)[df]?e?[0-9]?$|^0x[0-9a-f]+$|[0-9]+)/gi,\n        sre = /(^[ ]*|[ ]*$)/g,\n        dre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\n        hre = /^0x[0-9a-f]+$/i,\n        ore = /^0/,\n        options = options || {},\n        i = function(s) { return options.insensitive && (''+s).toLowerCase() || ''+s },\n        // convert all to strings strip whitespace\n        x = i(a).replace(sre, '') || '',\n        y = i(b).replace(sre, '') || '',\n        // chunk/tokenize\n        xN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\n        yN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\n        // numeric, hex or date detection\n        xD = parseInt(x.match(hre)) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\n        yD = parseInt(y.match(hre)) || xD && y.match(dre) && Date.parse(y) || null,\n        oFxNcL, oFyNcL,\n        mult = options.desc ? -1 : 1;\n\n    // first try and sort Hex codes or Dates\n    if (yD)\n      if ( xD < yD ) return -1 * mult;\n      else if ( xD > yD ) return 1 * mult;\n\n    // natural sorting through split numeric strings and default strings\n    for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\n      // find floats not starting with '0', string or 0 if not defined (Clint Priest)\n      oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\n      oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\n      // handle numeric vs string comparison - number < string - (Kyle Adams)\n      if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL) ? 1 : -1) * mult; }\n      // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\n      else if (typeof oFxNcL !== typeof oFyNcL) {\n        oFxNcL += '';\n        oFyNcL += '';\n      }\n      if (oFxNcL < oFyNcL) return -1 * mult;\n      if (oFxNcL > oFyNcL) return 1 * mult;\n    }\n    return 0;\n  };\n\n  return pgAdmin;\n}));\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/pgadmin.js","define(['slickgrid'], function () {\n  var Slick = window.Slick;\n\n  var isSameRange = function (range, otherRange) {\n    return range.fromCell == otherRange.fromCell && range.toCell == otherRange.toCell &&\n      range.fromRow == otherRange.fromRow && range.toRow == otherRange.toRow;\n  };\n\n  var isRangeSelected = function (selectedRanges, range) {\n    return _.any(selectedRanges, function (selectedRange) {\n      return isSameRange(selectedRange, range);\n    });\n  };\n\n  var isAnyCellOfColumnSelected = function (selectedRanges, column) {\n    return _.any(selectedRanges, function (selectedRange) {\n      return selectedRange.fromCell <= column && selectedRange.toCell >= column;\n    });\n  };\n\n  var isAnyCellOfRowSelected = function (selectedRanges, row) {\n    return _.any(selectedRanges, function (selectedRange) {\n      return selectedRange.fromRow <= row && selectedRange.toRow >= row;\n    });\n  };\n\n  var isRangeEntirelyWithinSelectedRanges = function (selectedRanges, range) {\n    return _.any(selectedRanges, function (selectedRange) {\n      return selectedRange.fromCell <= range.fromCell && selectedRange.toCell >= range.toCell &&\n        selectedRange.fromRow <= range.fromRow && selectedRange.toRow >= range.toRow;\n    });\n  };\n\n  var removeRange = function (selectedRanges, range) {\n    return _.filter(selectedRanges, function (selectedRange) {\n      return !(isSameRange(selectedRange, range));\n    });\n  };\n\n  var addRange = function (ranges, range) {\n    ranges.push(range);\n    return ranges;\n  };\n\n  var areAllRangesSingleRows = function (ranges, grid) {\n    return _.every(ranges, function (range) {\n      return range.fromRow == range.toRow && rangeHasCompleteRows(grid, range);\n    });\n  };\n\n  var areAllRangesSingleColumns = function (ranges, grid) {\n    return _.every(ranges, isRangeAColumn.bind(this, grid));\n  };\n\n  var rangeForRow = function (grid, rowId) {\n    var columnDefinitions = grid.getColumns();\n    if (isFirstColumnData(columnDefinitions)) {\n      return new Slick.Range(rowId, 0, rowId, grid.getColumns().length - 1);\n    }\n    return new Slick.Range(rowId, 1, rowId, grid.getColumns().length - 1);\n  };\n\n  var rangeForColumn = function (grid, columnIndex) {\n    return new Slick.Range(0, columnIndex, grid.getDataLength() - 1, columnIndex);\n  };\n\n  var getRangeOfWholeGrid = function (grid) {\n    return new Slick.Range(0, 1, grid.getDataLength() - 1, grid.getColumns().length - 1);\n  };\n\n  var isEntireGridSelected = function (grid) {\n    var selectionModel = grid.getSelectionModel();\n    var selectedRanges = selectionModel.getSelectedRanges();\n    return selectedRanges.length == 1 && isSameRange(selectedRanges[0], getRangeOfWholeGrid(grid));\n  };\n\n  var isFirstColumnData = function (columnDefinitions) {\n    return !_.isUndefined(columnDefinitions[0].pos);\n  };\n\n  var areAllRangesCompleteColumns = function (grid, ranges) {\n    return _.every(ranges, function (range) {\n      return rangeHasCompleteColumns(grid, range);\n    });\n  };\n\n  var areAllRangesCompleteRows = function (grid, ranges) {\n    return _.every(ranges, function (range) {\n      return rangeHasCompleteRows(grid, range);\n    });\n  };\n\n  var getIndexesOfCompleteRows = function (grid, ranges) {\n    var indexArray = [];\n    ranges.forEach(function (range) {\n      if (rangeHasCompleteRows(grid, range))\n        indexArray = indexArray.concat(_.range(range.fromRow, range.toRow + 1));\n    });\n\n    return indexArray;\n  };\n\n  var isRangeAColumn = function (grid, range) {\n    return range.fromCell == range.toCell &&\n      range.fromRow == 0 && range.toRow == grid.getDataLength() - 1;\n  };\n\n  var rangeHasCompleteColumns = function (grid, range) {\n    return range.fromRow === 0 && range.toRow === grid.getDataLength() - 1;\n  };\n\n  var rangeHasCompleteRows = function (grid, range) {\n    return range.fromCell === getFirstDataColumnIndex(grid) &&\n      range.toCell === getLastDataColumnIndex(grid);\n  };\n\n  function getFirstDataColumnIndex(grid) {\n    return _.findIndex(grid.getColumns(), function (columnDefinition) {\n      var pos = columnDefinition.pos;\n\n      return !_.isUndefined(pos) && isSelectable(columnDefinition);\n    });\n  }\n\n  function getLastDataColumnIndex(grid) {\n    return _.findLastIndex(grid.getColumns(), isSelectable);\n  }\n\n  function isSelectable(columnDefinition) {\n    return (_.isUndefined(columnDefinition.selectable) || columnDefinition.selectable === true);\n  }\n\n  function selectAll(grid) {\n    var range = getRangeOfWholeGrid(grid);\n    var selectionModel = grid.getSelectionModel();\n\n    selectionModel.setSelectedRanges([range]);\n  }\n\n  return {\n    addRange: addRange,\n    removeRange: removeRange,\n    isRangeSelected: isRangeSelected,\n    areAllRangesSingleRows: areAllRangesSingleRows,\n    areAllRangesSingleColumns: areAllRangesSingleColumns,\n    areAllRangesCompleteRows: areAllRangesCompleteRows,\n    areAllRangesCompleteColumns: areAllRangesCompleteColumns,\n    rangeForRow: rangeForRow,\n    rangeForColumn: rangeForColumn,\n    isEntireGridSelected: isEntireGridSelected,\n    getRangeOfWholeGrid: getRangeOfWholeGrid,\n    isFirstColumnData: isFirstColumnData,\n    getIndexesOfCompleteRows: getIndexesOfCompleteRows,\n    selectAll: selectAll,\n    isRangeAColumn: isRangeAColumn,\n    rangeHasCompleteColumns: rangeHasCompleteColumns,\n    rangeHasCompleteRows: rangeHasCompleteRows,\n    isAnyCellOfColumnSelected: isAnyCellOfColumnSelected,\n    isRangeEntirelyWithinSelectedRanges: isRangeEntirelyWithinSelectedRanges,\n    isAnyCellOfRowSelected: isAnyCellOfRowSelected,\n  };\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/selection/range_selection_helper.js","define('tools.querytool', [\n    'babel-polyfill', 'sources/gettext','sources/url_for', 'jquery',\n    'underscore', 'underscore.string', 'pgadmin.alertifyjs',\n    'sources/pgadmin', 'backbone', 'sources/../bundle/codemirror',\n    'pgadmin.misc.explain',\n    'sources/selection/grid_selector',\n    'sources/selection/active_cell_capture',\n    'sources/selection/clipboard',\n    'sources/selection/copy_data',\n    'sources/selection/range_selection_helper',\n    'sources/slickgrid/event_handlers/handle_query_output_keyboard_event',\n    'sources/selection/xcell_selection_model',\n    'sources/selection/set_staged_rows',\n    'sources/sqleditor_utils',\n    'sources/history/index.js',\n    'sources/../jsx/history/query_history',\n    'react', 'react-dom',\n    'sources/sqleditor/keyboard_shortcuts',\n    'sources/sqleditor/query_tool_actions',\n  'sources/../bundle/slickgrid',\n    'pgadmin.file_manager',\n    'backgrid.sizeable.columns',\n    'slick.pgadmin.formatters',\n    'slick.pgadmin.editors',\n    'pgadmin.browser'\n], function(\n  babelPollyfill,gettext, url_for, $, _, S, alertify, pgAdmin, Backbone, codemirror,\n  pgExplain, GridSelector, ActiveCellCapture, clipboard, copyData, RangeSelectionHelper, handleQueryOutputKeyboardEvent,\n  XCellSelectionModel, setStagedRows,  SqlEditorUtils, HistoryBundle, queryHistory, React, ReactDOM,\n  keyboardShortcuts\n, queryToolActions) {\n    /* Return back, this has been called more than once */\n    if (pgAdmin.SqlEditor)\n      return pgAdmin.SqlEditor;\n\n    // Some scripts do export their object in the window only.\n    // Generally the one, which do no have AMD support.\n    var wcDocker = window.wcDocker,\n        pgBrowser = pgAdmin.Browser,\n        CodeMirror = codemirror.default,Slick = window.Slick;\n\n  var is_query_running = false;\n\n  // Defining Backbone view for the sql grid.\n  var SQLEditorView = Backbone.View.extend({\n    initialize: function (opts) {\n      this.$el = opts.el;\n      this.handler = opts.handler;\n      this.handler['col_size'] = {};\n    },\n\n    // Bind all the events\n    events: {\n      \"click .btn-load-file\": \"on_file_load\",\n      \"click #btn-save\": \"on_save\",\n      \"click #btn-file-menu-save\": \"on_save\",\n      \"click #btn-file-menu-save-as\": \"on_save_as\",\n      \"click #btn-find\": \"on_find\",\n      \"click #btn-find-menu-find\": \"on_find\",\n      \"click #btn-find-menu-find-next\": \"on_find_next\",\n      \"click #btn-find-menu-find-previous\": \"on_find_previous\",\n      \"click #btn-find-menu-replace\": \"on_replace\",\n      \"click #btn-find-menu-replace-all\": \"on_replace_all\",\n      \"click #btn-find-menu-find-persistent\": \"on_find_persistent\",\n      \"click #btn-find-menu-jump\": \"on_jump\",\n      \"click #btn-delete-row\": \"on_delete\",\n      \"click #btn-filter\": \"on_show_filter\",\n      \"click #btn-filter-menu\": \"on_show_filter\",\n      \"click #btn-include-filter\": \"on_include_filter\",\n      \"click #btn-exclude-filter\": \"on_exclude_filter\",\n      \"click #btn-remove-filter\": \"on_remove_filter\",\n      \"click #btn-apply\": \"on_apply\",\n      \"click #btn-cancel\": \"on_cancel\",\n      \"click #btn-copy-row\": \"on_copy_row\",\n      \"click #btn-paste-row\": \"on_paste_row\",\n      \"click #btn-flash\": \"on_flash\",\n      \"click #btn-flash-menu\": \"on_flash\",\n      \"click #btn-cancel-query\": \"on_cancel_query\",\n      \"click #btn-download\": \"on_download\",\n      \"click #btn-edit\": \"on_clear\",\n      \"click #btn-clear\": \"on_clear\",\n      \"click #btn-auto-commit\": \"on_auto_commit\",\n      \"click #btn-auto-rollback\": \"on_auto_rollback\",\n      \"click #btn-clear-history\": \"on_clear_history\",\n      \"click .noclose\": 'do_not_close_menu',\n      \"click #btn-explain\": \"on_explain\",\n      \"click #btn-explain-analyze\": \"on_explain_analyze\",\n      \"click #btn-explain-verbose\": \"on_explain_verbose\",\n      \"click #btn-explain-costs\": \"on_explain_costs\",\n      \"click #btn-explain-buffers\": \"on_explain_buffers\",\n      \"click #btn-explain-timing\": \"on_explain_timing\",\n      \"change .limit\": \"on_limit_change\",\n      \"keydown\": \"keyAction\",\n      // Comment options\n      \"click #btn-comment-code\": \"on_toggle_comment_block_code\",\n      \"click #btn-toggle-comment-block\": \"on_toggle_comment_block_code\",\n      \"click #btn-comment-line\": \"on_comment_line_code\",\n      \"click #btn-uncomment-line\": \"on_uncomment_line_code\",\n      // Indentation options\n      \"click #btn-indent-code\": \"on_indent_code\",\n      \"click #btn-unindent-code\": \"on_unindent_code\"\n    },\n\n    // This function is used to render the template.\n    render: function () {\n      var self = this,\n        filter = self.$el.find('#sql_filter');\n\n      $('.editor-title').text(_.unescape(self.editor_title));\n      self.filter_obj = CodeMirror.fromTextArea(filter.get(0), {\n        lineNumbers: true,\n        indentUnit: 4,\n        mode: self.handler.server_type === \"gpdb\" ? \"text/x-gpsql\" : \"text/x-pgsql\",\n        foldOptions: {\n          widget: \"\\u2026\"\n        },\n        foldGutter: {\n          rangeFinder: CodeMirror.fold.combine(CodeMirror.pgadminBeginRangeFinder, CodeMirror.pgadminIfRangeFinder,\n            CodeMirror.pgadminLoopRangeFinder, CodeMirror.pgadminCaseRangeFinder)\n        },\n        gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n        extraKeys: pgBrowser.editor_shortcut_keys,\n        tabSize: pgAdmin.Browser.editor_options.tabSize,\n        lineWrapping: pgAdmin.Browser.editor_options.wrapCode,\n        autoCloseBrackets: pgAdmin.Browser.editor_options.insert_pair_brackets,\n        matchBrackets: pgAdmin.Browser.editor_options.brace_matching\n      });\n\n      // Create main wcDocker instance\n      var main_docker = new wcDocker(\n        '#editor-panel', {\n          allowContextMenu: false,\n          allowCollapse: false,\n          themePath: url_for('static', {'filename': 'css'}),\n          theme: 'webcabin.overrides.css'\n        });\n\n      var sql_panel = new pgAdmin.Browser.Panel({\n        name: 'sql_panel',\n        title: false,\n        width: '100%',\n        height: '20%',\n        isCloseable: false,\n        isPrivate: true\n      });\n\n      sql_panel.load(main_docker);\n      var sql_panel_obj = main_docker.addPanel('sql_panel', wcDocker.DOCK.TOP);\n\n      var text_container = $('<textarea id=\"sql_query_tool\"></textarea>');\n      var output_container = $('<div id=\"output-panel\"></div>').append(text_container);\n      sql_panel_obj.$container.find('.pg-panel-content').append(output_container);\n\n      self.query_tool_obj = CodeMirror.fromTextArea(text_container.get(0), {\n        lineNumbers: true,\n        indentUnit: 4,\n        styleSelectedText: true,\n        mode: self.handler.server_type === \"gpdb\" ? \"text/x-gpsql\" : \"text/x-pgsql\",\n        foldOptions: {\n          widget: \"\\u2026\"\n        },\n        foldGutter: {\n          rangeFinder: CodeMirror.fold.combine(CodeMirror.pgadminBeginRangeFinder, CodeMirror.pgadminIfRangeFinder,\n            CodeMirror.pgadminLoopRangeFinder, CodeMirror.pgadminCaseRangeFinder)\n        },\n        gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n        extraKeys: pgBrowser.editor_shortcut_keys,\n        tabSize: pgAdmin.Browser.editor_options.tabSize,\n        lineWrapping: pgAdmin.Browser.editor_options.wrapCode,\n        scrollbarStyle: 'simple',\n        autoCloseBrackets: pgAdmin.Browser.editor_options.insert_pair_brackets,\n        matchBrackets: pgAdmin.Browser.editor_options.brace_matching\n      });\n\n      // Refresh Code mirror on SQL panel resize to\n      // display its value properly\n      sql_panel_obj.on(wcDocker.EVENT.RESIZE_ENDED, function () {\n        setTimeout(function () {\n          if (self && self.query_tool_obj) {\n            self.query_tool_obj.refresh();\n          }\n        }, 200);\n      });\n\n      // Create panels for 'Data Output', 'Explain', 'Messages' and 'History'\n      var data_output = new pgAdmin.Browser.Panel({\n        name: 'data_output',\n        title: gettext(\"Data Output\"),\n        width: '100%',\n        height: '100%',\n        isCloseable: false,\n        isPrivate: true,\n        content: '<div id =\"datagrid\" class=\"sql-editor-grid-container text-12\"></div>'\n      })\n\n      var explain = new pgAdmin.Browser.Panel({\n        name: 'explain',\n        title: gettext(\"Explain\"),\n        width: '100%',\n        height: '100%',\n        isCloseable: false,\n        isPrivate: true,\n        content: '<div class=\"sql-editor-explain\"></div>'\n      })\n\n      var messages = new pgAdmin.Browser.Panel({\n        name: 'messages',\n        title: gettext(\"Messages\"),\n        width: '100%',\n        height: '100%',\n        isCloseable: false,\n        isPrivate: true,\n        content: '<div class=\"sql-editor-message\"></div>'\n      })\n\n      var history = new pgAdmin.Browser.Panel({\n        name: 'history',\n        title: gettext(\"Query History\"),\n        width: '100%',\n        height: '100%',\n        isCloseable: false,\n        isPrivate: true,\n        content: '<div id =\"history_grid\" class=\"sql-editor-history-container\"></div>'\n      })\n\n      // Load all the created panels\n      data_output.load(main_docker);\n      explain.load(main_docker);\n      messages.load(main_docker);\n      history.load(main_docker);\n\n      // Add all the panels to the docker\n      self.data_output_panel = main_docker.addPanel('data_output', wcDocker.DOCK.BOTTOM, sql_panel_obj);\n      self.explain_panel = main_docker.addPanel('explain', wcDocker.DOCK.STACKED, self.data_output_panel);\n      self.messages_panel = main_docker.addPanel('messages', wcDocker.DOCK.STACKED, self.data_output_panel);\n      self.history_panel = main_docker.addPanel('history', wcDocker.DOCK.STACKED, self.data_output_panel);\n\n      self.render_history_grid();\n\n      if (!self.handler.is_new_browser_tab) {\n        // Listen on the panel closed event and notify user to save modifications.\n        _.each(window.top.pgAdmin.Browser.docker.findPanels('frm_datagrid'), function (p) {\n          if (p.isVisible()) {\n            p.on(wcDocker.EVENT.CLOSING, function () {\n              // Only if we can edit data then perform this check\n              var notify = false, msg;\n              if (self.handler.can_edit) {\n                var data_store = self.handler.data_store;\n                if (data_store && (_.size(data_store.added) ||\n                  _.size(data_store.updated))) {\n                  msg = gettext(\"The data has changed. Do you want to save changes?\");\n                  notify = true;\n                }\n              } else if (self.handler.is_query_tool && self.handler.is_query_changed) {\n                msg = gettext(\"The text has changed. Do you want to save changes?\");\n                notify = true;\n              }\n              if (notify) {\n                return self.user_confirmation(p, msg);\n              }\n              return true;\n            });\n            // Set focus on query tool of active panel\n            p.on(wcDocker.EVENT.GAIN_FOCUS, function () {\n              if (!$(p.$container).hasClass('wcPanelTabContentHidden')) {\n                setTimeout(function () {\n                  self.handler.gridView.query_tool_obj.focus();\n                }, 200);\n              }\n            });\n          }\n        });\n      }\n\n      // set focus on query tool once loaded\n      setTimeout(function () {\n        self.query_tool_obj.focus();\n      }, 500);\n\n      /* We have override/register the hint function of CodeMirror\n       * to provide our own hint logic.\n       */\n      CodeMirror.registerHelper(\"hint\", \"sql\", function (editor, options) {\n        var data = [],\n          doc = editor.getDoc(),\n          cur = doc.getCursor(),\n          // Get the current cursor position\n          current_cur = cur.ch,\n          // function context\n          ctx = {\n            editor: editor,\n            // URL for auto-complete\n            url: url_for('sqleditor.autocomplete', {'trans_id': self.transId}),\n            data: data,\n            // Get the line number in the cursor position\n            current_line: cur.line,\n            /*\n             * Render function for hint to add our own class\n             * and icon as per the object type.\n             */\n            hint_render: function (elt, data, cur) {\n              var el = document.createElement('span');\n\n              switch (cur.type) {\n                case 'database':\n                  el.className = 'sqleditor-hint pg-icon-' + cur.type;\n                  break;\n                case 'datatype':\n                  el.className = 'sqleditor-hint icon-type';\n                  break;\n                case 'keyword':\n                  el.className = 'fa fa-key';\n                  break;\n                case 'table alias':\n                  el.className = 'fa fa-at';\n                  break;\n                default:\n                  el.className = 'sqleditor-hint icon-' + cur.type;\n              }\n\n              el.appendChild(document.createTextNode(cur.text));\n              elt.appendChild(el);\n            }\n          };\n\n        data.push(doc.getValue());\n        // Get the text from start to the current cursor position.\n        data.push(\n          doc.getRange(\n            {line: 0, ch: 0},\n            {line: ctx.current_line, ch: current_cur}\n          )\n        );\n\n        return {\n          then: function (cb) {\n            var self = this;\n            // Make ajax call to find the autocomplete data\n            $.ajax({\n              url: self.url,\n              method: 'POST',\n              contentType: \"application/json\",\n              data: JSON.stringify(self.data),\n              success: function (res) {\n                var result = [];\n\n                _.each(res.data.result, function (obj, key) {\n                  result.push({\n                    text: key, type: obj.object_type,\n                    render: self.hint_render\n                  });\n                });\n\n                // Sort function to sort the suggestion's alphabetically.\n                result.sort(function (a, b) {\n                  var textA = a.text.toLowerCase(), textB = b.text.toLowerCase();\n                  if (textA < textB) //sort string ascending\n                    return -1;\n                  if (textA > textB)\n                    return 1;\n                  return 0; //default return value (no sorting)\n                });\n\n                /*\n                 * Below logic find the start and end point\n                 * to replace the selected auto complete suggestion.\n                 */\n                var token = self.editor.getTokenAt(cur), start, end, search;\n                if (token.end > cur.ch) {\n                  token.end = cur.ch;\n                  token.string = token.string.slice(0, cur.ch - token.start);\n                }\n\n                if (token.string.match(/^[.`\\w@]\\w*$/)) {\n                  search = token.string;\n                  start = token.start;\n                  end = token.end;\n                } else {\n                  start = end = cur.ch;\n                  search = \"\";\n                }\n\n                /*\n                 * Added 1 in the start position if search string\n                 * started with \".\" or \"`\" else auto complete of code mirror\n                 * will remove the \".\" when user select any suggestion.\n                 */\n                if (search.charAt(0) == \".\" || search.charAt(0) == \"``\")\n                  start += 1;\n\n                cb({\n                  list: result,\n                  from: {line: self.current_line, ch: start},\n                  to: {line: self.current_line, ch: end}\n                });\n              }\n            });\n          }.bind(ctx)\n        };\n      });\n    },\n\n    /* To prompt user for unsaved changes */\n    user_confirmation: function (panel, msg) {\n      // If there is anything to save then prompt user\n      var that = this;\n\n      alertify.confirmSave || alertify.dialog('confirmSave', function () {\n        return {\n          main: function (title, message) {\n            var content = '<div class=\"ajs-content\">'\n              + gettext('The text has changed. Do you want to save changes?')\n              + '</div>';\n            this.setHeader(title);\n            this.setContent(message);\n          },\n          setup: function () {\n            return {\n              buttons: [\n                {\n                  text: gettext('Save'),\n                  className: 'btn btn-primary',\n                }, {\n                  text: gettext('Don\\'t save'),\n                  className: 'btn btn-danger',\n                }, {\n                  text: gettext('Cancel'),\n                  key: 27, // ESC\n                  invokeOnClose: true,\n                  className: 'btn btn-warning',\n                }\n              ],\n              focus: {\n                element: 0,\n                select: false\n              },\n              options: {\n                maximizable: false,\n                resizable: false\n              }\n            };\n          },\n          callback: function (closeEvent) {\n            switch (closeEvent.index) {\n              case 0: // Save\n                that.handler.close_on_save = true;\n                that.handler._save(that, that.handler);\n                break;\n              case 1: // Don't Save\n                that.handler.close_on_save = false;\n                that.handler.close();\n                break;\n              case 2: //Cancel\n                //Do nothing.\n                break;\n            }\n          }\n        };\n      });\n      alertify.confirmSave(gettext(\"Save changes?\"), msg);\n      return false;\n    },\n\n    /* Regarding SlickGrid usage in render_grid function.\n\n     SlickGrid Plugins:\n     ------------------\n     1) Slick.AutoTooltips\n     - This plugin is useful for displaying cell data as tooltip when\n     user hover mouse on cell if data is large\n     2) Slick.CheckboxSelectColumn\n     - This plugin is useful for selecting rows using checkbox\n     3) RowSelectionModel\n     - This plugin is needed by CheckboxSelectColumn plugin to select rows\n\n     Grid Options:\n     -------------\n     1) editable\n     - This option allow us to make grid editable\n     2) enableAddRow\n     - This option allow us to add new rows at the end of grid\n     3) enableCellNavigation\n     - This option allow us to navigate cells using keyboard\n     4) enableColumnReorder\n     - This option allow us to record column\n     5) asyncEditorLoading\n     - This option allow us to open editor async\n     6) autoEdit\n     - This option allow us to enter in edit mode directly when user clicks on it\n     otherwise user have to double click or manually press enter on cell to go\n     in cell edit mode\n\n     Handling of data:\n     -----------------\n     We are doing data handling manually,what user adds/updates/deletes etc\n     we will use `data_store` object to store everything user does within grid data\n\n     - updated:\n     This will hold all the data which user updates in grid\n     - added:\n     This will hold all the new row(s) data which user adds in grid\n     - staged_rows:\n     This will hold all the data which user copies/pastes/deletes in grid\n     - deleted:\n     This will hold all the data which user deletes in grid\n\n     Events handling:\n     ----------------\n     1) onCellChange\n     - We are using this event to listen to changes on individual cell.\n     2) onAddNewRow\n     - We are using this event to listen to new row adding functionality.\n     3) onSelectedRangesChanged\n     - We are using this event to listen when user selects rows for copy/delete operation.\n     4) onBeforeEditCell\n     - We are using this event to save the data before users modified them\n     5) onKeyDown\n     - We are using this event for Copy operation on grid\n     */\n\n    // This function is responsible to create and render the SlickGrid.\n    render_grid: function (collection, columns, is_editable, client_primary_key, rows_affected) {\n      var self = this;\n\n      // This will work as data store and holds all the\n      // inserted/updated/deleted data from grid\n      self.handler.data_store = {\n        updated: {},\n        added: {},\n        staged_rows: {},\n        deleted: {},\n        updated_index: {},\n        added_index: {}\n      };\n\n      // To store primary keys before they gets changed\n      self.handler.primary_keys_data = {};\n\n      self.client_primary_key = client_primary_key;\n\n      self.client_primary_key_counter = 0;\n\n      // Remove any existing grid first\n      if (self.handler.slickgrid) {\n        self.handler.slickgrid.destroy();\n      }\n\n        if(!_.isArray(collection) || !_.size(collection)) {\n          collection = [];\n        }\n\n        var grid_columns = [],\n          table_name;\n        var column_size = self.handler['col_size'],\n          query = self.handler.query,\n          // Extract table name from query\n          table_list = query.match(/select.*from\\s+\\w+\\.*(\\w+)/i);\n\n      if (!table_list) {\n        table_name = SqlEditorUtils.getHash(query);\n      }\n      else {\n        table_name = table_list[1];\n      }\n\n      self.handler['table_name'] = table_name;\n      column_size[table_name] = column_size[table_name] || {};\n\n      var grid_width = $($('#editor-panel').find('.wcFrame')[1]).width();\n      _.each(columns, function (c) {\n        var options = {\n          id: c.name,\n          pos: c.pos,\n          field: c.name,\n          name: c.label,\n          display_name: c.display_name,\n          column_type: c.column_type,\n          column_type_internal: c.column_type_internal,\n          not_null: c.not_null,\n          has_default_val: c.has_default_val,\n          is_array: c.is_array\n        };\n\n        // Get the columns width based on longer string among data type or\n        // column name.\n        var column_type = c.column_type.trim();\n        var label = c.name.length > column_type.length ? c.name : column_type;\n\n        if (_.isUndefined(column_size[table_name][c.name])) {\n          options['width'] = SqlEditorUtils.calculateColumnWidth(label);\n          column_size[table_name][c.name] = options['width'];\n        }\n        else {\n          options['width'] = column_size[table_name][c.name];\n        }\n        // If grid is editable then add editor else make it readonly\n        if (c.cell == 'Json') {\n          options['editor'] = is_editable ? Slick.Editors.JsonText\n            : Slick.Editors.ReadOnlyJsonText;\n          options['formatter'] = c.is_array ? Slick.Formatters.JsonStringArray : Slick.Formatters.JsonString;\n        } else if (c.cell == 'number' ||\n          $.inArray(c.type, ['oid', 'xid', 'real']) !== -1\n        ) {\n          options['editor'] = is_editable ? Slick.Editors.CustomNumber\n            : Slick.Editors.ReadOnlyText;\n          options['formatter'] = c.is_array ? Slick.Formatters.NumbersArray : Slick.Formatters.Numbers;\n        } else if (c.cell == 'boolean') {\n          options['editor'] = is_editable ? Slick.Editors.Checkbox\n            : Slick.Editors.ReadOnlyCheckbox;\n          options['formatter'] = c.is_array ? Slick.Formatters.CheckmarkArray : Slick.Formatters.Checkmark;\n        } else if (c.cell == 'binary') {\n          // We do not support editing binary data in SQL editor and data grid.\n          options['formatter'] =  Slick.Formatters.Binary;\n        }else {\n          options['editor'] = is_editable ? Slick.Editors.pgText\n            : Slick.Editors.ReadOnlypgText;\n          options['formatter'] = c.is_array ? Slick.Formatters.TextArray : Slick.Formatters.Text;\n        }\n\n        grid_columns.push(options)\n      });\n\n      var gridSelector = new GridSelector();\n      grid_columns = self.grid_columns = gridSelector.getColumnDefinitions(grid_columns);\n\n      if (rows_affected) {\n        // calculate with for header row column.\n        grid_columns[0]['width'] = SqlEditorUtils.calculateColumnWidth(rows_affected);\n      }\n\n      var grid_options = {\n        editable: true,\n        enableAddRow: is_editable,\n        enableCellNavigation: true,\n        enableColumnReorder: false,\n        asyncEditorLoading: false,\n        autoEdit: false\n      };\n\n      var $data_grid = self.$el.find('#datagrid');\n      // Calculate height based on panel size at runtime & set it\n      var grid_height = $($('#editor-panel').find('.wcFrame')[1]).height() - 35;\n      $data_grid.height(grid_height);\n\n      var dataView = self.dataView = new Slick.Data.DataView(),\n        grid = self.grid = new Slick.Grid($data_grid, dataView, grid_columns, grid_options);\n\n      // Add-on function which allow us to identify the faulty row after insert/update\n      // and apply css accordingly\n\n      dataView.getItemMetadata = function (i) {\n        var res = {}, cssClass = '',\n          data_store = self.handler.data_store;\n\n        if (_.has(self.handler, 'data_store')) {\n          if (i in data_store.added_index &&\n            data_store.added_index[i] in data_store.added) {\n            cssClass = 'new_row';\n            if (data_store.added[data_store.added_index[i]].err) {\n              cssClass += ' error';\n            }\n          } else if (i in data_store.updated_index && i in data_store.updated) {\n            cssClass = 'updated_row';\n            if (data_store.updated[data_store.updated_index[i]].err) {\n              cssClass += ' error';\n            }\n          }\n        }\n        // Disable rows having default values\n        if (!_.isUndefined(self.handler.rows_to_disable) &&\n          _.indexOf(self.handler.rows_to_disable, i) !== -1\n        ) {\n          cssClass += ' disabled_row';\n        }\n        return {'cssClasses': cssClass};\n      };\n\n      grid.registerPlugin(new Slick.AutoTooltips({enableForHeaderCells: false}));\n      grid.registerPlugin(new ActiveCellCapture());\n      grid.setSelectionModel(new XCellSelectionModel());\n      grid.registerPlugin(gridSelector);\n\n      var editor_data = {\n        keys: self.handler.primary_keys,\n        vals: collection,\n        columns: columns,\n        grid: grid,\n        selection: grid.getSelectionModel(),\n        editor: self,\n        client_primary_key: self.client_primary_key\n      };\n\n      self.handler.slickgrid = grid;\n\n      // Listener function to watch selected rows from grid\n      if (editor_data.selection) {\n        editor_data.selection.onSelectedRangesChanged.subscribe(\n          setStagedRows.bind(editor_data));\n      }\n\n      grid.onColumnsResized.subscribe(function (e, args) {\n        var columns = this.getColumns();\n        _.each(columns, function (col, key) {\n          var column_size = self.handler['col_size'];\n          column_size[self.handler['table_name']][col['id']] = col['width'];\n        });\n      });\n\n      gridSelector.onBeforeGridSelectAll.subscribe(function (e, args) {\n        if (self.handler.has_more_rows) {\n          // this will prevent selection un-till we load all data\n          e.stopImmediatePropagation();\n          self.fetch_next_all(function () {\n            // since we've stopped event propagation we need to\n            // trigger onGridSelectAll manually with new event data.\n            gridSelector.onGridSelectAll.notify(args, new Slick.EventData());\n          });\n        }\n      });\n\n      gridSelector.onBeforeGridColumnSelectAll.subscribe(function (e, args) {\n        if (self.handler.has_more_rows) {\n          // this will prevent selection un-till we load all data\n          e.stopImmediatePropagation();\n          self.fetch_next_all(function () {\n            // since we've stopped event propagation we need to\n            // trigger onGridColumnSelectAll manually with new event data.\n            gridSelector.onGridColumnSelectAll.notify(args, new Slick.EventData());\n          });\n        }\n      });\n\n      // listen for row count change.\n      dataView.onRowCountChanged.subscribe(function (e, args) {\n        grid.updateRowCount();\n        grid.render();\n      });\n\n      // listen for rows change.\n      dataView.onRowsChanged.subscribe(function (e, args) {\n        grid.invalidateRows(args.rows);\n        grid.render();\n      });\n\n      // Listener function which will be called before user updates existing cell\n      // This will be used to collect primary key for that row\n      grid.onBeforeEditCell.subscribe(function (e, args) {\n        if (args.column.column_type_internal == 'bytea' ||\n          args.column.column_type_internal == 'bytea[]') {\n          return false;\n        }\n\n        var before_data = args.item;\n\n        // If newly added row is saved but grid is not refreshed,\n        // then disable cell editing for that row\n        if (self.handler.rows_to_disable &&\n          _.contains(self.handler.rows_to_disable, args.row)) {\n          return false;\n        }\n\n        if (self.handler.can_edit && before_data && self.client_primary_key in before_data) {\n          var _pk = before_data[self.client_primary_key],\n            _keys = self.handler.primary_keys,\n            current_pk = {}, each_pk_key = {};\n\n          // If already have primary key data then no need to go ahead\n          if (_pk in self.handler.primary_keys_data) {\n            return;\n          }\n\n          // Fetch primary keys for the row before they gets modified\n          var _columns = self.handler.columns;\n          _.each(_keys, function (value, key) {\n            current_pk[key] = before_data[key];\n          });\n          // Place it in main variable for later use\n          self.handler.primary_keys_data[_pk] = current_pk\n        }\n      });\n\n      grid.onKeyDown.subscribe(function (event, args) {\n        var KEY_A = 65;\n        var modifiedKey = event.keyCode;\n        var isModifierDown = event.ctrlKey || event.metaKey;\n        // Intercept Ctrl/Cmd + A key board event.\n        // As we might want to load all rows before selecting all.\n        if (isModifierDown && modifiedKey == KEY_A && self.handler.has_more_rows) {\n          self.fetch_next_all(function () {\n            handleQueryOutputKeyboardEvent(event, args);\n          });\n        } else {\n          handleQueryOutputKeyboardEvent(event, args);\n        }\n      });\n\n      // Listener function which will be called when user updates existing rows\n      grid.onCellChange.subscribe(function (e, args) {\n        // self.handler.data_store.updated will holds all the updated data\n        var changed_column = args.grid.getColumns()[args.cell].field,\n          updated_data = args.item[changed_column],                   // New value for current field\n          _pk = args.item[self.client_primary_key] || null,                          // Unique key to identify row\n          column_data = {},\n          _type;\n\n        // Access to row/cell value after a cell is changed.\n        // The purpose is to remove row_id from temp_new_row\n        // if new row has primary key instead of [default_value]\n        // so that cell edit is enabled for that row.\n        var grid = args.grid,\n          row_data = grid.getDataItem(args.row),\n          is_primary_key = _.all(\n            _.values(\n              _.pick(\n                row_data, self.primary_keys\n              )\n            ),\n            function (val) {\n              return val != undefined\n            }\n          );\n\n        // temp_new_rows is available only for view data.\n        if (is_primary_key && self.handler.temp_new_rows) {\n          var index = self.handler.temp_new_rows.indexOf(args.row);\n          if (index > -1) {\n            self.handler.temp_new_rows.splice(index, 1);\n          }\n        }\n\n        column_data[changed_column] = updated_data;\n\n        if (_pk) {\n          // Check if it is in newly added row by user?\n          if (_pk in self.handler.data_store.added) {\n            _.extend(\n              self.handler.data_store.added[_pk]['data'],\n              column_data);\n            //Find type for current column\n            self.handler.data_store.added[_pk]['err'] = false\n            // Check if it is updated data from existing rows?\n          } else if (_pk in self.handler.data_store.updated) {\n            _.extend(\n              self.handler.data_store.updated[_pk]['data'],\n              column_data\n            );\n            self.handler.data_store.updated[_pk]['err'] = false\n          } else {\n            // First updated data for this primary key\n            self.handler.data_store.updated[_pk] = {\n              'err': false, 'data': column_data,\n              'primary_keys': self.handler.primary_keys_data[_pk]\n            };\n            self.handler.data_store.updated_index[args.row] = _pk;\n          }\n        }\n        // Enable save button\n        $(\"#btn-save\").prop('disabled', false);\n      }.bind(editor_data));\n\n      // Listener function which will be called when user adds new rows\n      grid.onAddNewRow.subscribe(function (e, args) {\n        // self.handler.data_store.added will holds all the newly added rows/data\n        var column = args.column,\n          item = args.item, data_length = this.grid.getDataLength(),\n          _key = (self.client_primary_key_counter++).toString(),\n          dataView = this.grid.getData();\n\n        // Add new row in list to keep track of it\n        if (_.isUndefined(item[0])) {\n          self.handler.temp_new_rows.push(data_length);\n        }\n\n        // If copied item has already primary key, use it.\n        if (item) {\n          item[self.client_primary_key] = _key;\n        }\n\n        dataView.addItem(item);\n        self.handler.data_store.added[_key] = {'err': false, 'data': item};\n        self.handler.data_store.added_index[data_length] = _key;\n        // Fetch data type & add it for the column\n        var temp = {};\n        temp[column.name] = _.where(this.columns, {pos: column.pos})[0]['type'];\n        grid.updateRowCount();\n        grid.render();\n\n        // Enable save button\n        $(\"#btn-save\").prop('disabled', false);\n      }.bind(editor_data));\n\n      // Listen grid viewportChanged event to load next chunk of data.\n      grid.onViewportChanged.subscribe(function (e, args) {\n        var rendered_range = args.grid.getRenderedRange(),\n          data_len = args.grid.getDataLength();\n        // start fetching next batch of records before reaching to bottom.\n        if (self.handler.has_more_rows && !self.handler.fetching_rows && rendered_range.bottom > data_len - 100) {\n          // fetch asynchronous\n          setTimeout(self.fetch_next.bind(self));\n        }\n      })\n      // Resize SlickGrid when window resize\n      $(window).resize(function () {\n        // Resize grid only when 'Data Output' panel is visible.\n        if (self.data_output_panel.isVisible()) {\n          self.grid_resize(grid);\n        }\n      });\n\n      // Resize SlickGrid when output Panel resize\n      self.data_output_panel.on(wcDocker.EVENT.RESIZE_ENDED, function () {\n        // Resize grid only when 'Data Output' panel is visible.\n        if (self.data_output_panel.isVisible()) {\n          self.grid_resize(grid);\n        }\n      });\n\n      // Resize SlickGrid when output Panel gets focus\n      self.data_output_panel.on(wcDocker.EVENT.VISIBILITY_CHANGED, function () {\n        // Resize grid only if output panel is visible\n        if (self.data_output_panel.isVisible())\n          self.grid_resize(grid);\n      });\n\n      for (var i = 0; i < collection.length; i++) {\n        // Convert to dict from 2darray\n        var item = {};\n        for (var j = 1; j < grid_columns.length; j++) {\n          item[grid_columns[j]['field']] = collection[i][grid_columns[j]['pos']]\n        }\n\n        item[self.client_primary_key] = (self.client_primary_key_counter++).toString();\n        collection[i] = item;\n      }\n      dataView.setItems(collection, self.client_primary_key);\n    },\n    fetch_next_all: function (cb) {\n      this.fetch_next(true, cb);\n    },\n    fetch_next: function (fetch_all, cb) {\n      var self = this, url = '';\n\n      // This will prevent fetch operation if previous fetch operation is\n      // already in progress.\n      self.handler.fetching_rows = true;\n\n      $(\"#btn-flash\").prop('disabled', true);\n\n      if (fetch_all) {\n        self.handler.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext('Fetching all records...')\n        );\n        url = url_for('sqleditor.fetch_all', {'trans_id': self.transId, 'fetch_all': 1});\n      } else {\n        url = url = url_for('sqleditor.fetch', {'trans_id': self.transId});\n      }\n\n      $.ajax({\n        url: url,\n        method: 'GET',\n        success: function (res) {\n          self.handler.has_more_rows = res.data.has_more_rows;\n          $(\"#btn-flash\").prop('disabled', false);\n          self.handler.trigger('pgadmin-sqleditor:loading-icon:hide');\n          self.update_grid_data(res.data.result);\n          self.handler.fetching_rows = false;\n          if (typeof cb == \"function\") {\n            cb();\n          }\n        },\n        error: function (e) {\n          $(\"#btn-flash\").prop('disabled', false);\n          self.handler.trigger('pgadmin-sqleditor:loading-icon:hide');\n          self.handler.has_more_rows = false;\n          self.handler.fetching_rows = false;\n          if (typeof cb == \"function\") {\n            cb();\n          }\n          if (e.readyState == 0) {\n            self.update_msg_history(false,\n              gettext('Not connected to the server or the connection to the server has been closed.')\n            );\n            return;\n          }\n        }\n      });\n    },\n\n    update_grid_data: function (data) {\n      this.dataView.beginUpdate();\n\n      for (var i = 0; i < data.length; i++) {\n        // Convert 2darray to dict.\n        var item = {};\n        for (var j = 1; j < this.grid_columns.length; j++) {\n          item[this.grid_columns[j]['field']] = data[i][this.grid_columns[j]['pos']]\n        }\n\n        item[this.client_primary_key] = (this.client_primary_key_counter++).toString();\n        this.dataView.addItem(item);\n      }\n\n      this.dataView.endUpdate();\n    },\n\n    /* This function is responsible to render output grid */\n    grid_resize: function (grid) {\n      var h = $($('#editor-panel').find('.wcFrame')[1]).height() - 35;\n      $('#datagrid').css({'height': h + 'px'});\n      grid.resizeCanvas();\n    },\n\n    /* This function is responsible to create and render the\n     * new backgrid for the history tab.\n     */\n    render_history_grid: function () {\n      var self = this;\n\n      self.history_collection = new HistoryBundle.HistoryCollection([]);\n\n      var historyComponent;\n      var historyCollectionReactElement = React.createElement(\n        queryHistory.QueryHistory, {\n          historyCollection: self.history_collection,\n          ref: function (component) {\n            historyComponent = component;\n          },\n        });\n      ReactDOM.render(historyCollectionReactElement, $('#history_grid')[0]);\n\n      self.history_panel.on(wcDocker.EVENT.VISIBILITY_CHANGED, function () {\n        historyComponent.refocus();\n      });\n    },\n\n    // Callback function for Add New Row button click.\n    on_delete: function () {\n      var self = this;\n\n      // Trigger the addrow signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:deleterow',\n        self,\n        self.handler\n      );\n    },\n\n    _stopEventPropogation: function (ev) {\n      ev = ev || window.event;\n      ev.cancelBubble = true;\n      ev.stopPropagation();\n      ev.stopImmediatePropagation();\n      ev.preventDefault();\n    },\n\n    _closeDropDown: function (ev) {\n      var target = ev && (ev.currentTarget || ev.target);\n      if (target) {\n        $(target).closest('.open').removeClass('open').find('.dropdown-backdrop').remove();\n      }\n    },\n\n    // Callback function for Save button click.\n    on_save: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      self.handler.close_on_save = false;\n      // Trigger the save signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:save',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for Save button click.\n    on_save_as: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      self.handler.close_on_save = false;\n      // Trigger the save signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:save',\n        self,\n        self.handler,\n        true\n      );\n    },\n\n    // Callback function for the find button click.\n    on_find: function (ev) {\n      var self = this, sql;\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      self.query_tool_obj.execCommand(\"find\");\n    },\n\n    // Callback function for the find next button click.\n    on_find_next: function (ev) {\n      var self = this, sql;\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      self.query_tool_obj.execCommand(\"findNext\");\n    },\n\n    // Callback function for the find previous button click.\n    on_find_previous: function (ev) {\n      var self = this, sql;\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      self.query_tool_obj.execCommand(\"findPrev\");\n    },\n\n    // Callback function for the replace button click.\n    on_replace: function (ev) {\n      var self = this, sql;\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      self.query_tool_obj.execCommand(\"replace\");\n    },\n\n    // Callback function for the replace all button click.\n    on_replace_all: function (ev) {\n      var self = this, sql;\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      self.query_tool_obj.execCommand(\"replaceAll\");\n    },\n\n    // Callback function for the find persistent button click.\n    on_find_persistent: function (ev) {\n      var self = this, sql;\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      self.query_tool_obj.execCommand(\"findPersistent\");\n    },\n\n    // Callback function for the jump button click.\n    on_jump: function (ev) {\n      var self = this, sql;\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      self.query_tool_obj.execCommand(\"jumpToLine\");\n    },\n\n    // Callback function for filter button click.\n    on_show_filter: function () {\n      var self = this;\n\n      // Trigger the show_filter signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:show_filter',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for include filter button click.\n    on_include_filter: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      // Trigger the include_filter signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:include_filter',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for exclude filter button click.\n    on_exclude_filter: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      // Trigger the exclude_filter signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:exclude_filter',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for remove filter button click.\n    on_remove_filter: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      // Trigger the remove_filter signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:remove_filter',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for ok button click.\n    on_apply: function () {\n      var self = this;\n\n      // Trigger the apply_filter signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:apply_filter',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for cancel button click.\n    on_cancel: function () {\n      $('#filter').addClass('hidden');\n      $('#editor-panel').removeClass('sql-editor-busy-fetching');\n    },\n\n    // Callback function for copy button click.\n    on_copy_row: function () {\n      var self = this;\n\n      // Trigger the copy signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:copy_row',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for paste button click.\n    on_paste_row: function () {\n      var self = this;\n\n      // Trigger the paste signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:paste_row',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for the change event of combo box\n    on_limit_change: function () {\n      var self = this;\n\n      // Trigger the limit signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:limit',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for the flash button click.\n    on_flash: function () {\n      queryToolActions.executeQuery(this.handler);\n    },\n\n    // Callback function for the cancel query button click.\n    on_cancel_query: function () {\n      var self = this;\n\n      // Trigger the cancel-query signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:cancel-query',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for the line comment code\n    on_comment_line_code: function () {\n      queryToolActions.commentLineCode(this.handler);\n    },\n\n    // Callback function for the line uncomment code\n    on_uncomment_line_code: function () {\n      queryToolActions.uncommentLineCode(this.handler);\n    },\n\n    // Callback function for the block comment/uncomment code\n    on_toggle_comment_block_code: function () {\n      queryToolActions.commentBlockCode(this.handler);\n    },\n\n    on_indent_code: function () {\n      var self = this;\n      // Trigger the comment signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:indent_selected_code',\n        self,\n        self.handler\n      );\n    },\n\n    on_unindent_code: function () {\n      var self = this;\n      // Trigger the comment signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:unindent_selected_code',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for the clear button click.\n    on_clear: function (ev) {\n      var self = this, sql;\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      /* If is_query_changed flag is set to false then no need to\n       * confirm with the user for unsaved changes.\n       */\n      if (self.handler.is_query_changed) {\n        alertify.confirm(\n          gettext(\"Unsaved changes\"),\n          gettext(\"Are you sure you wish to discard the current changes?\"),\n          function () {\n            // Do nothing as user do not want to save, just continue\n            self.query_tool_obj.setValue('');\n          },\n          function () {\n            return true;\n          }\n        ).set('labels', {ok: 'Yes', cancel: 'No'});\n      } else {\n        self.query_tool_obj.setValue('');\n      }\n    },\n\n    // Callback function for the clear history button click.\n    on_clear_history: function (ev) {\n      var self = this;\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n      // ask for confirmation only if anything to clear\n      if (!self.history_collection.length()) {\n        return;\n      }\n\n      alertify.confirm(gettext(\"Clear history\"),\n        gettext(\"Are you sure you wish to clear the history?\"),\n        function () {\n          if (self.history_collection) {\n            self.history_collection.reset();\n          }\n        },\n        function () {\n          return true;\n        }\n      ).set('labels', {ok: 'Yes', cancel: 'No'});\n    },\n\n    // Callback function for the auto commit button click.\n    on_auto_commit: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n\n      // Trigger the auto-commit signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:auto_commit',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for the auto rollback button click.\n    on_auto_rollback: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n\n      // Trigger the download signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:auto_rollback',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for explain button click.\n    on_explain: function (event) {\n      this._stopEventPropogation(event);\n      this._closeDropDown(event);\n\n      queryToolActions.explain(this.handler);\n    },\n\n    // Callback function for explain analyze button click.\n    on_explain_analyze: function (event) {\n      this._stopEventPropogation(event);\n      this._closeDropDown(event);\n\n      queryToolActions.explainAnalyze(this.handler);\n    },\n\n    // Callback function for explain option \"verbose\" button click\n    on_explain_verbose: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n\n      // Trigger the explain \"verbose\" signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:explain-verbose',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for explain option \"costs\" button click\n    on_explain_costs: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n\n      // Trigger the explain \"costs\" signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:explain-costs',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for explain option \"buffers\" button click\n    on_explain_buffers: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n\n      // Trigger the explain \"buffers\" signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:explain-buffers',\n        self,\n        self.handler\n      );\n    },\n\n    // Callback function for explain option \"timing\" button click\n    on_explain_timing: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n\n      // Trigger the explain \"timing\" signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:explain-timing',\n        self,\n        self.handler\n      );\n    },\n\n    do_not_close_menu: function (ev) {\n      ev.stopPropagation();\n    },\n\n    // callback function for load file button click.\n    on_file_load: function (ev) {\n      var self = this;\n\n      this._stopEventPropogation(ev);\n      this._closeDropDown(ev);\n\n      // Trigger the save signal to the SqlEditorController class\n      self.handler.trigger(\n        'pgadmin-sqleditor:button:load_file',\n        self,\n        self.handler\n      );\n    },\n\n    on_download: function () {\n      queryToolActions.download(this.handler);\n    },\n\n    keyAction: function (event) {\n      keyboardShortcuts.processEvent(this.handler, queryToolActions, event);\n    },\n  });\n\n  /* Defining controller class for data grid, which actually\n   * perform the operations like executing the sql query, poll the result,\n   * render the data in the grid, Save/Refresh the data etc...\n   */\n  var SqlEditorController = function (container, options) {\n    this.initialize.apply(this, arguments);\n  };\n\n  _.extend(\n    SqlEditorController.prototype,\n    Backbone.Events,\n    {\n      initialize: function (container, opts) {\n        this.container = container;\n      },\n\n      /* This function is used to create instance of SQLEditorView,\n       * call the render method of the grid view to render the backgrid\n       * header and loading icon and start execution of the sql query.\n       */\n      start: function (is_query_tool, editor_title, script_sql, is_new_browser_tab, server_type) {\n        var self = this;\n\n        self.is_query_tool = is_query_tool;\n        self.rows_affected = 0;\n        self.marked_line_no = 0;\n        self.explain_verbose = false;\n        self.explain_costs = false;\n        self.explain_buffers = false;\n        self.explain_timing = false;\n        self.is_new_browser_tab = is_new_browser_tab;\n        self.has_more_rows = false;\n        self.fetching_rows = false;\n        self.close_on_save = false;\n        self.server_type = server_type;\n\n        // We do not allow to call the start multiple times.\n        if (self.gridView)\n          return;\n\n        self.gridView = new SQLEditorView({\n          el: self.container,\n          handler: self\n        });\n        self.transId = self.gridView.transId = self.container.data('transId');\n\n        self.gridView.editor_title = _.unescape(editor_title);\n        self.gridView.current_file = undefined;\n\n        // Render the header\n        self.gridView.render();\n\n        // Listen to the file manager button events\n        pgAdmin.Browser.Events.on('pgadmin-storage:finish_btn:select_file', self._select_file_handler, self);\n        pgAdmin.Browser.Events.on('pgadmin-storage:finish_btn:create_file', self._save_file_handler, self);\n\n        // Listen to the codemirror on text change event\n        // only in query editor tool\n        if (self.is_query_tool) {\n          self.get_preferences();\n          self.gridView.query_tool_obj.on('change', self._on_query_change.bind(self));\n        }\n\n        // Listen on events come from SQLEditorView for the button clicked.\n        self.on('pgadmin-sqleditor:button:load_file', self._load_file, self);\n        self.on('pgadmin-sqleditor:button:save', self._save, self);\n        self.on('pgadmin-sqleditor:button:deleterow', self._delete, self);\n        self.on('pgadmin-sqleditor:button:show_filter', self._show_filter, self);\n        self.on('pgadmin-sqleditor:button:include_filter', self._include_filter, self);\n        self.on('pgadmin-sqleditor:button:exclude_filter', self._exclude_filter, self);\n        self.on('pgadmin-sqleditor:button:remove_filter', self._remove_filter, self);\n        self.on('pgadmin-sqleditor:button:apply_filter', self._apply_filter, self);\n        self.on('pgadmin-sqleditor:button:copy_row', self._copy_row, self);\n        self.on('pgadmin-sqleditor:button:paste_row', self._paste_row, self);\n        self.on('pgadmin-sqleditor:button:limit', self._set_limit, self);\n        self.on('pgadmin-sqleditor:button:cancel-query', self._cancel_query, self);\n        self.on('pgadmin-sqleditor:button:auto_rollback', self._auto_rollback, self);\n        self.on('pgadmin-sqleditor:button:auto_commit', self._auto_commit, self);\n        self.on('pgadmin-sqleditor:button:explain-verbose', self._explain_verbose, self);\n        self.on('pgadmin-sqleditor:button:explain-costs', self._explain_costs, self);\n        self.on('pgadmin-sqleditor:button:explain-buffers', self._explain_buffers, self);\n        self.on('pgadmin-sqleditor:button:explain-timing', self._explain_timing, self);\n        // Indentation related\n        self.on('pgadmin-sqleditor:indent_selected_code', self._indent_selected_code, self);\n        self.on('pgadmin-sqleditor:unindent_selected_code', self._unindent_selected_code, self);\n\n        if (self.is_query_tool) {\n          self.gridView.query_tool_obj.refresh();\n          if (script_sql && script_sql !== '') {\n            self.gridView.query_tool_obj.setValue(script_sql);\n          }\n        }\n        else {\n          // Disable codemirror by setting cursor to nocursor and background to dark.\n          self.gridView.query_tool_obj.setOption(\"readOnly\", 'nocursor');\n          var cm = self.gridView.query_tool_obj.getWrapperElement();\n          if (cm) {\n            cm.className += ' bg-gray-1 opacity-5';\n          }\n          self.disable_tool_buttons(true);\n          self.execute_data_query();\n        }\n      },\n\n      // This function checks if there is any dirty data in the grid before\n      // it executes the sql query\n      execute_data_query: function () {\n        var self = this;\n\n        // Check if the data grid has any changes before running query\n        if (_.has(self, 'data_store') &&\n          ( _.size(self.data_store.added) ||\n          _.size(self.data_store.updated) ||\n          _.size(self.data_store.deleted))\n        ) {\n          alertify.confirm(gettext(\"Unsaved changes\"),\n            gettext(\"The data has been modified, but not saved. Are you sure you wish to discard the changes?\"),\n            function () {\n              // Do nothing as user do not want to save, just continue\n              self._run_query();\n            },\n            function () {\n              // Stop, User wants to save\n              return true;\n            }\n          ).set('labels', {ok: 'Yes', cancel: 'No'});\n        } else {\n          self._run_query();\n        }\n      },\n\n      // This function makes the ajax call to execute the sql query.\n      _run_query: function () {\n        var self = this;\n        self.query_start_time = new Date();\n        self.rows_affected = 0;\n        self._init_polling_flags();\n        // keep track of newly added rows\n        self.rows_to_disable = new Array();\n        // Temporarily hold new rows added\n        self.temp_new_rows = new Array();\n        self.has_more_rows = false;\n        self.fetching_rows = false;\n\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext(\"Initializing query execution.\")\n        );\n\n        $(\"#btn-flash\").prop('disabled', true);\n\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:message',\n          gettext(\"Waiting for the query execution to complete...\")\n        );\n\n        $.ajax({\n          url: url_for('sqleditor.view_data_start', {'trans_id': self.transId}),\n          method: 'GET',\n          success: function (res) {\n            if (res.data.status) {\n\n              self.can_edit = res.data.can_edit;\n              self.can_filter = res.data.can_filter;\n              self.info_notifier_timeout = res.data.info_notifier_timeout;\n\n              // Set the sql query to the SQL panel\n              self.gridView.query_tool_obj.setValue(res.data.sql);\n              self.query = res.data.sql;\n\n\n              /* If filter is applied then remove class 'btn-default'\n               * and add 'btn-warning' to change the colour of the button.\n               */\n              if (self.can_filter && res.data.filter_applied) {\n                $('#btn-filter').removeClass('btn-default');\n                $('#btn-filter-dropdown').removeClass('btn-default');\n                $('#btn-filter').addClass('btn-warning');\n                $('#btn-filter-dropdown').addClass('btn-warning');\n              }\n              else {\n                $('#btn-filter').removeClass('btn-warning');\n                $('#btn-filter-dropdown').removeClass('btn-warning');\n                $('#btn-filter').addClass('btn-default');\n                $('#btn-filter-dropdown').addClass('btn-default');\n              }\n              $(\"#btn-save\").prop('disabled', true);\n              $(\"#btn-file-menu-dropdown\").prop('disabled', true);\n              $(\"#btn-copy-row\").prop('disabled', true);\n              $(\"#btn-paste-row\").prop('disabled', true);\n\n              // Set the combo box value\n              $(\".limit\").val(res.data.limit);\n\n              // If status is True then poll the result.\n              self._poll();\n            }\n            else {\n              self.trigger('pgadmin-sqleditor:loading-icon:hide');\n              self.update_msg_history(false, res.data.result);\n            }\n          },\n          error: function (e) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            if (e.readyState == 0) {\n              self.update_msg_history(false,\n                gettext(\"Not connected to the server or the connection to the server has been closed.\")\n              );\n              return;\n            }\n\n            var msg = e.responseText;\n            if (e.responseJSON != undefined &&\n              e.responseJSON.errormsg != undefined)\n              msg = e.responseJSON.errormsg;\n\n            self.update_msg_history(false, msg);\n          }\n        });\n      },\n\n      // This is a wrapper to call_render function\n      // We need this because we have separated columns route & result route\n      // We need to combine both result here in wrapper before rendering grid\n      call_render_after_poll: function (res) {\n        var self = this;\n        self.query_end_time = new Date();\n        self.rows_affected = res.rows_affected,\n          self.has_more_rows = res.has_more_rows;\n\n          /* If no column information is available it means query\n             runs successfully with no result to display. In this\n             case no need to call render function.\n          */\n          if (res.colinfo != null)\n            self._render(res);\n          else {\n            // Show message in message and history tab in case of query tool\n            self.total_time = self.get_query_run_time(self.query_start_time, self.query_end_time);\n            var msg = S(gettext(\"Query returned successfully in %s.\")).sprintf(self.total_time).value();\n            res.result += \"\\n\\n\" + msg;\n            self.update_msg_history(true, res.result, false);\n            // Display the notifier if the timeout is set to >= 0\n            if (self.info_notifier_timeout >= 0) {\n              alertify.success(msg, self.info_notifier_timeout);\n            }\n          }\n\n        // Enable/Disable query tool button only if is_query_tool is true.\n        if (self.is_query_tool) {\n          self.disable_tool_buttons(false);\n          $(\"#btn-cancel-query\").prop('disabled', true);\n        }\n        is_query_running = false;\n        self.trigger('pgadmin-sqleditor:loading-icon:hide');\n      },\n\n\n      /* This function makes the ajax call to poll the result,\n       * if status is Busy then recursively call the poll function\n       * till the status is 'Success' or 'NotConnected'. If status is\n       * 'Success' then call the render method to render the data.\n       */\n      _poll: function () {\n        var self = this;\n\n        setTimeout(\n          function () {\n            $.ajax({\n              url: url_for('sqleditor.poll', {'trans_id': self.transId}),\n              method: 'GET',\n              success: function (res) {\n                if (res.data.status === 'Success') {\n                  self.trigger(\n                    'pgadmin-sqleditor:loading-icon:message',\n                    gettext(\"Loading data from the database server and rendering...\")\n                  );\n\n                  self.call_render_after_poll(res.data);\n                }\n                else if (res.data.status === 'Busy') {\n                  // If status is Busy then poll the result by recursive call to the poll function\n                  self._poll();\n                  is_query_running = true;\n                  if (res.data.result) {\n                    self.update_msg_history(res.data.status, res.data.result, false);\n                  }\n                }\n                else if (res.data.status === 'NotConnected') {\n                  self.trigger('pgadmin-sqleditor:loading-icon:hide');\n                  // Enable/Disable query tool button only if is_query_tool is true.\n                  if (self.is_query_tool) {\n                    self.disable_tool_buttons(false);\n                    $(\"#btn-cancel-query\").prop('disabled', true);\n                  }\n                  self.update_msg_history(false, res.data.result, true);\n                }\n                else if (res.data.status === 'Cancel') {\n                  self.trigger('pgadmin-sqleditor:loading-icon:hide');\n                  self.update_msg_history(false, \"Execution Cancelled!\", true)\n                }\n              },\n              error: function (e) {\n                // Enable/Disable query tool button only if is_query_tool is true.\n                self.resetQueryHistoryObject(self);\n                self.trigger('pgadmin-sqleditor:loading-icon:hide');\n                if (self.is_query_tool) {\n                  self.disable_tool_buttons(false);\n                  $(\"#btn-cancel-query\").prop('disabled', true);\n                }\n\n                if (e.readyState == 0) {\n                  self.update_msg_history(false,\n                    gettext(\"Not connected to the server or the connection to the server has been closed.\")\n                  );\n                  return;\n                }\n\n                var msg = e.responseText;\n                if (e.responseJSON != undefined &&\n                  e.responseJSON.errormsg != undefined)\n                  msg = e.responseJSON.errormsg;\n\n                self.update_msg_history(false, msg);\n                // Highlight the error in the sql panel\n                self._highlight_error(msg);\n              }\n            });\n          }, self.POLL_FALLBACK_TIME());\n      },\n\n      /* This function is used to create the backgrid columns,\n       * create the Backbone PageableCollection and finally render\n       * the data in the backgrid.\n       */\n      _render: function (data) {\n        var self = this;\n        self.colinfo = data.col_info;\n        self.primary_keys = data.primary_keys;\n        self.client_primary_key = data.client_primary_key;\n        self.cell_selected = false;\n        self.selected_model = null;\n        self.changedModels = [];\n        $('.sql-editor-explain').empty();\n\n        /* If object don't have primary keys then set the\n         * can_edit flag to false.\n         */\n        if (self.primary_keys === null || self.primary_keys === undefined\n          || _.size(self.primary_keys) === 0)\n          self.can_edit = false;\n        else\n          self.can_edit = true;\n\n        /* If user can filter the data then we should enabled\n         * Filter and Limit buttons.\n         */\n        if (self.can_filter) {\n          $(\".limit\").prop('disabled', false);\n          $(\".limit\").addClass('limit-enabled');\n          $(\"#btn-filter\").prop('disabled', false);\n          $(\"#btn-filter-dropdown\").prop('disabled', false);\n        }\n\n        // Initial settings for delete row, copy row and paste row buttons.\n        $(\"#btn-delete-row\").prop('disabled', true);\n        // Do not disable save button in query tool\n        if (!self.is_query_tool && !self.can_edit) {\n          $(\"#btn-save\").prop('disabled', true);\n          $(\"#btn-file-menu-dropdown\").prop('disabled', true);\n        }\n        if (!self.can_edit) {\n          $(\"#btn-delete-row\").prop('disabled', true);\n          $(\"#btn-copy-row\").prop('disabled', true);\n          $(\"#btn-paste-row\").prop('disabled', true);\n        }\n\n        // Fetch the columns metadata\n        self._fetch_column_metadata.call(\n          self, data, function () {\n            var self = this;\n\n            self.trigger(\n              'pgadmin-sqleditor:loading-icon:message',\n              gettext(\"Loading data from the database server and rendering...\"),\n              self\n            );\n\n            // Show message in message and history tab in case of query tool\n            self.total_time = self.get_query_run_time(self.query_start_time, self.query_end_time);\n            var msg1 = S(gettext(\"Successfully run. Total query runtime: %s.\")).sprintf(self.total_time).value();\n            var msg2 = S(gettext(\"%s rows affected.\")).sprintf(self.rows_affected).value();\n\n              // Display the notifier if the timeout is set to >= 0\n              if (self.info_notifier_timeout >= 0) {\n                alertify.success(msg1 + ' ' + msg2, self.info_notifier_timeout);\n              }\n\n            var _msg = msg1 + '\\n' + msg2;\n\n\n              // If there is additional messages from server then add it to message\n              if(!_.isNull(data.additional_messages) &&\n                    !_.isUndefined(data.additional_messages)) {\n                    _msg = data.additional_messages + '\\n' + _msg;\n              }\n\n              self.update_msg_history(true,_msg, false);\n\n            /* Add the data to the collection and render the grid.\n             * In case of Explain draw the graph on explain panel\n             * and add json formatted data to collection and render.\n             */\n            var explain_data_array = [];\n            if (\n              data.result && data.result.length >= 1 &&\n              data.result[0] && data.result[0][0] && data.result[0][0][0] &&\n              data.result[0][0][0].hasOwnProperty('Plan') &&\n              _.isObject(data.result[0][0][0]['Plan'])\n            ) {\n              var explain_data = [JSON.stringify(data.result[0][0], null, 2)];\n              explain_data_array.push(explain_data);\n              // Make sure - the 'Data Output' panel is visible, before - we\n              // start rendering the grid.\n              self.gridView.data_output_panel.focus();\n              setTimeout(\n                function () {\n                  self.gridView.render_grid(\n                    explain_data_array, self.columns, self.can_edit,\n                    self.client_primary_key\n                  );\n                  // Make sure - the 'Explain' panel is visible, before - we\n                  // start rendering the grid.\n                  self.gridView.explain_panel.focus();\n                  pgExplain.DrawJSONPlan(\n                    $('.sql-editor-explain'), data.result[0][0]\n                  );\n                }, 10\n              );\n            } else {\n              // Make sure - the 'Data Output' panel is visible, before - we\n              // start rendering the grid.\n              self.gridView.data_output_panel.focus();\n              setTimeout(\n                function () {\n                  self.gridView.render_grid(data.result, self.columns,\n                    self.can_edit, self.client_primary_key, data.rows_affected);\n                }, 10\n              );\n            }\n\n            // Hide the loading icon\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            $(\"#btn-flash\").prop('disabled', false);\n          }.bind(self)\n        );\n      },\n\n      // This function creates the columns as required by the backgrid\n      _fetch_column_metadata: function (data, cb) {\n        var colinfo = data.colinfo,\n          primary_keys = data.primary_keys,\n          result = data.result,\n          columns = [],\n          self = this;\n        // Store pg_types in an array\n        var pg_types = new Array();\n        _.each(data.types, function (r) {\n          pg_types[r.oid] = [r.typname];\n        });\n\n        // Create columns required by slick grid to render\n        _.each(colinfo, function (c) {\n          var is_primary_key = false;\n\n          // Check whether table have primary key\n          if (_.size(primary_keys) > 0) {\n            _.each(primary_keys, function (value, key) {\n              if (key === c.name)\n                is_primary_key = true;\n            });\n          }\n\n          // To show column label and data type in multiline,\n          // The elements should be put inside the div.\n          // Create column label and type.\n          var col_type = '',\n            column_label = '',\n            col_cell;\n          var type = pg_types[c.type_code] ?\n            pg_types[c.type_code][0] :\n            // This is the case where user might\n            // have use casting so we will use type\n            // returned by cast function\n            pg_types[pg_types.length - 1][0] ?\n              pg_types[pg_types.length - 1][0] : 'unknown';\n\n          if (!is_primary_key)\n            col_type += type;\n          else\n            col_type += '[PK] ' + type;\n\n          if (c.precision && c.precision >= 0 && c.precision != 65535) {\n            col_type += ' (' + c.precision;\n            col_type += c.scale && c.scale != 65535 ?\n              ',' + c.scale + ')' :\n              ')';\n          }\n          // Identify cell type of column.\n          switch (type) {\n            case \"json\":\n            case \"json[]\":\n            case \"jsonb\":\n            case \"jsonb[]\":\n              col_cell = 'Json';\n              break;\n            case \"smallint\":\n            case \"smallint[]\":\n            case \"integer\":\n            case \"integer[]\":\n            case \"bigint\":\n            case \"bigint[]\":\n            case \"decimal\":\n            case \"decimal[]\":\n            case \"numeric\":\n            case \"numeric[]\":\n            case \"real\":\n            case \"real[]\":\n            case \"double precision\":\n            case \"double precision[]\":\n              col_cell = 'number';\n              break;\n            case \"boolean\":\n              col_cell = 'boolean';\n              break;\n            case \"character\":\n            case \"character[]\":\n            case \"\\\"char\\\"\":\n            case \"\\\"char\\\"[]\":\n            case \"character varying\":\n            case \"character varying[]\":\n              if (c.internal_size && c.internal_size >= 0 && c.internal_size != 65535) {\n                // Update column type to display length on column header\n                col_type += ' (' + c.internal_size + ')';\n              }\n              col_cell = 'string';\n              break;\n            case \"bytea\":\n            case \"bytea[]\":\n              col_cell = 'binary';\n              break;\n            default:\n              col_cell = 'string';\n          }\n\n          column_label = c.display_name + '<br>' + col_type;\n\n          var array_type_bracket_index = type.lastIndexOf('[]'),\n            col = {\n              'name': c.name,\n              'display_name': c.display_name,\n              'column_type': col_type,\n              'column_type_internal': type,\n              'pos': c.pos,\n              'label': column_label,\n              'cell': col_cell,\n              'can_edit': self.can_edit,\n              'type': type,\n              'not_null': c.not_null,\n              'has_default_val': c.has_default_val,\n              'is_array': array_type_bracket_index > -1 && array_type_bracket_index + 2 == type.length\n            };\n          columns.push(col);\n        });\n\n        self.columns = columns;\n        if (cb && typeof(cb) == 'function') {\n          cb();\n        }\n      },\n\n      resetQueryHistoryObject: function (history) {\n        history.total_time = '-';\n      },\n\n      // This function is used to raise appropriate message.\n      update_msg_history: function (status, msg, clear_grid) {\n        var self = this;\n        if (clear_grid === undefined)\n          clear_grid = true;\n\n        self.gridView.messages_panel.focus();\n\n        if (clear_grid) {\n          // Delete grid\n          if (self.gridView.handler.slickgrid) {\n            self.gridView.handler.slickgrid.destroy();\n\n          }\n          // Misc cleaning\n          self.columns = undefined;\n          self.collection = undefined;\n\n          $('.sql-editor-message').text(msg);\n        } else {\n          $('.sql-editor-message').append(_.escape(msg));\n        }\n\n        // Scroll automatically when msgs appends to element\n        setTimeout(function () {\n          $(\".sql-editor-message\").scrollTop($(\".sql-editor-message\")[0].scrollHeight);\n          ;\n        }, 10);\n\n        if (status != 'Busy') {\n          $(\"#btn-flash\").prop('disabled', false);\n          self.trigger('pgadmin-sqleditor:loading-icon:hide');\n          self.gridView.history_collection.add({\n            'status': status,\n            'start_time': self.query_start_time,\n            'query': self.query,\n            'row_affected': self.rows_affected,\n            'total_time': self.total_time,\n            'message': msg,\n          });\n        }\n      },\n\n      // This function will return the total query execution Time.\n      get_query_run_time: function (start_time, end_time) {\n        var self = this;\n\n        // Calculate the difference in milliseconds\n        var difference_ms, miliseconds;\n        difference_ms = miliseconds = end_time.getTime() - start_time.getTime();\n        //take out milliseconds\n        difference_ms = difference_ms / 1000;\n        var seconds = Math.floor(difference_ms % 60);\n        difference_ms = difference_ms / 60;\n        var minutes = Math.floor(difference_ms % 60);\n\n        if (minutes > 0)\n          return minutes + ' min';\n        else if (seconds > 0) {\n          return seconds + ' secs';\n        }\n        else\n          return miliseconds + ' msec';\n      },\n\n      /* This function is used to check whether cell\n       * is editable or not depending on primary keys\n       * and staged_rows flag\n       */\n      is_editable: function (obj) {\n        var self = this;\n        if (obj instanceof Backbone.Collection)\n          return false;\n        return (self.get('can_edit'));\n      },\n\n      rows_to_delete: function (data) {\n        var self = this,\n          tmp_keys = self.primary_keys;\n\n        // re-calculate rows with no primary keys\n        self.temp_new_rows = [];\n        data.forEach(function (d, idx) {\n          var p_keys_list = _.pick(d, tmp_keys),\n            is_primary_key = Object.keys(p_keys_list).length ?\n              p_keys_list[0] : undefined;\n\n          if (!is_primary_key) {\n            self.temp_new_rows.push(idx);\n          }\n        });\n        self.rows_to_disable = _.clone(self.temp_new_rows);\n      },\n\n      // This function will delete selected row.\n      _delete: function () {\n        var self = this, deleted_keys = [],\n          dgrid = document.getElementById(\"datagrid\"),\n          is_added = _.size(self.data_store.added),\n          is_updated = _.size(self.data_store.updated);\n\n        // Remove newly added rows from staged rows as we don't want to send them on server\n        if (is_added) {\n          _.each(self.data_store.added, function (val, key) {\n            if (key in self.data_store.staged_rows) {\n              // Remove the row from data store so that we do not send it on server\n              deleted_keys.push(key);\n              delete self.data_store.staged_rows[key];\n              delete self.data_store.added[key];\n              delete self.data_store.added_index[key];\n            }\n          });\n        }\n        // If only newly rows to delete and no data is there to send on server\n        // then just re-render the grid\n        if (_.size(self.data_store.staged_rows) == 0) {\n          var grid = self.slickgrid,\n            dataView = grid.getData(),\n            data = dataView.getItems(),\n            idx = 0;\n\n          grid.resetActiveCell();\n\n          dataView.beginUpdate();\n          for (var i = 0; i < deleted_keys.length; i++) {\n            dataView.deleteItem(deleted_keys[i]);\n          }\n          dataView.endUpdate();\n          self.rows_to_delete.apply(self, [dataView.getItems()]);\n          grid.resetActiveCell();\n          grid.setSelectedRows([]);\n          grid.invalidate();\n\n              // Nothing to copy or delete here\n              $(\"#btn-delete-row\").prop('disabled', true);\n              $(\"#btn-copy-row\").prop('disabled', true);\n              if(_.size(self.data_store.added) || is_updated) {\n                // Do not disable save button if there are\n                // any other changes present in grid data\n                $(\"#btn-save\").prop('disabled', false);\n              } else {\n                $(\"#btn-save\").prop('disabled', true);\n              }\n              alertify.success(gettext(\"Row(s) deleted\"));\n          } else {\n            // There are other data to needs to be updated on server\n            if(is_updated) {\n              alertify.alert(gettext(\"Operation failed\"),\n                    gettext(\"There are unsaved changes in grid, Please save them first to avoid inconsistency in data\")\n                  );\n              return;\n            }\n            alertify.confirm(gettext(\"Delete Row(s)\"),\n                  gettext(\"Are you sure you wish to delete selected row(s)?\"),\n              function() {\n                $(\"#btn-delete-row\").prop('disabled', true);\n                $(\"#btn-copy-row\").prop('disabled', true);\n                // Change the state\n                self.data_store.deleted = self.data_store.staged_rows;\n                self.data_store.staged_rows = {};\n                // Save the changes on server\n                self._save();\n              },\n              function() {\n                // Do nothing as user canceled the operation.\n              }\n            ).set('labels', {ok: gettext(\"Yes\"), cancel:gettext(\"No\")});\n          }\n        },\n\n      /* This function will fetch the list of changed models and make\n       * the ajax call to save the data into the database server.\n       * and will open save file dialog conditionally.\n       */\n      _save: function (view, controller, save_as) {\n        var self = this,\n          data = [],\n          save_data = true;\n\n        // Open save file dialog if query tool\n        if (self.is_query_tool) {\n          var current_file = self.gridView.current_file;\n          if (!_.isUndefined(current_file) && !save_as) {\n            self._save_file_handler(current_file);\n          }\n          else {\n            // provide custom option to save file dialog\n            var params = {\n              'supported_types': [\"*\", \"sql\"],\n              'dialog_type': 'create_file',\n              'dialog_title': 'Save File',\n              'btn_primary': 'Save'\n            }\n            pgAdmin.FileManager.init();\n            pgAdmin.FileManager.show_dialog(params);\n          }\n          return;\n        }\n        $(\"#btn-save\").prop('disabled', true);\n        $(\"#btn-file-menu-dropdown\").prop('disabled', true);\n\n        var is_added = _.size(self.data_store.added),\n          is_updated = _.size(self.data_store.updated),\n          is_deleted = _.size(self.data_store.deleted),\n          is_primary_error = false;\n\n        if (!is_added && !is_updated && !is_deleted) {\n          return;  // Nothing to save here\n        }\n\n        if (save_data) {\n\n          self.trigger(\n            'pgadmin-sqleditor:loading-icon:show',\n            gettext(\"Saving the updated data...\")\n          );\n\n          // Add the columns to the data so the server can remap the data\n          var req_data = self.data_store;\n          req_data.columns = view ? view.handler.columns : self.columns;\n\n          // Make ajax call to save the data\n          $.ajax({\n            url: url_for('sqleditor.save', {'trans_id': self.transId}),\n            method: 'POST',\n            contentType: \"application/json\",\n            data: JSON.stringify(req_data),\n            success: function (res) {\n              var grid = self.slickgrid,\n                dataView = grid.getData(),\n                data_length = dataView.getLength(),\n                data = [];\n              if (res.data.status) {\n                // Remove flag is_row_copied from copied rows\n                _.each(data, function (row, idx) {\n                  if (row.is_row_copied) {\n                    delete row.is_row_copied;\n                  }\n                });\n\n                // Remove 2d copied_rows array\n                if (grid.copied_rows) {\n                  delete grid.copied_rows;\n                }\n\n                // Remove deleted rows from client as well\n                if (is_deleted) {\n                  var rows = grid.getSelectedRows();\n                  if (data_length == rows.length) {\n                    // This means all the rows are selected, clear all data\n                    data = [];\n                    dataView.setItems(data, self.client_primary_key);\n                  } else {\n                    dataView.beginUpdate();\n                    for (var i = 0; i < rows.length; i++) {\n                      var item = grid.getDataItem(rows[i]);\n                      data.push(item);\n                      dataView.deleteItem(item[self.client_primary_key]);\n                    }\n                    dataView.endUpdate();\n                  }\n                  self.rows_to_delete.apply(self, [data]);\n                  grid.setSelectedRows([]);\n                }\n\n                // whether a cell is editable or not is decided in\n                // grid.onBeforeEditCell function (on cell click)\n                // but this function should do its job after save\n                // operation. So assign list of added rows to original\n                // rows_to_disable array.\n                if (is_added) {\n                  self.rows_to_disable = _.clone(self.temp_new_rows);\n                }\n\n                grid.setSelectedRows([]);\n                // Reset data store\n                self.data_store = {\n                  'added': {},\n                  'updated': {},\n                  'deleted': {},\n                  'added_index': {},\n                  'updated_index': {}\n                }\n\n                // Reset old primary key data now\n                self.primary_keys_data = {};\n\n                    // Clear msgs after successful save\n                    $('.sql-editor-message').html('');\n                } else {\n                  // Something went wrong while saving data on the db server\n                  $(\"#btn-flash\").prop('disabled', false);\n                  $('.sql-editor-message').text(res.data.result);\n                  var err_msg = S(gettext(\"%s.\")).sprintf(res.data.result).value();\n                  alertify.error(err_msg, 20);\n                  grid.setSelectedRows([]);\n                  // To highlight the row at fault\n                  if(_.has(res.data, '_rowid') &&\n                      (!_.isUndefined(res.data._rowid)|| !_.isNull(res.data._rowid))) {\n                    var _row_index = self._find_rowindex(res.data._rowid);\n                    if(_row_index in self.data_store.added_index) {\n                      // Remove new row index from temp_list if save operation\n                      // fails\n                      var index = self.handler.temp_new_rows.indexOf(res.data._rowid);\n                      if (index > -1) {\n                         self.handler.temp_new_rows.splice(index, 1);\n                      }\n                     self.data_store.added[self.data_store.added_index[_row_index]].err = true\n                    } else if (_row_index in self.data_store.updated_index) {\n                     self.data_store.updated[self.data_store.updated_index[_row_index]].err = true\n                    }\n                  }\n                  grid.gotoCell(_row_index, 1);\n                }\n\n              // Update the sql results in history tab\n              _.each(res.data.query_result, function (r) {\n                self.gridView.history_collection.add({\n                  'status': r.status,\n                  'start_time': self.query_start_time,\n                  'query': r.sql,\n                  'row_affected': r.rows_affected,\n                  'total_time': self.total_time,\n                  'message': r.result,\n                });\n              });\n              self.trigger('pgadmin-sqleditor:loading-icon:hide');\n\n                grid.invalidate();\n                alertify.success(gettext(\"Data saved successfully.\"));\n                if (self.close_on_save) {\n                  self.close();\n                }\n              },\n              error: function(e) {\n                if (e.readyState == 0) {\n                  self.update_msg_history(false,\n                    gettext(\"Not connected to the server or the connection to the server has been closed.\")\n                  );\n                  return;\n                }\n\n              var msg = e.responseText;\n              if (e.responseJSON != undefined &&\n                e.responseJSON.errormsg != undefined)\n                msg = e.responseJSON.errormsg;\n\n              self.update_msg_history(false, msg);\n            }\n          });\n        }\n      },\n\n      // Find index of row at fault from grid data\n      _find_rowindex: function (rowid) {\n        var self = this,\n          grid = self.slickgrid,\n          dataView = grid.getData(),\n          data = dataView.getItems(),\n          _rowid,\n          count = 0,\n          _idx = -1;\n\n        // If _rowid is object then it's update/delete operation\n        if (_.isObject(rowid)) {\n          _rowid = rowid;\n        } else if (_.isString(rowid)) { // Insert operation\n          var rowid = {};\n          rowid[self.client_primary_key] = rowid;\n          _rowid = rowid;\n        } else {\n          // Something is wrong with unique id\n          return _idx;\n        }\n\n        _.find(data, function (d) {\n          // search for unique id in row data if found than its the row\n          // which error out on server side\n          var tmp = [];  //_.findWhere needs array of object to work\n          tmp.push(d);\n          if (_.findWhere(tmp, _rowid)) {\n            _idx = count;\n            // Now exit the loop by returning true\n            return true;\n          }\n          count++;\n        });\n\n        // Not able to find in grid Data\n        return _idx;\n      },\n\n      // Save as\n      _save_as: function () {\n        return this._save(true);\n      },\n\n      // Set panel title.\n      setTitle: function (title) {\n        var self = this;\n\n        if (self.is_new_browser_tab) {\n          window.document.title = title;\n        } else {\n          _.each(window.top.pgAdmin.Browser.docker.findPanels('frm_datagrid'), function (p) {\n            if (p.isVisible()) {\n              p.title(decodeURIComponent(title));\n            }\n          });\n        }\n      },\n\n      // load select file dialog\n      _load_file: function () {\n        var self = this;\n\n        /* If is_query_changed flag is set to false then no need to\n         * confirm with the user for unsaved changes.\n         */\n        if (self.is_query_changed) {\n          alertify.confirm(gettext(\"Unsaved changes\"),\n            gettext(\"Are you sure you wish to discard the current changes?\"),\n            function () {\n              // User do not want to save, just continue\n              self._open_select_file_manager();\n            },\n            function () {\n              return true;\n            }\n          ).set('labels', {ok: 'Yes', cancel: 'No'});\n        } else {\n          self._open_select_file_manager();\n        }\n\n      },\n\n      // Open FileManager\n      _open_select_file_manager: function () {\n        var params = {\n          'supported_types': [\"sql\"], // file types allowed\n          'dialog_type': 'select_file' // open select file dialog\n        }\n        pgAdmin.FileManager.init();\n        pgAdmin.FileManager.show_dialog(params);\n      },\n\n      // read file data and return as response\n      _select_file_handler: function (e) {\n        var self = this,\n          data = {\n            'file_name': decodeURI(e)\n          };\n\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext(\"Loading the file...\")\n        );\n        // set cursor to progress before file load\n        var $busy_icon_div = $('.sql-editor-busy-fetching');\n        $busy_icon_div.addClass('show_progress');\n\n        // Make ajax call to load the data from file\n        $.ajax({\n          url: url_for('sqleditor.load_file'),\n          method: 'POST',\n          contentType: \"application/json\",\n          data: JSON.stringify(data),\n          success: function (res) {\n            self.gridView.query_tool_obj.setValue(res);\n            self.gridView.current_file = e;\n            self.setTitle(self.gridView.current_file.split('\\\\').pop().split('/').pop());\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            // hide cursor\n            $busy_icon_div.removeClass('show_progress');\n\n            // disable save button on file save\n            $(\"#btn-save\").prop('disabled', true);\n            $(\"#btn-file-menu-save\").css('display', 'none');\n\n              // Update the flag as new content is just loaded.\n              self.is_query_changed = false;\n            },\n            error: function(e) {\n              var errmsg = $.parseJSON(e.responseText).errormsg;\n              alertify.error(errmsg);\n              self.trigger('pgadmin-sqleditor:loading-icon:hide');\n              // hide cursor\n              $busy_icon_div.removeClass('show_progress');\n            }\n          });\n        },\n\n      // read data from codemirror and write to file\n      _save_file_handler: function (e) {\n        var self = this,\n          data = {\n            'file_name': decodeURI(e),\n            'file_content': self.gridView.query_tool_obj.getValue()\n          };\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext(\"Saving the queries in the file...\")\n        );\n\n          // Make ajax call to save the data to file\n          $.ajax({\n            url: url_for('sqleditor.save_file'),\n            method: 'POST',\n            contentType: \"application/json\",\n            data: JSON.stringify(data),\n            success: function(res) {\n              if (res.data.status) {\n                alertify.success(gettext(\"File saved successfully.\"));\n                self.gridView.current_file = e;\n                self.setTitle(self.gridView.current_file.replace(/^.*[\\\\\\/]/g, ''));\n                // disable save button on file save\n                $(\"#btn-save\").prop('disabled', true);\n                $(\"#btn-file-menu-save\").css('display', 'none');\n\n              // Update the flag as query is already saved.\n              self.is_query_changed = false;\n            }\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            if (self.close_on_save) {\n              self.close()\n            }\n          },\n          error: function (e) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n\n              var errmsg = $.parseJSON(e.responseText).errormsg;\n              setTimeout(\n                function() {\n                  alertify.error(errmsg);\n                }, 10\n              );\n            },\n          });\n        },\n\n      // codemirror text change event\n      _on_query_change: function (query_tool_obj) {\n        var self = this;\n\n        if (!self.is_query_changed) {\n          // Update the flag as query is going to changed.\n          self.is_query_changed = true;\n\n          if (self.gridView.current_file) {\n            var title = self.gridView.current_file.replace(/^.*[\\\\\\/]/g, '') + ' *'\n            self.setTitle(title);\n          } else {\n            var title = '';\n\n            if (self.is_new_browser_tab) {\n              title = window.document.title + ' *';\n            } else {\n              // Find the title of the visible panel\n              _.each(window.top.pgAdmin.Browser.docker.findPanels('frm_datagrid'), function (p) {\n                if (p.isVisible()) {\n                  self.gridView.panel_title = p._title;\n                }\n              });\n\n              title = self.gridView.panel_title + ' *';\n            }\n            self.setTitle(title);\n          }\n\n          $(\"#btn-save\").prop('disabled', false);\n          $(\"#btn-file-menu-save\").css('display', 'block');\n          $(\"#btn-file-menu-dropdown\").prop('disabled', false);\n        }\n      },\n\n      // This function will set the required flag for polling response data\n      _init_polling_flags: function () {\n        var self = this;\n\n        // To get a timeout for polling fallback timer in seconds in\n        // regards to elapsed time\n        self.POLL_FALLBACK_TIME = function () {\n          var seconds = parseInt((Date.now() - self.query_start_time.getTime()) / 1000);\n          // calculate & return fall back polling timeout\n          if (seconds >= 10 && seconds < 30) {\n            return 500;\n          }\n          else if (seconds >= 30 && seconds < 60) {\n            return 1000;\n          }\n          else if (seconds >= 60 && seconds < 90) {\n            return 2000;\n          }\n          else if (seconds >= 90) {\n            return 5000;\n          }\n          else\n            return 1;\n        }\n      },\n\n      // This function will show the filter in the text area.\n      _show_filter: function () {\n        var self = this;\n\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext(\"Loading the existing filter options...\")\n        );\n        $.ajax({\n          url: url_for('sqleditor.get_filter', {'trans_id': self.transId}),\n          method: 'GET',\n          success: function (res) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            if (res.data.status) {\n              $('#filter').removeClass('hidden');\n              $('#editor-panel').addClass('sql-editor-busy-fetching');\n              self.gridView.filter_obj.refresh();\n\n              if (res.data.result == null)\n                self.gridView.filter_obj.setValue('');\n              else\n                self.gridView.filter_obj.setValue(res.data.result);\n            } else {\n              setTimeout(\n                function () {\n                  alertify.alert('Get Filter Error', res.data.result);\n                }, 10\n              );\n            }\n          },\n          error: function (e) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n\n            var msg;\n            if (e.readyState == 0) {\n              msg =\n                gettext(\"Not connected to the server or the connection to the server has been closed.\")\n            } else {\n              msg = e.responseText;\n              if (e.responseJSON != undefined &&\n                e.responseJSON.errormsg != undefined)\n                msg = e.responseJSON.errormsg;\n            }\n            setTimeout(\n              function () {\n                alertify.alert('Get Filter Error', msg);\n              }, 10\n            );\n          }\n        });\n      },\n\n      // This function will include the filter by selection.\n      _include_filter: function () {\n        var self = this,\n          data = {}, grid, active_column, column_info, _values;\n\n        grid = self.slickgrid;\n        active_column = grid.getActiveCell();\n\n        // If no cell is selected then return from the function\n        if (_.isNull(active_column) || _.isUndefined(active_column))\n          return;\n\n        column_info = grid.getColumns()[active_column.cell]\n\n        // Fetch current row data from grid\n        _values = grid.getDataItem(active_column.row, active_column.cell)\n        if (_.isNull(_values) || _.isUndefined(_values))\n          return;\n\n        // Add column position and it's value to data\n        data[column_info.field] = _values[column_info.field] || '';\n\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext(\"Applying the new filter...\")\n        );\n\n        // Make ajax call to include the filter by selection\n        $.ajax({\n          url: url_for('sqleditor.inclusive_filter', {'trans_id': self.transId}),\n          method: 'POST',\n          contentType: \"application/json\",\n          data: JSON.stringify(data),\n          success: function (res) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            setTimeout(\n              function () {\n                if (res.data.status) {\n                  // Refresh the sql grid\n                  queryToolActions.executeQuery(self);\n                }\n                else {\n                  alertify.alert('Filter By Selection Error', res.data.result);\n                }\n              }\n            );\n          },\n          error: function (e) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            setTimeout(\n              function () {\n                if (e.readyState == 0) {\n                  alertify.alert('Filter By Selection Error',\n                    gettext(\"Not connected to the server or the connection to the server has been closed.\")\n                  );\n                  return;\n                }\n\n                var msg = e.responseText;\n                if (e.responseJSON != undefined &&\n                  e.responseJSON.errormsg != undefined)\n                  msg = e.responseJSON.errormsg;\n\n                alertify.alert('Filter By Selection Error', msg);\n              }, 10\n            );\n          }\n        });\n      },\n\n      // This function will exclude the filter by selection.\n      _exclude_filter: function () {\n        var self = this,\n          data = {}, grid, active_column, column_info, _values;\n\n        grid = self.slickgrid;\n        active_column = grid.getActiveCell();\n\n        // If no cell is selected then return from the function\n        if (_.isNull(active_column) || _.isUndefined(active_column))\n          return;\n\n        column_info = grid.getColumns()[active_column.cell]\n\n        // Fetch current row data from grid\n        _values = grid.getDataItem(active_column.row, active_column.cell)\n        if (_.isNull(_values) || _.isUndefined(_values))\n          return;\n\n        // Add column position and it's value to data\n        data[column_info.field] = _values[column_info.field] || '';\n\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext(\"Applying the new filter...\")\n        );\n\n        // Make ajax call to exclude the filter by selection.\n        $.ajax({\n          url: url_for('sqleditor.exclusive_filter', {'trans_id': self.transId}),\n          method: 'POST',\n          contentType: \"application/json\",\n          data: JSON.stringify(data),\n          success: function (res) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            setTimeout(\n              function () {\n                if (res.data.status) {\n                  // Refresh the sql grid\n                  queryToolActions.executeQuery(self);\n                }\n                else {\n                  alertify.alert('Filter Exclude Selection Error', res.data.result);\n                }\n              }, 10\n            );\n          },\n          error: function (e) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n\n            setTimeout(\n              function () {\n                if (e.readyState == 0) {\n                  alertify.alert('Filter Exclude Selection Error',\n                    gettext(\"Not connected to the server or the connection to the server has been closed.\")\n                  );\n                  return;\n                }\n\n                var msg = e.responseText;\n                if (e.responseJSON != undefined &&\n                  e.responseJSON.errormsg != undefined)\n                  msg = e.responseJSON.errormsg;\n\n                alertify.alert('Filter Exclude Selection Error', msg);\n              }, 10\n            );\n          }\n        });\n      },\n\n      // This function will remove the filter.\n      _remove_filter: function () {\n        var self = this;\n\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext(\"Removing the filter...\")\n        );\n\n        // Make ajax call to exclude the filter by selection.\n        $.ajax({\n          url: url_for('sqleditor.remove_filter', {'trans_id': self.transId}),\n          method: 'POST',\n          success: function (res) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            setTimeout(\n              function () {\n                if (res.data.status) {\n                  // Refresh the sql grid\n                  queryToolActions.executeQuery(self);\n                }\n                else {\n                  alertify.alert('Remove Filter Error', res.data.result);\n                }\n              }\n            );\n          },\n          error: function (e) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            setTimeout(\n              function () {\n                if (e.readyState == 0) {\n                  alertify.alert('Remove Filter Error',\n                    gettext(\"Not connected to the server or the connection to the server has been closed.\")\n                  );\n                  return;\n                }\n\n                var msg = e.responseText;\n                if (e.responseJSON != undefined &&\n                  e.responseJSON.errormsg != undefined)\n                  msg = e.responseJSON.errormsg;\n\n                alertify.alert('Remove Filter Error', msg);\n              }\n            );\n          }\n        });\n      },\n\n      // This function will apply the filter.\n      _apply_filter: function () {\n        var self = this,\n          sql = self.gridView.filter_obj.getValue();\n\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext(\"Applying the filter...\")\n        );\n\n        // Make ajax call to include the filter by selection\n        $.ajax({\n          url: url_for('sqleditor.apply_filter', {'trans_id': self.transId}),\n          method: 'POST',\n          contentType: \"application/json\",\n          data: JSON.stringify(sql),\n          success: function (res) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            setTimeout(\n              function () {\n                if (res.data.status) {\n                  $('#filter').addClass('hidden');\n                  $('#editor-panel').removeClass('sql-editor-busy-fetching');\n                  // Refresh the sql grid\n                  queryToolActions.executeQuery(self);\n                }\n                else {\n                  alertify.alert('Apply Filter Error', res.data.result);\n                }\n              }, 10\n            );\n          },\n          error: function (e) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            setTimeout(\n              function () {\n                if (e.readyState == 0) {\n                  alertify.alert('Apply Filter Error',\n                    gettext(\"Not connected to the server or the connection to the server has been closed.\")\n                  );\n                  return;\n                }\n\n                var msg = e.responseText;\n                if (e.responseJSON != undefined &&\n                  e.responseJSON.errormsg != undefined)\n                  msg = e.responseJSON.errormsg;\n\n                alertify.alert('Apply Filter Error', msg);\n              }, 10\n            );\n          }\n        });\n      },\n\n      // This function will copy the selected row.\n      _copy_row: copyData,\n\n      // This function will paste the selected row.\n      _paste_row: function () {\n        var self = this, col_info = {},\n          grid = self.slickgrid,\n          dataView = grid.getData(),\n          data = dataView.getItems(),\n          count = dataView.getLength(),\n          rows = grid.getSelectedRows().sort(\n            function (a, b) {\n              return a - b;\n            }\n          ),\n          copied_rows = rows.map(function (rowIndex) {\n            return data[rowIndex];\n          }),\n          array_types = [];\n\n        // for quick look up create list of array data types\n        for (var k in self.columns) {\n          if (self.columns[k].is_array) {\n            array_types.push(self.columns[k].name);\n          }\n        }\n\n        rows = rows.length == 0 ? self.last_copied_rows : rows\n\n        self.last_copied_rows = rows;\n\n        // If there are rows to paste?\n        if (copied_rows.length > 0) {\n          // Enable save button so that user can\n          // save newly pasted rows on server\n          $(\"#btn-save\").prop('disabled', false);\n\n          var arr_to_object = function (arr) {\n            var obj = {},\n              count = typeof(arr) == 'object' ?\n                Object.keys(arr).length : arr.length\n\n            _.each(arr, function (val, i) {\n              if (arr[i] !== undefined) {\n                // Do not stringify array types.\n                if (_.isObject(arr[i]) && array_types.indexOf(i) == -1) {\n                  obj[String(i)] = JSON.stringify(arr[i]);\n                } else {\n                  obj[String(i)] = arr[i];\n                }\n              }\n            });\n            return obj;\n          };\n\n          // Generate Unique key for each pasted row(s)\n          // Convert array values to object to send to server\n          // Add flag is_row_copied to handle [default] and [null]\n          // for copied rows.\n          // Add index of copied row into temp_new_rows\n          // Trigger grid.onAddNewRow when a row is copied\n          // Reset selection\n\n          dataView.beginUpdate();\n          _.each(copied_rows, function (row) {\n            var new_row = arr_to_object(row),\n              _key = (self.gridView.client_primary_key_counter++).toString();\n            new_row.is_row_copied = true;\n            self.temp_new_rows.push(count);\n            new_row[self.client_primary_key] = _key;\n            dataView.addItem(new_row);\n            self.data_store.added[_key] = {'err': false, 'data': new_row};\n            self.data_store.added_index[count] = _key;\n            count++;\n          });\n          dataView.endUpdate();\n          grid.updateRowCount();\n          // Pasted row/s always append so bring last row in view port.\n          grid.scrollRowIntoView(dataView.getLength());\n          grid.setSelectedRows([]);\n        }\n      },\n\n      // This function will set the limit for SQL query\n      _set_limit: function () {\n        var self = this,\n          limit = parseInt($(\".limit\").val());\n\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext(\"Setting the limit on the result...\")\n        );\n        // Make ajax call to change the limit\n        $.ajax({\n          url: url_for('sqleditor.set_limit', {'trans_id': self.transId}),\n          method: 'POST',\n          contentType: \"application/json\",\n          data: JSON.stringify(limit),\n          success: function (res) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            setTimeout(\n              function () {\n                if (res.data.status) {\n                  // Refresh the sql grid\n                  queryToolActions.executeQuery(self);\n                }\n                else\n                  alertify.alert('Change limit Error', res.data.result);\n              }, 10\n            );\n          },\n          error: function (e) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            setTimeout(\n              function () {\n                if (e.readyState == 0) {\n                  alertify.alert('Change limit Error',\n                    gettext(\"Not connected to the server or the connection to the server has been closed.\")\n                  );\n                  return;\n                }\n\n                var msg = e.responseText;\n                if (e.responseJSON != undefined &&\n                  e.responseJSON.errormsg != undefined)\n                  msg = e.responseJSON.errormsg;\n\n                alertify.alert('Change limit Error', msg);\n              }, 10\n            );\n          }\n        });\n      },\n\n      // This function is used to enable/disable buttons\n      disable_tool_buttons: function (disabled) {\n        $(\"#btn-clear\").prop('disabled', disabled);\n        $(\"#btn-query-dropdown\").prop('disabled', disabled);\n        $(\"#btn-edit-dropdown\").prop('disabled', disabled);\n        $(\"#btn-edit\").prop('disabled', disabled);\n        $('#btn-load-file').prop('disabled', disabled);\n      },\n\n      // This function will fetch the sql query from the text box\n      // and execute the query.\n      execute: function (explain_prefix) {\n        var self = this,\n          sql = '',\n          history_msg = '';\n\n        self.has_more_rows = false;\n        self.fetching_rows = false;\n\n        /* If code is selected in the code mirror then execute\n         * the selected part else execute the complete code.\n         */\n        var selected_code = self.gridView.query_tool_obj.getSelection();\n        if (selected_code.length > 0)\n          sql = selected_code;\n        else\n          sql = self.gridView.query_tool_obj.getValue();\n\n        // If it is an empty query, do nothing.\n        if (sql.length <= 0) return;\n\n        self.trigger(\n          'pgadmin-sqleditor:loading-icon:show',\n          gettext(\"Initializing the query execution!\")\n        );\n\n        $(\"#btn-flash\").prop('disabled', true);\n\n        if (explain_prefix != undefined &&\n          !S.startsWith(sql.trim().toUpperCase(), \"EXPLAIN\")) {\n          sql = explain_prefix + ' ' + sql;\n        }\n\n        self.query_start_time = new Date();\n        self.query = sql;\n        self.rows_affected = 0;\n        self._init_polling_flags();\n        self.disable_tool_buttons(true);\n        $(\"#btn-cancel-query\").prop('disabled', false);\n\n        $.ajax({\n          url: url_for('sqleditor.query_tool_start', {'trans_id': self.transId}),\n          method: 'POST',\n          contentType: \"application/json\",\n          data: JSON.stringify(sql),\n          success: function (res) {\n            // Remove marker\n            if (self.gridView.marker) {\n              self.gridView.marker.clear();\n              delete self.gridView.marker;\n              self.gridView.marker = null;\n\n              // Remove already existing marker\n              self.gridView.query_tool_obj.removeLineClass(self.marked_line_no, 'wrap', 'CodeMirror-activeline-background');\n            }\n\n            if (res.data.status) {\n              self.trigger(\n                'pgadmin-sqleditor:loading-icon:message',\n                gettext(\"Waiting for the query execution to complete...\")\n              );\n\n              self.can_edit = res.data.can_edit;\n              self.can_filter = res.data.can_filter;\n              self.info_notifier_timeout = res.data.info_notifier_timeout;\n\n              // If status is True then poll the result.\n              self._poll();\n            }\n            else {\n              self.trigger('pgadmin-sqleditor:loading-icon:hide');\n              self.disable_tool_buttons(false);\n              $(\"#btn-cancel-query\").prop('disabled', true);\n              self.update_msg_history(false, res.data.result);\n\n              // Highlight the error in the sql panel\n              self._highlight_error(res.data.result);\n            }\n          },\n          error: function (e) {\n            self.trigger('pgadmin-sqleditor:loading-icon:hide');\n            self.disable_tool_buttons(false);\n            $(\"#btn-cancel-query\").prop('disabled', true);\n\n            if (e.readyState == 0) {\n              self.update_msg_history(false,\n                gettext(\"Not connected to the server or the connection to the server has been closed.\")\n              );\n              return;\n            }\n\n            var msg = e.responseText;\n            if (e.responseJSON != undefined &&\n              e.responseJSON.errormsg != undefined)\n              msg = e.responseJSON.errormsg;\n\n            self.update_msg_history(false, msg);\n          }\n        });\n      },\n\n      /* This function is used to highlight the error line and\n       * underlining for the error word.\n       */\n      _highlight_error: function (result) {\n        var self = this,\n          error_line_no = 0,\n          start_marker = 0,\n          end_marker = 0,\n          selected_line_no = 0;\n\n        // Remove already existing marker\n        self.gridView.query_tool_obj.removeLineClass(self.marked_line_no, 'wrap', 'CodeMirror-activeline-background');\n\n        // In case of selection we need to find the actual line no\n        if (self.gridView.query_tool_obj.getSelection().length > 0)\n          selected_line_no = self.gridView.query_tool_obj.getCursor(true).line;\n\n        // Fetch the LINE string using regex from the result\n        var line = /LINE (\\d+)/.exec(result),\n          // Fetch the Character string using regex from the result\n          char = /Character: (\\d+)/.exec(result);\n\n        // If line and character is null then no need to mark\n        if (line != null && char != null) {\n          error_line_no = self.marked_line_no = (parseInt(line[1]) - 1) + selected_line_no;\n          var error_char_no = (parseInt(char[1]) - 1);\n\n          /* We need to loop through each line till the error line and\n           * count the total no of character to figure out the actual\n           * starting/ending marker point for the individual line. We\n           * have also added 1 per line for the \"\\n\" character.\n           */\n          var prev_line_chars = 0;\n          var loop_index = selected_line_no > 0 ? selected_line_no : 0;\n          for (var i = loop_index; i < error_line_no; i++)\n            prev_line_chars += self.gridView.query_tool_obj.getLine(i).length + 1;\n\n          /* Marker starting point for the individual line is\n           * equal to error character index minus total no of\n           * character till the error line starts.\n           */\n          start_marker = error_char_no - prev_line_chars;\n\n          // Find the next space from the character or end of line\n          var error_line = self.gridView.query_tool_obj.getLine(error_line_no);\n          end_marker = error_line.indexOf(' ', start_marker);\n          if (end_marker < 0)\n            end_marker = error_line.length;\n\n          // Mark the error text\n          self.gridView.marker = self.gridView.query_tool_obj.markText(\n            {line: error_line_no, ch: start_marker},\n            {line: error_line_no, ch: end_marker},\n            {className: \"sql-editor-mark\"}\n          );\n\n          self.gridView.query_tool_obj.addLineClass(self.marked_line_no, 'wrap', 'CodeMirror-activeline-background');\n        }\n      },\n\n      // This function will cancel the running query.\n      _cancel_query: function () {\n        var self = this;\n\n        $(\"#btn-cancel-query\").prop('disabled', true);\n        $.ajax({\n          url: url_for('sqleditor.cancel_transaction', {'trans_id': self.transId}),\n          method: 'POST',\n          contentType: \"application/json\",\n          success: function (res) {\n            if (res.data.status) {\n              self.disable_tool_buttons(false);\n            }\n            else {\n              self.disable_tool_buttons(false);\n              alertify.alert('Cancel Query Error', res.data.result);\n            }\n          },\n          error: function (e) {\n            self.disable_tool_buttons(false);\n\n            if (e.readyState == 0) {\n              alertify.alert('Cancel Query Error',\n                gettext(\"Not connected to the server or the connection to the server has been closed.\")\n              );\n              return;\n            }\n\n            var msg = e.responseText;\n            if (e.responseJSON != undefined &&\n              e.responseJSON.errormsg != undefined)\n              msg = e.responseJSON.errormsg;\n\n            alertify.alert('Cancel Query Error', msg);\n          }\n        });\n      },\n\n      // Trigger query result download to csv.\n      trigger_csv_download: function (query, filename) {\n        var self = this,\n          link = $(this.container).find(\"#download-csv\"),\n          url = url_for('sqleditor.query_tool_download', {'trans_id': self.transId});\n\n        url += \"?\" + $.param({query: query, filename: filename});\n        link.attr(\"src\", url);\n      },\n\n      _auto_rollback: function () {\n        var self = this,\n          auto_rollback = true;\n\n        if ($('.auto-rollback').hasClass('visibility-hidden') === true)\n          $('.auto-rollback').removeClass('visibility-hidden');\n        else {\n          $('.auto-rollback').addClass('visibility-hidden');\n          auto_rollback = false;\n        }\n\n        // Make ajax call to change the limit\n        $.ajax({\n          url: url_for('sqleditor.auto_rollback', {'trans_id': self.transId}),\n          method: 'POST',\n          contentType: \"application/json\",\n          data: JSON.stringify(auto_rollback),\n          success: function (res) {\n            if (!res.data.status)\n              alertify.alert('Auto Rollback Error', res.data.result);\n          },\n          error: function (e) {\n            if (e.readyState == 0) {\n              alertify.alert('Auto Rollback Error',\n                gettext(\"Not connected to the server or the connection to the server has been closed.\")\n              );\n              return;\n            }\n\n            var msg = e.responseText;\n            if (e.responseJSON != undefined &&\n              e.responseJSON.errormsg != undefined)\n              msg = e.responseJSON.errormsg;\n\n            alertify.alert('Auto Rollback Error', msg);\n          }\n        });\n      },\n\n      _auto_commit: function () {\n        var self = this,\n          auto_commit = true;\n\n        if ($('.auto-commit').hasClass('visibility-hidden') === true)\n          $('.auto-commit').removeClass('visibility-hidden');\n        else {\n          $('.auto-commit').addClass('visibility-hidden');\n          auto_commit = false;\n        }\n\n        // Make ajax call to change the limit\n        $.ajax({\n          url: url_for('sqleditor.auto_commit', {'trans_id': self.transId}),\n          method: 'POST',\n          contentType: \"application/json\",\n          data: JSON.stringify(auto_commit),\n          success: function (res) {\n            if (!res.data.status)\n              alertify.alert('Auto Commit Error', res.data.result);\n          },\n          error: function (e) {\n            if (e.readyState == 0) {\n              alertify.alert('Auto Commit Error',\n                gettext(\"Not connected to the server or the connection to the server has been closed.\")\n              );\n              return;\n            }\n\n            var msg = e.responseText;\n            if (e.responseJSON != undefined &&\n              e.responseJSON.errormsg != undefined)\n              msg = e.responseJSON.errormsg;\n\n            alertify.alert('Auto Commit Error', msg);\n          }\n        });\n      },\n\n      // This function will toggle \"verbose\" option in explain\n      _explain_verbose: function () {\n        var self = this;\n        if ($('.explain-verbose').hasClass('visibility-hidden') === true) {\n          $('.explain-verbose').removeClass('visibility-hidden');\n          self.explain_verbose = true;\n        }\n        else {\n          $('.explain-verbose').addClass('visibility-hidden');\n          self.explain_verbose = false;\n        }\n\n        // Set this option in preferences\n        var data = {\n          'explain_verbose': self.explain_verbose\n        };\n\n        $.ajax({\n          url: url_for('sqleditor.query_tool_preferences', {'trans_id': self.transId}),\n          method: 'PUT',\n          contentType: \"application/json\",\n          data: JSON.stringify(data),\n          success: function (res) {\n            if (res.success == undefined || !res.success) {\n              alertify.alert('Explain options error',\n                gettext(\"Error occurred while setting verbose option in explain\")\n              );\n            }\n          },\n          error: function (e) {\n            alertify.alert('Explain options error',\n              gettext(\"Error occurred while setting verbose option in explain\")\n            );\n            return;\n          }\n        });\n      },\n\n      // This function will toggle \"costs\" option in explain\n      _explain_costs: function () {\n        var self = this;\n        if ($('.explain-costs').hasClass('visibility-hidden') === true) {\n          $('.explain-costs').removeClass('visibility-hidden');\n          self.explain_costs = true;\n        }\n        else {\n          $('.explain-costs').addClass('visibility-hidden');\n          self.explain_costs = false;\n        }\n\n        // Set this option in preferences\n        var data = {\n          'explain_costs': self.explain_costs\n        };\n\n        $.ajax({\n          url: url_for('sqleditor.query_tool_preferences', {'trans_id': self.transId}),\n          method: 'PUT',\n          contentType: \"application/json\",\n          data: JSON.stringify(data),\n          success: function (res) {\n            if (res.success == undefined || !res.success) {\n              alertify.alert('Explain options error',\n                gettext(\"Error occurred while setting costs option in explain\")\n              );\n            }\n          },\n          error: function (e) {\n            alertify.alert('Explain options error',\n              gettext(\"Error occurred while setting costs option in explain\")\n            );\n          }\n        });\n      },\n\n      // This function will toggle \"buffers\" option in explain\n      _explain_buffers: function () {\n        var self = this;\n        if ($('.explain-buffers').hasClass('visibility-hidden') === true) {\n          $('.explain-buffers').removeClass('visibility-hidden');\n          self.explain_buffers = true;\n        }\n        else {\n          $('.explain-buffers').addClass('visibility-hidden');\n          self.explain_buffers = false;\n        }\n\n        // Set this option in preferences\n        var data = {\n          'explain_buffers': self.explain_buffers\n        };\n\n        $.ajax({\n          url: url_for('sqleditor.query_tool_preferences', {'trans_id': self.transId}),\n          method: 'PUT',\n          contentType: \"application/json\",\n          data: JSON.stringify(data),\n          success: function (res) {\n            if (res.success == undefined || !res.success) {\n              alertify.alert('Explain options error',\n                gettext(\"Error occurred while setting buffers option in explain\")\n              );\n            }\n          },\n          error: function (e) {\n            alertify.alert('Explain options error',\n              gettext(\"Error occurred while setting buffers option in explain\")\n            );\n          }\n        });\n      },\n\n      // This function will toggle \"timing\" option in explain\n      _explain_timing: function () {\n        var self = this;\n        if ($('.explain-timing').hasClass('visibility-hidden') === true) {\n          $('.explain-timing').removeClass('visibility-hidden');\n          self.explain_timing = true;\n        }\n        else {\n          $('.explain-timing').addClass('visibility-hidden');\n          self.explain_timing = false;\n        }\n        // Set this option in preferences\n        var data = {\n          'explain_timing': self.explain_timing\n        };\n\n        $.ajax({\n          url: url_for('sqleditor.query_tool_preferences', {'trans_id': self.transId}),\n          method: 'PUT',\n          contentType: \"application/json\",\n          data: JSON.stringify(data),\n          success: function (res) {\n            if (res.success == undefined || !res.success) {\n              alertify.alert('Explain options error',\n                gettext(\"Error occurred while setting timing option in explain\")\n              );\n            }\n          },\n          error: function (e) {\n            alertify.alert('Explain options error',\n              gettext(\"Error occurred while setting timing option in explain\")\n            );\n          }\n        });\n      },\n\n      /*\n       * This function will indent selected code\n       */\n      _indent_selected_code: function () {\n        var self = this, editor = self.gridView.query_tool_obj;\n        editor.execCommand(\"indentMore\");\n      },\n\n      /*\n       * This function will unindent selected code\n       */\n      _unindent_selected_code: function () {\n        var self = this, editor = self.gridView.query_tool_obj;\n        editor.execCommand(\"indentLess\");\n      },\n\n      isQueryRunning: function () {\n        return is_query_running;\n      },\n\n      /*\n       * This function get explain options and auto rollback/auto commit\n       * values from preferences\n       */\n      get_preferences: function () {\n        var self = this,\n          explain_verbose = false,\n          explain_costs = false,\n          explain_buffers = false,\n          explain_timing = false,\n          auto_commit = true,\n          auto_rollback = false,\n          updateUI = function () {\n            // Set Auto-commit and auto-rollback on query editor\n            if (auto_commit &&\n              $('.auto-commit').hasClass('visibility-hidden') === true)\n              $('.auto-commit').removeClass('visibility-hidden');\n            else {\n              $('.auto-commit').addClass('visibility-hidden');\n            }\n            if (auto_rollback &&\n              $('.auto-rollback').hasClass('visibility-hidden') === true)\n              $('.auto-rollback').removeClass('visibility-hidden');\n            else {\n              $('.auto-rollback').addClass('visibility-hidden');\n            }\n\n            // Set explain options on query editor\n            if (explain_verbose &&\n              $('.explain-verbose').hasClass('visibility-hidden') === true)\n              $('.explain-verbose').removeClass('visibility-hidden');\n            else {\n              $('.explain-verbose').addClass('visibility-hidden');\n            }\n            if (explain_costs &&\n              $('.explain-costs').hasClass('visibility-hidden') === true)\n              $('.explain-costs').removeClass('visibility-hidden');\n            else {\n              $('.explain-costs').addClass('visibility-hidden');\n            }\n            if (explain_buffers &&\n              $('.explain-buffers').hasClass('visibility-hidden') === true)\n              $('.explain-buffers').removeClass('visibility-hidden');\n            else {\n              $('.explain-buffers').addClass('visibility-hidden');\n            }\n            if (explain_timing &&\n              $('.explain-timing').hasClass('visibility-hidden') === true)\n              $('.explain-timing').removeClass('visibility-hidden');\n            else {\n              $('.explain-timing').addClass('visibility-hidden');\n            }\n          };\n\n        $.ajax({\n          url: url_for('sqleditor.query_tool_preferences', {'trans_id': self.transId}),\n          method: 'GET',\n          success: function (res) {\n            if (res.data) {\n              explain_verbose = res.data.explain_verbose;\n              explain_costs = res.data.explain_costs;\n              explain_buffers = res.data.explain_buffers;\n              explain_timing = res.data.explain_timing;\n              auto_commit = res.data.auto_commit;\n              auto_rollback = res.data.auto_rollback;\n\n              updateUI();\n            }\n          },\n          error: function (e) {\n            updateUI();\n            alertify.alert('Get Preferences error',\n              gettext(\"Error occurred while getting query tool options \")\n            );\n          }\n        });\n      },\n      close: function () {\n        var self = this;\n        _.each(window.top.pgAdmin.Browser.docker.findPanels('frm_datagrid'), function (panel) {\n          if (panel.isVisible()) {\n            window.onbeforeunload = null;\n            panel.off(wcDocker.EVENT.CLOSING);\n            // remove col_size object on panel close\n            if (!_.isUndefined(self.col_size)) {\n              delete self.col_size;\n            }\n            window.top.pgAdmin.Browser.docker.removePanel(panel);\n          }\n        });\n      }\n    }\n  );\n\n  pgAdmin.SqlEditor = {\n    // This function is used to create and return the object of grid controller.\n    create: function (container) {\n      return new SqlEditorController(container);\n    },\n    jquery: $,\n    S: S\n  };\n\n  return pgAdmin.SqlEditor;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/sqleditor/static/js/sqleditor.js","define (\n  'pgadmin.misc.explain',\n  ['sources/url_for', 'jquery', 'underscore', 'underscore.string', 'sources/pgadmin', 'backbone', 'snapsvg'],\n  function(url_for, $, _, S, pgAdmin, Backbone, Snap) {\n\npgAdmin = pgAdmin || window.pgAdmin || {};\nvar pgExplain = pgAdmin.Explain;\n\n// Snap.svg plug-in to write multitext as image name\nSnap.plugin(function (Snap, Element, Paper, glob) {\n  Paper.prototype.multitext = function (x, y, txt, max_width, attributes) {\n    var svg = Snap(),\n        abc = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n        isWordBroken = false,\n        temp = svg.text(0, 0, abc);\n\n    temp.attr(attributes);\n\n    /*\n     * Find letter width in pixels and\n     * index from where the text should be broken\n     */\n    var letter_width = temp.getBBox().width / abc.length,\n        word_break_index = Math.round((max_width / letter_width)) - 1;\n\n    svg.remove();\n\n    var words = txt.split(\" \"),\n        width_so_far = 0,\n        lines=[], curr_line = '',\n        /*\n         * Function to divide string into multiple lines\n         * and store them in an array if it size crosses\n         * the max-width boundary.\n         */\n        splitTextInMultiLine = function(leading, so_far, line) {\n          var l = line.length,\n              res = [];\n\n          if (l == 0)\n            return res;\n\n          if (so_far && (so_far + (l * letter_width) > max_width)) {\n            res.push(leading);\n            res = res.concat(splitTextInMultiLine('', 0, line));\n          } else if (so_far) {\n            res.push(leading + ' ' + line);\n          } else {\n            if (leading)\n                res.push(leading);\n            if (line.length > word_break_index + 1)\n                res.push(line.slice(0, word_break_index) + '-');\n            else\n                res.push(line);\n            res = res.concat(splitTextInMultiLine('', 0, line.slice(word_break_index)));\n          }\n\n          return res;\n        };\n\n    for (var i = 0; i < words.length; i++) {\n      var tmpArr = splitTextInMultiLine(\n            curr_line, width_so_far, words[i]\n          );\n\n      if (curr_line) {\n        lines = lines.slice(0, lines.length - 2);\n      }\n      lines = lines.concat(tmpArr);\n      curr_line = lines[lines.length - 1];\n      width_so_far = (curr_line.length * letter_width);\n    }\n\n    // Create multiple tspan for each string in array\n    var t = this.text(x,y,lines).attr(attributes);\n    t.selectAll(\"tspan:nth-child(n+2)\").attr({\n      dy: \"1.2em\",\n      x: x\n    });\n    return t;\n  };\n});\n\nif (pgAdmin.Explain)\n    return pgAdmin.Explain;\n\nvar pgExplain = pgAdmin.Explain = {\n   // Prefix path where images are stored\n   prefix: url_for('misc.index') + 'static/explain/img/'\n};\n\n/*\n * A map which is used to fetch the image to be drawn and\n * text which will appear below it\n */\nvar imageMapper = {\n    \"Aggregate\" : {\n        \"image\":\"ex_aggregate.png\", \"image_text\":\"Aggregate\"\n    },\n    'Append' : {\n        \"image\":\"ex_append.png\",\"image_text\":\"Append\"\n    },\n    \"Bitmap Index Scan\" : function(data) {\n        return {\n            \"image\":\"ex_bmp_index.png\", \"image_text\":data['Index Name']\n        };\n    },\n    \"Bitmap Heap Scan\" : function(data) {\n  return {\"image\":\"ex_bmp_heap.png\",\"image_text\":data['Relation Name']};\n},\n\"BitmapAnd\" : {\"image\":\"ex_bmp_and.png\",\"image_text\":\"Bitmap AND\"},\n\"BitmapOr\" : {\"image\":\"ex_bmp_or.png\",\"image_text\":\"Bitmap OR\"},\n\"CTE Scan\" : {\"image\":\"ex_cte_scan.png\",\"image_text\":\"CTE Scan\"},\n\"Function Scan\" : {\"image\":\"ex_result.png\",\"image_text\":\"Function Scan\"},\n\"Foreign Scan\" : {\"image\":\"ex_foreign_scan.png\",\"image_text\":\"Foreign Scan\"},\n\"Gather\" : {\"image\":\"ex_gather_motion.png\",\"image_text\":\"Gather\"},\n\"Group\" : {\"image\":\"ex_group.png\",\"image_text\":\"Group\"},\n\"GroupAggregate\": {\"image\":\"ex_aggregate.png\",\"image_text\":\"Group Aggregate\"},\n\"Hash\" : {\"image\":\"ex_hash.png\",\"image_text\":\"Hash\"},\n\"Hash Join\": function(data) {\n  if (!data['Join Type']) return {\"image\":\"ex_join.png\",\"image_text\":\"Join\"};\n  switch(data['Join Type']) {\n    case 'Anti': return {\"image\":\"ex_hash_anti_join.png\",\"image_text\":\"Hash Anti Join\"};\n    case 'Semi': return {\"image\":\"ex_hash_semi_join.png\",\"image_text\":\"Hash Semi Join\"};\n    default: return {\"image\":\"ex_hash.png\",\"image_text\":String(\"Hash \" + data['Join Type'] + \" Join\" )};\n  }\n},\n\"HashAggregate\" : {\"image\":\"ex_aggregate.png\",\"image_text\":\"Hash Aggregate\"},\n\"Index Only Scan\" : function(data) {\n  return {\"image\":\"ex_index_only_scan.png\",\"image_text\":data['Index Name']};\n},\n\"Index Scan\" : function(data) {\n  return {\"image\":\"ex_index_scan.png\",\"image_text\":data['Index Name']};\n},\n\"Index Scan Backword\" : {\"image\":\"ex_index_scan.png\",\"image_text\":\"Index Backward Scan\"},\n\"Limit\" : {\"image\":\"ex_limit.png\",\"image_text\":\"Limit\"},\n\"LockRows\" : {\"image\":\"ex_lock_rows.png\",\"image_text\":\"Lock Rows\"},\n\"Materialize\" : {\"image\":\"ex_materialize.png\",\"image_text\":\"Materialize\"},\n\"Merge Append\": {\"image\":\"ex_merge_append.png\",\"image_text\":\"Merge Append\"},\n\"Merge Join\": function(data) {\n  switch(data['Join Type']) {\n    case 'Anti': return {\"image\":\"ex_merge_anti_join.png\",\"image_text\":\"Merge Anti Join\"};\n    case 'Semi': return {\"image\":\"ex_merge_semi_join.png\",\"image_text\":\"Merge Semi Join\"};\n    default: return {\"image\":\"ex_merge.png\",\"image_text\":String(\"Merge \" + data['Join Type'] + \" Join\" )};\n  }\n},\n\"ModifyTable\" : function(data) {\n  switch (data['Operation']) {\n    case \"Insert\": return { \"image\":\"ex_insert.png\",\n                            \"image_text\":\"Insert\"\n                           };\n    case \"Update\": return {\"image\":\"ex_update.png\",\"image_text\":\"Update\"};\n    case \"Delete\": return {\"image\":\"ex_delete.png\",\"image_text\":\"Delete\"};\n  }\n},\n'Nested Loop' : function(data) {\n  switch(data['Join Type']) {\n    case 'Anti': return {\"image\":\"ex_nested_loop_anti_join.png\",\"image_text\":\"Nested Loop Anti Join\"};\n    case 'Semi': return {\"image\":\"ex_nested_loop_semi_join.png\",\"image_text\":\"Nested Loop Semi Join\"};\n    default: return {\"image\":\"ex_nested.png\",\"image_text\":\"Nested Loop \" + data['Join Type'] + \" Join\"};\n  }\n},\n\"Recursive Union\" : {\"image\":\"ex_recursive_union.png\",\"image_text\":\"Recursive Union\"},\n\"Result\" : {\"image\":\"ex_result.png\",\"image_text\":\"Result\"},\n\"Sample Scan\" : {\"image\":\"ex_scan.png\",\"image_text\":\"Sample Scan\"},\n\"Scan\" : {\"image\":\"ex_scan.png\",\"image_text\":\"Scan\"},\n\"Seek\" : {\"image\":\"ex_seek.png\",\"image_text\":\"Seek\"},\n\"SetOp\" : function(data) {\n  var strategy = data['Strategy'],\n      command = data['Command'];\n\n  if(strategy == \"Hashed\") {\n    if(S.startsWith(command, \"Intersect\")) {\n      if(command == \"Intersect All\")\n        return {\"image\":\"ex_hash_setop_intersect_all.png\",\"image_text\":\"Hashed Intersect All\"};\n      return {\"image\":\"ex_hash_setop_intersect.png\",\"image_text\":\"Hashed Intersect\"};\n    }\n    else if (S.startsWith(command, \"Except\")) {\n      if(command == \"Except All\")\n        return {\"image\":\"ex_hash_setop_except_all.png\",\"image_text\":\"Hashed Except All\"};\n      return {\"image\":\"ex_hash_setop_except.png\",\"image_text\":\"Hash Except\"};\n    }\n    return {\"image\":\"ex_hash_setop_unknown.png\",\"image_text\":\"Hashed SetOp Unknown\"};\n  }\n  return {\"image\":\"ex_setop.png\",\"image_text\":\"SetOp\"};\n},\n\"Seq Scan\": function(data) {\n  return {\"image\":\"ex_scan.png\",\"image_text\":data['Relation Name']};\n},\n\"Subquery Scan\" : {\"image\":\"ex_subplan.png\",\"image_text\":\"SubQuery Scan\"},\n\"Sort\" : {\"image\":\"ex_sort.png\",\"image_text\":\"Sort\"},\n\"Tid Scan\" : {\"image\":\"ex_tid_scan.png\",\"image_text\":\"Tid Scan\"},\n\"Unique\" : {\"image\":\"ex_unique.png\",\"image_text\":\"Unique\"},\n\"Values Scan\" : {\"image\":\"ex_values_scan.png\",\"image_text\":\"Values Scan\"},\n\"WindowAgg\" : {\"image\":\"ex_window_aggregate.png\",\"image_text\":\"Window Aggregate\"},\n\"WorkTable Scan\" : {\"image\":\"ex_worktable_scan.png\",\"image_text\":\"WorkTable Scan\"},\n\"Undefined\" : {\"image\":\"ex_unknown.png\",\"image_text\":\"Undefined\"},\n}\n\n// Some predefined constants used to calculate image location and its border\nvar pWIDTH =100.;\nvar pHEIGHT = 100.;\nvar IMAGE_WIDTH =50;\nvar IMAGE_HEIGHT = 50;\nvar offsetX = 200,\n    offsetY = 60;\nvar ARROW_WIDTH = 10,\n    ARROW_HEIGHT = 10,\n    DEFAULT_ARROW_SIZE = 2;\nvar TXT_ALLIGN = 5,\n    TXT_SIZE = \"15px\";\nvar TOTAL_WIDTH = undefined,\n    TOTAL_HEIGHT = undefined;\nvar xMargin = 25,\n    yMargin = 25;\nvar MIN_ZOOM_FACTOR = 0.01,\n    MAX_ZOOM_FACTOR = 2,\n    INIT_ZOOM_FACTOR = 1;\nvar ZOOM_RATIO = 0.05;\n\n\n// Backbone model for each plan property of input JSON object\nvar PlanModel = Backbone.Model.extend({\n    defaults: {\n        \"Plans\": [],\n        level: [],\n        \"image\": undefined,\n        \"image_text\": undefined,\n        xpos: undefined,\n        ypos: undefined,\n        width: pWIDTH,\n        height: pHEIGHT\n    },\n    parse: function(data) {\n        var idx = 1,\n            lvl = data.level = data.level || [idx],\n            plans = [],\n            node_type = data['Node Type'],\n            // Calculating relative xpos of current node from top node\n            xpos = data.xpos = data.xpos - pWIDTH,\n            // Calculating relative ypos of current node from top node\n            ypos = data.ypos,\n            maxChildWidth = 0;\n\n        data['width'] = pWIDTH;\n        data['height'] = pHEIGHT;\n\n        /*\n         * calculating xpos, ypos, width and height if current node is a subplan\n         */\n        if (data['Parent Relationship'] === \"SubPlan\") {\n            data['width'] += (xMargin * 2) + (xMargin / 2);\n            data['height'] += (yMargin * 2);\n            data['ypos'] += yMargin;\n            xpos -= xMargin;\n            ypos += yMargin;\n        }\n\n        if(S.startsWith(node_type, \"(slice\"))\n            node_type = node_type.substring(0,7);\n\n        // Get the image information for current node\n        var mappedImage = (_.isFunction(imageMapper[node_type]) &&\n                imageMapper[node_type].apply(undefined, [data])) ||\n                imageMapper[node_type] || {\n                  \"image\": \"ex_unknown.png\", \"image_text\": node_type\n                };\n\n        data[\"image\"] = mappedImage[\"image\"];\n        data[\"image_text\"] = mappedImage[\"image_text\"];\n\n        // Start calculating xpos, ypos, width and height for child plans if any\n        if ('Plans' in data) {\n\n            data['width'] += offsetX;\n\n            _.each(data['Plans'], function(p) {\n                var level = _.clone(lvl),\n                    plan = new PlanModel();\n\n                level.push(idx);\n                plan.set(plan.parse(_.extend(\n                    p, {\n                        \"level\": level,\n                        xpos: xpos - offsetX,\n                        ypos: ypos\n                    })));\n\n                if (maxChildWidth < plan.get('width')) {\n                    maxChildWidth = plan.get('width');\n                }\n\n                var childHeight = plan.get('height');\n\n                if (idx !== 1) {\n                    data['height'] = data['height'] + childHeight + offsetY;\n                } else if (childHeight > data['height']) {\n                    data['height'] = childHeight;\n                }\n                ypos += childHeight + offsetY;\n\n                plans.push(plan);\n                idx++;\n            });\n        }\n\n        // Final Width and Height of current node\n        data['width'] += maxChildWidth;\n        data['Plans'] = plans;\n\n        return data;\n    },\n\n    /*\n     * Required to parse and include non-default params of\n     * plan into backbone model\n     */\n    toJSON: function(non_recursive) {\n      var res = Backbone.Model.prototype.toJSON.apply(this, arguments);\n\n      if (non_recursive) {\n            delete res['Plans'];\n      } else {\n            var plans = [];\n            _.each(res['Plans'], function(p) {\n              plans.push(p.toJSON());\n            });\n            res['Plans'] = plans;\n      }\n      return res;\n    },\n\n    // Draw an arrow to parent node\n    drawPolyLine: function(g, startX, startY, endX, endY, opts, arrowOpts) {\n      // Calculate end point of first starting straight line (startx1, starty1)\n      // Calculate start point of 2nd straight line (endx1, endy1)\n      var midX1 = startX + ((endX - startX) / 3),\n          midX2 = startX + (2 * ((endX - startX) / 3));\n\n      //create arrow head\n      var arrow = g.polygon(\n                    [0, ARROW_HEIGHT,\n                    (ARROW_WIDTH / 2),ARROW_HEIGHT,\n                    (ARROW_HEIGHT / 4), 0,\n                    0, ARROW_WIDTH]\n                    ).transform(\"r90\");\n      var marker = arrow.marker(\n                         0, 0, ARROW_WIDTH, ARROW_HEIGHT, 0, (ARROW_WIDTH / 2)\n                         ).attr(arrowOpts);\n\n      // First straight line\n      g.line(\n        startX, startY, midX1, startY\n        ).attr(opts);\n\n      // Diagonal line\n      g.line(\n        midX1-1, startY, midX2, endY\n        ).attr(opts);\n\n      // Last straight line\n      var line = g.line(\n                   midX2, endY, endX, endY\n                   ).attr(opts);\n      line.attr({markerEnd: marker})\n    },\n\n    // Draw image, its name and its tooltip\n    draw: function(s, xpos, ypos, pXpos, pYpos, graphContainer, toolTipContainer) {\n        var g = s.g();\n        var currentXpos = xpos + this.get('xpos') ,\n            currentYpos = ypos + this.get('ypos'),\n            isSubPlan = (this.get('Parent Relationship') === \"SubPlan\");\n\n        // Draw the subplan rectangle\n        if (isSubPlan) {\n          g.rect(\n            currentXpos - this.get('width') + pWIDTH + xMargin,\n            currentYpos - yMargin,\n            this.get('width') - xMargin,\n            this.get('height'), 5\n          ).attr({\n              stroke: '#444444',\n              'strokeWidth': 1.2,\n              fill: 'gray',\n              fillOpacity: 0.2\n          });\n\n          //provide subplan name\n          var text = g.text(\n            currentXpos  + pWIDTH - ( this.get('width') / 2) - xMargin,\n            currentYpos + pHEIGHT  - (this.get('height') / 2) - yMargin,\n            this.get('Subplan Name')\n          ).attr({\n            fontSize: TXT_SIZE, \"text-anchor\":\"start\",\n            fill: 'red'\n          });\n        }\n\n        // Draw the actual image for current node\n        var image = g.image(\n            pgExplain.prefix + this.get('image'),\n            currentXpos + (pWIDTH - IMAGE_WIDTH) / 2,\n            currentYpos + (pHEIGHT - IMAGE_HEIGHT) / 2,\n            IMAGE_WIDTH,\n            IMAGE_HEIGHT\n        );\n\n        // Draw tooltip\n        var image_data = this.toJSON();\n        image.mouseover(function(evt){\n\n          // Empty the tooltip content if it has any and add new data\n          toolTipContainer.empty();\n          var tooltip = $('<table></table>',{\n                           class: \"pgadmin-tooltip-table\"\n                        }).appendTo(toolTipContainer);\n          _.each(image_data, function(value,key) {\n            if(key !== 'image' && key !== 'Plans' &&\n               key !== 'level' && key !== 'image' &&\n               key !== 'image_text' && key !== 'xpos' &&\n               key !== 'ypos' && key !== 'width' &&\n               key !== 'height') {\n              tooltip.append( '<tr><td class=\"label explain-tooltip\">' + key + '</td><td class=\"label explain-tooltip-val\">' + value + '</td></tr>' );\n            };\n          });\n\n          var zoomFactor = graphContainer.data('zoom-factor');\n\n          // Calculate co-ordinates for tooltip\n          var toolTipX = ((currentXpos + pWIDTH) * zoomFactor - graphContainer.scrollLeft());\n          var toolTipY = ((currentYpos + pHEIGHT) * zoomFactor - graphContainer.scrollTop());\n\n          // Recalculate x.y if tooltip is going out of screen\n          if(graphContainer.width() < (toolTipX + toolTipContainer[0].clientWidth))\n            toolTipX -= (toolTipContainer[0].clientWidth + (pWIDTH*zoomFactor));\n          //if(document.children[0].clientHeight < (toolTipY + toolTipContainer[0].clientHeight))\n          if(graphContainer.height() < (toolTipY + toolTipContainer[0].clientHeight))\n            toolTipY -= (toolTipContainer[0].clientHeight + ((pHEIGHT/2)*zoomFactor));\n\n          toolTipX = toolTipX < 0 ? 0 : (toolTipX);\n          toolTipY = toolTipY < 0 ? 0 : (toolTipY);\n\n          // Show toolTip at respective x,y coordinates\n          toolTipContainer.css({'opacity': '0.8'});\n          toolTipContainer.css('left', toolTipX);\n          toolTipContainer.css( 'top', toolTipY);\n        });\n\n        // Remove tooltip when mouse is out from node's area\n        image.mouseout(function() {\n          toolTipContainer.empty();\n          toolTipContainer.css({'opacity': '0'});\n          toolTipContainer.css('left', 0);\n          toolTipContainer.css( 'top', 0);\n        });\n\n        // Draw text below the node\n        var node_label = (this.get('Schema') == undefined ?\n                            this.get('image_text') :\n                            this.get('Schema')+\".\"+this.get('image_text'));\n        var label = g.g();\n        g.multitext(\n          currentXpos + (pWIDTH / 2),\n          currentYpos + pHEIGHT - TXT_ALLIGN,\n          node_label,\n          150,\n          {\"font-size\": TXT_SIZE ,\"text-anchor\":\"middle\"}\n        );\n\n        // Draw Arrow to parent only its not the first node\n        if (!_.isUndefined(pYpos)) {\n            var startx = currentXpos + pWIDTH;\n            var starty = currentYpos + (pHEIGHT / 2);\n            var endx = pXpos - ARROW_WIDTH;\n            var endy = pYpos + (pHEIGHT / 2);\n            var start_cost = this.get(\"Startup Cost\"),\n                total_cost = this.get(\"Total Cost\");\n            var arrow_size = DEFAULT_ARROW_SIZE;\n            // Calculate arrow width according to cost of a particular plan\n            if(start_cost != undefined && total_cost != undefined) {\n              var arrow_size = Math.round(Math.log((start_cost+total_cost)/2 + start_cost));\n              arrow_size = arrow_size < 1 ? 1 : arrow_size > 10 ? 10 : arrow_size;\n            }\n\n\n            var arrow_view_box = [0, 0, 2*ARROW_WIDTH, 2*ARROW_HEIGHT];\n            var opts = {stroke: \"#000000\", strokeWidth: arrow_size + 1},\n                subplanOpts = {stroke: \"#866486\", strokeWidth: arrow_size + 1},\n                arrowOpts = {viewBox: arrow_view_box.join(\" \")};\n\n            // Draw an arrow from current node to its parent\n            this.drawPolyLine(\n              g, startx, starty, endx, endy,\n              isSubPlan ? subplanOpts : opts, arrowOpts\n            );\n        }\n\n        var plans = this.get('Plans');\n\n        // Draw nodes for current plan's children\n        _.each(plans, function(p) {\n            p.draw(s, xpos, ypos, currentXpos, currentYpos, graphContainer, toolTipContainer);\n        });\n    }\n});\n\n// Main backbone model to store JSON object\nvar MainPlanModel = Backbone.Model.extend({\n    defaults: {\n        \"Plan\": undefined,\n        xpos: 0,\n        ypos: 0,\n    },\n    initialize: function() {\n        this.set(\"Plan\", new PlanModel());\n    },\n\n    // Parse the JSON data and fetch its children plans\n    parse: function(data) {\n        if (data && 'Plan' in data) {\n           var plan = this.get(\"Plan\");\n           plan.set(\n             plan.parse(\n               _.extend(\n                 data['Plan'], {\n                   xpos: 0,\n                   ypos: 0\n                 })));\n\n           data['xpos'] = 0;\n           data['ypos'] = 0;\n           data['width'] = plan.get('width') + (xMargin * 2);\n           data['height'] = plan.get('height') + (yMargin * 2);\n\n           delete data['Plan'];\n        }\n\n      return data;\n    },\n    toJSON: function() {\n      var res = Backbone.Model.prototype.toJSON.apply(this, arguments);\n\n      if (res.Plan) {\n        res.Plan = res.Plan.toJSON();\n      }\n\n      return res;\n    },\n    draw: function(s, xpos, ypos, graphContainer, toolTipContainer) {\n        var g = s.g();\n\n        //draw the border\n        g.rect(\n\t        0, 0, this.get('width') - 10, this.get('height') - 10, 5\n\t    ).attr({\n            fill: '#FFF'\n        });\n\n        //Fetch total width, height\n        TOTAL_WIDTH = this.get('width');\n        TOTAL_HEIGHT = this.get('height');\n        var plan = this.get('Plan');\n\n        //Draw explain graph\n        plan.draw(g, xpos, ypos, undefined, undefined, graphContainer, toolTipContainer);\n    }\n});\n\n// Parse and draw full graphical explain\n_.extend(\n    pgExplain, {\n        // Assumption container is a jQuery object\n        DrawJSONPlan: function(container, plan) {\n          var my_plans = [];\n          container.empty();\n          var curr_zoom_factor = 1.0;\n\n          var zoomArea =$('<div></div>', {\n                class: 'pg-explain-zoom-area btn-group',\n                role: 'group'\n                }).appendTo(container),\n              zoomInBtn = $('<button></button>', {\n                class: 'btn pg-explain-zoom-btn badge',\n                title: 'Zoom in'\n                }).appendTo(zoomArea).append(\n                  $('<i></i>',{\n                    class: 'fa fa-search-plus'\n                  })),\n              zoomToNormal = $('<button></button>', {\n                class: 'btn pg-explain-zoom-btn badge',\n                title: 'Zoom to original'\n                }).appendTo(zoomArea).append(\n                  $('<i></i>',{\n                    class: 'fa fa-arrows-alt'\n                  })),\n              zoomOutBtn = $('<button></button>', {\n                class: 'btn pg-explain-zoom-btn badge',\n                title: 'Zoom out'\n                }).appendTo(zoomArea).append(\n                  $('<i></i>', {\n                    class: 'fa fa-search-minus'\n                  }));\n\n          // Main div to be drawn all images on\n          var planDiv = $('<div></div>',\n                           {class: \"pgadmin-explain-container\"}\n                         ).appendTo(container),\n              // Div to draw tool-tip on\n              toolTip = $('<div></div>',\n                           {id: \"toolTip\",\n                           class: \"pgadmin-explain-tooltip\"\n                           }\n                         ).appendTo(container);\n          toolTip.empty();\n          planDiv.data('zoom-factor', curr_zoom_factor);\n\n          var w = 0, h = 0,\n              x = xMargin, h = yMargin;\n\n          _.each(plan, function(p) {\n            var main_plan = new MainPlanModel();\n\n            // Parse JSON data to backbone model\n            main_plan.set(main_plan.parse(p));\n            w = main_plan.get('width');\n            h = main_plan.get('height');\n\n            var s = Snap(w, h),\n                $svg = $(s.node).detach();\n            planDiv.append($svg);\n            main_plan.draw(s, w - xMargin, yMargin, planDiv, toolTip);\n\n            var initPanelWidth = planDiv.width(),\n                initPanelHeight = planDiv.height();\n\n             /*\n              * Scale graph in case its width is bigger than panel width\n              * in which the graph is displayed\n              */\n            if(initPanelWidth < w) {\n              var width_ratio = initPanelWidth / w;\n\n              curr_zoom_factor = width_ratio;\n              curr_zoom_factor = curr_zoom_factor < MIN_ZOOM_FACTOR ? MIN_ZOOM_FACTOR : curr_zoom_factor;\n              curr_zoom_factor = curr_zoom_factor > INIT_ZOOM_FACTOR ? INIT_ZOOM_FACTOR : curr_zoom_factor;\n\n              var zoomInMatrix = new Snap.matrix();\n              zoomInMatrix.scale(curr_zoom_factor, curr_zoom_factor);\n\n              $svg.find('g').first().attr({transform: zoomInMatrix});\n              $svg.attr({'width': w * curr_zoom_factor, 'height': h * curr_zoom_factor});\n              planDiv.data('zoom-factor', curr_zoom_factor);\n            }\n\n            zoomInBtn.on('click', function(e){\n              curr_zoom_factor = ((curr_zoom_factor + ZOOM_RATIO) > MAX_ZOOM_FACTOR) ? MAX_ZOOM_FACTOR : (curr_zoom_factor + ZOOM_RATIO);\n              var zoomInMatrix = new Snap.matrix();\n              zoomInMatrix.scale(curr_zoom_factor, curr_zoom_factor);\n\n              $svg.find('g').first().attr({transform: zoomInMatrix});\n              $svg.attr({'width': w * curr_zoom_factor, 'height': h * curr_zoom_factor});\n              planDiv.data('zoom-factor', curr_zoom_factor);\n              zoomInBtn.blur();\n            });\n\n            zoomOutBtn.on('click', function(e) {\n              curr_zoom_factor = ((curr_zoom_factor - ZOOM_RATIO) < MIN_ZOOM_FACTOR) ? MIN_ZOOM_FACTOR : (curr_zoom_factor - ZOOM_RATIO);\n              var zoomInMatrix = new Snap.matrix();\n              zoomInMatrix.scale(curr_zoom_factor, curr_zoom_factor);\n\n              $svg.find('g').first().attr({transform: zoomInMatrix});\n              $svg.attr({'width': w * curr_zoom_factor, 'height': h * curr_zoom_factor});\n              planDiv.data('zoom-factor', curr_zoom_factor);\n              zoomOutBtn.blur();\n            });\n\n            zoomToNormal.on('click', function(e) {\n              curr_zoom_factor = INIT_ZOOM_FACTOR;\n              var zoomInMatrix = new Snap.matrix();\n              zoomInMatrix.scale(curr_zoom_factor, curr_zoom_factor);\n\n              $svg.find('g').first().attr({transform: zoomInMatrix});\n              $svg.attr({'width': w * curr_zoom_factor, 'height': h * curr_zoom_factor});\n              planDiv.data('zoom-factor', curr_zoom_factor);\n              zoomToNormal.blur();\n            });\n          });\n\n        }\n    });\n\n    return pgExplain;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/misc/static/explain/js/explain.js","define(['jquery',\n  'sources/gettext',\n  'sources/selection/column_selector',\n  'sources/selection/row_selector',\n  'sources/selection/range_selection_helper',\n  'sources/url_for',\n], function ($, gettext, ColumnSelector, RowSelector, RangeSelectionHelper, url_for) {\n  var GridSelector = function (columnDefinitions) {\n    var Slick = window.Slick,\n      rowSelector = new RowSelector(columnDefinitions),\n      columnSelector = new ColumnSelector(columnDefinitions),\n      onBeforeGridSelectAll = new Slick.Event(),\n      onGridSelectAll = new Slick.Event(),\n      onBeforeGridColumnSelectAll = columnSelector.onBeforeColumnSelectAll,\n      onGridColumnSelectAll = columnSelector.onColumnSelectAll;\n\n    var init = function (grid) {\n      this.grid = grid;\n      grid.onHeaderClick.subscribe(function (event, eventArguments) {\n        if (eventArguments.column.selectAllOnClick && !$(event.target).hasClass('slick-resizable-handle')) {\n          toggleSelectAll(grid, event, eventArguments);\n        }\n      });\n\n      grid.getSelectionModel().onSelectedRangesChanged\n        .subscribe(handleSelectedRangesChanged.bind(null, grid));\n\n      grid.registerPlugin(rowSelector);\n      grid.registerPlugin(columnSelector);\n\n      onGridSelectAll.subscribe(function(e, args) {\n        RangeSelectionHelper.selectAll(args.grid);\n      });\n    };\n\n    var getColumnDefinitions = function (columnDefinitions) {\n      columnDefinitions = columnSelector.getColumnDefinitions(columnDefinitions);\n      columnDefinitions = rowSelector.getColumnDefinitions(columnDefinitions);\n\n      columnDefinitions[0].selectAllOnClick = true;\n      columnDefinitions[0].name = '<span data-id=\"select-all\" ' +\n          'title=\"' + gettext('Select/Deselect All') + '\">' +\n          '<br>' +\n          columnDefinitions[0].name +\n          '<img class=\"select-all-icon\" src=\"' + url_for('static', {'filename': 'img/select-all-icon.png'}) + '\"></img>';\n      '</span>';\n      return columnDefinitions;\n    };\n\n    function handleSelectedRangesChanged(grid) {\n      if(RangeSelectionHelper.isEntireGridSelected(grid)) {\n        $('[data-id=\\'select-all\\']').addClass('selected');\n      } else {\n        $('[data-id=\\'select-all\\']').removeClass('selected');\n      }\n    }\n\n    function toggleSelectAll(grid, event, eventArguments) {\n      if (RangeSelectionHelper.isEntireGridSelected(grid)) {\n        selectNone(grid);\n      } else {\n        onBeforeGridSelectAll.notify(eventArguments, event);\n        if (!(event.isPropagationStopped() || event.isImmediatePropagationStopped())) {\n          RangeSelectionHelper.selectAll(grid);\n        }\n      }\n    }\n\n    function selectNone(grid) {\n      var selectionModel = grid.getSelectionModel();\n      selectionModel.setSelectedRanges([]);\n    }\n\n    $.extend(this, {\n      'init': init,\n      'getColumnDefinitions': getColumnDefinitions,\n      'onBeforeGridSelectAll': onBeforeGridSelectAll,\n      'onGridSelectAll': onGridSelectAll,\n      'onBeforeGridColumnSelectAll': onBeforeGridColumnSelectAll,\n      'onGridColumnSelectAll': onGridColumnSelectAll,\n    });\n  };\n\n  return GridSelector;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/selection/grid_selector.js","define([\n  'jquery',\n  'sources/selection/range_selection_helper',\n  'slickgrid',\n], function ($, RangeSelectionHelper) {\n  var ColumnSelector = function () {\n    var Slick = window.Slick,\n      gridEventBus = new Slick.EventHandler(),\n      onBeforeColumnSelectAll = new Slick.Event(),\n      onColumnSelectAll = new Slick.Event();\n\n    var init = function (grid) {\n      gridEventBus.subscribe(grid.onHeaderClick, handleHeaderClick.bind(null, grid));\n      grid.getSelectionModel().onSelectedRangesChanged\n        .subscribe(handleSelectedRangesChanged.bind(null, grid));\n      onColumnSelectAll.subscribe(function(e, args) {\n        updateRanges(args.grid, args.column.id);\n      });\n    };\n\n    var handleHeaderClick = function (grid, event, args) {\n      var columnDefinition = args.column;\n\n      grid.focus();\n\n      if (isColumnSelectable(columnDefinition)) {\n        var $columnHeader = $(event.target);\n        if (hasClickedChildOfColumnHeader(event)) {\n          if ($(event.target).hasClass('slick-resizable-handle')) {\n            return;\n          }\n          $columnHeader = $(event.target).parents('.slick-header-column');\n        }\n        $columnHeader.toggleClass('selected');\n\n        if ($columnHeader.hasClass('selected')) {\n          onBeforeColumnSelectAll.notify(args, event);\n        }\n\n        if (!(event.isPropagationStopped() || event.isImmediatePropagationStopped())) {\n          updateRanges(grid, columnDefinition.id);\n        }\n      }\n    };\n\n    var handleSelectedRangesChanged = function (grid, event, selectedRanges) {\n      $('.slick-header-column').each(function (index, columnHeader) {\n        var $spanHeaderColumn = $(columnHeader).find('[data-cell-type=\"column-header-row\"]');\n        var columnIndex = grid.getColumnIndex($spanHeaderColumn.data('column-id'));\n\n        if (isColumnSelected(grid, selectedRanges, columnIndex)) {\n          $(columnHeader).addClass('selected');\n        } else {\n          $(columnHeader).removeClass('selected');\n        }\n      });\n    };\n\n    var updateRanges = function (grid, columnId) {\n      var selectionModel = grid.getSelectionModel();\n      var ranges = selectionModel.getSelectedRanges();\n\n      var columnIndex = grid.getColumnIndex(columnId);\n\n      var columnRange = RangeSelectionHelper.rangeForColumn(grid, columnIndex);\n      var newRanges;\n      if (RangeSelectionHelper.isRangeSelected(ranges, columnRange)) {\n        newRanges = RangeSelectionHelper.removeRange(ranges, columnRange);\n      } else {\n        if (RangeSelectionHelper.areAllRangesSingleColumns(ranges, grid)) {\n          newRanges = RangeSelectionHelper.addRange(ranges, columnRange);\n        } else {\n          newRanges = [columnRange];\n        }\n      }\n      selectionModel.setSelectedRanges(newRanges);\n    };\n\n    var hasClickedChildOfColumnHeader = function (event) {\n      return !$(event.target).hasClass('slick-header-column');\n    };\n\n    var isColumnSelectable = function (columnDefinition) {\n      return columnDefinition.selectable !== false;\n    };\n\n    var isColumnSelected = function (grid, selectedRanges, columnIndex) {\n      var allRangesAreRows = RangeSelectionHelper.areAllRangesCompleteRows(grid, selectedRanges);\n      return isAnyCellSelectedInColumn(grid, selectedRanges, columnIndex) && !allRangesAreRows;\n    };\n\n    var isAnyCellSelectedInColumn = function (grid, selectedRanges, columnIndex) {\n      var isStillSelected = RangeSelectionHelper.isRangeEntirelyWithinSelectedRanges(selectedRanges,\n        RangeSelectionHelper.rangeForColumn(grid, columnIndex));\n      var cellSelectedInColumn = RangeSelectionHelper.isAnyCellOfColumnSelected(selectedRanges, columnIndex);\n\n      return isStillSelected || cellSelectedInColumn;\n    };\n\n    var getColumnDefinitions = function (columnDefinitions) {\n      return _.map(columnDefinitions, function (columnDefinition) {\n        if (isColumnSelectable(columnDefinition)) {\n          var name =\n            '<span data-cell-type=\\'column-header-row\\' ' +\n            '       data-test=\\'output-column-header\\'' +\n            '       data-column-id=\\'' + columnDefinition.id + '\\'>' +\n            '  <span class=\\'column-description\\'>' +\n            '    <span class=\\'column-name\\'>' + columnDefinition.display_name + '</span>' +\n            '    <span class=\\'column-type\\'>' + columnDefinition.column_type + '</span>' +\n            '  </span>' +\n            '</span>';\n          return _.extend(columnDefinition, {\n            name: name,\n          });\n        } else {\n          return columnDefinition;\n        }\n      });\n    };\n\n    $.extend(this, {\n      'init': init,\n      'getColumnDefinitions': getColumnDefinitions,\n      'onBeforeColumnSelectAll': onBeforeColumnSelectAll,\n      'onColumnSelectAll': onColumnSelectAll,\n    });\n  };\n  return ColumnSelector;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/selection/column_selector.js","define([\n  'jquery',\n  'sources/selection/range_selection_helper',\n  'slickgrid',\n], function ($, RangeSelectionHelper) {\n  var RowSelector = function () {\n    var Slick = window.Slick;\n\n    var gridEventBus = new Slick.EventHandler();\n\n    var init = function (grid) {\n      grid.getSelectionModel().onSelectedRangesChanged\n        .subscribe(handleSelectedRangesChanged.bind(null, grid));\n      gridEventBus\n        .subscribe(grid.onClick, handleClick.bind(null, grid));\n    };\n\n    var handleClick = function (grid, event, args) {\n      if (grid.getColumns()[args.cell].id === 'row-header-column') {\n        var $rowHeaderSpan = $(event.target);\n\n        if ($rowHeaderSpan.data('cell-type') != 'row-header-selector') {\n          $rowHeaderSpan = $(event.target).find('[data-cell-type=\"row-header-selector\"]');\n        }\n\n        $rowHeaderSpan.parent().toggleClass('selected');\n        updateRanges(grid, args.row);\n      }\n    };\n\n    var handleSelectedRangesChanged = function (grid, event, selectedRanges) {\n      $('[data-cell-type=\"row-header-selector\"]').each(function (index, rowHeaderSpan) {\n        var $rowHeaderSpan = $(rowHeaderSpan);\n        var row = parseInt($rowHeaderSpan.data('row'));\n\n        if (isRowSelected(grid, selectedRanges, row)) {\n          $rowHeaderSpan.parent().addClass('selected');\n        } else {\n          $rowHeaderSpan.parent().removeClass('selected');\n        }\n      });\n    };\n\n    var updateRanges = function (grid, rowId) {\n      var selectionModel = grid.getSelectionModel();\n      var ranges = selectionModel.getSelectedRanges();\n\n      var rowRange = RangeSelectionHelper.rangeForRow(grid, rowId);\n\n      var newRanges;\n      if (RangeSelectionHelper.isRangeSelected(ranges, rowRange)) {\n        newRanges = RangeSelectionHelper.removeRange(ranges, rowRange);\n      } else {\n        if (RangeSelectionHelper.areAllRangesSingleRows(ranges, grid)) {\n          newRanges = RangeSelectionHelper.addRange(ranges, rowRange);\n        } else {\n          newRanges = [rowRange];\n        }\n      }\n      selectionModel.setSelectedRanges(newRanges);\n    };\n\n    var isAnyCellSelectedInRow = function (grid, selectedRanges, row) {\n      var isStillSelected = RangeSelectionHelper.isRangeEntirelyWithinSelectedRanges(selectedRanges,\n        RangeSelectionHelper.rangeForRow(grid, row));\n      var cellSelectedInRow = RangeSelectionHelper.isAnyCellOfRowSelected(selectedRanges, row);\n\n      return isStillSelected || cellSelectedInRow;\n    };\n\n    var isRowSelected = function (grid, selectedRanges, row) {\n      var allRangesAreColumns = RangeSelectionHelper.areAllRangesCompleteColumns(grid, selectedRanges);\n      return isAnyCellSelectedInRow(grid, selectedRanges, row) && !allRangesAreColumns;\n    };\n\n    var getColumnDefinitions = function (columnDefinitions) {\n      columnDefinitions.unshift({\n        id: 'row-header-column',\n        name: '',\n        selectable: false,\n        focusable: false,\n        formatter: function (rowIndex) {\n          return '<span ' +\n            'data-row=\"' + rowIndex + '\" ' +\n            'data-cell-type=\"row-header-selector\">' +\n            (rowIndex+1) + '</span>';\n        },\n        width: 30,\n      });\n      return columnDefinitions;\n    };\n\n    $.extend(this, {\n      'init': init,\n      'getColumnDefinitions': getColumnDefinitions,\n    });\n  };\n\n  return RowSelector;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/selection/row_selector.js","define([\n  'jquery',\n  'sources/selection/range_selection_helper',\n], function ($, RangeSelectionHelper) {\n\n  var ActiveCellCapture = function () {\n    var KEY_RIGHT = 39;\n    var KEY_LEFT = 37;\n    var KEY_UP = 38;\n    var KEY_DOWN = 40;\n\n    var bypassDefaultActiveCellRangeChange = false;\n    var isColumnsResized = false;\n    var isMouseInHeader = false;\n    var grid;\n\n    var init = function (slickGrid) {\n      grid = slickGrid;\n      grid.onDragEnd.subscribe(onDragEndHandler);\n      grid.onHeaderClick.subscribe(onHeaderClickHandler);\n      grid.onClick.subscribe(onClickHandler);\n      grid.onActiveCellChanged.subscribe(onActiveCellChangedHandler);\n      grid.onKeyDown.subscribe(onKeyDownHandler);\n      grid.onHeaderMouseEnter.subscribe(onHeaderMouseEnterHandler);\n      grid.onHeaderMouseLeave.subscribe(onHeaderMouseLeaveHandler);\n      grid.onColumnsResized.subscribe(onColumnsResizedHandler);\n    };\n\n    var destroy = function () {\n      grid.onDragEnd.unsubscribe(onDragEndHandler);\n      grid.onHeaderClick.unsubscribe(onHeaderClickHandler);\n      grid.onActiveCellChanged.unsubscribe(onActiveCellChangedHandler);\n      grid.onKeyDown.unsubscribe(onKeyDownHandler);\n      grid.onHeaderMouseEnter.unsubscribe(onHeaderMouseEnterHandler);\n      grid.onHeaderMouseLeave.unsubscribe(onHeaderMouseLeaveHandler);\n      grid.onColumnsResized.unsubscribe(onColumnsResizedHandler);\n    };\n\n    $.extend(this, {\n      'init': init,\n      'destroy': destroy,\n    });\n\n    function onDragEndHandler(event, dragData) {\n      bypassDefaultActiveCellRangeChange = true;\n      grid.setActiveCell(dragData.range.start.row, dragData.range.start.cell);\n    }\n\n    function onHeaderClickHandler(event, args) {\n      if (isColumnsResizedAndCurrentlyInHeader()) {\n        isColumnsResized = false;\n        event.stopPropagation();\n        return;\n      }\n\n      bypassDefaultActiveCellRangeChange = true;\n\n      var clickedColumn = args.column.pos + 1;\n      if (isClickingLastClickedHeader(0, clickedColumn)) {\n        if (isSingleRangeSelected()) {\n          grid.resetActiveCell();\n        } else {\n          grid.setActiveCell(0, retrievePreviousSelectedRange().fromCell);\n        }\n      } else if (!isClickingInSelectedColumn(clickedColumn)) {\n        grid.setActiveCell(0, clickedColumn);\n      }\n    }\n\n    function isEditableNewRow(row) {\n      return row >= grid.getDataLength();\n    }\n\n    function onHeaderMouseLeaveHandler() {\n      isMouseInHeader = false;\n    }\n\n    function onHeaderMouseEnterHandler() {\n      isMouseInHeader = true;\n      isColumnsResized = false;\n    }\n\n    function onColumnsResizedHandler() {\n      isColumnsResized = true;\n    }\n\n    function onClickHandler(event, args) {\n      if (isRowHeader(args.cell)) {\n        bypassDefaultActiveCellRangeChange = true;\n        var rowClicked = args.row;\n\n        if (isEditableNewRow(rowClicked)) {\n          return;\n        }\n\n        if (isClickingLastClickedHeader(rowClicked, 1)) {\n          if (isSingleRangeSelected()) {\n            grid.resetActiveCell();\n          } else {\n            grid.setActiveCell(retrievePreviousSelectedRange().fromRow, 1);\n          }\n        } else if (!isClickingInSelectedRow(rowClicked)) {\n          grid.setActiveCell(rowClicked, 1);\n        }\n      }\n    }\n\n    function onActiveCellChangedHandler(event) {\n      if (bypassDefaultActiveCellRangeChange) {\n        bypassDefaultActiveCellRangeChange = false;\n        event.stopPropagation();\n      }\n    }\n\n    function onKeyDownHandler(event) {\n      if (hasActiveCell() && isShiftArrowKey(event)) {\n        selectOnlyRangeOfActiveCell();\n      }\n    }\n\n    function isColumnsResizedAndCurrentlyInHeader() {\n      return isMouseInHeader && isColumnsResized;\n    }\n\n    function isClickingLastClickedHeader(clickedRow, clickedColumn) {\n      return hasActiveCell() && grid.getActiveCell().row === clickedRow && grid.getActiveCell().cell === clickedColumn;\n    }\n\n    function isClickingInSelectedColumn(clickedColumn) {\n      var column = RangeSelectionHelper.rangeForColumn(grid, clickedColumn);\n      var cellSelectionModel = grid.getSelectionModel();\n      var ranges = cellSelectionModel.getSelectedRanges();\n      return RangeSelectionHelper.isRangeSelected(ranges, column);\n    }\n\n    function isRowHeader(cellClicked) {\n      return grid.getColumns()[cellClicked].id === 'row-header-column';\n    }\n\n    function isClickingInSelectedRow(rowClicked) {\n      var row = RangeSelectionHelper.rangeForRow(grid, rowClicked);\n      var cellSelectionModel = grid.getSelectionModel();\n      var ranges = cellSelectionModel.getSelectedRanges();\n      return RangeSelectionHelper.isRangeSelected(ranges, row);\n    }\n\n    function isSingleRangeSelected() {\n      var cellSelectionModel = grid.getSelectionModel();\n      var ranges = cellSelectionModel.getSelectedRanges();\n      return ranges.length === 1;\n    }\n\n    function retrievePreviousSelectedRange() {\n      var cellSelectionModel = grid.getSelectionModel();\n      var ranges = cellSelectionModel.getSelectedRanges();\n      return ranges[ranges.length - 2];\n    }\n\n    function isArrowKey(event) {\n      return event.which === KEY_RIGHT\n        || event.which === KEY_UP\n        || event.which === KEY_LEFT\n        || event.which === KEY_DOWN;\n    }\n\n    function isModifiedByShiftOnly(event) {\n      return event.shiftKey\n        && !event.ctrlKey\n        && !event.altKey;\n    }\n\n    function isShiftArrowKey(event) {\n      return isModifiedByShiftOnly(event) && isArrowKey(event);\n    }\n\n    function hasActiveCell() {\n      return !!grid.getActiveCell();\n    }\n\n    function selectOnlyRangeOfActiveCell() {\n      var cellSelectionModel = grid.getSelectionModel();\n      var ranges = cellSelectionModel.getSelectedRanges();\n\n      if (ranges.length > 1) {\n        cellSelectionModel.setSelectedRanges([ranges.pop()]);\n      }\n    }\n  };\n\n  return ActiveCellCapture;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/selection/active_cell_capture.js","define(['sources/selection/range_selection_helper'],\nfunction (RangeSelectionHelper) {\n  return {\n    getUnion: function (allRanges) {\n      if (_.isEmpty(allRanges)) {\n        return [];\n      }\n\n      allRanges.sort(firstElementNumberComparator);\n      var unionedRanges = [allRanges[0]];\n\n      allRanges.forEach(function (range) {\n        var maxBeginningOfRange = _.last(unionedRanges);\n        if (isStartInsideRange(range, maxBeginningOfRange)) {\n          if (!isEndInsideRange(range, maxBeginningOfRange)) {\n            maxBeginningOfRange[1] = range[1];\n          }\n        } else {\n          unionedRanges.push(range);\n        }\n      });\n\n      return unionedRanges;\n\n      function firstElementNumberComparator(a, b) {\n        return a[0] - b[0];\n      }\n\n      function isStartInsideRange(range, surroundingRange) {\n        return range[0] <= surroundingRange[1] + 1;\n      }\n\n      function isEndInsideRange(range, surroundingRange) {\n        return range[1] <= surroundingRange[1];\n      }\n    },\n\n    mapDimensionBoundaryUnion: function (unionedDimensionBoundaries, iteratee) {\n      var mapResult = [];\n      unionedDimensionBoundaries.forEach(function (subrange) {\n        for (var index = subrange[0]; index <= subrange[1]; index += 1) {\n          mapResult.push(iteratee(index));\n        }\n      });\n      return mapResult;\n    },\n\n    mapOver2DArray: function (rowRangeBounds, colRangeBounds, processCell, rowCollector) {\n      var unionedRowRanges = this.getUnion(rowRangeBounds);\n      var unionedColRanges = this.getUnion(colRangeBounds);\n\n      return this.mapDimensionBoundaryUnion(unionedRowRanges, function (rowId) {\n        var rowData = this.mapDimensionBoundaryUnion(unionedColRanges, function (colId) {\n          return processCell(rowId, colId);\n        });\n        return rowCollector(rowData);\n      }.bind(this));\n    },\n\n    rangesToCsv: function (data, columnDefinitions, selectedRanges) {\n\n      var rowRangeBounds = selectedRanges.map(function (range) {\n        return [range.fromRow, range.toRow];\n      });\n      var colRangeBounds = selectedRanges.map(function (range) {\n        return [range.fromCell, range.toCell];\n      });\n\n      if (!RangeSelectionHelper.isFirstColumnData(columnDefinitions)) {\n        colRangeBounds = this.removeFirstColumn(colRangeBounds);\n      }\n\n      var csvRows = this.mapOver2DArray(rowRangeBounds, colRangeBounds, this.csvCell.bind(this, data, columnDefinitions), function (rowData) {\n        return rowData.join(',');\n      });\n\n      return csvRows.join('\\n');\n    },\n\n    removeFirstColumn: function (colRangeBounds) {\n      var unionedColRanges = this.getUnion(colRangeBounds);\n\n      if(unionedColRanges.length == 0) {\n        return [];\n      }\n\n      var firstSubrangeStartsAt0 = function () {\n        return unionedColRanges[0][0] == 0;\n      };\n\n      function firstSubrangeIsJustFirstColumn() {\n        return unionedColRanges[0][1] == 0;\n      }\n\n      if (firstSubrangeStartsAt0()) {\n        if (firstSubrangeIsJustFirstColumn()) {\n          unionedColRanges.shift();\n        } else {\n          unionedColRanges[0][0] = 1;\n        }\n      }\n      return unionedColRanges;\n    },\n\n    csvCell: function (data, columnDefinitions, rowId, colId) {\n      var val = data[rowId][columnDefinitions[colId].field];\n\n      if (val && _.isObject(val)) {\n        val = '\\'' + JSON.stringify(val) + '\\'';\n      } else if (val && typeof val != 'number' && typeof val != 'boolean') {\n        val = '\\'' + val.toString() + '\\'';\n      } else if (_.isNull(val) || _.isUndefined(val)) {\n        val = '';\n      }\n      return val;\n    },\n  };\n});\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/selection/range_boundary_navigator.js","define([\n  'jquery',\n  'underscore',\n  'sources/selection/range_selection_helper',\n\n  'slickgrid',\n], function ($, _, RangeSelectionHelper) {\n  var XCellSelectionModel = function (options) {\n\n    var KEY_ARROW_RIGHT = 39;\n    var KEY_ARROW_LEFT = 37;\n    var KEY_ARROW_UP = 38;\n    var KEY_ARROW_DOWN = 40;\n\n    var Slick = window.Slick;\n    var _grid;\n    var _ranges = [];\n    var _self = this;\n    var _selector = new Slick.CellRangeSelector({\n      selectionCss: {\n        border: '2px solid black',\n      },\n      offset: {\n        top: 0,\n        left: -1,\n        height: 2,\n        width: 1,\n      },\n    });\n    var _options;\n    var _defaults = {\n      selectActiveCell: true,\n    };\n\n\n    function init(grid) {\n      _options = $.extend(true, {}, _defaults, options);\n      _grid = grid;\n      _grid.onActiveCellChanged.subscribe(handleActiveCellChange);\n      _grid.onKeyDown.subscribe(handleKeyDown);\n      grid.registerPlugin(_selector);\n      _selector.onCellRangeSelected.subscribe(handleCellRangeSelected);\n      _selector.onBeforeCellRangeSelected.subscribe(handleBeforeCellRangeSelected);\n      $(window.parent).mouseup(handleWindowMouseUp);\n    }\n\n    function destroy() {\n      _grid.onActiveCellChanged.unsubscribe(handleActiveCellChange);\n      _grid.onKeyDown.unsubscribe(handleKeyDown);\n      _selector.onCellRangeSelected.unsubscribe(handleCellRangeSelected);\n      _selector.onBeforeCellRangeSelected.unsubscribe(handleBeforeCellRangeSelected);\n      _grid.unregisterPlugin(_selector);\n      $(window.parent).off('mouseup', handleWindowMouseUp);\n    }\n\n    function removeInvalidRanges(ranges) {\n      var result = [];\n\n      for (var i = 0; i < ranges.length; i++) {\n        var r = ranges[i];\n        if (_grid.canCellBeSelected(r.fromRow, r.fromCell) && _grid.canCellBeSelected(r.toRow, r.toCell)) {\n          result.push(r);\n        }\n      }\n\n      return result;\n    }\n\n    function setSelectedRanges(ranges) {\n      // simple check for: empty selection didn't change, prevent firing onSelectedRangesChanged\n      if ((!_ranges || _ranges.length === 0) && (!ranges || ranges.length === 0)) { return; }\n\n      _ranges = removeInvalidRanges(ranges);\n      _self.onSelectedRangesChanged.notify(_ranges);\n    }\n\n    function getSelectedRanges() {\n      return _ranges;\n    }\n\n    function setSelectedRows(rows) {\n      _ranges = [];\n\n      for(var i = 0 ; i < rows.length ; i++) {\n        _ranges.push(RangeSelectionHelper.rangeForRow(_grid, rows[i]));\n      }\n    }\n\n    function handleBeforeCellRangeSelected(e) {\n      if (_grid.getEditorLock().isActive()) {\n        e.stopPropagation();\n        return false;\n      }\n    }\n\n    function handleCellRangeSelected(e, args) {\n      setSelectedRanges([args.range]);\n    }\n\n    function handleActiveCellChange(e, args) {\n      if (_options.selectActiveCell && args.row != null && args.cell != null) {\n        setSelectedRanges([new Slick.Range(args.row, args.cell)]);\n      }\n    }\n\n    function arrowKeyPressed(event) {\n      return event.which == KEY_ARROW_RIGHT\n        || event.which == KEY_ARROW_LEFT\n        || event.which == KEY_ARROW_UP\n        || event.which == KEY_ARROW_DOWN;\n    }\n\n    function shiftArrowKeyPressed(event) {\n      return event.shiftKey && !event.ctrlKey && !event.altKey &&\n        (arrowKeyPressed(event));\n    }\n\n    function needUpdateRange(newRange) {\n      return removeInvalidRanges([newRange]).length;\n    }\n\n    function handleKeyDown(e) {\n      var ranges;\n      var lastSelectedRange;\n      var anchorActiveCell = _grid.getActiveCell();\n\n      function isKey(key) { return e.which === key; }\n\n      function getKeycode() { return e.which; }\n\n      function shouldScrollToBottommostRow() { return anchorActiveCell.row === newSelectedRange.fromRow; }\n\n      function shouldScrollToRightmostColumn() { return anchorActiveCell.cell === newSelectedRange.fromCell; }\n\n      function getMobileCellFromRange(range, activeCell) {\n        var mobileCell = {};\n\n        mobileCell.row = range.fromRow === activeCell.row ? range.toRow : range.fromRow;\n        mobileCell.cell = range.fromCell === activeCell.cell ? range.toCell : range.fromCell;\n\n        return mobileCell;\n      }\n\n      function getNewRange(rangeCorner, oppositeCorner) {\n        var newFromCell = rangeCorner.cell <= oppositeCorner.cell ? rangeCorner.cell : oppositeCorner.cell;\n        var newToCell = rangeCorner.cell <= oppositeCorner.cell ? oppositeCorner.cell : rangeCorner.cell;\n\n        var newFromRow = rangeCorner.row <= oppositeCorner.row ? rangeCorner.row : oppositeCorner.row;\n        var newToRow = rangeCorner.row <= oppositeCorner.row ? oppositeCorner.row : rangeCorner.row;\n\n        return new Slick.Range(\n          newFromRow,\n          newFromCell,\n          newToRow,\n          newToCell\n        );\n      }\n\n      if (anchorActiveCell && shiftArrowKeyPressed(e)) {\n        ranges = getSelectedRanges();\n        if (!ranges.length) {\n          ranges.push(new Slick.Range(anchorActiveCell.row, anchorActiveCell.cell));\n        }\n\n        // keyboard can work with last range only\n        lastSelectedRange = ranges.pop();\n\n        // can't handle selection out of active cell\n        if (!lastSelectedRange.contains(anchorActiveCell.row, anchorActiveCell.cell)) {\n          lastSelectedRange = new Slick.Range(anchorActiveCell.row, anchorActiveCell.cell);\n        }\n\n        var mobileCell = getMobileCellFromRange(lastSelectedRange, anchorActiveCell);\n\n        switch (getKeycode()) {\n        case KEY_ARROW_LEFT:\n          mobileCell.cell -= 1;\n          break;\n        case KEY_ARROW_RIGHT:\n          mobileCell.cell += 1;\n          break;\n        case KEY_ARROW_UP:\n          mobileCell.row -= 1;\n          break;\n        case KEY_ARROW_DOWN:\n          mobileCell.row += 1;\n          break;\n        }\n\n        var newSelectedRange = getNewRange(anchorActiveCell, mobileCell);\n\n        if (needUpdateRange(newSelectedRange)) {\n          var rowToView = shouldScrollToBottommostRow() ? newSelectedRange.toRow : newSelectedRange.fromRow;\n          var columnToView = shouldScrollToRightmostColumn() ? newSelectedRange.toCell : newSelectedRange.fromCell;\n\n          if (isKey(KEY_ARROW_RIGHT) || isKey(KEY_ARROW_LEFT)) {\n            _grid.scrollColumnIntoView(columnToView);\n          } else if (isKey(KEY_ARROW_UP) || isKey(KEY_ARROW_DOWN)) {\n            _grid.scrollRowIntoView(rowToView);\n          }\n          ranges.push(newSelectedRange);\n        } else {\n          ranges.push(lastSelectedRange);\n        }\n\n        setSelectedRanges(ranges);\n\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    }\n\n    function handleWindowMouseUp() {\n      var selectedRange = _selector.getCurrentRange();\n      if (!_.isUndefined(selectedRange)) {\n        _grid.onDragEnd.notify({range: selectedRange});\n      }\n    }\n\n    $.extend(this, {\n      'getSelectedRanges': getSelectedRanges,\n      'setSelectedRanges': setSelectedRanges,\n      'setSelectedRows': setSelectedRows,\n\n      'init': init,\n      'destroy': destroy,\n\n      'onSelectedRangesChanged': new Slick.Event(),\n    });\n  };\n  return XCellSelectionModel;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/selection/xcell_selection_model.js","/////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////\n\ndefine(\n  [\n    'jquery',\n    'underscore',\n    'sources/selection/range_selection_helper',\n  ],\n  function ($, _, RangeSelectionHelper) {\n    function disableButton(selector) {\n      $(selector).prop('disabled', true);\n    }\n\n    function enableButton(selector) {\n      $(selector).prop('disabled', false);\n    }\n\n    function getRowPrimaryKeyValuesToStage(selectedRows, primaryKeys, dataView, client_primary_key) {\n      return _.reduce(selectedRows, function (primaryKeyValuesToStage, dataGridRowIndex) {\n        var gridRow = dataView.getItem(dataGridRowIndex);\n        if (isRowMissingPrimaryKeys(gridRow, primaryKeys)) {\n          return primaryKeyValuesToStage;\n        }\n        var tempPK = gridRow[client_primary_key];\n        primaryKeyValuesToStage[tempPK] = getSingleRowPrimaryKeyValueToStage(primaryKeys, gridRow);\n        return primaryKeyValuesToStage;\n      }, {});\n    }\n\n    function isRowMissingPrimaryKeys(gridRow, primaryKeys) {\n      if (_.isUndefined(gridRow)) {\n        return true;\n      }\n\n      return !_.isUndefined(\n        _.find(primaryKeys , function (pk) {\n          return _.isUndefined(gridRow[pk]);\n        })\n      );\n    }\n\n    function getSingleRowPrimaryKeyValueToStage(primaryKeys, gridRow) {\n      var rowToStage = {};\n      if (primaryKeys && primaryKeys.length) {\n        _.each(_.keys(gridRow), function (columnNames) {\n          if (_.contains(primaryKeys, columnNames))\n            rowToStage[columnNames] = gridRow[columnNames];\n        });\n      }\n      return rowToStage;\n    }\n\n    function getPrimaryKeysForSelectedRows(self, selectedRows) {\n      var dataView = self.grid.getData();\n      var stagedRows = getRowPrimaryKeyValuesToStage(selectedRows, _.keys(self.keys), dataView, self.client_primary_key);\n      return stagedRows;\n    }\n\n    var setStagedRows = function () {\n      var self = this;\n\n      function setStagedRows(rowsToStage) {\n        self.editor.handler.data_store.staged_rows = rowsToStage;\n      }\n\n      function isEditMode() {\n        return self.editor.handler.can_edit;\n      }\n\n      disableButton('#btn-delete-row');\n      disableButton('#btn-copy-row');\n\n      function areAllSelectionsEntireRows() {\n        return RangeSelectionHelper.areAllRangesCompleteRows(self.grid,\n          self.selection.getSelectedRanges());\n      }\n\n      var selectedRanges = this.selection.getSelectedRanges();\n\n      if (selectedRanges.length > 0) {\n        enableButton('#btn-copy-row');\n      }\n\n      if (areAllSelectionsEntireRows()) {\n        var selectedRows = RangeSelectionHelper.getIndexesOfCompleteRows(this.grid, this.selection.getSelectedRanges());\n        var stagedRows = getPrimaryKeysForSelectedRows(self, selectedRows);\n        setStagedRows(stagedRows);\n        if (_.isEmpty(stagedRows)) {\n          this.selection.setSelectedRows([]);\n        }\n\n        if (isEditMode()) {\n          enableButton('#btn-delete-row');\n        }\n      } else {\n        setStagedRows({});\n      }\n    };\n    return setStagedRows;\n  }\n);\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/selection/set_staged_rows.js","/////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////\n\nimport HistoryCollection from './history_collection';\n\nexport {\n  HistoryCollection,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/history/index.js","/////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////\n\nexport default class HistoryCollection {\n\n  constructor(history_model) {\n    this.historyList = history_model;\n    this.onChange(() => {});\n  }\n\n  length() {\n    return this.historyList.length;\n  }\n\n  add(object) {\n    this.historyList.push(object);\n    this.onChangeHandler(this.historyList);\n  }\n\n  reset() {\n    this.historyList = [];\n    this.onResetHandler(this.historyList);\n  }\n\n  onChange(onChangeHandler) {\n    this.onChangeHandler = onChangeHandler;\n  }\n\n  onReset(onResetHandler) {\n    this.onResetHandler = onResetHandler;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/history/history_collection.js","/////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////\n\n/* eslint-disable react/no-find-dom-node */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport SplitPane from 'react-split-pane';\nimport _ from 'underscore';\n\nimport QueryHistoryDetail from './query_history_detail';\nimport QueryHistoryEntries from './query_history_entries';\nimport Shapes from '../react_shapes';\n\nconst queryEntryListDivStyle = {\n  overflowY: 'auto',\n};\nconst queryDetailDivStyle = {\n  display: 'flex',\n};\n\nexport default class QueryHistory extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [],\n      selectedEntry: 0,\n    };\n\n    this.selectHistoryEntry = this.selectHistoryEntry.bind(this);\n  }\n\n  componentWillMount() {\n    this.setHistory(this.props.historyCollection.historyList);\n    this.selectHistoryEntry(0);\n\n    this.props.historyCollection.onChange((historyList) => {\n      this.setHistory(historyList);\n      this.selectHistoryEntry(0);\n    });\n\n    this.props.historyCollection.onReset(() => {\n      this.setState({\n        history: [],\n        currentHistoryDetail: undefined,\n        selectedEntry: 0,\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.selectHistoryEntry(0);\n  }\n\n  refocus() {\n    if (this.state.history.length > 0) {\n      setTimeout(() => this.retrieveSelectedQuery().parentElement.focus(), 0);\n    }\n  }\n\n  retrieveSelectedQuery() {\n    return ReactDOM.findDOMNode(this)\n      .getElementsByClassName('selected')[0];\n  }\n\n  setHistory(historyList) {\n    this.setState({history: this.orderedHistory(historyList)});\n  }\n\n  selectHistoryEntry(index) {\n    this.setState({\n      currentHistoryDetail: this.state.history[index],\n      selectedEntry: index,\n    });\n  }\n\n  orderedHistory(historyList) {\n    return _.chain(historyList)\n      .sortBy(historyEntry => historyEntry.start_time)\n      .reverse()\n      .value();\n  }\n\n  render() {\n    return (\n      <SplitPane defaultSize='50%' split='vertical' pane1Style={queryEntryListDivStyle}\n                 pane2Style={queryDetailDivStyle}>\n        <QueryHistoryEntries historyEntries={this.state.history}\n                             selectedEntry={this.state.selectedEntry}\n                             onSelectEntry={this.selectHistoryEntry}\n        />\n        <QueryHistoryDetail historyEntry={this.state.currentHistoryDetail}/>\n      </SplitPane>);\n  }\n}\n\nQueryHistory.propTypes = {\n  historyCollection: Shapes.historyCollectionClass.isRequired,\n};\n\nexport {\n  QueryHistory,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/history/query_history.jsx","(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.pgadminKeywordRangeFinder = function(cm, start, startTkn, endTkn) {\n    var line = start.line, lineText = cm.getLine(line);\n    var at = lineText.length, startChar, tokenType;\n    for (; at > 0;) {\n      var found = lineText.lastIndexOf(startTkn, at);\n      var startToken = startTkn;\n      var endToken = endTkn;\n      if (found < start.ch) {\n        var found = lineText.lastIndexOf(\"[\", at);\n        if (found < start.ch) break;\n        var startToken = '[';\n        var endToken = ']';\n      }\n\n      tokenType = cm.getTokenAt(CodeMirror.Pos(line, found + 1)).type;\n      if (!/^(comment|string)/.test(tokenType)) { startChar = found; break; }\n      at = found - 1;\n    }\n    if (startChar == null || lineText.lastIndexOf(startToken) > startChar) return;\n    var count = 1, lastLine = cm.lineCount(), end, endCh;\n    outer: for (var i = line + 1; i < lastLine; ++i) {\n      var text = cm.getLine(i), pos = 0;\n      for (;;) {\n        var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n        if (nextOpen < 0) nextOpen = text.length;\n        if (nextClose < 0) nextClose = text.length;\n        pos = Math.min(nextOpen, nextClose);\n        if (pos == text.length) break;\n        if (cm.getTokenAt(CodeMirror.Pos(i, pos + 1)).type == tokenType) {\n          if (pos == nextOpen) ++count;\n          else if (!--count) {\n            end = i;\n            endCh = pos;\n            break outer;\n          }\n        }\n        ++pos;\n      }\n    }\n    if (end == null || end == line + 1) return;\n    return {from: CodeMirror.Pos(line, startChar + startTkn.length),\n          to: CodeMirror.Pos(end, endCh)};\n  };\n\n  CodeMirror.pgadminBeginRangeFinder = function(cm, start) {\n    var startToken = 'BEGIN';\n    var endToken = 'END;';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n  CodeMirror.pgadminIfRangeFinder = function(cm, start) {\n    var startToken = 'IF';\n    var endToken = 'END IF';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n  CodeMirror.pgadminLoopRangeFinder = function(cm, start) {\n    var startToken = 'LOOP';\n    var endToken = 'END LOOP';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n  CodeMirror.pgadminCaseRangeFinder = function(cm, start) {\n    var startToken = 'CASE';\n    var endToken = 'END CASE';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/codemirror/addon/fold/pgadmin-sqlfoldcode.js","module.exports = __WEBPACK_EXTERNAL_MODULE_43__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"translations\"\n// module id = 43\n// module chunks = 0 1 2 5","module.exports = __WEBPACK_EXTERNAL_MODULE_44__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.browser.endpoints\"\n// module id = 44\n// module chunks = 0 1 2 5","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport HistoryDetailMetadata from './detail/history_detail_metadata';\nimport HistoryDetailQuery from './detail/history_detail_query';\nimport HistoryDetailMessage from './detail/history_detail_message';\nimport HistoryErrorMessage from './detail/history_error_message';\nimport Shapes from '../react_shapes';\n\nexport default class QueryHistoryDetail extends React.Component {\n\n  render() {\n    if (!_.isUndefined(this.props.historyEntry)) {\n      let historyErrorMessage = null;\n      if (!this.props.historyEntry.status) {\n        historyErrorMessage = <div className='error-message-block'>\n          <HistoryErrorMessage {...this.props} />\n        </div>;\n      }\n\n      return (\n        <div id='query_detail' className='query-detail'>\n          {historyErrorMessage}\n          <div className='metadata-block'>\n            <HistoryDetailMetadata {...this.props} />\n          </div>\n          <div className='query-statement-block'>\n            <HistoryDetailQuery {...this.props}/>\n          </div>\n          <div>\n            <hr className='block-divider'/>\n          </div>\n          <div className='message-block'>\n            <HistoryDetailMessage {...this.props}/>\n          </div>\n        </div>);\n    } else {\n      return <p></p>;\n    }\n  }\n}\n\nQueryHistoryDetail.propTypes = {\n  historyEntry: Shapes.historyDetail,\n};\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/history/query_history_detail.jsx","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport moment from 'moment';\nimport Shapes from '../../react_shapes';\n\nexport default class HistoryDetailMetadata extends React.Component {\n\n  formatDate(date) {\n    return (moment(date).format('M-D-YY HH:mm:ss'));\n  }\n\n  queryMetaData(data, description) {\n    return <div className='item'>\n      <span className='value'>\n        {data}\n      </span>\n      <span className='description'>\n        {description}\n      </span>\n    </div>;\n  }\n\n  render() {\n    return <div className='metadata'>\n      {this.queryMetaData(this.formatDate(this.props.historyEntry.start_time), 'Date')}\n      {this.queryMetaData(this.props.historyEntry.row_affected.toLocaleString(), 'Rows Affected')}\n      {this.queryMetaData(this.props.historyEntry.total_time, 'Duration')}\n    </div>;\n  }\n}\n\nHistoryDetailMetadata.propTypes = {\n  historyEntry: Shapes.historyDetail,\n};\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/history/detail/history_detail_metadata.jsx","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport 'codemirror/mode/sql/sql';\n\nimport CodeMirror from './code_mirror';\nimport Shapes from '../../react_shapes';\nimport clipboard from '../../../js/selection/clipboard';\n\nexport default class HistoryDetailQuery extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.copyAllHandler = this.copyAllHandler.bind(this);\n    this.state = {isCopied: false};\n    this.timeout = undefined;\n  }\n\n  copyAllHandler() {\n    clipboard.copyTextToClipboard(this.props.historyEntry.query);\n\n    this.clearPreviousTimeout();\n\n    this.setState({isCopied: true});\n    this.timeout = setTimeout(() => {\n      this.setState({isCopied: false});\n    }, 1500);\n  }\n\n  clearPreviousTimeout() {\n    if (this.timeout !== undefined) {\n      clearTimeout(this.timeout);\n      this.timeout = undefined;\n    }\n  }\n\n  copyButtonText() {\n    return this.state.isCopied ? 'Copied!' : 'Copy All';\n  }\n\n  copyButtonClass() {\n    return this.state.isCopied ? 'was-copied' : 'copy-all';\n  }\n\n  render() {\n    return (\n      <div id=\"history-detail-query\">\n        <button className={this.copyButtonClass()}\n                onClick={this.copyAllHandler}>{this.copyButtonText()}</button>\n        <CodeMirror\n          value={this.props.historyEntry.query}\n          options={{\n            mode: 'text/x-pgsql',\n            readOnly: true,\n          }}\n        />\n      </div>);\n  }\n}\n\nHistoryDetailQuery.propTypes = {\n  historyEntry: Shapes.historyDetail,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/history/detail/history_detail_query.jsx","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport $ from 'jquery';\nimport code_mirror from 'sources/../bundle/codemirror';\n\nexport default class CodeMirror extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shouldHydrate: true,\n    };\n  }\n\n  componentDidMount() {\n    this.editor = code_mirror(this.container);\n    this.hydrateInterval = setInterval(this.hydrateWhenBecomesVisible.bind(this), 100);\n    this.hydrate(this.props);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.hydrateInterval);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.hydrate(nextProps);\n  }\n\n  hydrateWhenBecomesVisible() {\n    const isVisible = $(this.container).is(':visible');\n\n    if (isVisible && this.state.shouldHydrate) {\n      this.hydrate(this.props);\n      this.setState({shouldHydrate: false});\n    } else if (!isVisible) {\n      this.setState({shouldHydrate: true});\n    }\n  }\n\n  hydrate(props) {\n    Object.keys(props.options || {}).forEach(key => this.editor.setOption(key, props.options[key]));\n\n    this.editor.setValue(props.value || '');\n    this.editor.refresh();\n  }\n\n  render() {\n    return (\n      <div ref={(self) => this.container = self}/>\n    );\n  }\n}\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/history/detail/code_mirror.jsx","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\n\nimport Shapes from '../../react_shapes';\n\nexport default class HistoryDetailMessage extends React.Component {\n\n  render() {\n    return (\n      <div className='message'>\n        <div className='message-header'>\n          Messages\n        </div>\n        <div className='content'>\n          <pre className='content-value'>\n              {this.props.historyEntry.message}\n          </pre>\n        </div>\n      </div>);\n  }\n}\n\nHistoryDetailMessage.propTypes = {\n  historyEntry: Shapes.historyDetail,\n};\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/history/detail/history_detail_message.jsx","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\n\nimport Shapes from '../../react_shapes';\n\nexport default class HistoryErrorMessage extends React.Component {\n\n  parseErrorMessage(message) {\n    return message.match(/ERROR:\\s*([^\\n\\r]*)/i) ?\n           message.match(/ERROR:\\s*([^\\n\\r]*)/i)[1] :\n           message;\n  }\n\n  render() {\n    return (\n      <div className='history-error-text'>\n        <span>Error Message</span> {this.parseErrorMessage(this.props.historyEntry.message)}\n      </div>);\n  }\n}\n\nHistoryErrorMessage.propTypes = {\n  historyEntry: Shapes.historyDetail,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/history/detail/history_error_message.jsx","/////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////\n\n/* eslint-disable react/no-find-dom-node */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'underscore';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\n\nimport QueryHistoryEntry from './query_history_entry';\nimport QueryHistoryEntryDateGroup from './query_history_entry_date_group';\n\nconst ARROWUP = 38;\nconst ARROWDOWN = 40;\n\nexport default class QueryHistoryEntries extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.navigateUpAndDown = this.navigateUpAndDown.bind(this);\n  }\n\n  navigateUpAndDown(event) {\n    let arrowKeys = [ARROWUP, ARROWDOWN];\n    let key = event.keyCode || event.which;\n    if (arrowKeys.indexOf(key) > -1) {\n      event.preventDefault();\n      this.onKeyDownHandler(event);\n      return false;\n    }\n    return true;\n  }\n\n  onKeyDownHandler(event) {\n    if (this.isArrowDown(event)) {\n      if (!this.isLastEntry()) {\n        let nextEntry = this.props.selectedEntry + 1;\n        this.props.onSelectEntry(nextEntry);\n\n        if (this.isInvisible(this.getEntryFromList(nextEntry))) {\n          this.getEntryFromList(nextEntry).scrollIntoView(false);\n        }\n      }\n    } else if (this.isArrowUp(event)) {\n      if (!this.isFirstEntry()) {\n        let previousEntry = this.props.selectedEntry - 1;\n        this.props.onSelectEntry(previousEntry);\n\n        if (this.isInvisible(this.getEntryFromList(previousEntry))) {\n          this.getEntryFromList(previousEntry).scrollIntoView(true);\n        }\n      }\n    }\n  }\n\n  retrieveGroups() {\n    const sortableKeyFormat = 'YYYY MM DD';\n    const entriesGroupedByDate = _.groupBy(this.props.historyEntries, entry => moment(entry.start_time).format(sortableKeyFormat));\n\n    const elements = this.sortDesc(entriesGroupedByDate).map((key, index) => {\n      const groupElements = this.retrieveDateGroup(entriesGroupedByDate, key, index);\n      const keyAsDate = moment(key, sortableKeyFormat).toDate();\n      groupElements.unshift(\n        <li key={'group-' + index}>\n          <QueryHistoryEntryDateGroup date={keyAsDate}/>\n        </li>);\n      return groupElements;\n    });\n\n    return (\n      <ul>\n        {_.flatten(elements).map(element => element)}\n      </ul>\n    );\n  }\n\n  retrieveDateGroup(entriesGroupedByDate, key, parentIndex) {\n    const startingEntryIndex = _.reduce(\n      _.first(this.sortDesc(entriesGroupedByDate), parentIndex),\n      (memo, key) => memo + entriesGroupedByDate[key].length, 0);\n\n    return (\n      entriesGroupedByDate[key].map((entry, index) =>\n        <li key={`group-${parentIndex}-entry-${index}`}\n            className='list-item'\n            tabIndex={0}\n            onClick={() => this.props.onSelectEntry(startingEntryIndex + index)}\n            onKeyDown={this.navigateUpAndDown}>\n          <QueryHistoryEntry\n            historyEntry={entry}\n            isSelected={(startingEntryIndex + index) === this.props.selectedEntry}/>\n        </li>)\n    );\n  }\n\n  sortDesc(entriesGroupedByDate) {\n    return Object.keys(entriesGroupedByDate).sort().reverse();\n  }\n\n  isInvisible(element) {\n    return this.isAbovePaneTop(element) || this.isBelowPaneBottom(element);\n  }\n\n  isArrowUp(event) {\n    return (event.keyCode || event.which) === ARROWUP;\n  }\n\n  isArrowDown(event) {\n    return (event.keyCode || event.which) === ARROWDOWN;\n  }\n\n  isFirstEntry() {\n    return this.props.selectedEntry === 0;\n  }\n\n  isLastEntry() {\n    return this.props.selectedEntry === this.props.historyEntries.length - 1;\n  }\n\n  isAbovePaneTop(element) {\n    const paneElement = ReactDOM.findDOMNode(this).parentElement;\n    return element.getBoundingClientRect().top < paneElement.getBoundingClientRect().top;\n  }\n\n  isBelowPaneBottom(element) {\n    const paneElement = ReactDOM.findDOMNode(this).parentElement;\n    return element.getBoundingClientRect().bottom > paneElement.getBoundingClientRect().bottom;\n  }\n\n  getEntryFromList(entryIndex) {\n    return ReactDOM.findDOMNode(this).getElementsByClassName('entry')[entryIndex];\n  }\n\n  render() {\n    return (\n      <div id='query_list'\n           className=\"query-history\">\n        {this.retrieveGroups()}\n      </div>\n    );\n  }\n}\n\nQueryHistoryEntries.propTypes = {\n  historyEntries: PropTypes.array.isRequired,\n  selectedEntry: PropTypes.number.isRequired,\n  onSelectEntry: PropTypes.func.isRequired,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/history/query_history_entries.jsx","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport Shapes from '../react_shapes';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\n\nexport default class QueryHistoryEntry extends React.Component {\n  formatDate(date) {\n    return (moment(date).format('HH:mm:ss'));\n  }\n\n  renderWithClasses(outerDivStyle) {\n    return (\n      <div className={'entry ' + outerDivStyle}>\n        <div className='query'>\n          {this.props.historyEntry.query}\n        </div>\n        <div className='other-info'>\n          <div className='timestamp'>\n            {this.formatDate(this.props.historyEntry.start_time)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    if (this.hasError()) {\n      if (this.props.isSelected) {\n        return this.renderWithClasses('error selected');\n      } else {\n        return this.renderWithClasses('error');\n      }\n    } else {\n      if (this.props.isSelected) {\n        return this.renderWithClasses('selected');\n      } else {\n        return this.renderWithClasses('');\n      }\n    }\n  }\n\n  hasError() {\n    return !this.props.historyEntry.status;\n  }\n}\n\nQueryHistoryEntry.propTypes = {\n  historyEntry: Shapes.historyDetail,\n  isSelected: PropTypes.bool,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/history/query_history_entry.jsx","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\n\nexport default class QueryHistoryEntryDateGroup extends React.Component {\n\n  getDatePrefix() {\n    let prefix = '';\n    if (this.isDaysBefore(0)) {\n      prefix = 'Today - ';\n    } else if (this.isDaysBefore(1)) {\n      prefix = 'Yesterday - ';\n    }\n    return prefix;\n  }\n\n  getDateFormatted(momentToFormat) {\n    return momentToFormat.format(QueryHistoryEntryDateGroup.formatString);\n  }\n\n  getDateMoment() {\n    return moment(this.props.date);\n  }\n\n  isDaysBefore(before) {\n    return this.getDateFormatted(this.getDateMoment()) === this.getDateFormatted(moment().subtract(before, 'days'));\n  }\n\n  render() {\n    return (<div className=\"date-label\">{this.getDatePrefix()}{this.getDateFormatted(this.getDateMoment())}</div>);\n  }\n}\n\nQueryHistoryEntryDateGroup.propTypes = {\n  date: PropTypes.instanceOf(Date).isRequired,\n};\n\nQueryHistoryEntryDateGroup.formatString = 'MMM DD YYYY';\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/history/query_history_entry_date_group.jsx","const F5_KEY = 116,\n  F7_KEY = 118,\n  F8_KEY = 119,\n  PERIOD_KEY = 190,\n  FWD_SLASH_KEY = 191;\n\nfunction keyboardShortcuts(sqlEditorController, queryToolActions, event) {\n  if (sqlEditorController.isQueryRunning()) {\n    return;\n  }\n\n  let keyCode = event.which || event.keyCode;\n\n  if (keyCode === F5_KEY) {\n    event.preventDefault();\n    queryToolActions.executeQuery(sqlEditorController);\n  } else if (event.shiftKey && keyCode === F7_KEY) {\n    _stopEventPropagation();\n    queryToolActions.explainAnalyze(sqlEditorController);\n  } else if (keyCode === F7_KEY) {\n    _stopEventPropagation();\n    queryToolActions.explain(sqlEditorController);\n  } else if (keyCode === F8_KEY) {\n    event.preventDefault();\n    queryToolActions.download(sqlEditorController);\n  } else if (((this.isMac() && event.metaKey) || (!this.isMac() && event.ctrlKey)) &&\n    event.shiftKey && keyCode === FWD_SLASH_KEY) {\n    _stopEventPropagation();\n    queryToolActions.commentBlockCode(sqlEditorController);\n  } else if (((this.isMac() && event.metaKey) || (!this.isMac() && event.ctrlKey)) &&\n    keyCode === FWD_SLASH_KEY) {\n    _stopEventPropagation();\n    queryToolActions.commentLineCode(sqlEditorController);\n  } else if (((this.isMac() && event.metaKey) || (!this.isMac() && event.ctrlKey)) &&\n    keyCode === PERIOD_KEY) {\n    _stopEventPropagation();\n    queryToolActions.uncommentLineCode(sqlEditorController);\n  }\n\n  function _stopEventPropagation() {\n    event.cancelBubble = true;\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n  }\n}\n\nfunction isMac() {\n  return window.navigator.platform.search('Mac') != -1;\n}\n\nmodule.exports = {\n  processEvent: keyboardShortcuts,\n  isMac: isMac,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/sqleditor/keyboard_shortcuts.js","import $ from 'jquery';\n\nlet queryToolActions = {\n  _verbose: function () {\n    return $('.explain-verbose').hasClass('visibility-hidden') ? 'OFF' : 'ON';\n  },\n\n  _costsEnabled: function () {\n    return $('.explain-costs').hasClass('visibility-hidden') ? 'OFF' : 'ON';\n  },\n\n  _buffers: function () {\n    return $('.explain-buffers').hasClass('visibility-hidden') ? 'OFF' : 'ON';\n  },\n\n  _timing: function () {\n    return $('.explain-timing').hasClass('visibility-hidden') ? 'OFF' : 'ON';\n  },\n\n  _clearMessageTab: function () {\n    $('.sql-editor-message').html('');\n  },\n\n  executeQuery: function (sqlEditorController) {\n    if(sqlEditorController.is_query_tool) {\n      this._clearMessageTab();\n      sqlEditorController.execute();\n    } else {\n      sqlEditorController.execute_data_query();\n    }\n  },\n\n  explainAnalyze: function (sqlEditorController) {\n    let costEnabled = this._costsEnabled();\n    let verbose = this._verbose();\n    let buffers = this._buffers();\n    let timing = this._timing();\n    let explainAnalyzeQuery = `EXPLAIN (FORMAT JSON, ANALYZE ON, VERBOSE ${verbose}, COSTS ${costEnabled}, BUFFERS ${buffers}, TIMING ${timing}) `;\n    sqlEditorController.execute(explainAnalyzeQuery);\n  },\n\n  explain: function (sqlEditorController) {\n    let costEnabled = this._costsEnabled();\n    let verbose = this._verbose();\n\n    let explainQuery = `EXPLAIN (FORMAT JSON, ANALYZE OFF, VERBOSE ${verbose}, COSTS ${costEnabled}, BUFFERS OFF, TIMING OFF) `;\n    sqlEditorController.execute(explainQuery);\n  },\n\n  download: function (sqlEditorController) {\n    let sqlQuery = sqlEditorController.gridView.query_tool_obj.getSelection();\n\n    if (!sqlQuery) {\n      sqlQuery = sqlEditorController.gridView.query_tool_obj.getValue();\n    }\n\n    if (!sqlQuery) return;\n\n    let filename = 'data-' + new Date().getTime() + '.csv';\n\n    if (!sqlEditorController.is_query_tool) {\n      filename = sqlEditorController.table_name + '.csv';\n    }\n\n    sqlEditorController.trigger_csv_download(sqlQuery, filename);\n  },\n\n  commentBlockCode: function (sqlEditorController) {\n    let codeMirrorObj = sqlEditorController.gridView.query_tool_obj;\n\n    if (!codeMirrorObj.getValue()) return;\n\n    codeMirrorObj.toggleComment(codeMirrorObj.getCursor(true), codeMirrorObj.getCursor(false));\n  },\n\n  commentLineCode: function (sqlEditorController) {\n    let codeMirrorObj = sqlEditorController.gridView.query_tool_obj;\n\n    if (!codeMirrorObj.getValue()) return;\n\n    codeMirrorObj.lineComment(codeMirrorObj.getCursor(true),\n      codeMirrorObj.getCursor(false),\n      {lineComment: '--'}\n    );\n  },\n\n  uncommentLineCode: function (sqlEditorController) {\n    let codeMirrorObj = sqlEditorController.gridView.query_tool_obj;\n\n    if (!codeMirrorObj.getValue()) return;\n\n    codeMirrorObj.uncomment(codeMirrorObj.getCursor(true),\n      codeMirrorObj.getCursor(false),\n      {lineComment: '--'}\n    );\n  },\n};\n\nmodule.exports = queryToolActions;\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/sqleditor/query_tool_actions.js","import 'slickgrid/lib/jquery.event.drag-2.3.0';\nimport 'slickgrid/lib/jquery-ui-1.11.3';\nimport 'slickgrid/slick.core';\nimport 'slickgrid/slick.grid';\nimport 'slickgrid/slick.dataview';\nimport 'slickgrid/slick.editors';\nimport 'slickgrid/slick.formatters';\nimport 'slickgrid/plugins/slick.autotooltips';\nimport 'slickgrid/plugins/slick.cellrangedecorator';\nimport 'slickgrid/plugins/slick.cellrangeselector';\n\nexport default window.Slick;\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/bundle/slickgrid.js","//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\nimport PropTypes from 'prop-types';\n\nlet historyDetail =\n    PropTypes.shape({\n      query: PropTypes.string,\n      start_time: PropTypes.instanceOf(Date),\n      status: PropTypes.bool,\n      total_time: PropTypes.string,\n      row_affected: PropTypes.int,\n      message: PropTypes.string,\n    });\n\nlet historyCollectionClass =\n  PropTypes.shape({\n    historyList: PropTypes.array.isRequired,\n    onChange: PropTypes.func.isRequired,\n  });\n\nexport default {\n  historyDetail,\n  historyCollectionClass,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/jsx/react_shapes.jsx","define([\n  'sources/selection/copy_data',\n  'sources/selection/range_selection_helper'\n  ],\nfunction (copyData, RangeSelectionHelper) {\n  return function handleQueryOutputKeyboardEvent(event, args) {\n    var KEY_C = 67;\n    var KEY_A = 65;\n    var modifiedKey = event.keyCode;\n    var isModifierDown = event.ctrlKey || event.metaKey;\n    var self = this || window;\n    self.slickgrid = args.grid;\n\n    if (isModifierDown && modifiedKey == KEY_C) {\n      copyData.apply(self);\n    }\n\n    if (isModifierDown && modifiedKey == KEY_A) {\n      RangeSelectionHelper.selectAll(self.slickgrid);\n    }\n  }\n});\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/slickgrid/event_handlers/handle_query_output_keyboard_event.js","define([\"pgadmin.browser.endpoints\"], function (endpoints) {\n  /***\n   * This method behaves as a drop-in replacement for flask url_for function.\n   * It uses the exposed URLs file under the hood, and replace the substitions provided by the modules.\n   *\n   * ex.\n   * url_for(\"help.static\", {filename: \"server_dialog.html\"}) will produce the\n   * output string '/help/help/server_dialog.html' from the url ->\n   * '/help/help/<path:filename>'.\n   *\n   * @param {String} text\n   * @param {Object} substitutions\n   */\n  return function url_for(endpoint, substitutions) {\n\n    var rawURL = endpoints[endpoint];\n\n    // captures things of the form <path:substitutionName>\n    var substitutionGroupsRegExp = /([<])([^:^>]*:)?([^>]+)([>])/g;\n    var matchFound;\n\n    var interpolated = rawURL;\n\n    if (!rawURL)\n      return rawURL;\n\n    interpolated = interpolated.replace(\n      substitutionGroupsRegExp,\n      function (_origin, _1, _2, substitutionName) {\n        if (substitutionName in substitutions) {\n          return substitutions[substitutionName];\n        }\n        return _origin;\n      }\n    );\n\n    return interpolated;\n  };\n\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/url_for.js","module.exports = __WEBPACK_EXTERNAL_MODULE_76__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.browser.utils\"\n// module id = 76\n// module chunks = 0 1 2","module.exports = __WEBPACK_EXTERNAL_MODULE_95__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.browser.messages\"\n// module id = 95\n// module chunks = 0 1 2","import _ from 'underscore';\n\nfunction generate_url(baseUrl, treeInfo, actionType, nodeType, pickFunction, itemDataID) {\n  let ref = '';\n  _.each(\n    _.sortBy(\n      _.pick(treeInfo, pickFunction),\n      function (treeInfoItems) {\n        return treeInfoItems.priority;\n      }\n    ),\n    function (treeInfoItems) {\n      ref = `${ref}/${encodeURI(treeInfoItems._id)}`;\n    }\n  );\n  ref = itemDataID ? `${ref}/${itemDataID}` : `${ref}/`;\n\n  return `${baseUrl}${nodeType}/${actionType}${ref}`;\n}\n\nmodule.exports = {\n  generate_url: generate_url,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/browser/generate_url.js"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AA+CA;AACA;AACA;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AA1EA;AA4EA;AACA;AACA;;;;;;;;;;AC/EA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACvCA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;AC/BA;AACA;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AARA;AACA;AASA;AACA;AAXA;AACA;AAYA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AClpBA;AAsBA;AAAA;;;;;;;;;;;;;ACjKA;AA+BA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDA;AACA;AAkDA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;AACA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AACA;AAjCA;AACA;AAmCA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAzDA;AA2DA;AA/DA;AAiEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAnBA;AAwBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAXA;AAaA;AAhDA;AAkDA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAFA;AAGA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA56CA;AACA;AA86CA;;;;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AA7DA;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AA1DA;AA4DA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAKA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;AACA;AA6CA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AA9HA;AAgIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AADA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AA/BA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAxCA;AA0CA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAtCA;AAwCA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAvCA;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AApCA;AAsCA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAxCA;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AARA;AAWA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AArCA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAzDA;AA2DA;AACA;AACA;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AADA;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAhBA;AAkBA;AACA;AACA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlnEA;AACA;AAqnEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;;;;;;;;;;ACvmHA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;;;;AAIA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;AAKA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;;;;AAIA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AALA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAxGA;AA0GA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAMA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAMA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAKA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1RA;AACA;AA4RA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1DA;AACA;AA4DA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AAFA;AAKA;AADA;AARA;AAYA;AACA;AAFA;AAKA;AADA;AAfA;AAmBA;AACA;AAFA;AAKA;AADA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAtHA;AACA;AAwHA;AACA;AACA;;;;;;;;;;ACtrBA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;;;;;;;;;;ACrFA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;;;;;;;;;;;ACjIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;;ACpjHA;AAmHA;AAAA;;;;;;;;;;;ACrHA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AACA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;;;;;;;;;;ACxlGA;AACA;;;;;AAEA;AAXA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AA3BA;;;;;;;;;;;;;;;;;ACEA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AACA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AADA;AAGA;AACA;AADA;AACA;AAGA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AARA;AASA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AAAA;AAGA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;;;;AA1EA;AACA;AADA;AACA;AACA;AA2EA;AACA;AADA;AACA;AAIA;;;;;;;;;;;;AC7GA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AClFA;;;;;;;ACAA;;;;;;;;;;;;;;;;ACSA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAXA;AAeA;AACA;AACA;AACA;;;;AA9BA;AACA;AADA;AACA;AACA;AA+BA;AACA;AADA;;;;;;;;;;;;;;;;;ACxCA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;AAEA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAQA;;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;;;;AAvBA;AACA;AADA;AACA;AACA;AAwBA;AACA;AADA;;;;;;;;;;;;;;;;AC9BA;AACA;;;AAAA;AACA;AACA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAHA;AAWA;;;;AAjDA;AACA;AADA;AACA;AACA;AAkDA;AACA;AADA;;;;;;;;;;;;;;;;AC3DA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;AA9CA;AACA;AADA;;;;;;;;;;;;;;;;ACJA;AACA;;;AACA;AACA;;;;;;;;;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAJA;AAUA;;;;AAdA;AACA;AADA;AACA;AACA;AAeA;AACA;AADA;;;;;;;;;;;;;;;;ACrBA;AACA;;;AACA;AACA;;;;;;;;;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;AAEA;AACA;AAGA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AADA;AAGA;;;;AAbA;AACA;AADA;AACA;AACA;AAcA;AACA;AADA;;;;;;;;;;;;;;;;AClBA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AACA;AACA;;;AAAA;AACA;;;;;;;;;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAIA;;;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAPA;AADA;AAWA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;;;;AA9HA;AACA;AADA;AACA;AACA;AA+HA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;AC/IA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAJA;AAWA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;AAtCA;AACA;AADA;AACA;AACA;AAuCA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;AC9CA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AA1BA;AACA;AADA;AACA;AACA;AA2BA;AACA;AADA;AACA;AAGA;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;;;;;;;;;ACnDA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AA7FA;AACA;AA+FA;;;;;;;;;;;;;;AClGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;ACFA;AACA;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAEA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;;;;;;;;;;AC3BA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACtBA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;;;;;;;ACvCA;;;;;;;ACAA;;;;;;;;;;ACAA;AACA;;;;;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;;;A","sourceRoot":""}