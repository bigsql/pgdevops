{"version":3,"file":"debugger_direct.js","sources":["webpack:///pgadmin/static/js/check_node_visibility.js?08be*","webpack:///pgadmin/tools/debugger/static/js/direct.js?b561","webpack:///pgadmin/static/js/gettext.js?14a1*","webpack:///pgadmin/static/bundle/codemirror.js?4eb2*","webpack:///pgadmin/static/js/pgadmin.js?1681*","webpack:///pgadmin/static/js/codemirror/addon/fold/pgadmin-sqlfoldcode.js?36c8*","webpack:///external \"translations\"?b04a*","webpack:///external \"pgadmin.browser.endpoints\"?48c7*","webpack:///pgadmin/static/js/url_for.js?a292*","webpack:///external \"pgadmin.browser.utils\"?743c*","webpack:///external \"pgadmin.browser.messages\"?30f9*","webpack:///pgadmin/static/js/browser/generate_url.js?b814*","webpack:///pgadmin/tools/debugger/static/js/debugger_ui.js?a6f4"],"sourcesContent":["//////////////////////////////////////////////////////////////////////////\n//\n// pgAdmin 4 - PostgreSQL Tools\n//\n// Copyright (C) 2013 - 2017, The pgAdmin Development Team\n// This software is released under the PostgreSQL Licence\n//\n//////////////////////////////////////////////////////////////////////////\n\ndefine(['jquery', 'underscore', 'underscore.string'],\n  function ($, _, S) {\n\n    var check_node_visibility = function (pgBrowser, node_type) {\n      if(_.isUndefined(node_type) || _.isNull(node_type)) {\n        return true;\n      }\n\n      // Target actual node instead of collection.\n      // If node is disabled then there is no meaning of\n      // adding collection node menu\n      if(S.startsWith(node_type, \"coll-\")) {\n        node_type = node_type.replace(\"coll-\", \"\")\n      }\n\n      // Exclude non-applicable nodes\n      var nodes_not_supported = [\n        \"server_group\", \"server\", \"catalog_object_column\"\n      ];\n      if(_.indexOf(nodes_not_supported, node_type) >= 0) {\n        return true;\n      }\n\n      var preference = pgBrowser.get_preference(\"browser\", 'show_node_'+node_type);\n\n      if (preference) {\n        return preference.value\n      }\n      else {\n        return true;\n      }\n    }\n\n  return check_node_visibility;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/check_node_visibility.js","define([\n  'sources/gettext', 'sources/url_for' ,'jquery', 'underscore', 'underscore.string', 'pgadmin.alertifyjs',\n  'sources/pgadmin','pgadmin.browser', 'backbone', 'backgrid', 'sources/../bundle/codemirror', 'backform',\n  'pgadmin.tools.debugger.ui',\n  'wcdocker', 'pgadmin.backform',\n  'pgadmin.backgrid'\n], function(\n  gettext, url_for, $, _, S, Alertify, pgAdmin, pgBrowser, Backbone, Backgrid,\n  codemirror, Backform, debug_function_again\n) {\n\n  var CodeMirror = codemirror.default;\n  if (pgAdmin.Browser.tree != null) {\n    pgAdmin = pgAdmin || window.pgAdmin || {};\n  }\n\n  var pgTools = pgAdmin.Tools = pgAdmin.Tools || {};\n\n  if (pgTools.DirectDebug)\n    return pgTools.DirectDebug;\n\n  var controller = new (function() {});\n\n  _.extend(\n    controller, Backbone.Events, {\n      enable: function(btn, enable) {\n        // trigger the event and change the button view to enable/disable the buttons for debugging\n        this.trigger('pgDebugger:button:state:' + btn, enable);\n      },\n\n      /*\n        Function to set the breakpoint and send the line no. which is set to server\n        trans_id :- Unique Transaction ID, line_no - line no. to set the breakpoint, set_type = 0 - clear , 1 - set\n      */\n      set_breakpoint: function(trans_id, line_no, set_type) {\n        var self = this;\n\n        // Make ajax call to set/clear the break point by user\n        var baseUrl = url_for('debugger.set_breakpoint', {\n                        'trans_id': trans_id,\n                        'line_no': line_no,\n                        'set_type': set_type\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              // Breakpoint has been set by the user\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while setting debugging breakpoint.'\n            );\n          }\n        });\n      },\n\n      // Function to get the latest breakpoint information and update the gutters of codemirror\n      UpdateBreakpoint: function(trans_id) {\n        var self = this;\n\n        var br_list = self.GetBreakpointInformation(trans_id);\n\n        // If there is no break point to clear then we should return from here.\n        if ((br_list.length == 1) && (br_list[0].linenumber == -1))\n          return;\n\n        var breakpoint_list = new Array();\n\n        for (var i = 0; i < br_list.length; i++) {\n          if (br_list[i].linenumber != -1) {\n            breakpoint_list.push(br_list[i].linenumber)\n          }\n        }\n\n        for (var i = 0;i< breakpoint_list.length;i++) {\n          var info = pgTools.DirectDebug.editor.lineInfo((breakpoint_list[i] - 1));\n\n          if (info.gutterMarkers != undefined) {\n            pgTools.DirectDebug.editor.setGutterMarker((breakpoint_list[i] - 1), \"breakpoints\", null);\n          }\n          else {\n            pgTools.DirectDebug.editor.setGutterMarker((breakpoint_list[i] - 1), \"breakpoints\", function() {\n            var marker = document.createElement(\"div\");\n            marker.style.color = \"#822\";\n            marker.innerHTML = \"●\";\n            return marker;\n            }());\n          }\n        }\n      },\n\n      // Function to get the breakpoint information from the server\n      GetBreakpointInformation: function(trans_id) {\n        var self = this;\n        var result = '';\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.execute_query', {\n                        'trans_id': trans_id,\n                        'query_type': 'get_breakpoints'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          async: false,\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              result = res.data.result;\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while fetching breakpoint information.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while fetching breakpoint information.'\n            );\n          }\n        });\n\n        return result;\n      },\n\n      // Function to start the executer and execute the user requested option for debugging\n      start_execution: function(trans_id, port_num) {\n        var self = this;\n        // Make ajax call to listen the database message\n        var baseUrl = url_for(\n                        'debugger.start_execution', {\n                          'trans_id': trans_id,\n                          'port_num': port_num\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              // If status is Success then find the port number to attach the executer.\n              self.execute_query(trans_id);\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while starting debugging session.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while starting debugging session.'\n            );\n          }\n        });\n      },\n\n      // Execute the query and get the first functions debug information from the server\n      execute_query: function(trans_id) {\n        var self = this;\n        // Make ajax call to listen the database message\n        var baseUrl = url_for(\n                        'debugger.execute_query', {\n                          'trans_id': trans_id,\n                          'query_type': 'wait_for_breakpoint'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              // set the return code to the code editor text area\n              if (res.data.result[0].src != null && res.data.result[0].linenumber != null) {\n                pgTools.DirectDebug.editor.setValue(res.data.result[0].src);\n                var active_line_no = self.active_line_no = (res.data.result[0].linenumber - 2);\n                pgTools.DirectDebug.editor.addLineClass((res.data.result[0].linenumber - 2), 'wrap', 'CodeMirror-activeline-background');\n              }\n\n              // Call function to create and update local variables ....\n              self.GetStackInformation(trans_id);\n              if (pgTools.DirectDebug.debug_type) {\n                self.poll_end_execution_result(trans_id);\n              }\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while executing requested debugging information.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while executing requested debugging information.'\n            );\n          }\n        });\n      },\n\n      // Get the local variable information of the functions and update the grid\n      GetLocalVariables: function(trans_id) {\n        var self = this;\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for(\n                        'debugger.execute_query', {\n                          'trans_id': trans_id,\n                          'query_type': 'get_variables'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              // Call function to create and update local variables\n              self.AddLocalVariables(res.data.result);\n              self.AddParameters(res.data.result);\n              // If debug function is restarted then again start listener to read the updated messages.\n              if (pgTools.DirectDebug.debug_restarted) {\n                if (pgTools.DirectDebug.debug_type) {\n                  self.poll_end_execution_result(trans_id);\n                }\n                pgTools.DirectDebug.debug_restarted = false;\n              }\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while fetching variable information.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while fetching variable information.'\n            );\n          }\n        });\n      },\n\n      // Get the stack information of the functions and update the grid\n      GetStackInformation: function(trans_id) {\n        var self = this;\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for(\n                        'debugger.execute_query', {\n                          'trans_id': trans_id,\n                          'query_type': 'get_stack_info'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              // Call function to create and update stack information\n              self.AddStackInformation(res.data.result);\n              self.GetLocalVariables(pgTools.DirectDebug.trans_id);\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while fetching stack information.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while fetching stack information.'\n            );\n          }\n        });\n      },\n\n      /*\n        poll the actual result after user has executed the \"continue\", \"step-into\", \"step-over\" actions and get the\n        other updated information from the server.\n      */\n      poll_result: function(trans_id) {\n      var self = this;\n\n      // Do we need to poll?\n      if(!pgTools.DirectDebug.is_polling_required){\n        return;\n      }\n\n      // Make ajax call to listen the database message\n      var baseUrl = url_for('debugger.poll_result', {'trans_id': trans_id});\n\n      /*\n        During the execution we should poll the result in minimum seconds but once the execution is completed\n        and wait for the another debugging session then we should decrease the polling frequency.\n      */\n      if (pgTools.DirectDebug.polling_timeout_idle) {\n        // poll the result after 1 second\n        var  poll_timeout = 1000;\n      }\n      else {\n        // poll the result after 200 ms\n        var  poll_timeout = 200;\n      }\n\n      setTimeout(\n        function() {\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          beforeSend: function(jqXHR, settings) {\n            // set cursor to progress before every poll.\n            $('.debugger-container').addClass('show_progress');\n          },\n          success: function(res) {\n            // remove progress cursor\n            $('.debugger-container').removeClass('show_progress');\n\n            if (res.data.status === 'Success') {\n              // If no result then poll again to wait for results.\n              if (res.data.result == null || res.data.result.length == 0) {\n                self.poll_result(trans_id);\n              }\n              else {\n                if (res.data.result[0].src != undefined || res.data.result[0].src != null) {\n                pgTools.DirectDebug.polling_timeout_idle = false;\n                pgTools.DirectDebug.docker.finishLoading(50);\n                pgTools.DirectDebug.editor.setValue(res.data.result[0].src);\n                self.UpdateBreakpoint(trans_id);\n                pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n                pgTools.DirectDebug.editor.addLineClass((res.data.result[0].linenumber - 2), 'wrap', 'CodeMirror-activeline-background');\n                self.active_line_no = (res.data.result[0].linenumber - 2);\n\n                // Update the stack, local variables and parameters information\n                self.GetStackInformation(trans_id);\n\n                }\n                else if (!pgTools.DirectDebug.debug_type && !pgTools.DirectDebug.first_time_indirect_debug) {\n                  pgTools.DirectDebug.docker.finishLoading(50);\n                  if (self.active_line_no != undefined) {\n                    pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n                  }\n                  self.clear_all_breakpoint(trans_id);\n                  self.execute_query(trans_id);\n                  pgTools.DirectDebug.first_time_indirect_debug = true;\n                  pgTools.DirectDebug.polling_timeout_idle = false;\n                }\n                else {\n                  pgTools.DirectDebug.polling_timeout_idle = false;\n                  pgTools.DirectDebug.docker.finishLoading(50);\n                  // If the source is really changed then only update the breakpoint information\n                  if (res.data.result[0].src != pgTools.DirectDebug.editor.getValue()) {\n                    pgTools.DirectDebug.editor.setValue(res.data.result[0].src);\n                    self.UpdateBreakpoint(trans_id);\n                  }\n\n                  pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n                  pgTools.DirectDebug.editor.addLineClass((res.data.result[0].linenumber - 2), 'wrap', 'CodeMirror-activeline-background');\n                  self.active_line_no = (res.data.result[0].linenumber - 2);\n\n                  // Update the stack, local variables and parameters information\n                  self.GetStackInformation(trans_id);\n                }\n\n                // Enable all the buttons as we got the results\n                self.enable('stop', true);\n                self.enable('step_over', true);\n                self.enable('step_into', true);\n                self.enable('continue', true);\n                self.enable('toggle_breakpoint', true);\n                self.enable('clear_all_breakpoints', true);\n              }\n            }\n            else if (res.data.status === 'Busy') {\n              pgTools.DirectDebug.polling_timeout_idle = true;\n              // If status is Busy then poll the result by recursive call to the poll function\n              if (!pgTools.DirectDebug.debug_type) {\n                pgTools.DirectDebug.docker.startLoading(gettext('Waiting for another session to invoke the target...'));\n\n                // As we are waiting for another session to invoke the target,disable all the buttons\n                self.enable('stop', false);\n                self.enable('step_over', false);\n                self.enable('step_into', false);\n                self.enable('continue', false);\n                self.enable('toggle_breakpoint', false);\n                self.enable('clear_all_breakpoints', false);\n                pgTools.DirectDebug.first_time_indirect_debug = false;\n                self.poll_result(trans_id);\n              }\n              else {\n                self.poll_result(trans_id);\n              }\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while polling result.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while polling result.'\n            );\n          }\n        });\n      }, poll_timeout );\n\n    },\n\n    // This function will update messages tab\n    update_messages: function(msg) {\n      // To prevent xss\n      msg = _.escape(msg);\n\n      var old_msgs='', new_msgs='';\n        old_msgs = pgTools.DirectDebug.messages_panel.$container.find('.messages').html();\n        if(old_msgs) {\n          new_msgs = (old_msgs + '\\n' + msg)\n                        .replace(/(?:\\r\\n|\\r|\\n)/g, '<br />') // Newlines with <br>\n                        .replace(/(<br\\ ?\\/?>)+/g, '<br />'); // multiple <br> with single <br>\n        } else {\n          new_msgs = msg;\n        }\n        pgTools.DirectDebug.messages_panel.$container.find('.messages').html(new_msgs);\n    },\n\n    /*\n      For the direct debugging, we need to check weather the functions execution is completed or not. After completion\n      of the debugging, we will stop polling the result  until new execution starts.\n    */\n    poll_end_execution_result: function(trans_id) {\n      var self = this;\n\n      // Do we need to poll?\n      if(!pgTools.DirectDebug.is_polling_required){\n        return;\n      }\n\n      // Make ajax call to listen the database message\n      var baseUrl = url_for('debugger.poll_end_execution_result', {'trans_id': trans_id});\n\n      /*\n        During the execution we should poll the result in minimum seconds but once the execution is completed\n        and wait for the another debugging session then we should decrease the polling frequency.\n      */\n      if (pgTools.DirectDebug.polling_timeout_idle) {\n        // poll the result to check that execution is completed or not after 1200 ms\n        var  poll_end_timeout = 1200;\n      }\n      else {\n        // poll the result to check that execution is completed or not after 350 ms\n        var  poll_end_timeout = 250;\n      }\n\n      setTimeout(\n        function() {\n          $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status === 'Success') {\n              if(res.data.result == undefined ) {\n                /*\n                 \"result\" is undefined only in case of EDB procedure. As Once the EDB procedure execution is completed\n                 then we are not getting any result so we need ignore the result.\n                */\n                pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n                pgTools.DirectDebug.direct_execution_completed = true;\n                pgTools.DirectDebug.polling_timeout_idle = true;\n\n                //Set the alertify message to inform the user that execution is completed.\n                Alertify.success(res.info, 3);\n\n                // Update the message tab of the debugger\n                if (res.data.status_message) {\n                  self.update_messages(res.data.status_message);\n                }\n\n                // remove progress cursor\n                $('.debugger-container').removeClass('show_progress');\n\n                // Execution completed so disable the buttons other than \"Continue/Start\" button because user can still\n                // start the same execution again.\n                self.enable('stop', false);\n                self.enable('step_over', false);\n                self.enable('step_into', false);\n                self.enable('toggle_breakpoint', false);\n                self.enable('clear_all_breakpoints', false);\n                self.enable('continue', true);\n                // Stop further polling\n                pgTools.DirectDebug.is_polling_required = false;\n              }\n              else {\n                // Call function to create and update local variables ....\n                if (res.data.result != null) {\n                  pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n                  self.AddResults(res.data.col_info, res.data.result);\n                  pgTools.DirectDebug.results_panel.focus();\n                  pgTools.DirectDebug.direct_execution_completed = true;\n                  pgTools.DirectDebug.polling_timeout_idle = true;\n\n                  //Set the alertify message to inform the user that execution is completed.\n                  Alertify.success(res.info, 3);\n\n                  // Update the message tab of the debugger\n                  if (res.data.status_message) {\n                    self.update_messages(res.data.status_message);\n                  }\n\n                  // remove progress cursor\n                  $('.debugger-container').removeClass('show_progress');\n\n                  // Execution completed so disable the buttons other than \"Continue/Start\" button because user can still\n                  // start the same execution again.\n                  self.enable('stop', false);\n                  self.enable('step_over', false);\n                  self.enable('step_into', false);\n                  self.enable('toggle_breakpoint', false);\n                  self.enable('clear_all_breakpoints', false);\n                  self.enable('continue', true);\n\n                  // Stop further pooling\n                  pgTools.DirectDebug.is_polling_required = false;\n                }\n              }\n            }\n            else if (res.data.status === 'Busy') {\n              // If status is Busy then poll the result by recursive call to the poll function\n              self.poll_end_execution_result(trans_id);\n              // Update the message tab of the debugger\n              if (res.data.status_message) {\n                self.update_messages(res.data.status_message);\n              }\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger poll end execution error',\n                res.data.result\n              );\n            }\n            else if (res.data.status === 'ERROR') {\n              pgTools.DirectDebug.direct_execution_completed = true;\n              pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n\n              //Set the Alertify message to inform the user that execution is completed with error.\n              if(!pgTools.DirectDebug.is_user_aborted_debugging) {\n                Alertify.error(res.info, 3);\n              }\n\n              // Update the message tab of the debugger\n              if (res.data.status_message) {\n                self.update_messages(res.data.status_message);\n              }\n\n              pgTools.DirectDebug.messages_panel.focus();\n\n              // remove progress cursor\n              $('.debugger-container').removeClass('show_progress');\n\n              // Execution completed so disable the buttons other than\n              // \"Continue/Start\" button because user can still start the\n              // same execution again.\n              self.enable('stop', false);\n              self.enable('step_over', false);\n              self.enable('step_into', false);\n              self.enable('toggle_breakpoint', false);\n              self.enable('clear_all_breakpoints', false);\n              // If debugging is stopped by user then do not enable\n              // continue/restart button\n              if(!pgTools.DirectDebug.is_user_aborted_debugging)\n              {\n                self.enable('continue', true);\n                pgTools.DirectDebug.is_user_aborted_debugging = false;\n              }\n\n              // Stop further pooling\n              pgTools.DirectDebug.is_polling_required = false;\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while polling result.'\n            );\n          }\n        });\n      }, poll_end_timeout);\n\n    },\n\n    Restart: function(trans_id) {\n\n      var self = this,\n        baseUrl = url_for('debugger.restart', {'trans_id': trans_id});\n      self.enable('stop', false);\n      self.enable('step_over', false);\n      self.enable('step_into', false);\n      self.enable('toggle_breakpoint', false);\n      self.enable('clear_all_breakpoints', false);\n      self.enable('continue', false);\n\n      // Clear msg tab\n      pgTools.DirectDebug.messages_panel.$container.find('.messages').html('');\n\n      $.ajax({\n        url: baseUrl,\n        success: function(res) {\n          // Restart the same function debugging with previous arguments\n          var restart_dbg = res.data.restart_debug ? 1 : 0;\n\n          // Start pooling again\n          pgTools.DirectDebug.polling_timeout_idle = false;\n          pgTools.DirectDebug.is_polling_required = true;\n          self.poll_end_execution_result(trans_id);\n          self.poll_result(trans_id);\n\n          if (restart_dbg) {\n            pgTools.DirectDebug.debug_restarted = true;\n          }\n\n          /*\n           Need to check if restart debugging really require to open the input dialog ?\n           If yes then we will get the previous arguments from database and populate the input dialog\n           If no then we should directly start the listener.\n          */\n          if (res.data.result.require_input) {\n            var res_val = debug_function_again(res.data.result, restart_dbg);\n          }\n          else {\n            // Debugging of void function is started again so we need to start the listener again\n            var baseUrl = url_for('debugger.start_listener', {'trans_id': trans_id});\n\n            $.ajax({\n              url: baseUrl,\n              method: 'GET',\n              success: function(res) {\n                if (pgTools.DirectDebug.debug_type) {\n                  self.poll_end_execution_result(trans_id);\n                }\n              },\n              error: function(e) {\n                Alertify.alert(\n                  'Debugger Error',\n                  'Error while polling result.'\n                );\n              }\n            });\n          }\n        },\n        error: function(xhr, status, error) {\n          try {\n            var err = $.parseJSON(xhr.responseText);\n            if (err.success == 0) {\n              Alertify.alert(err.errormsg);\n            }\n          } catch (e) {}\n        }\n      });\n    },\n\n    // Continue the execution until the next breakpoint\n    Continue: function(trans_id) {\n      var self = this;\n      self.enable('stop', false);\n      self.enable('step_over', false);\n      self.enable('step_into', false);\n      self.enable('toggle_breakpoint', false);\n      self.enable('clear_all_breakpoints', false);\n      self.enable('continue', false);\n\n      //Check first if previous execution was completed or not\n      if (pgTools.DirectDebug.direct_execution_completed &&\n          pgTools.DirectDebug.direct_execution_completed == pgTools.DirectDebug.polling_timeout_idle) {\n        self.Restart(trans_id);\n      }\n      else {\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.execute_query', {\n                        'trans_id': trans_id,\n                        'query_type': 'continue'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              self.poll_result(trans_id);\n            }\n            else {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while executing continue in debugging session.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while executing continue in debugging session.'\n            );\n          }\n        });\n      }\n    },\n\n      Step_over: function(trans_id) {\n        var self = this;\n        self.enable('stop', false);\n        self.enable('step_over', false);\n        self.enable('step_into', false);\n        self.enable('toggle_breakpoint', false);\n        self.enable('clear_all_breakpoints', false);\n        self.enable('continue', false);\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.execute_query', {\n                        'trans_id': trans_id,\n                        'query_type': 'step_over'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              self.poll_result(trans_id);\n            }\n            else {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while executing step over in debugging session.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while executing step over in debugging session.'\n            );\n          }\n        });\n      },\n\n      Step_into: function(trans_id) {\n        var self = this;\n        self.enable('stop', false);\n        self.enable('step_over', false);\n        self.enable('step_into', false);\n        self.enable('toggle_breakpoint', false);\n        self.enable('clear_all_breakpoints', false);\n        self.enable('continue', false);\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.execute_query', {\n                        'trans_id': trans_id,\n                        'query_type': 'step_into'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              self.poll_result(trans_id);\n            }\n            else {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while executing step into in debugging session.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while executing step into in debugging session.'\n            );\n          }\n        });\n      },\n\n      Stop: function(trans_id) {\n        var self = this;\n        self.enable('stop', false);\n        self.enable('step_over', false);\n        self.enable('step_into', false);\n        self.enable('toggle_breakpoint', false);\n        self.enable('clear_all_breakpoints', false);\n        self.enable('continue', false);\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for(\n                        'debugger.execute_query', {\n                          'trans_id': trans_id,\n                          'query_type': 'abort_target'\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              // Call function to create and update local variables ....\n              pgTools.DirectDebug.editor.removeLineClass(self.active_line_no, 'wrap', 'CodeMirror-activeline-background');\n              pgTools.DirectDebug.direct_execution_completed = true;\n              pgTools.DirectDebug.is_user_aborted_debugging = true;\n\n              // Stop further pooling\n              pgTools.DirectDebug.is_polling_required = false;\n\n              // Restarting debugging in the same transaction do not work\n              // We will give same behaviour as pgAdmin3 and disable all buttons\n              self.enable('continue', false);\n\n              // Set the Alertify message to inform the user that execution\n              // is completed.\n              Alertify.success(res.info, 3);\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while executing stop in debugging session.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while executing stop in debugging session.'\n            );\n          }\n        });\n      },\n\n      toggle_breakpoint: function(trans_id) {\n        var self = this;\n        self.enable('stop', false);\n        self.enable('step_over', false);\n        self.enable('step_into', false);\n        self.enable('toggle_breakpoint', false);\n        self.enable('clear_all_breakpoints', false);\n        self.enable('continue', false);\n\n\n        var info = pgTools.DirectDebug.editor.lineInfo(self.active_line_no);\n        var baseUrl = '';\n\n        // If gutterMarker is undefined that means there is no marker defined previously\n        // So we need to set the breakpoint command here...\n        if (info.gutterMarkers == undefined) {\n            baseUrl = url_for('debugger.set_breakpoint', {\n                        'trans_id': trans_id,\n                        'line_no': self.active_line_no + 1,\n                        'set_type': '1'\n                      });\n        }\n        else {\n            baseUrl = url_for('debugger.set_breakpoint', {\n                        'trans_id': trans_id,\n                        'line_no': self.active_line_no + 1,\n                        'set_type': '0'\n                      });\n        }\n\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              // Call function to create and update local variables ....\n              var info = pgTools.DirectDebug.editor.lineInfo(self.active_line_no);\n\n              if (info.gutterMarkers != undefined) {\n                pgTools.DirectDebug.editor.setGutterMarker(self.active_line_no, \"breakpoints\", null);\n              }\n              else {\n                pgTools.DirectDebug.editor.setGutterMarker(self.active_line_no, \"breakpoints\", function() {\n                    var marker = document.createElement(\"div\");\n                    marker.style.color = \"#822\";\n                    marker.innerHTML = \"●\";\n                    return marker;\n                }());\n              }\n              self.enable('stop', true);\n              self.enable('step_over', true);\n              self.enable('step_into', true);\n              self.enable('toggle_breakpoint', true);\n              self.enable('clear_all_breakpoints', true);\n              self.enable('continue', true);\n            }\n            else if (res.data.status === 'NotConnected') {\n              Alertify.alert(\n                'Debugger Error',\n                'Error while toggling breakpoint.'\n              );\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while toggling breakpoint.'\n            );\n          }\n        });\n      },\n\n      clear_all_breakpoint: function(trans_id) {\n        var self = this,\n          br_list = self.GetBreakpointInformation(trans_id);\n\n        // If there is no break point to clear then we should return from here.\n        if ((br_list.length == 1) && (br_list[0].linenumber == -1))\n          return;\n\n        self.enable('stop', false);\n        self.enable('step_over', false);\n        self.enable('step_into', false);\n        self.enable('toggle_breakpoint', false);\n        self.enable('clear_all_breakpoints', false);\n        self.enable('continue', false);\n\n        var breakpoint_list = new Array();\n\n        for (var i = 0; i < br_list.length; i++) {\n          if (br_list[i].linenumber != -1) {\n            breakpoint_list.push(br_list[i].linenumber)\n          }\n        }\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.clear_all_breakpoint', {'trans_id': trans_id});\n\n        $.ajax({\n          url: baseUrl,\n          method: 'POST',\n          data: { 'breakpoint_list': breakpoint_list.join() },\n          success: function(res) {\n            if (res.data.status) {\n              for (var i = 0; i < breakpoint_list.length; i++) {\n                var info = pgTools.DirectDebug.editor.lineInfo((breakpoint_list[i] - 1));\n\n                if (info) {\n                  if (info.gutterMarkers != undefined) {\n                    pgTools.DirectDebug.editor.setGutterMarker((breakpoint_list[i] - 1), \"breakpoints\", null);\n                  }\n                }\n              }\n            }\n          self.enable('stop', true);\n          self.enable('step_over', true);\n          self.enable('step_into', true);\n          self.enable('toggle_breakpoint', true);\n          self.enable('clear_all_breakpoints', true);\n          self.enable('continue', true);\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while clearing all breakpoint.'\n            );\n          }\n        });\n      },\n\n      AddStackInformation: function(result) {\n        var self = this;\n\n        // Remove the existing created grid and update the stack values\n        if (self.stack_grid) {\n            self.stack_grid.remove();\n            self.stack_grid = null;\n        }\n\n        var DebuggerStackModel = Backbone.Model.extend({\n          defaults: {\n            name: undefined,\n            value: undefined,\n            line_no: undefined\n          }\n        });\n\n        // Collection which contains the model for function informations.\n        var StackCollection = Backbone.Collection.extend({\n          model: DebuggerStackModel\n        });\n\n        var stackGridCols = [\n          {name: 'name', label:'Name', type:'text', editable: false, cell:'string'},\n          {name: 'value', label:'Value', type:'text', editable: false, cell:'string'},\n          {name: 'line_no', label:'Line No.', type:'text', editable: false, cell:'string'}\n        ];\n\n        var my_obj = [];\n        if (result.length != 0)\n        {\n          for (var i = 0; i < result.length; i++) {\n            my_obj.push({ \"name\": result[i].targetname, \"value\": result[i].args, \"line_no\": result[i].linenumber });\n          }\n        }\n\n        var stackColl = this.stackColl = new StackCollection(my_obj);\n        this.stackColl.on('backgrid:row:selected', self.select_frame, self);\n\n        // Initialize a new Grid instance\n        var stack_grid = this.stack_grid = new Backgrid.Grid({\n          columns: stackGridCols,\n          row: Backgrid.Row.extend({\n            highlightColor: \"#D9EDF7\",\n            disabledColor: \"#F1F1F1\",\n            events: {\n              click: \"rowClick\"\n            },\n            rowClick: function(e) {\n              //Find which row is selected and depending on that send the frame id\n              for (var i = 0; i < this.model.collection.length; i++) {\n                if (this.model.collection.models[i].get('name') == this.model.get('name')) {\n                  self.frame_id_ = i;\n                  break;\n                }\n              }\n              this.model.trigger('backgrid:row:selected', this);\n              self.stack_grid.$el.find(\"td\").css(\"background-color\", this.disabledColor);\n              this.$el.find(\"td\").css(\"background-color\", this.highlightColor);\n            }\n          }),\n          collection: stackColl,\n          className: \"backgrid table-bordered\"\n        });\n\n        stack_grid.render();\n\n        // Render the stack grid into stack panel\n        pgTools.DirectDebug.stack_pane_panel.$container.find('.stack_pane').append(stack_grid.el);\n\n      },\n\n      AddResults: function(columns, result) {\n        var self = this;\n\n        // Remove the existing created grid and update the result values\n        if (self.result_grid) {\n            self.result_grid.remove();\n            self.result_grid = null;\n        }\n\n        var DebuggerResultsModel = Backbone.Model.extend({\n          defaults: {\n            name: undefined\n          }\n        });\n\n        // Collection which contains the model for function informations.\n        var ResultsCollection = Backbone.Collection.extend({\n          model: DebuggerResultsModel\n        });\n\n        var resultGridCols = [];\n        if(_.size(columns)) {\n          _.each(columns, function(c) {\n            var column = {\n                            type:'text',\n                            editable: false,\n                            cell:'string'\n                         };\n            column['name'] = column['label'] = c.name;\n            resultGridCols.push(column);\n          });\n        }\n\n        // Initialize a new Grid instance\n        var result_grid = this.result_grid = new Backgrid.Grid({\n          columns: resultGridCols,\n          collection: new ResultsCollection(result),\n          className: \"backgrid table-bordered\"\n        });\n\n        result_grid.render();\n\n        // Render the result grid into result panel\n        pgTools.DirectDebug.results_panel.$container.find('.debug_results').append(result_grid.el);\n\n      },\n\n      AddLocalVariables: function(result) {\n        var self = this;\n\n        // Remove the existing created grid and update the variables values\n        if (self.variable_grid) {\n            self.variable_grid.remove();\n            self.variable_grid = null;\n        }\n\n        var DebuggerVariablesModel = Backbone.Model.extend({\n          defaults: {\n            name: undefined,\n            type: undefined,\n            value: undefined\n          }\n        });\n\n        // Collection which contains the model for function informations.\n        var VariablesCollection = Backbone.Collection.extend({\n          model: DebuggerVariablesModel\n        });\n\n        var gridCols = [\n          {name: 'name', label:'Name', type:'text', editable: false, cell:'string'},\n          {name: 'type', label:'Type', type: 'text', editable: false, cell:'string'},\n          {name: 'value', label:'Value', type: 'text', cell: 'string'}\n        ];\n\n        var my_obj = [];\n        if (result.length != 0)\n        {\n          for (var i = 0; i < result.length; i++) {\n            if (result[i].varclass == 'L') {\n              my_obj.push({ \"name\": result[i].name, \"type\": result[i].dtype, \"value\": result[i].value});\n            }\n          }\n        }\n\n        // Initialize a new Grid instance\n        var variable_grid = this.variable_grid = new Backgrid.Grid({\n          columns: gridCols,\n          collection: new VariablesCollection(my_obj),\n          className: \"backgrid table-bordered\"\n        });\n\n        variable_grid.render();\n\n        // Render the variables grid into local variables panel\n        pgTools.DirectDebug.local_variables_panel.$container.find('.local_variables').append(variable_grid.el);\n\n      },\n\n      AddParameters: function(result) {\n        var self = this;\n\n        // Remove the existing created grid and update the parameter values\n        if (self.param_grid) {\n            self.param_grid.remove();\n            self.param_grid = null;\n        }\n\n        var DebuggerParametersModel = Backbone.Model.extend({\n          defaults: {\n            name: undefined,\n            type: undefined,\n            value: undefined\n          }\n        });\n\n        // Collection which contains the model for function informations.\n        var ParametersCollection = self.ParametersCollection = Backbone.Collection.extend({\n          model: DebuggerParametersModel\n        });\n\n        self.ParametersCollection.prototype.on('change', self.deposit_parameter_value, self);\n\n        var paramGridCols = [\n          {name: 'name', label:'Name', type:'text', editable: false, cell:'string'},\n          {name: 'type', label:'Type', type: 'text', editable: false, cell:'string'},\n          {name: 'value', label:'Value', type: 'text', cell: 'string'}\n        ];\n\n        var param_obj = [];\n        if (result.length != 0)\n        {\n          for (var i = 0; i < result.length; i++) {\n            if (result[i].varclass == 'A') {\n              param_obj.push({ \"name\": result[i].name, \"type\": result[i].dtype, \"value\": result[i].value});\n            }\n          }\n        }\n\n        // Initialize a new Grid instance\n        var param_grid = this.param_grid = new Backgrid.Grid({\n          columns: paramGridCols,\n          collection: new ParametersCollection(param_obj),\n          className: \"backgrid table-bordered\"\n        });\n\n        param_grid.render();\n\n        // Render the parameters grid into parameter panel\n        pgTools.DirectDebug.parameters_panel.$container.find('.parameters').append(param_grid.el);\n      },\n\n      deposit_parameter_value: function(model) {\n        var self = this;\n\n        // variable name and value list that is changed by user\n        var name_value_list = [];\n\n        name_value_list.push({ 'name': model.get('name'),'type': model.get('type'), 'value': model.get('value')});\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.deposit_value', {\n                        'trans_id': pgTools.DirectDebug.trans_id\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'POST',\n          data:{'data':JSON.stringify(name_value_list)},\n          success: function(res) {\n            if (res.data.status) {\n              // Get the updated variables value\n              self.GetLocalVariables(pgTools.DirectDebug.trans_id);\n              // Show the message to the user that deposit value is success or failure\n              if (res.data.result) {\n                Alertify.success(res.data.info, 3);\n              } else {\n                Alertify.error(res.data.info, 3);\n              }\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while depositing variable value.'\n            );\n          }\n        });\n      },\n\n      select_frame: function(model, selected) {\n        var self = this;\n\n        // Make ajax call to listen the database message\n        var baseUrl = url_for('debugger.select_frame', {\n                        'trans_id': pgTools.DirectDebug.trans_id,\n                        'frame_id': self.frame_id_\n                      });\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              pgTools.DirectDebug.editor.setValue(res.data.result[0].src);\n              self.UpdateBreakpoint(pgTools.DirectDebug.trans_id);\n              //active_line_no = self.active_line_no = (res.data.result[0].linenumber - 2);\n              pgTools.DirectDebug.editor.addLineClass((res.data.result[0].linenumber - 2), 'wrap', 'CodeMirror-activeline-background');\n\n              // Call function to create and update local variables ....\n              self.GetLocalVariables(pgTools.DirectDebug.trans_id);\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while selecting frame.'\n            );\n          }\n        });\n      },\n    }\n  )\n\n  /*\n    Debugger tool var view to create the button toolbar and listen to the button click event and inform the\n    controller about the click and controller will take the action for the specified button click.\n  */\n  var DebuggerToolbarView = Backbone.View.extend({\n    el: '#btn-toolbar',\n    initialize: function() {\n      controller.on('pgDebugger:button:state:stop', this.enable_stop, this);\n      controller.on('pgDebugger:button:state:step_over', this.enable_step_over, this);\n      controller.on('pgDebugger:button:state:step_into', this.enable_step_into, this);\n      controller.on('pgDebugger:button:state:continue', this.enable_continue, this);\n      controller.on('pgDebugger:button:state:toggle_breakpoint', this.enable_toggle_breakpoint, this);\n      controller.on('pgDebugger:button:state:clear_all_breakpoints', this.enable_clear_all_breakpoints, this);\n    },\n    events: {\n        'click .btn-stop': 'on_stop',\n        'click .btn-clear-breakpoint': 'on_clear_all_breakpoint',\n        'click .btn-toggle-breakpoint': 'on_toggle_breakpoint',\n        'click .btn-continue': 'on_continue',\n        'click .btn-step-over': 'on_step_over',\n        'click .btn-step-into': 'on_step_into'\n    },\n    enable_stop: function(enable) {\n      var $btn = this.$el.find('.btn-stop');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n    enable_step_over: function(enable) {\n      var $btn = this.$el.find('.btn-step-over');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n    enable_step_into: function(enable) {\n      var $btn = this.$el.find('.btn-step-into');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n    enable_continue: function(enable) {\n      var $btn = this.$el.find('.btn-continue');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n    enable_toggle_breakpoint: function(enable) {\n      var $btn = this.$el.find('.btn-toggle-breakpoint');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n    enable_clear_all_breakpoints: function(enable) {\n      var $btn = this.$el.find('.btn-clear-breakpoint');\n\n      if (enable) {\n        $btn.prop('disabled', false);\n        $btn.removeAttr('disabled');\n      } else {\n        $btn.prop('disabled', true);\n        $btn.attr('disabled', 'disabled');\n      }\n    },\n\n    on_stop: function() {\n      controller.Stop(pgTools.DirectDebug.trans_id);\n    },\n    on_clear_all_breakpoint: function() {\n      controller.clear_all_breakpoint(pgTools.DirectDebug.trans_id);\n    },\n    on_toggle_breakpoint: function() {\n      controller.toggle_breakpoint(pgTools.DirectDebug.trans_id);\n    },\n    on_continue: function() {\n      controller.Continue(pgTools.DirectDebug.trans_id);\n    },\n    on_step_over: function() {\n      controller.Step_over(pgTools.DirectDebug.trans_id);\n    },\n    on_step_into: function() {\n      controller.Step_into(pgTools.DirectDebug.trans_id);\n    },\n  });\n\n\n  /*\n    Function is responsible to create the new wcDocker instance for debugger and initialize the debugger panel inside\n    the docker instance.\n  */\n  var DirectDebug = function() {};\n\n  _.extend(DirectDebug.prototype, {\n    init: function(trans_id, debug_type) { /* We should get the transaction id from the server during initialization here */\n      // We do not want to initialize the module multiple times.\n\n      var self = this;\n      _.bindAll(pgTools.DirectDebug, 'messages');\n\n      if (this.initialized)\n          return;\n\n      this.initialized = true;\n      this.trans_id = trans_id;\n      this.debug_type = debug_type;\n      this.first_time_indirect_debug = false;\n      this.direct_execution_completed = false;\n      this.polling_timeout_idle = false;\n      this.debug_restarted = false;\n      this.is_user_aborted_debugging = false;\n      this.is_polling_required = true; // Flag to stop unwanted ajax calls\n\n      var docker = this.docker = new wcDocker(\n          '#container', {\n          allowContextMenu: false,\n          allowCollapse: false,\n          themePath: url_for('static', {'filename': 'css'}),\n          theme: 'webcabin.overrides.css'\n        });\n\n      this.panels = [];\n\n      // Below code will be executed for indirect debugging\n      // indirect debugging - 0  and for direct debugging - 1\n      if (trans_id != undefined && !debug_type) {\n        // Make ajax call to execute the and start the target for execution\n        var baseUrl = url_for('debugger.start_listener', {'trans_id': trans_id });\n\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              self.intializePanels();\n              controller.poll_result(trans_id);\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while starting debugging listener.'\n            );\n          }\n        });\n      }\n      else if (trans_id != undefined && debug_type)\n      {\n        // Make ajax call to execute the and start the target for execution\n        var baseUrl = url_for('debugger.start_listener', {'trans_id': trans_id });\n\n        $.ajax({\n          url: baseUrl,\n          method: 'GET',\n          success: function(res) {\n            if (res.data.status) {\n              self.messages(trans_id);\n            }\n          },\n          error: function(e) {\n            Alertify.alert(\n              'Debugger Error',\n              'Error while starting debugging listener.'\n            );\n          }\n        });\n      }\n      else\n        this.intializePanels();\n    },\n\n    // Read the messages of the database server and get the port ID and attach the executer to that port.\n    messages: function(trans_id) {\n      var self = this;\n      // Make ajax call to listen the database message\n      var baseUrl = url_for('debugger.messages', {'trans_id': trans_id });\n\n      $.ajax({\n        url: baseUrl,\n        method: 'GET',\n        success: function(res) {\n          if (res.data.status === 'Success') {\n            self.intializePanels();\n            // If status is Success then find the port number to attach the executer.\n            //self.start_execution(trans_id, res.data.result);\n            controller.start_execution(trans_id, res.data.result);\n          }\n          else if (res.data.status === 'Busy') {\n            // If status is Busy then poll the result by recursive call to the poll function\n            self.messages(trans_id);\n          }\n          else if (res.data.status === 'NotConnected') {\n            Alertify.alert(\n              'Not connected to server or connection with the server has been closed.',\n              res.data.result\n            );\n          }\n        },\n        error: function(e) {\n          Alertify.alert(\n            'Debugger Error',\n            'Error while fetching messages information.'\n          );\n        }\n      });\n\n    },\n\n    // Callback function when user click on gutters of codemirror to set/clear the breakpoint\n    onBreakPoint: function(cm, m, gutter) {\n      var self = this;\n\n      // If breakpoint gutter is clicked and execution is not completed then only set the breakpoint\n      if (gutter == \"breakpoints\" && !pgTools.DirectDebug.polling_timeout_idle ) {\n        // We may want to check, if break-point is allowed at this moment or not\n        var info = cm.lineInfo(m);\n\n        // If gutterMarker is undefined that means there is no marker defined previously\n        // So we need to set the breakpoint command here...\n        if (info.gutterMarkers == undefined) {\n          controller.set_breakpoint(self.trans_id,m+1,1); //set the breakpoint\n        }\n        else {\n          if (info.gutterMarkers.breakpoints == undefined) {\n            controller.set_breakpoint(self.trans_id,m+1,1); //set the breakpoint\n          }\n          else {\n            controller.set_breakpoint(self.trans_id,m+1,0); //clear the breakpoint\n          }\n        }\n\n        // If line folding is defined then gutterMarker will be defined so\n        // we need to find out 'breakpoints' information\n        var markers = info.gutterMarkers;\n        if (markers != undefined && info.gutterMarkers.breakpoints == undefined)\n          markers = info.gutterMarkers.breakpoints\n\n        cm.setGutterMarker(\n          m, \"breakpoints\", markers ? null : function() {\n            var marker = document.createElement(\"div\");\n\n            marker.style.color = \"#822\";\n            marker.innerHTML = \"●\";\n\n            return marker;\n        }());\n      }\n    },\n\n    // Create the debugger layout with splitter and display the appropriate data received from server.\n    intializePanels: function() {\n      var self = this;\n      this.registerPanel(\n        'code', false, '100%', '50%',\n        function(panel) {\n\n            // Create the parameters panel to display the arguments of the functions\n            var parameters = new pgAdmin.Browser.Panel({\n              name: 'parameters',\n              title: gettext('Parameters'),\n              width: '100%',\n              height:'100%',\n              isCloseable: false,\n              isPrivate: true,\n              content: '<div id =\"parameters\" class=\"parameters\"></div>'\n            })\n\n            // Create the Local variables panel to display the local variables of the function.\n            var local_variables = new pgAdmin.Browser.Panel({\n              name: 'local_variables',\n              title: gettext('Local variables'),\n              width: '100%',\n              height:'100%',\n              isCloseable: false,\n              isPrivate: true,\n              content: '<div id =\"local_variables\" class=\"local_variables\"></div>'\n            })\n\n            // Create the messages panel to display the message returned from the database server\n            var messages = new pgAdmin.Browser.Panel({\n              name: 'messages',\n              title: gettext('Messages'),\n              width: '100%',\n              height:'100%',\n              isCloseable: false,\n              isPrivate: true,\n              content: '<div id=\"messages\" class=\"messages\"></div>'\n            })\n\n            // Create the result panel to display the result after debugging the function\n            var results = new pgAdmin.Browser.Panel({\n              name: 'results',\n              title: gettext('Results'),\n              width: '100%',\n              height:'100%',\n              isCloseable: false,\n              isPrivate: true,\n              content: '<div id=\"debug_results\" class=\"debug_results\"></div>'\n            })\n\n            // Create the stack pane panel to display the debugging stack information.\n            var stack_pane = new pgAdmin.Browser.Panel({\n              name: 'stack_pane',\n              title: gettext('Stack'),\n              width: '100%',\n              height:'100%',\n              isCloseable: false,\n              isPrivate: true,\n              content: '<div id=\"stack_pane\" class=\"stack_pane\"></div>'\n            })\n\n            // Load all the created panels\n            parameters.load(self.docker);\n            local_variables.load(self.docker);\n            messages.load(self.docker);\n            results.load(self.docker);\n            stack_pane.load(self.docker);\n        });\n\n        self.code_editor_panel = self.docker.addPanel('code', wcDocker.DOCK.TOP );\n\n        self.parameters_panel = self.docker.addPanel(\n          'parameters', wcDocker.DOCK.BOTTOM, self.code_editor_panel);\n        self.local_variables_panel = self.docker.addPanel('local_variables', wcDocker.DOCK.STACKED, self.parameters_panel, {\n          tabOrientation: wcDocker.TAB.TOP\n        });\n        self.messages_panel = self.docker.addPanel('messages', wcDocker.DOCK.STACKED, self.parameters_panel);\n        self.results_panel = self.docker.addPanel(\n          'results', wcDocker.DOCK.STACKED, self.parameters_panel);\n        self.stack_pane_panel = self.docker.addPanel(\n          'stack_pane', wcDocker.DOCK.STACKED, self.parameters_panel);\n\n        var editor_pane = $('<div id=\"stack_editor_pane\" class=\"full-container-pane info\"></div>');\n        var code_editor_area = $('<textarea id=\"debugger-editor-textarea\"></textarea>').append(editor_pane);\n        self.code_editor_panel.layout().addItem(code_editor_area);\n\n        // To show the line-number and set breakpoint marker details by user.\n        var editor = self.editor = CodeMirror.fromTextArea(\n          code_editor_area.get(0), {\n          lineNumbers: true,\n          foldOptions: {\n            widget: \"\\u2026\"\n          },\n          foldGutter: {\n            rangeFinder: CodeMirror.fold.combine(CodeMirror.pgadminBeginRangeFinder, CodeMirror.pgadminIfRangeFinder,\n                                                 CodeMirror.pgadminLoopRangeFinder, CodeMirror.pgadminCaseRangeFinder)\n          },\n          gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\", \"breakpoints\"],\n          mode: \"text/x-pgsql\",\n          readOnly: true,\n          extraKeys: pgAdmin.Browser.editor_shortcut_keys,\n          tabSize: pgAdmin.Browser.editor_options.tabSize,\n          lineWrapping: pgAdmin.Browser.editor_options.wrapCode,\n          autoCloseBrackets: pgAdmin.Browser.editor_options.insert_pair_brackets,\n          matchBrackets: pgAdmin.Browser.editor_options.brace_matching\n        });\n\n        // On loading the docker, register the callbacks\n        var onLoad = function() {\n          self.docker.finishLoading(100);\n          self.docker.off(wcDocker.EVENT.LOADED);\n          // Register the callback when user set/clear the breakpoint on gutter area.\n          self.editor.on(\"gutterClick\", self.onBreakPoint.bind(self), self);\n        };\n\n        self.docker.startLoading(gettext('Loading...'));\n        self.docker.on(wcDocker.EVENT.LOADED, onLoad);\n\n        // Create the toolbar view for debugging the function\n        this.toolbarView = new DebuggerToolbarView();\n    },\n\n    // Register the panel with new debugger docker instance.\n    registerPanel: function(name, title, width, height, onInit) {\n      var self = this;\n\n      this.docker.registerPanelType(name, {\n        title: title,\n        isPrivate: true,\n        onCreate: function(panel) {\n          self.panels[name] = panel;\n          panel.initSize(width, height);\n          if (!title)\n            panel.title(false);\n          else\n            panel.title(title);\n          panel.closeable(false);\n          panel.layout().addItem(\n            $('<div>', {'class': 'pg-debugger-panel'})\n          );\n          if (onInit) {\n            onInit.apply(self, [panel]);\n          }\n        }\n      });\n    }\n  });\n\n  pgTools.DirectDebug = new DirectDebug();\n  pgTools.DirectDebug['jquery'] = $;\n\n  return pgTools.DirectDebug;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/debugger/static/js/direct.js","define([\"translations\"], function (translations) {\n\n  /***\n   * This method behaves as a drop-in replacement for flask translation rendering.\n   * It uses the same translation file under the hood and uses flask to determine the language.\n   *\n   * ex. translate(\"some %(adjective)s text\", {adjective: \"cool\"})\n   *\n   * @param {String} text\n   * @param {Object} substitutions\n   */\n  return function gettext(text, substitutions) {\n\n    var rawTranslation = translations[text] ? translations[text] : text;\n\n    // captures things of the form %(substitutionName)s\n    var substitutionGroupsRegExp = /([^%]*)%\\(([^\\)]+)\\)s(.*)/;\n    var matchFound;\n\n    var interpolated = rawTranslation;\n    do {\n      matchFound = false;\n      interpolated = interpolated.replace(substitutionGroupsRegExp, function (_, textBeginning, substitutionName, textEnd) {\n        matchFound = true;\n        return textBeginning + substitutions[substitutionName] + textEnd;\n      });\n    } while (matchFound);\n\n    return interpolated;\n  };\n\n});\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/gettext.js","import CodeMirror from 'codemirror/lib/codemirror';\nimport 'codemirror/mode/sql/sql';\nimport 'codemirror/addon/selection/mark-selection';\nimport 'codemirror/addon/selection/active-line';\nimport 'codemirror/addon/fold/foldcode';\nimport 'codemirror/addon/fold/foldgutter';\nimport 'codemirror/addon/hint/show-hint';\nimport 'codemirror/addon/hint/sql-hint';\nimport 'codemirror/addon/scroll/simplescrollbars';\nimport 'codemirror/addon/dialog/dialog';\nimport 'codemirror/addon/search/search';\nimport 'codemirror/addon/search/searchcursor';\nimport 'codemirror/addon/search/jump-to-line';\nimport 'codemirror/addon/edit/matchbrackets';\nimport 'codemirror/addon/edit/closebrackets';\nimport 'codemirror/addon/comment/comment'\nimport '../js/codemirror/addon/fold/pgadmin-sqlfoldcode';\n\nexport default CodeMirror;\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/bundle/codemirror.js","(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if(typeof module !== 'undefined' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // Browser globals\n    factory();\n  }\n}(function(){\n  var pgAdmin = window.pgAdmin = window.pgAdmin || {};\n\n  // Reference:\n  // https://github.com/heygrady/Units/blob/master/Length.min.js\n  // Changed it to save the function in pgAdmin object.\n  (function(t,e,o) {\"use strict\";function r(t,e,r,p){r=r||\"width\";var n,l,m,c=(e.match(s)||[])[2],f=\"px\"===c?1:d[c+\"toPx\"],u=/r?em/i;if(f||u.test(c)&&!p)t=f?t:\"rem\"===c?i:\"fontSize\"===r?t.parentNode||t:t,f=f||parseFloat(a(t,\"fontSize\")),m=parseFloat(e)*f;else{n=t.style,l=n[r];try{n[r]=e}catch(x){return 0}m=n[r]?parseFloat(a(t,r)):0,n[r]=l!==o?l:null}return m}function a(t,e){var o,n,i,l,d,c=/^top|bottom/,f=[\"paddingTop\",\"paddingBottom\",\"borderTop\",\"borderBottom\"],u=4;if(o=m?m(t)[e]:(n=t.style[\"pixel\"+e.charAt(0).toUpperCase()+e.slice(1)])?n+\"px\":\"fontSize\"===e?r(t,\"1em\",\"left\",1)+\"px\":t.currentStyle[e],i=(o.match(s)||[])[2],\"%\"===i&&p)if(c.test(e)){for(l=(d=t.parentNode||t).offsetHeight;u--;)l-=parseFloat(a(d,f[u]));o=parseFloat(o)/100*l+\"px\"}else o=r(t,o);else(\"auto\"===o||i&&\"px\"!==i)&&m?o=0:i&&\"px\"!==i&&!m&&(o=r(t,o)+\"px\");return o}var p,n=e.createElement(\"test\"),i=e.documentElement,l=e.defaultView,m=l&&l.getComputedStyle,s=/^(-?[\\d+\\.\\-]+)([a-z]+|%)$/i,d={},c=[1/25.4,1/2.54,1/72,1/6],f=[\"mm\",\"cm\",\"pt\",\"pc\",\"in\",\"mozmm\"],u=6;for(i.appendChild(n),m&&(n.style.marginTop=\"1%\",p=\"1%\"===m(n).marginTop);u--;)d[f[u]+\"toPx\"]=c[u]?c[u]*d.inToPx:r(n,\"1\"+f[u]);i.removeChild(n),n=o,t.toPx=r})(pgAdmin, window.document);\n\n  // Reference:\n  // https://github.com/javve/natural-sort/blob/master/index.js\n  // Changed it to save the function in pgAdmin object.\n  pgAdmin.natural_sort = function(a, b, options) {\n    var re = /(^-?[0-9]+(\\.?[0-9]*)[df]?e?[0-9]?$|^0x[0-9a-f]+$|[0-9]+)/gi,\n        sre = /(^[ ]*|[ ]*$)/g,\n        dre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\n        hre = /^0x[0-9a-f]+$/i,\n        ore = /^0/,\n        options = options || {},\n        i = function(s) { return options.insensitive && (''+s).toLowerCase() || ''+s },\n        // convert all to strings strip whitespace\n        x = i(a).replace(sre, '') || '',\n        y = i(b).replace(sre, '') || '',\n        // chunk/tokenize\n        xN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\n        yN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\n        // numeric, hex or date detection\n        xD = parseInt(x.match(hre)) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\n        yD = parseInt(y.match(hre)) || xD && y.match(dre) && Date.parse(y) || null,\n        oFxNcL, oFyNcL,\n        mult = options.desc ? -1 : 1;\n\n    // first try and sort Hex codes or Dates\n    if (yD)\n      if ( xD < yD ) return -1 * mult;\n      else if ( xD > yD ) return 1 * mult;\n\n    // natural sorting through split numeric strings and default strings\n    for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\n      // find floats not starting with '0', string or 0 if not defined (Clint Priest)\n      oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\n      oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\n      // handle numeric vs string comparison - number < string - (Kyle Adams)\n      if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL) ? 1 : -1) * mult; }\n      // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\n      else if (typeof oFxNcL !== typeof oFyNcL) {\n        oFxNcL += '';\n        oFyNcL += '';\n      }\n      if (oFxNcL < oFyNcL) return -1 * mult;\n      if (oFxNcL > oFyNcL) return 1 * mult;\n    }\n    return 0;\n  };\n\n  return pgAdmin;\n}));\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/pgadmin.js","(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.pgadminKeywordRangeFinder = function(cm, start, startTkn, endTkn) {\n    var line = start.line, lineText = cm.getLine(line);\n    var at = lineText.length, startChar, tokenType;\n    for (; at > 0;) {\n      var found = lineText.lastIndexOf(startTkn, at);\n      var startToken = startTkn;\n      var endToken = endTkn;\n      if (found < start.ch) {\n        var found = lineText.lastIndexOf(\"[\", at);\n        if (found < start.ch) break;\n        var startToken = '[';\n        var endToken = ']';\n      }\n\n      tokenType = cm.getTokenAt(CodeMirror.Pos(line, found + 1)).type;\n      if (!/^(comment|string)/.test(tokenType)) { startChar = found; break; }\n      at = found - 1;\n    }\n    if (startChar == null || lineText.lastIndexOf(startToken) > startChar) return;\n    var count = 1, lastLine = cm.lineCount(), end, endCh;\n    outer: for (var i = line + 1; i < lastLine; ++i) {\n      var text = cm.getLine(i), pos = 0;\n      for (;;) {\n        var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n        if (nextOpen < 0) nextOpen = text.length;\n        if (nextClose < 0) nextClose = text.length;\n        pos = Math.min(nextOpen, nextClose);\n        if (pos == text.length) break;\n        if (cm.getTokenAt(CodeMirror.Pos(i, pos + 1)).type == tokenType) {\n          if (pos == nextOpen) ++count;\n          else if (!--count) {\n            end = i;\n            endCh = pos;\n            break outer;\n          }\n        }\n        ++pos;\n      }\n    }\n    if (end == null || end == line + 1) return;\n    return {from: CodeMirror.Pos(line, startChar + startTkn.length),\n          to: CodeMirror.Pos(end, endCh)};\n  };\n\n  CodeMirror.pgadminBeginRangeFinder = function(cm, start) {\n    var startToken = 'BEGIN';\n    var endToken = 'END;';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n  CodeMirror.pgadminIfRangeFinder = function(cm, start) {\n    var startToken = 'IF';\n    var endToken = 'END IF';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n  CodeMirror.pgadminLoopRangeFinder = function(cm, start) {\n    var startToken = 'LOOP';\n    var endToken = 'END LOOP';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n  CodeMirror.pgadminCaseRangeFinder = function(cm, start) {\n    var startToken = 'CASE';\n    var endToken = 'END CASE';\n    var fromToPos = CodeMirror.pgadminKeywordRangeFinder(cm, start, startToken, endToken);\n    return fromToPos;\n  };\n\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/codemirror/addon/fold/pgadmin-sqlfoldcode.js","module.exports = __WEBPACK_EXTERNAL_MODULE_43__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"translations\"\n// module id = 43\n// module chunks = 0 1 2 5","module.exports = __WEBPACK_EXTERNAL_MODULE_44__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.browser.endpoints\"\n// module id = 44\n// module chunks = 0 1 2 5","define([\"pgadmin.browser.endpoints\"], function (endpoints) {\n  /***\n   * This method behaves as a drop-in replacement for flask url_for function.\n   * It uses the exposed URLs file under the hood, and replace the substitions provided by the modules.\n   *\n   * ex.\n   * url_for(\"help.static\", {filename: \"server_dialog.html\"}) will produce the\n   * output string '/help/help/server_dialog.html' from the url ->\n   * '/help/help/<path:filename>'.\n   *\n   * @param {String} text\n   * @param {Object} substitutions\n   */\n  return function url_for(endpoint, substitutions) {\n\n    var rawURL = endpoints[endpoint];\n\n    // captures things of the form <path:substitutionName>\n    var substitutionGroupsRegExp = /([<])([^:^>]*:)?([^>]+)([>])/g;\n    var matchFound;\n\n    var interpolated = rawURL;\n\n    if (!rawURL)\n      return rawURL;\n\n    interpolated = interpolated.replace(\n      substitutionGroupsRegExp,\n      function (_origin, _1, _2, substitutionName) {\n        if (substitutionName in substitutions) {\n          return substitutions[substitutionName];\n        }\n        return _origin;\n      }\n    );\n\n    return interpolated;\n  };\n\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/url_for.js","module.exports = __WEBPACK_EXTERNAL_MODULE_76__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.browser.utils\"\n// module id = 76\n// module chunks = 0 1 2","module.exports = __WEBPACK_EXTERNAL_MODULE_95__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pgadmin.browser.messages\"\n// module id = 95\n// module chunks = 0 1 2","import _ from 'underscore';\n\nfunction generate_url(baseUrl, treeInfo, actionType, nodeType, pickFunction, itemDataID) {\n  let ref = '';\n  _.each(\n    _.sortBy(\n      _.pick(treeInfo, pickFunction),\n      function (treeInfoItems) {\n        return treeInfoItems.priority;\n      }\n    ),\n    function (treeInfoItems) {\n      ref = `${ref}/${encodeURI(treeInfoItems._id)}`;\n    }\n  );\n  ref = itemDataID ? `${ref}/${itemDataID}` : `${ref}/`;\n\n  return `${baseUrl}${nodeType}/${actionType}${ref}`;\n}\n\nmodule.exports = {\n  generate_url: generate_url,\n};\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/static/js/browser/generate_url.js","define([\n  'sources/gettext', 'sources/url_for', 'jquery', 'underscore', 'underscore.string', 'alertify',\n  'sources/pgadmin', 'pgadmin.browser', 'backbone', 'backgrid', 'codemirror',\n  'backform', 'wcdocker', 'pgadmin.backform', 'pgadmin.backgrid',\n  'pgadmin.browser.panel'\n], function(gettext, url_for, $, _, S, Alertify, pgAdmin, pgBrowser, Backbone, Backgrid, CodeMirror, Backform ) {\n\n  /*\n   * Function used to return the respective Backgrid control based on the data type\n   * of function input argument.\n   */\n  var cellFunction = function(model) {\n    var self = this,\n    variable_type = model.get(\"type\");\n\n    // if variable type is an array then we need to render the custom control to take the input from user.\n    if (variable_type.indexOf(\"[]\") !=-1) {\n      if (variable_type.indexOf(\"integer\") != -1) {\n        return Backgrid.Extension.InputIntegerArrayCell;\n      }\n      return Backgrid.Extension.InputStringArrayCell;\n    }\n\n    switch(variable_type) {\n      case \"bool\":\n        return Backgrid.BooleanCell;\n        break;\n\n      case \"integer\":\n        // As we are getting this value as text from sqlite database so we need to type cast it.\n        if (model.get('value') != undefined) {\n          model.set({'value': parseInt(model.get('value'))},{silent:true});\n        }\n\n        return Backgrid.IntegerCell;\n        break;\n\n      case \"real\":\n        // As we are getting this value as text from sqlite database so we need to type cast it.\n        if (model.get('value') != undefined) {\n          model.set({'value': parseFloat(model.get('value'))} ,{silent:true});\n        }\n        return Backgrid.NumberCell;\n        break;\n\n      case \"string\":\n        return Backgrid.StringCell;\n        break;\n      case \"date\":\n        return Backgrid.DateCell;\n        break;\n      default:\n        return Backgrid.Cell;\n        break;\n    }\n  }\n\n  /*\n   * Function used to return the respective Backgrid string or boolean control based on the data type\n   * of function input argument.\n   */\n  var cellExprControlFunction = function(model) {\n    var self = this,\n    variable_type = model.get(\"type\");\n    if (variable_type.indexOf(\"[]\") !=-1) {\n      return Backgrid.StringCell;\n    }\n    return Backgrid.BooleanCell;\n  }\n\n  /**\n   *  DebuggerInputArgsModel used to represent input parameters for the function to debug\n   *  for function objects.\n   **/\n  var DebuggerInputArgsModel = Backbone.Model.extend({\n    defaults: {\n      name: undefined,\n      type: undefined,\n      is_null: undefined,\n      expr: undefined,\n      value: undefined,\n      use_default: undefined,\n      default_value: undefined,\n    },\n    validate: function() {\n      if (_.isUndefined(this.get('value')) ||\n          _.isNull(this.get('value')) ||\n          String(this.get('value')).replace(/^\\s+|\\s+$/g, '') == '') {\n        var msg = gettext('Please enter a value for the parameter.');\n        this.errorModel.set('value', msg);\n        return msg;\n      } else {\n        this.errorModel.unset('value');\n      }\n      return null;\n    }\n  });\n\n  // Collection which contains the model for function informations.\n  var DebuggerInputArgCollections = Backbone.Collection.extend({\n    model: DebuggerInputArgsModel\n  });\n\n  // function will enable/disable the use_default column based on the value received.\n  var disableDefaultCell = function(d) {\n    if (d instanceof Backbone.Model) {\n        return d.get('use_default');\n    }\n    return false;\n  };\n\n  // Enable/Disable the control based on the array data type of the function input arguments\n  var disableExpressionControl = function(d) {\n    var argType = d.get('type');\n    if (d instanceof Backbone.Model) {\n      var argType = d.get('type');\n      if (argType.indexOf(\"[]\") !=-1) {\n        return false;\n      }\n      return true;\n    }\n  };\n\n  var res =  function(args, restart_debug) {\n    if (!Alertify.debuggerInputArgsDialog) {\n      Alertify.dialog('debuggerInputArgsDialog', function factory() {\n        return {\n          main:function(title, data, restart_debug) {\n            this.set('title', title);\n            this.data = data;\n            this.restart_debug = restart_debug;\n\n            // Variables to store the data sent from sqlite database\n            var func_args_data = this.func_args_data = [];\n\n            // As we are not getting pgBrowser.tree when we debug again so tree info will be updated from the server data\n            if (restart_debug == 0) {\n              var t = pgBrowser.tree,\n                i = t.selected(),\n                d = i && i.length == 1 ? t.itemData(i) : undefined,\n                node = d && pgBrowser.Nodes[d._type];\n\n              if (!d)\n                return;\n\n              var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n\n              if (d._type == \"function\") {\n                // Get the existing function parameters available from sqlite database\n                var _Url = url_for('debugger.get_arguments', {\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.function._id\n                           });\n              }\n              else if (d._type == \"procedure\") {\n                // Get the existing function parameters available from sqlite database\n                var _Url = url_for('debugger.get_arguments', {\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.procedure._id\n                           });\n              }\n              else if (d._type == \"edbfunc\") {\n                // Get the existing function parameters available from sqlite database\n                var _Url = url_for('debugger.get_arguments', {\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.edbfunc._id\n                           });\n              }\n              else if (d._type == \"edbproc\") {\n                // Get the existing function parameters available from sqlite database\n                var _Url = url_for('debugger.get_arguments', {\n                            'sid': treeInfo.server._id,\n                            'did': treeInfo.database._id,\n                            'scid': treeInfo.schema._id,\n                            'func_id': treeInfo.edbproc._id\n                           });\n              }\n            }\n            else {\n              // Get the existing function parameters available from sqlite database\n              var _Url = url_for('debugger.get_arguments', {\n                          'sid': this.data.server_id,\n                          'did': this.data.database_id,\n                          'scid': this.data.schema_id,\n                          'func_id': this.data.function_id\n                         });\n            }\n            $.ajax({\n              url: _Url,\n              method: 'GET',\n              async: false,\n              success: function(res) {\n                if (res.data.args_count != 0) {\n                  for (i = 0; i < res.data.result.length; i++) {\n                    // Below will format the data to be stored in sqlite database\n                    func_args_data.push({\n                      'arg_id': res.data.result[i]['arg_id'],\n                      'is_null': res.data.result[i]['is_null'],\n                      'is_expression': res.data.result[i]['is_expression'],\n                      'use_default': res.data.result[i]['use_default'],\n                      'value': res.data.result[i]['value']\n                    });\n                  }\n                }\n              },\n              error: function(e) {\n                Alertify.alert(\n                  'Debugger Set arguments error'\n                );\n              }\n            });\n\n            var argname, argtype, argmode, default_args_count, default_args, arg_cnt;\n\n            var value_header = Backgrid.HeaderCell.extend({\n                // Add fixed width to the \"value\" column\n                className: 'width_percent_25'\n            });\n\n            var def_val_list = [],\n            gridCols = [\n              {name: 'name', label:'Name', type:'text', editable: false, cell:'string' },\n              {name: 'type', label:'Type', type: 'text', editable: false, cell:'string' },\n              {name: 'is_null', label:'Null?', type: 'boolean', cell: 'boolean' },\n              {name: 'expr', label:'Expression?', type: 'boolean', cellFunction: cellExprControlFunction, editable: disableExpressionControl },\n              {name: 'value', label:'Value', type: 'text', editable: true, cellFunction: cellFunction, headerCell: value_header },\n              {name: 'use_default', label:'Use Default?', type: 'boolean', cell:\"boolean\", editable: disableDefaultCell },\n              {name: 'default_value', label:'Default value', type: 'text', editable: false, cell:'string' }\n            ];\n\n            var my_obj = [];\n            var func_obj = [];\n\n            // Below will calculate the input argument id required to store in sqlite database\n            var input_arg_id = this.input_arg_id = [];\n            if (this.data['proargmodes'] != null) {\n              var argmode_1 = this.data['proargmodes'].split(\",\");\n              for (var k = 0; k < argmode_1.length; k++) {\n                if (argmode_1[k] == 'i' || argmode_1[k] == 'b') {\n                  input_arg_id.push(k)\n                }\n              }\n            }\n            else {\n              var argtype_1 = this.data['proargtypenames'].split(\",\");\n              for (var k = 0; k < argtype_1.length; k++) {\n                  input_arg_id.push(k)\n              }\n            }\n\n            argtype = this.data['proargtypenames'].split(\",\");\n\n            if (this.data['proargmodes'] != null) {\n                argmode = this.data['proargmodes'].split(\",\");\n            }\n\n            if (this.data['pronargdefaults']) {\n              default_args_count = this.data['pronargdefaults'];\n              default_args = this.data['proargdefaults'].split(\",\");\n              arg_cnt = default_args_count;\n            }\n\n            if (this.data['proargnames'] != null) {\n              argname = this.data['proargnames'].split(\",\");\n\n              // It will assign default values to \"Default value\" column\n              for (var j = (argname.length - 1); j >= 0; j--) {\n                if (this.data['proargmodes'] != null) {\n                  if (arg_cnt && (argmode[j] == 'i' || argmode[j] == 'b')) {\n                    arg_cnt = arg_cnt - 1;\n                    def_val_list[j] = default_args[arg_cnt]\n                  }\n                  else {\n                    def_val_list[j] = \"<No default value>\";\n                  }\n                }\n                else {\n                  if (arg_cnt) {\n                    arg_cnt = arg_cnt - 1;\n                    def_val_list[j] = default_args[arg_cnt]\n                  }\n                  else {\n                    def_val_list[j] = \"<No default value>\";\n                  }\n                }\n              }\n\n              if (argtype.length != 0)\n              {\n                for (i = 0; i < argtype.length; i++) {\n                  if (this.data['proargmodes'] != null) {\n                    if (argmode[i] == 'i' || argmode[i] == 'b') {\n                      var use_def_value = false\n                      if (def_val_list[i] != \"<No default value>\") {\n                        use_def_value = true;\n                      }\n                      my_obj.push({ \"name\": argname[i], \"type\": argtype[i], \"use_default\": use_def_value, \"default_value\": def_val_list[i]});\n                    }\n                  }\n                  else {\n                    var use_def_value = false\n                    if (def_val_list[i] != \"<No default value>\") {\n                      use_def_value = true;\n                    }\n                    my_obj.push({ \"name\": argname[i], \"type\": argtype[i], \"use_default\": use_def_value, \"default_value\": def_val_list[i]});\n                  }\n\n\n                }\n              }\n\n              // Need to update the func_obj variable from sqlite database if available\n              if (func_args_data.length != 0) {\n                for (i = 0; i < func_args_data.length; i++) {\n                  var index = func_args_data[i]['arg_id'];\n                  var values = [];\n                  if (argtype[index].indexOf(\"[]\") !=-1) {\n                      var vals = func_args_data[i]['value'].split(\",\");\n                      if (argtype[index].indexOf(\"integer\") != -1) {\n                        _.each(vals, function(val){\n                            values.push({'value': parseInt(val)});\n                        });\n                      }\n                      _.each(vals, function(val){\n                            values.push({'value': val});\n                        });\n                  } else {\n                    values = func_args_data[i]['value'];\n                  }\n\n                  func_obj.push({ \"name\": argname[index], \"type\": argtype[index], \"is_null\": func_args_data[i]['is_null'] ? true: false, \"expr\": func_args_data[i]['is_expression']? true: false, \"value\": values, \"use_default\": func_args_data[i]['use_default']? true: false, \"default_value\": def_val_list[index]});\n                }\n              }\n            }\n            else {\n              /*\n               Generate the name parameter if function do not have arguments name\n               like dbgparam1, dbgparam2 etc.\n              */\n              var myargname = [];\n\n              for (i = 0; i < argtype.length; i++) {\n                myargname[i] = \"dbgparam\" + (i+1);\n              }\n\n              // If there is no default arguments\n              if (!this.data['pronargdefaults']) {\n                for (i = 0; i < argtype.length; i++) {\n                  my_obj.push({ \"name\": myargname[i], \"type\": argtype[i], \"use_default\": false, \"default_value\": \"<No default value>\"});\n                  def_val_list[i] = \"<No default value>\";\n                }\n              }\n              else {\n                // If there is default arguments\n                //Below logic will assign default values to \"Default value\" column\n                for (var j = (myargname.length - 1);j >= 0; j--) {\n                  if (this.data['proargmodes'] == null) {\n                    if (arg_cnt) {\n                      arg_cnt = arg_cnt - 1;\n                      def_val_list[j] = default_args[arg_cnt]\n                    }\n                    else {\n                      def_val_list[j] = \"<No default value>\";\n                    }\n                  }\n                  else {\n                    if (arg_cnt && (argmode[j] == 'i' || argmode[j] == 'b')) {\n                      arg_cnt = arg_cnt - 1;\n                      def_val_list[j] = default_args[arg_cnt]\n                    }\n                    else {\n                      def_val_list[j] = \"<No default value>\";\n                    }\n                  }\n                }\n\n                for (i = 0; i < argtype.length; i++) {\n                  if (this.data['proargmodes'] == null) {\n                    var use_def_value = false\n                    if (def_val_list[i] != \"<No default value>\") {\n                      use_def_value = true;\n                    }\n                    my_obj.push({ \"name\": myargname[i], \"type\": argtype[i], \"use_default\": use_def_value, \"default_value\": def_val_list[i]});\n                  }\n                  else {\n                    if (argmode[i] == 'i' || argmode[i] == 'b') {\n                      var use_def_value = false\n                      if (def_val_list[i] != \"<No default value>\") {\n                        use_def_value = true;\n                      }\n                      my_obj.push({ \"name\": myargname[i], \"type\": argtype[i], \"use_default\": use_def_value, \"default_value\": def_val_list[i]});\n                    }\n                  }\n                }\n              }\n\n              // Need to update the func_obj variable from sqlite database if available\n              if (func_args_data.length != 0) {\n                for (i = 0; i < func_args_data.length; i++) {\n                  var index = func_args_data[i]['arg_id'];\n                  var values = [];\n                  if (argtype[index].indexOf(\"[]\") !=-1) {\n                      var vals = func_args_data[i]['value'].split(\",\");\n                      if (argtype[index].indexOf(\"integer\") != -1) {\n                        _.each(vals, function(val){\n                            values.push({'value': parseInt(val)});\n                        });\n                      }\n                      _.each(vals, function(val){\n                            values.push({'value': val});\n                        });\n                  } else {\n                    values = func_args_data[i]['value'];\n                  }\n                  func_obj.push({ \"name\": myargname[index], \"type\": argtype[index], \"is_null\": func_args_data[i]['is_null'] ? true: false, \"expr\": func_args_data[i]['is_expression']? true: false, \"value\": values, \"use_default\": func_args_data[i]['use_default']? true: false, \"default_value\": def_val_list[index]});\n                }\n              }\n            }\n\n            // Check if the arguments already available in the sqlite database then we should use the existing arguments\n            if (func_args_data.length == 0) {\n              var debuggerInputArgsColl = this.debuggerInputArgsColl = new DebuggerInputArgCollections(my_obj);\n            }\n            else {\n              var debuggerInputArgsColl = this.debuggerInputArgsColl = new DebuggerInputArgCollections(func_obj);\n            }\n\n            // Initialize a new Grid instance\n            if (this.grid) {\n                this.grid.remove();\n                this.grid = null;\n            }\n            var grid = this.grid = new Backgrid.Grid({\n              columns: gridCols,\n              collection: debuggerInputArgsColl,\n              className: \"backgrid table-bordered\"\n            });\n\n            grid.render();\n            $(this.elements.content).html(grid.el);\n          },\n          setup:function() {\n            return {\n              buttons:[{ text: \"Debug\", key: 13, className: \"btn btn-primary\" },\n                       { text: \"Cancel\", key: 27, className: \"btn btn-primary\" }],\n              options: { modal: 0, resizable: true }\n            };\n          },\n          // Callback functions when click on the buttons of the Alertify dialogs\n          callback: function(e) {\n            if (e.button.text === \"Debug\") {\n\n              // Initialize the target once the debug button is clicked and\n              // create asynchronous connection and unique transaction ID\n              var self = this;\n\n              // If the debugging is started again then treeInfo is already stored in this.data so we can use the same.\n              if (self.restart_debug == 0) {\n                var t = pgBrowser.tree,\n                  i = t.selected(),\n                  d = i && i.length == 1 ? t.itemData(i) : undefined,\n                  node = d && pgBrowser.Nodes[d._type];\n\n                if (!d)\n                  return;\n\n                var treeInfo = node.getTreeNodeHierarchy.apply(node, [i]);\n              }\n\n              var args_value_list = [];\n              var sqlite_func_args_list = this.sqlite_func_args_list = [];\n              var int_count = 0;\n\n              this.grid.collection.each(function(m) {\n\n                  // Check if value is set to NULL then we should ignore the value field\n                  if (m.get('is_null')) {\n                    args_value_list.push({ 'name': m.get('name'),\n                                       'type': m.get('type'),\n                                       'value': 'NULL'});\n                  }\n                  else {\n                    // Check if default value to be used or not\n                    if (m.get('use_default')) {\n                      args_value_list.push({ 'name': m.get('name'),\n                                       'type': m.get('type'),\n                                       'value': m.get('default_value')});\n                    }\n                    else {\n                      args_value_list.push({ 'name': m.get('name'),\n                                       'type': m.get('type'),\n                                       'value': m.get('value')});\n                    }\n                  }\n\n                  if (self.restart_debug == 0) {\n                    var f_id;\n                    if (d._type == \"function\") {\n                      f_id = treeInfo.function._id;\n                    }\n                    else if (d._type == \"procedure\") {\n                      f_id = treeInfo.procedure._id;\n                    }\n                    else if (d._type == \"edbfunc\") {\n                      f_id = treeInfo.edbfunc._id;\n                    }\n                    else if (d._type == \"edbproc\") {\n                      f_id = treeInfo.edbproc._id;\n                    }\n\n                    // Below will format the data to be stored in sqlite database\n                    sqlite_func_args_list.push({\n                      'server_id': treeInfo.server._id,\n                      'database_id': treeInfo.database._id,\n                      'schema_id': treeInfo.schema._id ,\n                      'function_id': f_id,\n                      'arg_id': self.input_arg_id[int_count],\n                      'is_null': m.get('is_null')  ? 1 : 0,\n                      'is_expression': m.get('expr') ? 1 : 0,\n                      'use_default': m.get('use_default') ? 1 : 0,\n                      'value': m.get('value')\n                    });\n                  }\n                  else {\n                    // Below will format the data to be stored in sqlite database\n                    sqlite_func_args_list.push({\n                      'server_id': self.data.server_id,\n                      'database_id': self.data.database_id,\n                      'schema_id': self.data.schema_id ,\n                      'function_id': self.data.function_id,\n                      'arg_id': self.input_arg_id[int_count],\n                      'is_null': m.get('is_null')  ? 1 : 0,\n                      'is_expression': m.get('expr') ? 1 : 0,\n                      'use_default': m.get('use_default') ? 1 : 0,\n                      'value': m.get('value')\n                    });\n                  }\n\n                  int_count = int_count + 1;\n              });\n\n              // If debugging is not started again then we should initialize the target otherwise not\n              if (self.restart_debug == 0) {\n                var baseUrl;\n                if (d._type == \"function\") {\n                  baseUrl = url_for('debugger.initialize_target_for_function', {\n                                  'debug_type': 'direct',\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.function._id\n                                });\n                }\n                else if (d._type == \"procedure\") {\n                  baseUrl = url_for('debugger.initialize_target_for_function', {\n                                  'debug_type': 'direct',\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.procedure._id\n                                });\n                }\n                else if (d._type == \"edbfunc\") {\n                  baseUrl = url_for('debugger.initialize_target_for_function', {\n                                  'debug_type': 'direct',\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.edbfunc._id\n                                });\n                }\n                else if (d._type == \"edbproc\") {\n                  baseUrl = url_for('debugger.initialize_target_for_function', {\n                                  'debug_type': 'direct',\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.edbproc._id\n                                });\n                }\n\n                $.ajax({\n                  url: baseUrl,\n                  method: 'POST',\n                  data:{'data':JSON.stringify(args_value_list)},\n                  success: function(res) {\n\n                    var url = url_for('debugger.direct', {'trans_id': res.data.debuggerTransId});\n\n                    if (res.data.newBrowserTab) {\n                      window.open(url, '_blank');\n                    } else {\n                      pgBrowser.Events.once(\n                        'pgadmin-browser:frame:urlloaded:frm_debugger', function(frame) {\n                        frame.openURL(url);\n                      });\n\n                      // Create the debugger panel as per the data received from user input dialog.\n                      var dashboardPanel = pgBrowser.docker.findPanels('properties'),\n                          panel = pgBrowser.docker.addPanel(\n                            'frm_debugger', wcDocker.DOCK.STACKED, dashboardPanel[0]\n                          );\n\n                      panel.focus();\n\n                      // Panel Closed event\n                      panel.on(wcDocker.EVENT.CLOSED, function() {\n                        var closeUrl = url_for('debugger.close', {'trans_id': res.data.debuggerTransId});\n                        $.ajax({\n                          url: closeUrl,\n                          method: 'DELETE'\n                        });\n                      });\n                    }\n\n                    if (d._type == \"function\") {\n                      var _Url = url_for('debugger.set_arguments', {\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.function._id,\n                                 });\n                    }\n                    else if (d._type == \"procedure\") {\n                      var _Url = url_for('debugger.set_arguments', {\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.procedure._id,\n                                 });\n                    }\n                    else if (d._type == \"edbfunc\") {\n                      // Get the existing function parameters available from sqlite database\n                      var _Url = url_for('debugger.set_arguments', {\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.edbfunc._id,\n                                 });\n                    }\n                    else if (d._type == \"edbproc\") {\n                      // Get the existing function parameters available from sqlite database\n                      var _Url = url_for('debugger.set_arguments', {\n                                  'sid': treeInfo.server._id,\n                                  'did': treeInfo.database._id,\n                                  'scid': treeInfo.schema._id,\n                                  'func_id': treeInfo.edbproc._id,\n                                 });\n                    }\n\n                    $.ajax({\n                      url: _Url,\n                      method: 'POST',\n                      data:{'data':JSON.stringify(sqlite_func_args_list)},\n                      success: function(res) {\n                      },\n                      error: function(e) {\n                        Alertify.alert(\n                          'Debugger Set arguments error'\n                        );\n                      }\n                    });\n                  },\n                  error: function(e) {\n                    Alertify.alert(\n                      'Debugger target Initialize Error',\n                      e.responseJSON.errormsg\n                    );\n                  }\n                });\n              }\n              else {\n                // If the debugging is started again then we should only set the arguments and start the listener again\n                var baseUrl = url_for('debugger.start_listener', {'trans_id': self.data.trans_id});\n\n                $.ajax({\n                  url: baseUrl,\n                  method: 'POST',\n                  data:{'data':JSON.stringify(args_value_list)},\n                  success: function(res) {\n                  },\n                  error: function(e) {\n                    Alertify.alert(\n                      'Debugger listener starting error',\n                      e.responseJSON.errormsg\n                    );\n                  }\n                });\n\n                // Set the new input arguments given by the user during debugging\n                var _Url = url_for('debugger.set_arguments', {\n                            'sid': self.data.server_id,\n                            'did': self.data.database_id,\n                            'scid': self.data.schema_id,\n                            'func_id': self.data.function_id\n                           });\n                $.ajax({\n                  url: _Url,\n                  method: 'POST',\n                  data:{'data':JSON.stringify(sqlite_func_args_list)},\n                  success: function(res) {\n                  },\n                  error: function(e) {\n                    Alertify.alert(\n                      'Debugger Set arguments error'\n                    );\n                  }\n                });\n\n              }\n\n              return true;\n            }\n\n            if (e.button.text === \"Cancel\") {\n              //close the dialog...\n              return false;\n            }\n          },\n          build:function() {\n          },\n          prepare:function() {\n            /*\n             If we already have data available in sqlite database then we should enable the debug button otherwise\n             disable the debug button.\n            */\n            if (this.func_args_data.length == 0) {\n              this.__internal.buttons[0].element.disabled = true;\n            }\n            else {\n              this.__internal.buttons[0].element.disabled = false;\n            }\n\n            /*\n             Listen to the grid change event so that if any value changed by user then we can enable/disable the\n             debug button.\n            */\n            this.grid.listenTo(this.debuggerInputArgsColl,\"backgrid:edited\",\n              (function(obj) {\n\n                return function() {\n\n                  var self = this;\n                  var enable_btn = false;\n\n                  for (var    i = 0; i < this.collection.length; i++ ) {\n\n                    // TODO: Need to check the \"NULL\" and \"Expression\" column value to enable/disable the \"Debug\" button\n                    if (this.collection.models[i].get('value') == \"\" ||\n                        this.collection.models[i].get('value') == null ||\n                        this.collection.models[i].get('value') == undefined) {\n                          enable_btn = true;\n\n                          if (this.collection.models[i].get('use_default')) {\n                            obj.__internal.buttons[0].element.disabled = false;\n                          }\n                          else{\n                            obj.__internal.buttons[0].element.disabled = true;\n                            break;\n                          }\n                    }\n                  }\n                  if (!enable_btn)\n                    obj.__internal.buttons[0].element.disabled = false;\n                }\n              }\n              )(this)\n            );\n          }\n        };\n      });\n    }\n\n    Alertify.debuggerInputArgsDialog('Debugger',args, restart_debug).resizeTo('60%', '60%');\n\n  };\n\n  return res;\n});\n\n\n\n// WEBPACK FOOTER //\n// pgadmin/tools/debugger/static/js/debugger_ui.js"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC5CA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AApBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AA9BA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AA5BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AArBA;AAulGA;AAoGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAhIA;AAkIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAjCA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAtCA;AAwCA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AA5BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AADA;AACA;AAGA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AADA;AACA;AAGA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAnBA;AAqBA;AAptCA;AACA;AAuttGA;AACA;AAyGA;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAdA;AAgBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAbA;AAeA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AA1BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAjBA;AAmBA;AA9SA;AACA;AAgTA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC1pDA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;AC/BA;AACA;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AARA;AACA;AASA;AACA;AAXA;AACA;AAYA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AClFA;;;;;;;ACAA;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;;;;;;;ACvCA;;;;;;;ACAA;;;;;;;;;;ACAA;AACA;;;;;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;;;;;;;;;ACpBA;AACA;AAMA;;;;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;;;;AAIA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AACA;AAutBA;AACA;AAwvFA;AAyFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAxoBA;AA0oBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}